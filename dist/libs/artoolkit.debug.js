// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return xhr.response;
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4) { { if (!artoolkit["frameMalloc"]) { artoolkit["frameMalloc"] = ({}); } var frameMalloc = artoolkit["frameMalloc"]; frameMalloc["framepointer"] = $1; frameMalloc["framesize"] = $2; frameMalloc["camera"] = $3; frameMalloc["transform"] = $4; } },
 function($0, $1, $2, $3) { { if (!artoolkit["multiEachMarkerInfo"]) { artoolkit["multiEachMarkerInfo"] = ({}); } var multiEachMarker = artoolkit["multiEachMarkerInfo"]; multiEachMarker['visible'] = $0; multiEachMarker['pattId'] = $1; multiEachMarker['pattType'] = $2; multiEachMarker['width'] = $3; } },
 function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32) { { var $a = arguments; var i = 12; if (!artoolkit["markerInfo"]) { artoolkit["markerInfo"] = ({ pos: [0,0], line: [[0,0,0], [0,0,0], [0,0,0], [0,0,0]], vertex: [[0,0], [0,0], [0,0], [0,0]] }); } var markerInfo = artoolkit["markerInfo"]; markerInfo["area"] = $0; markerInfo["id"] = $1; markerInfo["idPatt"] = $2; markerInfo["idMatrix"] = $3; markerInfo["dir"] = $4; markerInfo["dirPatt"] = $5; markerInfo["dirMatrix"] = $6; markerInfo["cf"] = $7; markerInfo["cfPatt"] = $8; markerInfo["cfMatrix"] = $9; markerInfo["pos"][0] = $10; markerInfo["pos"][1] = $11; markerInfo["line"][0][0] = $a[i++]; markerInfo["line"][0][1] = $a[i++]; markerInfo["line"][0][2] = $a[i++]; markerInfo["line"][1][0] = $a[i++]; markerInfo["line"][1][1] = $a[i++]; markerInfo["line"][1][2] = $a[i++]; markerInfo["line"][2][0] = $a[i++]; markerInfo["line"][2][1] = $a[i++]; markerInfo["line"][2][2] = $a[i++]; markerInfo["line"][3][0] = $a[i++]; markerInfo["line"][3][1] = $a[i++]; markerInfo["line"][3][2] = $a[i++]; markerInfo["vertex"][0][0] = $a[i++]; markerInfo["vertex"][0][1] = $a[i++]; markerInfo["vertex"][1][0] = $a[i++]; markerInfo["vertex"][1][1] = $a[i++]; markerInfo["vertex"][2][0] = $a[i++]; markerInfo["vertex"][2][1] = $a[i++]; markerInfo["vertex"][3][0] = $a[i++]; markerInfo["vertex"][3][1] = $a[i++]; markerInfo["errorCorrected"] = $a[i++]; } }];

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiiid(code, a0, a1, a2, a3) {
  return ASM_CONSTS[code](a0, a1, a2, a3);
}

function _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi(code, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 18992;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_ARToolKitJS_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


/* memory initializer */ allocate([116,12,0,0,213,36,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,244,11,0,0,20,37,0,0,244,11,0,0,248,41,0,0,244,11,0,0,55,42,0,0,244,11,0,0,117,42,0,0,244,11,0,0,187,42,0,0,244,11,0,0,248,42,0,0,244,11,0,0,23,43,0,0,244,11,0,0,54,43,0,0,244,11,0,0,85,43,0,0,244,11,0,0,116,43,0,0,244,11,0,0,147,43,0,0,244,11,0,0,178,43,0,0,244,11,0,0,239,43,0,0,244,11,0,0,14,44,0,0,116,12,0,0,33,44,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,116,12,0,0,96,44,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,244,11,0,0,206,56,0,0,28,12,0,0,46,57,0,0,216,0,0,0,0,0,0,0,28,12,0,0,219,56,0,0,232,0,0,0,0,0,0,0,244,11,0,0,252,56,0,0,28,12,0,0,9,57,0,0,200,0,0,0,0,0,0,0,28,12,0,0,31,58,0,0,192,0,0,0,0,0,0,0,28,12,0,0,44,58,0,0,216,0,0,0,0,0,0,0,88,12,0,0,84,58,0,0,88,12,0,0,86,58,0,0,88,12,0,0,88,58,0,0,88,12,0,0,90,58,0,0,88,12,0,0,92,58,0,0,88,12,0,0,94,58,0,0,88,12,0,0,96,58,0,0,88,12,0,0,98,58,0,0,88,12,0,0,100,58,0,0,88,12,0,0,186,63,0,0,88,12,0,0,102,58,0,0,88,12,0,0,104,58,0,0,88,12,0,0,106,58,0,0,28,12,0,0,108,58,0,0,200,0,0,0,0,0,0,0,34,13,0,0,41,13,0,0,53,13,0,0,63,13,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,3,0,0,0,6,0,0,0,12,0,0,0,24,0,0,0,48,0,0,0,96,0,0,0,67,0,0,0,5,0,0,0,10,0,0,0,20,0,0,0,40,0,0,0,80,0,0,0,35,0,0,0,70,0,0,0,15,0,0,0,30,0,0,0,60,0,0,0,120,0,0,0,115,0,0,0,101,0,0,0,73,0,0,0,17,0,0,0,34,0,0,0,68,0,0,0,11,0,0,0,22,0,0,0,44,0,0,0,88,0,0,0,51,0,0,0,102,0,0,0,79,0,0,0,29,0,0,0,58,0,0,0,116,0,0,0,107,0,0,0,85,0,0,0,41,0,0,0,82,0,0,0,39,0,0,0,78,0,0,0,31,0,0,0,62,0,0,0,124,0,0,0,123,0,0,0,117,0,0,0,105,0,0,0,81,0,0,0,33,0,0,0,66,0,0,0,7,0,0,0,14,0,0,0,28,0,0,0,56,0,0,0,112,0,0,0,99,0,0,0,69,0,0,0,9,0,0,0,18,0,0,0,36,0,0,0,72,0,0,0,19,0,0,0,38,0,0,0,76,0,0,0,27,0,0,0,54,0,0,0,108,0,0,0,91,0,0,0,53,0,0,0,106,0,0,0,87,0,0,0,45,0,0,0,90,0,0,0,55,0,0,0,110,0,0,0,95,0,0,0,61,0,0,0,122,0,0,0,119,0,0,0,109,0,0,0,89,0,0,0,49,0,0,0,98,0,0,0,71,0,0,0,13,0,0,0,26,0,0,0,52,0,0,0,104,0,0,0,83,0,0,0,37,0,0,0,74,0,0,0,23,0,0,0,46,0,0,0,92,0,0,0,59,0,0,0,118,0,0,0,111,0,0,0,93,0,0,0,57,0,0,0,114,0,0,0,103,0,0,0,77,0,0,0,25,0,0,0,50,0,0,0,100,0,0,0,75,0,0,0,21,0,0,0,42,0,0,0,84,0,0,0,43,0,0,0,86,0,0,0,47,0,0,0,94,0,0,0,63,0,0,0,126,0,0,0,127,0,0,0,125,0,0,0,121,0,0,0,113,0,0,0,97,0,0,0,65,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,6,0,0,0,12,0,0,0,11,0,0,0,5,0,0,0,10,0,0,0,7,0,0,0,14,0,0,0,15,0,0,0,13,0,0,0,9,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,7,0,0,0,2,0,0,0,14,0,0,0,8,0,0,0,56,0,0,0,3,0,0,0,63,0,0,0,15,0,0,0,31,0,0,0,9,0,0,0,90,0,0,0,57,0,0,0,21,0,0,0,4,0,0,0,28,0,0,0,64,0,0,0,67,0,0,0,16,0,0,0,112,0,0,0,32,0,0,0,97,0,0,0,10,0,0,0,108,0,0,0,91,0,0,0,70,0,0,0,58,0,0,0,38,0,0,0,22,0,0,0,47,0,0,0,5,0,0,0,54,0,0,0,29,0,0,0,19,0,0,0,65,0,0,0,95,0,0,0,68,0,0,0,45,0,0,0,17,0,0,0,43,0,0,0,113,0,0,0,115,0,0,0,33,0,0,0,77,0,0,0,98,0,0,0,117,0,0,0,11,0,0,0,87,0,0,0,109,0,0,0,35,0,0,0,92,0,0,0,74,0,0,0,71,0,0,0,79,0,0,0,59,0,0,0,104,0,0,0,39,0,0,0,100,0,0,0,23,0,0,0,82,0,0,0,48,0,0,0,119,0,0,0,6,0,0,0,126,0,0,0,55,0,0,0,13,0,0,0,30,0,0,0,62,0,0,0,20,0,0,0,89,0,0,0,66,0,0,0,27,0,0,0,96,0,0,0,111,0,0,0,69,0,0,0,107,0,0,0,46,0,0,0,37,0,0,0,18,0,0,0,53,0,0,0,44,0,0,0,94,0,0,0,114,0,0,0,42,0,0,0,116,0,0,0,76,0,0,0,34,0,0,0,86,0,0,0,78,0,0,0,73,0,0,0,99,0,0,0,103,0,0,0,118,0,0,0,81,0,0,0,12,0,0,0,125,0,0,0,88,0,0,0,61,0,0,0,110,0,0,0,26,0,0,0,36,0,0,0,106,0,0,0,93,0,0,0,52,0,0,0,75,0,0,0,41,0,0,0,72,0,0,0,85,0,0,0,80,0,0,0,102,0,0,0,60,0,0,0,124,0,0,0,105,0,0,0,25,0,0,0,40,0,0,0,51,0,0,0,101,0,0,0,84,0,0,0,24,0,0,0,123,0,0,0,83,0,0,0,50,0,0,0,49,0,0,0,122,0,0,0,120,0,0,0,121,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,2,0,0,0,8,0,0,0,5,0,0,0,10,0,0,0,3,0,0,0,14,0,0,0,9,0,0,0,7,0,0,0,6,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,1,0,0,0,4,0,0,0,136,0,0,0,5,0,0,0,144,0,0,0,6,0,0,0,152,0,0,0,9,0,0,0,176,0,0,0,255,255,255,255,254,255,255,255,253,255,255,255,32,1,0,0,88,1,0,0,120,1,0,0,32,1,0,0,88,1,0,0,88,1,0,0,128,1,0,0,88,1,0,0,32,1,0,0,88,1,0,0,128,1,0,0,88,1,0,0,32,1,0,0,88,1,0,0,88,1,0,0,8,0,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,8,0,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,208,7,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,33,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,41,70,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0,1,0,0,0,197,56,0,0,0,0,0,0,200,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,240,0,0,0,1,0,0,0,5,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,7,0,0,0,2,0,0,0,0,0,0,0,16,1,0,0,1,0,0,0,8,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,0,0,0,0,136,1,0,0,1,0,0,0,9,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,69,114,114,111,114,58,32,108,97,98,101,108,105,110,103,32,119,111,114,107,32,111,118,101,114,102,108,111,119,46,10,0,85,110,107,110,111,119,110,32,111,114,32,117,110,115,117,112,112,111,114,116,101,100,32,108,97,98,101,108,105,110,103,32,116,104,114,101,115,104,111,108,100,32,109,111,100,101,32,114,101,113,117,101,115,116,101,100,46,32,83,101,116,32,116,111,32,109,97,110,117,97,108,46,10,0,76,97,98,101,108,105,110,103,32,116,104,114,101,115,104,111,108,100,32,109,111,100,101,32,115,101,116,32,116,111,32,37,115,46,10,0,77,65,78,85,65,76,0,65,85,84,79,95,77,69,68,73,65,78,0,65,85,84,79,95,79,84,83,85,0,65,85,84,79,95,65,68,65,80,84,73,86,69,65,85,84,79,95,66,82,65,67,75,69,84,73,78,71,0,69,114,114,111,114,58,32,85,110,115,117,112,112,111,114,116,101,100,32,112,105,120,101,108,32,102,111,114,109,97,116,32,40,37,100,41,32,114,101,113,117,101,115,116,101,100,46,10,0,65,117,116,111,32,116,104,114,101,115,104,111,108,100,32,40,98,114,97,99,107,101,116,41,32,109,97,114,107,101,114,32,99,111,117,110,116,115,32,45,91,37,51,100,58,32,37,51,100,93,32,91,37,51,100,58,32,37,51,100,93,32,91,37,51,100,58,32,37,51,100,93,43,46,10,0,65,117,116,111,32,116,104,114,101,115,104,111,108,100,32,40,98,114,97,99,107,101,116,41,32,97,100,106,117,115,116,101,100,32,116,104,114,101,115,104,111,108,100,32,116,111,32,37,100,46,10,0,109,101,100,105,97,110,0,79,116,115,117,0,65,117,116,111,32,116,104,114,101,115,104,111,108,100,32,40,37,115,41,32,97,100,106,117,115,116,101,100,32,116,104,114,101,115,104,111,108,100,32,116,111,32,37,100,46,10,0,63,63,63,32,49,10,0,63,63,63,32,50,10,0,63,63,63,32,51,10,0,69,114,114,111,114,58,32,85,110,115,117,112,112,111,114,116,101,100,32,112,105,120,101,108,32,102,111,114,109,97,116,32,112,97,115,115,101,100,32,116,111,32,97,114,73,109,97,103,101,80,114,111,99,72,105,115,116,40,41,46,10,0,0,0,0,1,0,1,1,1,0,2,4,255,255,5,3,1,0,2,255,6,7,255,3,1,2,2,3,2,3,2,3,3,0,255,4,6,7,5,255,1,4,5,4,4,5,5,4,5,7,6,6,6,7,7,7,6,255,2,4,6,7,5,3,255,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,255,255,3,255,5,6,255,255,9,10,255,12,255,255,15,255,17,18,255,20,255,255,23,24,255,255,27,255,29,30,255,255,1,2,255,4,255,255,7,8,255,255,11,255,13,14,255,16,255,255,19,255,21,22,255,255,25,26,255,28,255,255,31,69,114,114,111,114,58,32,117,110,115,117,112,112,111,114,116,101,100,32,112,105,120,101,108,32,102,111,114,109,97,116,46,10,0,69,114,114,111,114,58,32,78,85,76,76,32,112,97,116,116,72,97,110,100,108,101,46,10,0,69,114,114,111,114,58,32,99,97,110,39,116,32,108,111,97,100,32,112,97,116,116,101,114,110,32,102,114,111,109,32,78,85,76,76,32,98,117,102,102,101,114,46,10,0,69,114,114,111,114,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,46,10,0,32,9,10,13,0,80,97,116,116,101,114,110,32,68,97,116,97,32,114,101,97,100,32,101,114,114,111,114,33,33,10,0,69,114,114,111,114,32,111,112,101,110,105,110,103,32,112,97,116,116,101,114,110,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,46,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,112,97,116,116,101,114,110,32,102,105,108,101,32,39,37,115,39,46,10,0,114,98,0,69,114,114,111,114,32,40,37,100,41,58,32,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,99,97,109,101,114,97,32,112,97,114,97,109,101,116,101,114,115,32,102,105,108,101,32,34,37,115,34,32,102,111,114,32,114,101,97,100,105,110,103,46,10,0,69,114,114,111,114,32,40,37,100,41,58,32,117,110,97,98,108,101,32,116,111,32,100,101,116,101,114,109,105,110,101,32,102,105,108,101,32,108,101,110,103,116,104,46,0,69,114,114,111,114,58,32,115,117,112,112,108,105,101,100,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,97,112,112,101,97,114,32,116,111,32,98,101,32,97,110,32,65,82,84,111,111,108,75,105,116,32,99,97,109,101,114,97,32,112,97,114,97,109,101,116,101,114,32,102,105,108,101,46,10,0,69,114,114,111,114,32,40,37,100,41,58,32,117,110,97,98,108,101,32,116,111,32,114,101,97,100,32,102,114,111,109,32,102,105,108,101,46,0,69,114,114,111,114,58,32,105,99,112,71,101,116,74,95,85,95,88,99,0,69,114,114,111,114,58,32,109,97,108,108,111,99,10,0,69,114,114,111,114,32,49,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,50,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,51,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,52,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,53,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,54,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,55,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,114,0,69,114,114,111,114,58,32,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,46,10,0,37,115,37,115,10,0,37,100,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,70,105,114,115,116,32,108,105,110,101,32,109,117,115,116,32,98,101,32,110,117,109,98,101,114,32,111,102,32,109,97,114,107,101,114,32,99,111,110,102,105,103,115,32,116,111,32,114,101,97,100,46,10,0,79,117,116,32,111,102,32,109,101,109,111,114,121,33,33,10,0,37,108,108,117,37,99,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,112,97,116,116,101,114,110,32,39,37,115,39,32,115,112,101,99,105,102,105,101,100,32,105,110,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,119,104,105,108,101,32,105,110,32,98,97,114,99,111,100,101,45,111,110,108,121,32,109,111,100,101,46,10,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,85,110,97,98,108,101,32,116,111,32,100,101,116,101,114,109,105,110,101,32,100,105,114,101,99,116,111,114,121,32,110,97,109,101,46,10,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,85,110,97,98,108,101,32,116,111,32,108,111,97,100,32,112,97,116,116,101,114,110,32,39,37,115,39,46,10,0,37,108,102,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,44,32,109,97,114,107,101,114,32,100,101,102,105,110,105,116,105,111,110,32,37,51,100,58,32,70,105,114,115,116,32,108,105,110,101,32,109,117,115,116,32,98,101,32,112,97,116,116,101,114,110,32,119,105,100,116,104,46,10,0,37,108,102,32,37,108,102,32,37,108,102,32,37,108,102,0,37,102,32,37,102,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,44,32,109,97,114,107,101,114,32,100,101,102,105,110,105,116,105,111,110,32,37,51,100,58,32,76,105,110,101,115,32,50,32,45,32,52,32,109,117,115,116,32,98,101,32,109,97,114,107,101,114,32,116,114,97,110,115,102,111,114,109,46,10,0,97,114,103,108,67,97,109,101,114,97,70,114,117,115,116,117,109,40,41,58,32,97,114,80,97,114,97,109,68,101,99,111,109,112,77,97,116,40,41,32,105,110,100,105,99,97,116,101,100,32,112,97,114,97,109,101,116,101,114,32,101,114,114,111,114,46,10,0,115,101,116,117,112,0,116,101,97,114,100,111,119,110,0,95,97,100,100,77,97,114,107,101,114,0,95,97,100,100,77,117,108,116,105,77,97,114,107,101,114,0,103,101,116,77,117,108,116,105,77,97,114,107,101,114,78,117,109,0,103,101,116,77,117,108,116,105,77,97,114,107,101,114,67,111,117,110,116,0,95,108,111,97,100,67,97,109,101,114,97,0,115,101,116,77,97,114,107,101,114,73,110,102,111,68,105,114,0,115,101,116,77,97,114,107,101,114,73,110,102,111,86,101,114,116,101,120,0,103,101,116,84,114,97,110,115,77,97,116,83,113,117,97,114,101,0,103,101,116,84,114,97,110,115,77,97,116,83,113,117,97,114,101,67,111,110,116,0,103,101,116,84,114,97,110,115,77,97,116,77,117,108,116,105,83,113,117,97,114,101,0,103,101,116,84,114,97,110,115,77,97,116,77,117,108,116,105,83,113,117,97,114,101,82,111,98,117,115,116,0,100,101,116,101,99,116,77,97,114,107,101,114,0,103,101,116,77,97,114,107,101,114,78,117,109,0,103,101,116,77,117,108,116,105,69,97,99,104,77,97,114,107,101,114,0,103,101,116,77,97,114,107,101,114,0,115,101,116,68,101,98,117,103,77,111,100,101,0,103,101,116,68,101,98,117,103,77,111,100,101,0,103,101,116,80,114,111,99,101,115,115,105,110,103,73,109,97,103,101,0,115,101,116,76,111,103,76,101,118,101,108,0,103,101,116,76,111,103,76,101,118,101,108,0,115,101,116,80,114,111,106,101,99,116,105,111,110,78,101,97,114,80,108,97,110,101,0,103,101,116,80,114,111,106,101,99,116,105,111,110,78,101,97,114,80,108,97,110,101,0,115,101,116,80,114,111,106,101,99,116,105,111,110,70,97,114,80,108,97,110,101,0,103,101,116,80,114,111,106,101,99,116,105,111,110,70,97,114,80,108,97,110,101,0,115,101,116,84,104,114,101,115,104,111,108,100,77,111,100,101,0,103,101,116,84,104,114,101,115,104,111,108,100,77,111,100,101,0,115,101,116,84,104,114,101,115,104,111,108,100,0,103,101,116,84,104,114,101,115,104,111,108,100,0,115,101,116,80,97,116,116,101,114,110,68,101,116,101,99,116,105,111,110,77,111,100,101,0,103,101,116,80,97,116,116,101,114,110,68,101,116,101,99,116,105,111,110,77,111,100,101,0,115,101,116,80,97,116,116,82,97,116,105,111,0,103,101,116,80,97,116,116,82,97,116,105,111,0,115,101,116,77,97,116,114,105,120,67,111,100,101,84,121,112,101,0,103,101,116,77,97,116,114,105,120,67,111,100,101,84,121,112,101,0,115,101,116,76,97,98,101,108,105,110,103,77,111,100,101,0,103,101,116,76,97,98,101,108,105,110,103,77,111,100,101,0,115,101,116,73,109,97,103,101,80,114,111,99,77,111,100,101,0,103,101,116,73,109,97,103,101,80,114,111,99,77,111,100,101,0,69,82,82,79,82,95,65,82,67,79,78,84,82,79,76,76,69,82,95,78,79,84,95,70,79,85,78,68,0,69,82,82,79,82,95,77,85,76,84,73,77,65,82,75,69,82,95,78,79,84,95,70,79,85,78,68,0,69,82,82,79,82,95,77,65,82,75,69,82,95,73,78,68,69,88,95,79,85,84,95,79,70,95,66,79,85,78,68,83,0,65,82,95,68,69,66,85,71,95,68,73,83,65,66,76,69,0,65,82,95,68,69,66,85,71,95,69,78,65,66,76,69,0,65,82,95,68,69,70,65,85,76,84,95,68,69,66,85,71,95,77,79,68,69,0,65,82,95,76,65,66,69,76,73,78,71,95,87,72,73,84,69,95,82,69,71,73,79,78,0,65,82,95,76,65,66,69,76,73,78,71,95,66,76,65,67,75,95,82,69,71,73,79,78,0,65,82,95,68,69,70,65,85,76,84,95,76,65,66,69,76,73,78,71,95,77,79,68,69,0,65,82,95,68,69,70,65,85,76,84,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,0,65,82,95,73,77,65,71,69,95,80,82,79,67,95,70,82,65,77,69,95,73,77,65,71,69,0,65,82,95,73,77,65,71,69,95,80,82,79,67,95,70,73,69,76,68,95,73,77,65,71,69,0,65,82,95,68,69,70,65,85,76,84,95,73,77,65,71,69,95,80,82,79,67,95,77,79,68,69,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,67,79,76,79,82,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,77,79,78,79,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,68,69,84,69,67,84,73,79,78,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,67,79,76,79,82,95,65,78,68,95,77,65,84,82,73,88,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,77,79,78,79,95,65,78,68,95,77,65,84,82,73,88,0,65,82,95,68,69,70,65,85,76,84,95,80,65,84,84,69,82,78,95,68,69,84,69,67,84,73,79,78,95,77,79,68,69,0,65,82,95,85,83,69,95,84,82,65,67,75,73,78,71,95,72,73,83,84,79,82,89,0,65,82,95,78,79,85,83,69,95,84,82,65,67,75,73,78,71,95,72,73,83,84,79,82,89,0,65,82,95,85,83,69,95,84,82,65,67,75,73,78,71,95,72,73,83,84,79,82,89,95,86,50,0,65,82,95,68,69,70,65,85,76,84,95,77,65,82,75,69,82,95,69,88,84,82,65,67,84,73,79,78,95,77,79,68,69,0,65,82,95,77,65,88,95,76,79,79,80,95,67,79,85,78,84,0,65,82,95,76,79,79,80,95,66,82,69,65,75,95,84,72,82,69,83,72,0,65,82,95,76,79,71,95,76,69,86,69,76,95,68,69,66,85,71,0,65,82,95,76,79,71,95,76,69,86,69,76,95,73,78,70,79,0,65,82,95,76,79,71,95,76,69,86,69,76,95,87,65,82,78,0,65,82,95,76,79,71,95,76,69,86,69,76,95,69,82,82,79,82,0,65,82,95,76,79,71,95,76,69,86,69,76,95,82,69,76,95,73,78,70,79,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,51,120,51,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,51,120,51,95,72,65,77,77,73,78,71,54,51,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,51,120,51,95,80,65,82,73,84,89,54,53,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,52,120,52,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,52,120,52,95,66,67,72,95,49,51,95,57,95,51,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,52,120,52,95,66,67,72,95,49,51,95,53,95,53,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,77,65,78,85,65,76,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,65,85,84,79,95,77,69,68,73,65,78,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,65,85,84,79,95,79,84,83,85,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,65,85,84,79,95,65,68,65,80,84,73,86,69,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,78,79,78,69,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,80,65,84,84,69,82,78,95,69,88,84,82,65,67,84,73,79,78,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,71,69,78,69,82,73,67,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,67,79,78,84,82,65,83,84,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,66,65,82,67,79,68,69,95,78,79,84,95,70,79,85,78,68,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,66,65,82,67,79,68,69,95,69,68,67,95,70,65,73,76,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,67,79,78,70,73,68,69,78,67,69,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,80,79,83,69,95,69,82,82,79,82,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,80,79,83,69,95,69,82,82,79,82,95,77,85,76,84,73,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,72,69,85,82,73,83,84,73,67,95,84,82,79,85,66,76,69,83,79,77,69,95,77,65,84,82,73,88,95,67,79,68,69,83,0,73,109,97,103,101,32,112,114,111,99,46,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,46,10,0,76,97,98,101,108,105,110,103,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,10,0,118,105,105,102,0,80,97,116,116,101,114,110,32,114,97,116,105,111,32,115,105,122,101,32,115,101,116,32,116,111,32,37,102,46,10,0,80,97,116,116,101,114,110,32,100,101,116,101,99,116,105,111,110,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,46,10,0,84,104,114,101,115,104,111,108,100,32,115,101,116,32,116,111,32,37,100,10,0,118,105,105,105,0,84,104,114,101,115,104,111,108,100,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,10,0,100,105,105,0,118,105,105,100,0,105,105,0,118,105,105,0,111,110,46,0,111,102,102,46,0,68,101,98,117,103,32,109,111,100,101,32,115,101,116,32,116,111,32,37,115,10,0,123,32,118,97,114,32,36,97,32,61,32,97,114,103,117,109,101,110,116,115,59,32,118,97,114,32,105,32,61,32,49,50,59,32,105,102,32,40,33,97,114,116,111,111,108,107,105,116,91,34,109,97,114,107,101,114,73,110,102,111,34,93,41,32,123,32,97,114,116,111,111,108,107,105,116,91,34,109,97,114,107,101,114,73,110,102,111,34,93,32,61,32,40,123,32,112,111,115,58,32,91,48,44,48,93,44,32,108,105,110,101,58,32,91,91,48,44,48,44,48,93,44,32,91,48,44,48,44,48,93,44,32,91,48,44,48,44,48,93,44,32,91,48,44,48,44,48,93,93,44,32,118,101,114,116,101,120,58,32,91,91,48,44,48,93,44,32,91,48,44,48,93,44,32,91,48,44,48,93,44,32,91,48,44,48,93,93,32,125,41,59,32,125,32,118,97,114,32,109,97,114,107,101,114,73,110,102,111,32,61,32,97,114,116,111,111,108,107,105,116,91,34,109,97,114,107,101,114,73,110,102,111,34,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,97,114,101,97,34,93,32,61,32,36,48,59,32,109,97,114,107,101,114,73,110,102,111,91,34,105,100,34,93,32,61,32,36,49,59,32,109,97,114,107,101,114,73,110,102,111,91,34,105,100,80,97,116,116,34,93,32,61,32,36,50,59,32,109,97,114,107,101,114,73,110,102,111,91,34,105,100,77,97,116,114,105,120,34,93,32,61,32,36,51,59,32,109,97,114,107,101,114,73,110,102,111,91,34,100,105,114,34,93,32,61,32,36,52,59,32,109,97,114,107,101,114,73,110,102,111,91,34,100,105,114,80,97,116,116,34,93,32,61,32,36,53,59,32,109,97,114,107,101,114,73,110,102,111,91,34,100,105,114,77,97,116,114,105,120,34,93,32,61,32,36,54,59,32,109,97,114,107,101,114,73,110,102,111,91,34,99,102,34,93,32,61,32,36,55,59,32,109,97,114,107,101,114,73,110,102,111,91,34,99,102,80,97,116,116,34,93,32,61,32,36,56,59,32,109,97,114,107,101,114,73,110,102,111,91,34,99,102,77,97,116,114,105,120,34,93,32,61,32,36,57,59,32,109,97,114,107,101,114,73,110,102,111,91,34,112,111,115,34,93,91,48,93,32,61,32,36,49,48,59,32,109,97,114,107,101,114,73,110,102,111,91,34,112,111,115,34,93,91,49,93,32,61,32,36,49,49,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,48,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,48,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,48,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,49,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,49,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,49,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,50,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,50,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,50,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,51,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,51,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,51,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,48,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,48,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,49,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,49,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,50,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,50,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,51,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,51,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,101,114,114,111,114,67,111,114,114,101,99,116,101,100,34,93,32,61,32,36,97,91,105,43,43,93,59,32,125,0,123,32,105,102,32,40,33,97,114,116,111,111,108,107,105,116,91,34,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,73,110,102,111,34,93,41,32,123,32,97,114,116,111,111,108,107,105,116,91,34,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,73,110,102,111,34,93,32,61,32,40,123,125,41,59,32,125,32,118,97,114,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,32,61,32,97,114,116,111,111,108,107,105,116,91,34,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,73,110,102,111,34,93,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,118,105,115,105,98,108,101,39,93,32,61,32,36,48,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,112,97,116,116,73,100,39,93,32,61,32,36,49,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,112,97,116,116,84,121,112,101,39,93,32,61,32,36,50,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,119,105,100,116,104,39,93,32,61,32,36,51,59,32,125,0,105,105,105,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,50,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,108,111,97,100,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,32,108,111,97,100,105,110,103,32,112,97,114,97,109,101,116,101,114,32,102,105,108,101,32,37,115,32,102,111,114,32,99,97,109,101,114,97,46,10,0,105,105,105,105,0,65,82,84,111,111,108,75,105,116,74,83,40,41,58,32,85,110,97,98,108,101,32,116,111,32,115,101,116,32,117,112,32,65,82,32,109,117,108,116,105,109,97,114,107,101,114,46,10,0,99,111,110,102,105,103,32,100,97,116,97,32,108,111,97,100,32,101,114,114,111,114,32,33,33,10,0,65,82,84,111,111,108,75,105,116,74,83,40,41,58,32,85,110,97,98,108,101,32,116,111,32,115,101,116,32,117,112,32,65,82,32,109,97,114,107,101,114,46,10,0,108,111,97,100,77,97,114,107,101,114,40,41,58,32,69,114,114,111,114,32,108,111,97,100,105,110,103,32,112,97,116,116,101,114,110,32,102,105,108,101,32,37,115,46,10,0,105,105,105,105,105,0,115,101,116,117,112,40,41,58,32,69,114,114,111,114,58,32,97,114,80,97,116,116,67,114,101,97,116,101,72,97,110,100,108,101,46,10,0,65,108,108,111,99,97,116,101,100,32,118,105,100,101,111,70,114,97,109,101,83,105,122,101,32,37,100,10,0,123,32,105,102,32,40,33,97,114,116,111,111,108,107,105,116,91,34,102,114,97,109,101,77,97,108,108,111,99,34,93,41,32,123,32,97,114,116,111,111,108,107,105,116,91,34,102,114,97,109,101,77,97,108,108,111,99,34,93,32,61,32,40,123,125,41,59,32,125,32,118,97,114,32,102,114,97,109,101,77,97,108,108,111,99,32,61,32,97,114,116,111,111,108,107,105,116,91,34,102,114,97,109,101,77,97,108,108,111,99,34,93,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,102,114,97,109,101,112,111,105,110,116,101,114,34,93,32,61,32,36,49,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,102,114,97,109,101,115,105,122,101,34,93,32,61,32,36,50,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,99,97,109,101,114,97,34,93,32,61,32,36,51,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,116,114,97,110,115,102,111,114,109,34,93,32,61,32,36,52,59,32,125,0,42,42,42,32,67,97,109,101,114,97,32,80,97,114,97,109,101,116,101,114,32,114,101,115,105,122,101,100,32,102,114,111,109,32,37,100,44,32,37,100,46,32,42,42,42,10,0,115,101,116,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,58,32,97,114,80,97,114,97,109,76,84,67,114,101,97,116,101,46,10,0,115,101,116,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,58,32,97,114,67,114,101,97,116,101,72,97,110,100,108,101,46,10,0,115,101,116,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,32,99,114,101,97,116,105,110,103,32,51,68,32,104,97,110,100,108,101,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,117,115,114,47,108,111,99,97,108,47,67,101,108,108,97,114,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,55,46,49,48,47,108,105,98,101,120,101,99,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,117,115,114,47,108,111,99,97,108,47,67,101,108,108,97,114,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,55,46,49,48,47,108,105,98,101,120,101,99,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,32,99,111,110,115,116,0,32,118,111,108,97,116,105,108,101,0,32,114,101,115,116,114,105,99,116,0,32,99,111,109,112,108,101,120,0,32,105,109,97,103,105,110,97,114,121,0,32,91,0,32,40,0,41,0,40,0,38,38,0,111,98,106,99,95,111,98,106,101,99,116,60,0,42,0,38,0,111,98,106,99,112,114,111,116,111,0,32,0,60,0,62,0,32,118,101,99,116,111,114,91,0,93,0,112,105,120,101,108,32,118,101,99,116,111,114,91,0,38,61,0,61,0,44,0,126,0,58,58,0,100,101,108,101,116,101,91,93,32,0,100,101,108,101,116,101,32,0,47,0,47,61,0,94,0,94,61,0,61,61,0,62,61,0,41,91,0,60,61,0,60,60,0,60,60,61,0,45,0,45,61,0,42,61,0,45,45,0,41,45,45,0,33,61,0,33,0,124,124,0,124,0,124,61,0,45,62,42,0,43,0,43,61,0,43,43,0,41,43,43,0,41,32,63,32,40,0,41,32,58,32,40,0,37,0,37,61,0,62,62,0,62,62,61,0,116,104,114,111,119,0,116,104,114,111,119,32,0,116,121,112,101,105,100,40,0,115,105,122,101,111,102,46,46,46,40,0,44,32,0,115,105,122,101,111,102,32,40,0,115,116,97,116,105,99,95,99,97,115,116,60,0,62,40,0,114,101,105,110,116,101,114,112,114,101,116,95,99,97,115,116,60,0,45,62,0,110,111,101,120,99,101,112,116,32,40,0,91,93,32,0,41,32,0,46,0,46,42,0,115,116,100,58,58,0,111,112,101,114,97,116,111,114,38,38,0,111,112,101,114,97,116,111,114,38,0,111,112,101,114,97,116,111,114,38,61,0,111,112,101,114,97,116,111,114,61,0,111,112,101,114,97,116,111,114,40,41,0,111,112,101,114,97,116,111,114,44,0,111,112,101,114,97,116,111,114,126,0,111,112,101,114,97,116,111,114,32,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0,111,112,101,114,97,116,111,114,42,0,111,112,101,114,97,116,111,114,47,0,111,112,101,114,97,116,111,114,47,61,0,111,112,101,114,97,116,111,114,94,0,111,112,101,114,97,116,111,114,94,61,0,111,112,101,114,97,116,111,114,61,61,0,111,112,101,114,97,116,111,114,62,61,0,111,112,101,114,97,116,111,114,62,0,111,112,101,114,97,116,111,114,91,93,0,111,112,101,114,97,116,111,114,60,61,0,111,112,101,114,97,116,111,114,34,34,32,0,111,112,101,114,97,116,111,114,60,60,0,111,112,101,114,97,116,111,114,60,60,61,0,111,112,101,114,97,116,111,114,60,0,111,112,101,114,97,116,111,114,45,0,111,112,101,114,97,116,111,114,45,61,0,111,112,101,114,97,116,111,114,42,61,0,111,112,101,114,97,116,111,114,45,45,0,111,112,101,114,97,116,111,114,32,110,101,119,91,93,0,111,112,101,114,97,116,111,114,33,61,0,111,112,101,114,97,116,111,114,33,0,111,112,101,114,97,116,111,114,32,110,101,119,0,111,112,101,114,97,116,111,114,124,124,0,111,112,101,114,97,116,111,114,124,0,111,112,101,114,97,116,111,114,124,61,0,111,112,101,114,97,116,111,114,45,62,42,0,111,112,101,114,97,116,111,114,43,0,111,112,101,114,97,116,111,114,43,61,0,111,112,101,114,97,116,111,114,43,43,0,111,112,101,114,97,116,111,114,45,62,0,111,112,101,114,97,116,111,114,63,0,111,112,101,114,97,116,111,114,37,0,111,112,101,114,97,116,111,114,37,61,0,111,112,101,114,97,116,111,114,62,62,0,111,112,101,114,97,116,111,114,62,62,61,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0,39,117,110,110,97,109,101,100,0,39,108,97,109,98,100,97,39,40,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,105,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,115,116,114,101,97,109,0,115,116,100,58,58,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,111,115,116,114,101,97,109,0,115,116,100,58,58,105,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,111,115,116,114,101,97,109,0,100,121,110,97,109,105,99,95,99,97,115,116,60,0,41,40,0,99,111,110,115,116,95,99,97,115,116,60,0,97,108,105,103,110,111,102,32,40,0,102,112,0,119,99,104,97,114,95,116,0,102,97,108,115,101,0,116,114,117,101,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,117,0,108,0,117,108,0,108,108,0,117,108,108,0,95,95,105,110,116,49,50,56,0,117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0,37,76,97,76,0,37,97,0,37,97,102,0,100,101,99,108,116,121,112,101,40,0,115,116,100,58,58,97,108,108,111,99,97,116,111,114,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0,58,58,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,115,116,100,0,95,71,76,79,66,65,76,95,95,78,0,40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0,32,62,0,84,95,0,105,100,0,58,58,42,0,32,38,0,32,38,38,0,32,91,93,0,118,111,105,100,0,98,111,111,108,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,108,111,110,103,32,108,111,110,103,0,102,108,111,97,116,0,108,111,110,103,32,100,111,117,98,108,101,0,95,95,102,108,111,97,116,49,50,56,0,46,46,46,0,100,101,99,105,109,97,108,54,52,0,100,101,99,105,109,97,108,49,50,56,0,100,101,99,105,109,97,108,51,50,0,100,101,99,105,109,97,108,49,54,0,99,104,97,114,51,50,95,116,0,99,104,97,114,49,54,95,116,0,97,117,116,111,0,115,116,100,58,58,110,117,108,108,112,116,114,95,116,0,100,111,117,98,108,101,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0,95,98,108,111,99,107,95,105,110,118,111,107,101,0,105,110,118,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,32,102,111,114,32,98,108,111,99,107,32,105,110,32,0,118,116,97,98,108,101,32,102,111,114,32,0,86,84,84,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0,99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0,99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0,45,105,110,45,0,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0,114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _free() {
  }
  Module["_free"] = _free;
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

   
  Module["_i64Add"] = _i64Add;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  var _emscripten_asm_const_int=true;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _llvm_ctlz_i32=true;

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
          type = type[0];
          Module[name] = type['fromWireType'](value);
          return [];
      });
    }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_memmove"] = _memmove;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_dii": nullFunc_dii, "nullFunc_vid": nullFunc_vid, "nullFunc_di": nullFunc_di, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_dii": invoke_dii, "invoke_vid": invoke_vid, "invoke_di": invoke_di, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "___syscall221": ___syscall221, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "_emscripten_asm_const_iiiid": _emscripten_asm_const_iiiid, "__embind_register_memory_view": __embind_register_memory_view, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "_abort": _abort, "__embind_register_std_wstring": __embind_register_std_wstring, "throwBindingError": throwBindingError, "___gxx_personality_v0": ___gxx_personality_v0, "integerReadValueFromPointer": integerReadValueFromPointer, "extendError": extendError, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "__embind_register_constant": __embind_register_constant, "___syscall54": ___syscall54, "getShiftFromSize": getShiftFromSize, "__embind_register_function": __embind_register_function, "__embind_register_emval": __embind_register_emval, "___setErrNo": ___setErrNo, "__emval_register": __emval_register, "__embind_register_void": __embind_register_void, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__exit": __exit, "getTypeName": getTypeName, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "createNamedFunction": createNamedFunction, "embind_init_charCodes": embind_init_charCodes, "readLatin1String": readLatin1String, "_embind_repr": _embind_repr, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "_emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi": _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi, "_pthread_once": _pthread_once, "__emval_decref": __emval_decref, "__embind_register_integer": __embind_register_integer, "runDestructors": runDestructors, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "___unlock": ___unlock, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "registerType": registerType, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "ensureOverloadTable": ensureOverloadTable, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "__embind_register_float": __embind_register_float, "new_": new_, "_atexit": _atexit, "___syscall140": ___syscall140, "exposePublicSymbol": exposePublicSymbol, "_exit": _exit, "__embind_register_std_string": __embind_register_std_string, "replacePublicSymbol": replacePublicSymbol, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_dii=env.invoke_dii;
  var invoke_vid=env.invoke_vid;
  var invoke_di=env.invoke_di;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var _emscripten_asm_const_iiiid=env._emscripten_asm_const_iiiid;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var _abort=env._abort;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var throwBindingError=env.throwBindingError;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var extendError=env.extendError;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var __embind_register_constant=env.__embind_register_constant;
  var ___syscall54=env.___syscall54;
  var getShiftFromSize=env.getShiftFromSize;
  var __embind_register_function=env.__embind_register_function;
  var __embind_register_emval=env.__embind_register_emval;
  var ___setErrNo=env.___setErrNo;
  var __emval_register=env.__emval_register;
  var __embind_register_void=env.__embind_register_void;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var __exit=env.__exit;
  var getTypeName=env.getTypeName;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var createNamedFunction=env.createNamedFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var readLatin1String=env.readLatin1String;
  var _embind_repr=env._embind_repr;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi=env._emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi;
  var _pthread_once=env._pthread_once;
  var __emval_decref=env.__emval_decref;
  var __embind_register_integer=env.__embind_register_integer;
  var runDestructors=env.runDestructors;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var ___unlock=env.___unlock;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_emval=env.init_emval;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ensureOverloadTable=env.ensureOverloadTable;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var __embind_register_float=env.__embind_register_float;
  var new_=env.new_;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var exposePublicSymbol=env.exposePublicSymbol;
  var _exit=env._exit;
  var __embind_register_std_string=env.__embind_register_std_string;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i615 = 0, $$0$i$i$i599 = 0, $$0$i$i$i605 = 0, $$0$i$i$i609 = 0, $$0$i$i$i618 = 0, $$0$i$i$i622 = 0, $$0$i$i$i625 = 0, $$0$i$i$i631 = 0, $$0$i$i$i634 = 0, $$0$i$i$i638 = 0, $$0$i$i$i642 = 0, $$0$i$i$i650 = 0, $$0$i$i$i654 = 0, $$0$i$i$i658 = 0, $$0$i$i$i662 = 0, $$0$i$i$i666 = 0, $$0$i$i602 = 0, $$0503 = 0, $$0504$off0 = 0, $$14 = 0, $10 = 0, $105 = 0, $107 = 0, $11 = 0, $110 = 0, $12 = 0, $122 = 0, $123 = 0, $13 = 0, $133 = 0, $134 = 0, $135 = 0, $138 = 0, $14 = 0, $146 = 0, $149 = 0, $15 = 0, $154 = 0, $157 = 0, $16 = 0, $160 = 0, $165 = 0, $168 = 0, $172 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $194 = 0, $195 = 0, $21 = 0, $210 = 0, $211 = 0, $213 = 0, $214 = 0, $218 = 0, $221 = 0, $224 = 0, $227 = 0, $232 = 0, $235 = 0, $238 = 0, $241 = 0, $246 = 0, $248 = 0, $251 = 0, $252 = 0, $26 = 0, $267 = 0, $270 = 0, $273 = 0, $275 = 0, $281 = 0, $284 = 0, $287 = 0, $29 = 0, $292 = 0, $295 = 0, $298 = 0, $3 = 0, $30 = 0, $303 = 0, $305 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $321 = 0, $326 = 0, $328 = 0, $330 = 0, $332 = 0, $333 = 0, $340 = 0, $341 = 0, $343 = 0, $344 = 0, $346 = 0, $347 = 0, $349 = 0, $350 = 0, $356 = 0, $357 = 0, $371 = 0, $372 = 0, $387 = 0, $388 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $400 = 0, $401 = 0, $406 = 0, $409 = 0, $412 = 0, $415 = 0, $42 = 0, $434 = 0, $435 = 0, $45 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $60 = 0, $63 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $83 = 0, $84 = 0, $9 = 0, $94 = 0, $95 = 0, $96 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $3 = sp + 176 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 88 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 160 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 148 | 0;
 $11 = sp + 136 | 0;
 $12 = sp + 124 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 12 | 0;
 $15 = sp;
 $16 = $1;
 $18 = $16 - $0 | 0;
 L1 : do if (($18 | 0) > 1) {
  $21 = $0 + 2 | 0;
  if (($18 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 103) {
   $26 = (HEAP8[$0 + 1 >> 0] | 0) == 115;
   $$0503 = $26 ? $21 : $0;
   $$0504$off0 = $26;
  } else {
   $$0503 = $0;
   $$0504$off0 = 0;
  } else {
   $$0503 = $0;
   $$0504$off0 = 0;
  }
  $29 = $$0503 + 1 | 0;
  $30 = $0 + 3 | 0;
  $31 = ($21 | 0) != ($1 | 0);
  $32 = $$0503 + 2 | 0;
  do switch (HEAP8[$$0503 >> 0] | 0) {
  case 76:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  case 84:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  case 102:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  case 97:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 97:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15051, __ZNSt3__211char_traitsIcE6lengthEPKc(15051) | 0);
      $39 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($39 | 0) == ($21 | 0) ? $0 : $39;
      break L1;
      break;
     }
    case 100:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15069, __ZNSt3__211char_traitsIcE6lengthEPKc(15069) | 0);
      $42 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($42 | 0) == ($21 | 0) ? $0 : $42;
      break L1;
      break;
     }
    case 110:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15069, __ZNSt3__211char_traitsIcE6lengthEPKc(15069) | 0);
      $45 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($45 | 0) == ($21 | 0) ? $0 : $45;
      break L1;
      break;
     }
    case 78:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15112, __ZNSt3__211char_traitsIcE6lengthEPKc(15112) | 0);
      $48 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($48 | 0) == ($21 | 0) ? $0 : $48;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15115, __ZNSt3__211char_traitsIcE6lengthEPKc(15115) | 0);
      $51 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($51 | 0) == ($21 | 0) ? $0 : $51;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 122:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 108:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15117, __ZNSt3__211char_traitsIcE6lengthEPKc(15117) | 0);
      $60 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($60 | 0) == ($21 | 0) ? $0 : $60;
      break L1;
      break;
     }
    case 111:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15119, __ZNSt3__211char_traitsIcE6lengthEPKc(15119) | 0);
      $63 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($63 | 0) == ($21 | 0) ? $0 : $63;
      break L1;
      break;
     }
    case 118:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 100:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 97:
     {
      $68 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($32, $1, $2) | 0;
      if (($68 | 0) == ($32 | 0)) {
       $$14 = $0;
       break L1;
      }
      $71 = $2 + 4 | 0;
      if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$71 >> 2] | 0)) {
       $$14 = $0;
       break L1;
      };
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      L32 : do if ($$0504$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6, 15121, __ZNSt3__211char_traitsIcE6lengthEPKc(15121) | 0); else {
       $$0$i$i = 0;
       while (1) {
        if (($$0$i$i | 0) == 3) break L32;
        HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0;
        $$0$i$i = $$0$i$i + 1 | 0;
       }
      } while (0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15124) | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, (HEAP32[$71 >> 2] | 0) + -24 | 0);
      $83 = HEAP8[$7 + 11 >> 0] | 0;
      $84 = $83 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, $84 ? HEAP32[$7 >> 2] | 0 : $7, $84 ? HEAP32[$7 + 4 >> 2] | 0 : $83 & 255) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i599 = 0;
      while (1) {
       if (($$0$i$i$i599 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i599 << 2) >> 2] = 0;
       $$0$i$i$i599 = $$0$i$i$i599 + 1 | 0;
      }
      $94 = HEAP32[$71 >> 2] | 0;
      $95 = $94 + -24 | 0;
      $96 = $95 + 11 | 0;
      if ((HEAP8[$96 >> 0] | 0) < 0) {
       $99 = HEAP32[$95 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($99, $3);
       HEAP32[$94 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($95, $3);
       HEAP8[$96 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($95);
      HEAP32[$95 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$95 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$95 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i$i | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$14 = $68;
      break L1;
      break;
     }
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 101:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15067, __ZNSt3__211char_traitsIcE6lengthEPKc(15067) | 0);
      $105 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($105 | 0) == ($21 | 0) ? $0 : $105;
      break L1;
      break;
     }
    case 108:
     {
      $107 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($32, $1, $2) | 0;
      if (($107 | 0) == ($32 | 0)) {
       $$14 = $0;
       break L1;
      }
      $110 = $2 + 4 | 0;
      if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$110 >> 2] | 0)) {
       $$14 = $0;
       break L1;
      };
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      L60 : do if ($$0504$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6, 15121, __ZNSt3__211char_traitsIcE6lengthEPKc(15121) | 0); else {
       $$0$i$i602 = 0;
       while (1) {
        if (($$0$i$i602 | 0) == 3) break L60;
        HEAP32[$6 + ($$0$i$i602 << 2) >> 2] = 0;
        $$0$i$i602 = $$0$i$i602 + 1 | 0;
       }
      } while (0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15134) | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i605 = 0;
      while (1) {
       if (($$0$i$i$i605 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i605 << 2) >> 2] = 0;
       $$0$i$i$i605 = $$0$i$i$i605 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, (HEAP32[$110 >> 2] | 0) + -24 | 0);
      $122 = HEAP8[$7 + 11 >> 0] | 0;
      $123 = $122 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, $123 ? HEAP32[$7 >> 2] | 0 : $7, $123 ? HEAP32[$7 + 4 >> 2] | 0 : $122 & 255) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i609 = 0;
      while (1) {
       if (($$0$i$i$i609 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i609 << 2) >> 2] = 0;
       $$0$i$i$i609 = $$0$i$i$i609 + 1 | 0;
      }
      $133 = HEAP32[$110 >> 2] | 0;
      $134 = $133 + -24 | 0;
      $135 = $134 + 11 | 0;
      if ((HEAP8[$135 >> 0] | 0) < 0) {
       $138 = HEAP32[$134 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($138, $3);
       HEAP32[$133 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($134, $3);
       HEAP8[$135 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($134);
      HEAP32[$134 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$134 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$134 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i$i615 = 0;
      while (1) {
       if (($$0$i$i$i$i615 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i$i615 << 2) >> 2] = 0;
       $$0$i$i$i$i615 = $$0$i$i$i$i615 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$14 = $107;
      break L1;
      break;
     }
    case 110:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 115:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 118:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15142, __ZNSt3__211char_traitsIcE6lengthEPKc(15142) | 0);
      $146 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($146 | 0) == ($21 | 0) ? $0 : $146;
      break L1;
      break;
     }
    case 86:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15144, __ZNSt3__211char_traitsIcE6lengthEPKc(15144) | 0);
      $149 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($149 | 0) == ($21 | 0) ? $0 : $149;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 101:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 111:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15147, __ZNSt3__211char_traitsIcE6lengthEPKc(15147) | 0);
      $154 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($154 | 0) == ($21 | 0) ? $0 : $154;
      break L1;
      break;
     }
    case 79:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15149, __ZNSt3__211char_traitsIcE6lengthEPKc(15149) | 0);
      $157 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($157 | 0) == ($21 | 0) ? $0 : $157;
      break L1;
      break;
     }
    case 113:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15152, __ZNSt3__211char_traitsIcE6lengthEPKc(15152) | 0);
      $160 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($160 | 0) == ($21 | 0) ? $0 : $160;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 103:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 101:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15155, __ZNSt3__211char_traitsIcE6lengthEPKc(15155) | 0);
      $165 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($165 | 0) == ($21 | 0) ? $0 : $165;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15085, __ZNSt3__211char_traitsIcE6lengthEPKc(15085) | 0);
      $168 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($168 | 0) == ($21 | 0) ? $0 : $168;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 105:
   {
    if ((HEAP8[$29 >> 0] | 0) != 120) {
     $$14 = $0;
     break L1;
    }
    $172 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($21, $1, $2) | 0;
    if (($172 | 0) == ($21 | 0)) {
     $$14 = $0;
     break L1;
    }
    $174 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($172, $1, $2) | 0;
    $176 = $2 + 4 | 0;
    if (($174 | 0) == ($172 | 0)) {
     $210 = HEAP32[$176 >> 2] | 0;
     $211 = $210 + -24 | 0;
     $213 = $210;
     while (1) {
      if (($213 | 0) == ($211 | 0)) {
       $$14 = $0;
       break L1;
      }
      $214 = $213 + -24 | 0;
      HEAP32[$176 >> 2] = $214;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($214);
      $213 = HEAP32[$176 >> 2] | 0;
     }
    }
    $177 = HEAP32[$176 >> 2] | 0;
    if ((($177 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$14 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $177 + -24 | 0);
    $184 = HEAP32[$176 >> 2] | 0;
    $185 = $184 + -24 | 0;
    $187 = $184;
    while (1) {
     if (($187 | 0) == ($185 | 0)) break;
     $188 = $187 + -24 | 0;
     HEAP32[$176 >> 2] = $188;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($188);
     $187 = HEAP32[$176 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $184 + -48 | 0);
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($9, 15049, $4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9, 15158) | 0;
    HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
    $$0$i$i$i618 = 0;
    while (1) {
     if (($$0$i$i$i618 | 0) == 3) break;
     HEAP32[$9 + ($$0$i$i$i618 << 2) >> 2] = 0;
     $$0$i$i$i618 = $$0$i$i$i618 + 1 | 0;
    }
    $194 = HEAP8[$3 + 11 >> 0] | 0;
    $195 = $194 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $195 ? HEAP32[$3 >> 2] | 0 : $3, $195 ? HEAP32[$3 + 4 >> 2] | 0 : $194 & 255) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i622 = 0;
    while (1) {
     if (($$0$i$i$i622 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i622 << 2) >> 2] = 0;
     $$0$i$i$i622 = $$0$i$i$i622 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15096) | 0;
    HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$8 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$8 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i625 = 0;
    while (1) {
     if (($$0$i$i$i625 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i625 << 2) >> 2] = 0;
     $$0$i$i$i625 = $$0$i$i$i625 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $8);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$176 >> 2] | 0) + -24 | 0, $5);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$14 = $174;
    break L1;
    break;
   }
  case 108:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 101:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15161, __ZNSt3__211char_traitsIcE6lengthEPKc(15161) | 0);
      $218 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($218 | 0) == ($21 | 0) ? $0 : $218;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15164, __ZNSt3__211char_traitsIcE6lengthEPKc(15164) | 0);
      $221 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($221 | 0) == ($21 | 0) ? $0 : $221;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15167, __ZNSt3__211char_traitsIcE6lengthEPKc(15167) | 0);
      $224 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($224 | 0) == ($21 | 0) ? $0 : $224;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15083, __ZNSt3__211char_traitsIcE6lengthEPKc(15083) | 0);
      $227 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($227 | 0) == ($21 | 0) ? $0 : $227;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 109:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 105:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15171, __ZNSt3__211char_traitsIcE6lengthEPKc(15171) | 0);
      $232 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($232 | 0) == ($21 | 0) ? $0 : $232;
      break L1;
      break;
     }
    case 73:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15173, __ZNSt3__211char_traitsIcE6lengthEPKc(15173) | 0);
      $235 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($235 | 0) == ($21 | 0) ? $0 : $235;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15067, __ZNSt3__211char_traitsIcE6lengthEPKc(15067) | 0);
      $238 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($238 | 0) == ($21 | 0) ? $0 : $238;
      break L1;
      break;
     }
    case 76:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15176, __ZNSt3__211char_traitsIcE6lengthEPKc(15176) | 0);
      $241 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($241 | 0) == ($21 | 0) ? $0 : $241;
      break L1;
      break;
     }
    case 109:
     {
      if ($31) if ((HEAP8[$21 >> 0] | 0) == 95) {
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15179, __ZNSt3__211char_traitsIcE6lengthEPKc(15179) | 0);
       $246 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($30, $1, $3, $2) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$14 = ($246 | 0) == ($30 | 0) ? $0 : $246;
       break L1;
      }
      $248 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($21, $1, $2) | 0;
      if (($248 | 0) == ($21 | 0)) {
       $$14 = $0;
       break L1;
      }
      $251 = $2 + 4 | 0;
      $252 = HEAP32[$251 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($252 | 0)) {
       $$14 = $0;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $252 + -24 | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15049) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i631 = 0;
      while (1) {
       if (($$0$i$i$i631 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i631 << 2) >> 2] = 0;
       $$0$i$i$i631 = $$0$i$i$i631 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15182) | 0;
      HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$10 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$10 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i634 = 0;
      while (1) {
       if (($$0$i$i$i634 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i634 << 2) >> 2] = 0;
       $$0$i$i$i634 = $$0$i$i$i634 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $10);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$251 >> 2] | 0) + -24 | 0, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$14 = $248;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 110:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 119:
    case 97:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 101:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15186, __ZNSt3__211char_traitsIcE6lengthEPKc(15186) | 0);
      $267 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($267 | 0) == ($21 | 0) ? $0 : $267;
      break L1;
      break;
     }
    case 103:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15171, __ZNSt3__211char_traitsIcE6lengthEPKc(15171) | 0);
      $270 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($270 | 0) == ($21 | 0) ? $0 : $270;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15189, __ZNSt3__211char_traitsIcE6lengthEPKc(15189) | 0);
      $273 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($273 | 0) == ($21 | 0) ? $0 : $273;
      break L1;
      break;
     }
    case 120:
     {
      $275 = __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($21, $1, $2) | 0;
      $$14 = ($275 | 0) == ($21 | 0) ? $0 : $275;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 111:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 110:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 111:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15191, __ZNSt3__211char_traitsIcE6lengthEPKc(15191) | 0);
      $281 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($281 | 0) == ($21 | 0) ? $0 : $281;
      break L1;
      break;
     }
    case 114:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15194, __ZNSt3__211char_traitsIcE6lengthEPKc(15194) | 0);
      $284 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($284 | 0) == ($21 | 0) ? $0 : $284;
      break L1;
      break;
     }
    case 82:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15196, __ZNSt3__211char_traitsIcE6lengthEPKc(15196) | 0);
      $287 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($287 | 0) == ($21 | 0) ? $0 : $287;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 112:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 109:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15199, __ZNSt3__211char_traitsIcE6lengthEPKc(15199) | 0);
      $292 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($292 | 0) == ($21 | 0) ? $0 : $292;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15203, __ZNSt3__211char_traitsIcE6lengthEPKc(15203) | 0);
      $295 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($295 | 0) == ($21 | 0) ? $0 : $295;
      break L1;
      break;
     }
    case 76:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15205, __ZNSt3__211char_traitsIcE6lengthEPKc(15205) | 0);
      $298 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($298 | 0) == ($21 | 0) ? $0 : $298;
      break L1;
      break;
     }
    case 112:
     {
      if ($31) if ((HEAP8[$21 >> 0] | 0) == 95) {
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15208, __ZNSt3__211char_traitsIcE6lengthEPKc(15208) | 0);
       $303 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($30, $1, $3, $2) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$14 = ($303 | 0) == ($30 | 0) ? $0 : $303;
       break L1;
      }
      $305 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($21, $1, $2) | 0;
      if (($305 | 0) == ($21 | 0)) {
       $$14 = $0;
       break L1;
      }
      $308 = $2 + 4 | 0;
      $309 = HEAP32[$308 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($309 | 0)) {
       $$14 = $0;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $309 + -24 | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15049) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i638 = 0;
      while (1) {
       if (($$0$i$i$i638 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i638 << 2) >> 2] = 0;
       $$0$i$i$i638 = $$0$i$i$i638 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15211) | 0;
      HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$11 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$11 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i642 = 0;
      while (1) {
       if (($$0$i$i$i642 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i642 << 2) >> 2] = 0;
       $$0$i$i$i642 = $$0$i$i$i642 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $11);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$308 >> 2] | 0) + -24 | 0, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$14 = $305;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15203, __ZNSt3__211char_traitsIcE6lengthEPKc(15203) | 0);
      $321 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($321 | 0) == ($21 | 0) ? $0 : $321;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 113:
   {
    if ((HEAP8[$29 >> 0] | 0) != 117) {
     $$14 = $0;
     break L1;
    }
    $326 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($21, $1, $2) | 0;
    if (($326 | 0) == ($21 | 0)) {
     $$14 = $0;
     break L1;
    }
    $328 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($326, $1, $2) | 0;
    if (($328 | 0) == ($326 | 0)) {
     $396 = $2 + 4 | 0;
     $397 = HEAP32[$396 >> 2] | 0;
     $398 = $397 + -24 | 0;
     $400 = $397;
     while (1) {
      if (($400 | 0) == ($398 | 0)) {
       $$14 = $0;
       break L1;
      }
      $401 = $400 + -24 | 0;
      HEAP32[$396 >> 2] = $401;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($401);
      $400 = HEAP32[$396 >> 2] | 0;
     }
    }
    $330 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($328, $1, $2) | 0;
    $332 = $2 + 4 | 0;
    if (($330 | 0) == ($328 | 0)) {
     $387 = HEAP32[$332 >> 2] | 0;
     $388 = $387 + -24 | 0;
     $390 = $387;
     while (1) {
      if (($390 | 0) == ($388 | 0)) break;
      $391 = $390 + -24 | 0;
      HEAP32[$332 >> 2] = $391;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($391);
      $390 = HEAP32[$332 >> 2] | 0;
     }
     $392 = $387 + -48 | 0;
     $394 = $388;
     while (1) {
      if (($394 | 0) == ($392 | 0)) {
       $$14 = $0;
       break L1;
      }
      $395 = $394 + -24 | 0;
      HEAP32[$332 >> 2] = $395;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($395);
      $394 = HEAP32[$332 >> 2] | 0;
     }
    }
    $333 = HEAP32[$332 >> 2] | 0;
    if ((($333 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 3) {
     $$14 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $333 + -24 | 0);
    $340 = HEAP32[$332 >> 2] | 0;
    $341 = $340 + -24 | 0;
    $343 = $340;
    while (1) {
     if (($343 | 0) == ($341 | 0)) break;
     $344 = $343 + -24 | 0;
     HEAP32[$332 >> 2] = $344;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($344);
     $343 = HEAP32[$332 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $340 + -48 | 0);
    $346 = HEAP32[$332 >> 2] | 0;
    $347 = $346 + -24 | 0;
    $349 = $346;
    while (1) {
     if (($349 | 0) == ($347 | 0)) break;
     $350 = $349 + -24 | 0;
     HEAP32[$332 >> 2] = $350;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($350);
     $349 = HEAP32[$332 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $346 + -48 | 0);
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($15, 15049, $5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($15, 15215) | 0;
    HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$14 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
    HEAP32[$14 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
    $$0$i$i$i650 = 0;
    while (1) {
     if (($$0$i$i$i650 | 0) == 3) break;
     HEAP32[$15 + ($$0$i$i$i650 << 2) >> 2] = 0;
     $$0$i$i$i650 = $$0$i$i$i650 + 1 | 0;
    }
    $356 = HEAP8[$4 + 11 >> 0] | 0;
    $357 = $356 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($14, $357 ? HEAP32[$4 >> 2] | 0 : $4, $357 ? HEAP32[$4 + 4 >> 2] | 0 : $356 & 255) | 0;
    HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
    HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
    $$0$i$i$i654 = 0;
    while (1) {
     if (($$0$i$i$i654 | 0) == 3) break;
     HEAP32[$14 + ($$0$i$i$i654 << 2) >> 2] = 0;
     $$0$i$i$i654 = $$0$i$i$i654 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($13, 15221) | 0;
    HEAP32[$9 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$9 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
    HEAP32[$9 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
    $$0$i$i$i658 = 0;
    while (1) {
     if (($$0$i$i$i658 | 0) == 3) break;
     HEAP32[$13 + ($$0$i$i$i658 << 2) >> 2] = 0;
     $$0$i$i$i658 = $$0$i$i$i658 + 1 | 0;
    }
    $371 = HEAP8[$3 + 11 >> 0] | 0;
    $372 = $371 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($9, $372 ? HEAP32[$3 >> 2] | 0 : $3, $372 ? HEAP32[$3 + 4 >> 2] | 0 : $371 & 255) | 0;
    HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
    $$0$i$i$i662 = 0;
    while (1) {
     if (($$0$i$i$i662 | 0) == 3) break;
     HEAP32[$9 + ($$0$i$i$i662 << 2) >> 2] = 0;
     $$0$i$i$i662 = $$0$i$i$i662 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 15047) | 0;
    HEAP32[$12 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$12 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$12 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i666 = 0;
    while (1) {
     if (($$0$i$i$i666 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i666 << 2) >> 2] = 0;
     $$0$i$i$i666 = $$0$i$i$i666 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($6, $12);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$332 >> 2] | 0) + -24 | 0, $6);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$14 = $330;
    break L1;
    break;
   }
  case 114:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15227, __ZNSt3__211char_traitsIcE6lengthEPKc(15227) | 0);
      $406 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($406 | 0) == ($21 | 0) ? $0 : $406;
      break L1;
      break;
     }
    case 77:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15229, __ZNSt3__211char_traitsIcE6lengthEPKc(15229) | 0);
      $409 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($409 | 0) == ($21 | 0) ? $0 : $409;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15232, __ZNSt3__211char_traitsIcE6lengthEPKc(15232) | 0);
      $412 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($412 | 0) == ($21 | 0) ? $0 : $412;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15235, __ZNSt3__211char_traitsIcE6lengthEPKc(15235) | 0);
      $415 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($21, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($415 | 0) == ($21 | 0) ? $0 : $415;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 115:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 112:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 114:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 122:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 90:
     {
      if (($16 - $$0503 | 0) <= 2) {
       $$14 = $0;
       break L1;
      }
      switch (HEAP8[$32 >> 0] | 0) {
      case 84:
       {
        $$14 = __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
        break L1;
        break;
       }
      case 102:
       {
        $$14 = __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
        break L1;
        break;
       }
      default:
       {
        $$14 = $0;
        break L1;
       }
      }
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 116:
   {
    switch (HEAP8[$29 >> 0] | 0) {
    case 105:
    case 101:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 114:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3, 15239);
      $434 = $2 + 4 | 0;
      $435 = HEAP32[$434 >> 2] | 0;
      if ($435 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($435, $3);
       HEAP32[$434 >> 2] = (HEAP32[$434 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$14 = $21;
      break L1;
      break;
     }
    case 119:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  default:
   {
    $$14 = $0;
    break L1;
   }
  } while (0);
 } else $$14 = $0; while (0);
 STACKTOP = sp;
 return $$14 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i571 = 0, $$0$i$i$i575 = 0, $$0$i$i$i578 = 0, $$0$i532 = 0, $$0$i540 = 0, $$0434 = 0, $$0435 = 0, $$0438 = 0, $$0444 = 0, $$0477 = 0, $$0478 = 0, $$1429 = 0, $$1436 = 0, $$2437 = 0, $$5 = 0, $$in = 0, $$ph = 0, $$sroa$0$0$$sroa_idx$i544 = 0, $$sroa$0$0$copyload$i489597 = 0, $$sroa$0$0$copyload$i525605 = 0, $$sroa$0$0$copyload$i529604 = 0, $$sroa$0$0$copyload$i537603 = 0, $$sroa$0$0$copyload$i545601 = 0, $10 = 0, $104 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $114 = 0, $117 = 0, $118 = 0, $123 = 0, $125 = 0, $128 = 0, $130 = 0, $135 = 0, $138 = 0, $139 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $157 = 0, $16 = 0, $162 = 0, $166 = 0, $169 = 0, $170 = 0, $175 = 0, $177 = 0, $180 = 0, $182 = 0, $187 = 0, $19 = 0, $190 = 0, $191 = 0, $195 = 0, $196 = 0, $197 = 0, $20 = 0, $202 = 0, $204 = 0, $207 = 0, $209 = 0, $214 = 0, $218 = 0, $221 = 0, $222 = 0, $227 = 0, $229 = 0, $232 = 0, $234 = 0, $239 = 0, $24 = 0, $243 = 0, $244 = 0, $248 = 0, $25 = 0, $250 = 0, $251 = 0, $260 = 0, $261 = 0, $265 = 0, $266 = 0, $274 = 0, $278 = 0, $284 = 0, $29 = 0, $291 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $303 = 0, $307 = 0, $308 = 0, $31 = 0, $312 = 0, $314 = 0, $315 = 0, $32 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $331 = 0, $332 = 0, $340 = 0, $344 = 0, $35 = 0, $350 = 0, $36 = 0, $361 = 0, $362 = 0, $370 = 0, $371 = 0, $372 = 0, $374 = 0, $375 = 0, $376 = 0, $384 = 0, $388 = 0, $389 = 0, $393 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $405 = 0, $406 = 0, $410 = 0, $411 = 0, $419 = 0, $423 = 0, $429 = 0, $43 = 0, $436 = 0, $438 = 0, $439 = 0, $440 = 0, $448 = 0, $452 = 0, $453 = 0, $457 = 0, $459 = 0, $460 = 0, $461 = 0, $47 = 0, $475 = 0, $477 = 0, $478 = 0, $479 = 0, $487 = 0, $49 = 0, $491 = 0, $492 = 0, $494 = 0, $495 = 0, $498 = 0, $499 = 0, $5 = 0, $507 = 0, $508 = 0, $51 = 0, $512 = 0, $514 = 0, $517 = 0, $519 = 0, $524 = 0, $526 = 0, $528 = 0, $529 = 0, $53 = 0, $536 = 0, $537 = 0, $539 = 0, $540 = 0, $542 = 0, $544 = 0, $55 = 0, $555 = 0, $556 = 0, $56 = 0, $570 = 0, $571 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $58 = 0, $586 = 0, $59 = 0, $596 = 0, $597 = 0, $6 = 0, $612 = 0, $613 = 0, $623 = 0, $630 = 0, $631 = 0, $632 = 0, $637 = 0, $639 = 0, $64 = 0, $642 = 0, $644 = 0, $651 = 0, $655 = 0, $658 = 0, $659 = 0, $66 = 0, $664 = 0, $666 = 0, $669 = 0, $671 = 0, $676 = 0, $678 = 0, $680 = 0, $681 = 0, $688 = 0, $689 = 0, $691 = 0, $692 = 0, $695 = 0, $696 = 0, $7 = 0, $704 = 0, $705 = 0, $706 = 0, $711 = 0, $713 = 0, $716 = 0, $718 = 0, $725 = 0, $729 = 0, $730 = 0, $731 = 0, $735 = 0, $737 = 0, $738 = 0, $748 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $76 = 0, $760 = 0, $764 = 0, $767 = 0, $768 = 0, $773 = 0, $775 = 0, $778 = 0, $780 = 0, $785 = 0, $789 = 0, $792 = 0, $793 = 0, $798 = 0, $8 = 0, $800 = 0, $803 = 0, $805 = 0, $810 = 0, $812 = 0, $816 = 0, $819 = 0, $820 = 0, $825 = 0, $827 = 0, $830 = 0, $832 = 0, $9 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $phitmp$i562 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $3 = sp + 128 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 88 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 76 | 0;
 $9 = sp + 12 | 0;
 $10 = sp;
 $11 = sp + 64 | 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$5 = $0; else {
  $15 = $2 + 16 | 0;
  switch (HEAP8[$0 >> 0] | 0) {
  case 75:
  case 86:
  case 114:
   {
    HEAP32[$3 >> 2] = 0;
    $16 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0, $1, $3) | 0;
    L5 : do if (($16 | 0) == ($0 | 0)) $$1429 = $0; else {
     $19 = (HEAP8[$16 >> 0] | 0) == 70;
     $20 = $2 + 4 | 0;
     $24 = ((HEAP32[$20 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $25 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
     $29 = ((HEAP32[$20 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($25 | 0) == ($16 | 0)) $$1429 = $0; else {
      $31 = $2 + 20 | 0;
      $32 = HEAP32[$31 >> 2] | 0;
      L8 : do if ($19) {
       $33 = $32 + -16 | 0;
       $35 = $32;
       while (1) {
        if (($35 | 0) == ($33 | 0)) {
         $40 = $33;
         break L8;
        }
        $36 = $35 + -16 | 0;
        HEAP32[$31 >> 2] = $36;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($36);
        $35 = HEAP32[$31 >> 2] | 0;
       }
      } else $40 = $32; while (0);
      HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
      if ($40 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
       HEAP32[$40 >> 2] = 0;
       HEAP32[$40 + 4 >> 2] = 0;
       $43 = HEAP32[$4 >> 2] | 0;
       HEAP32[$40 + 8 >> 2] = 0;
       HEAP32[$40 + 12 >> 2] = $43;
       HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($15, $4);
      $47 = HEAP32[$3 >> 2] | 0;
      $49 = ($47 & 1 | 0) == 0;
      $51 = ($47 & 2 | 0) == 0;
      $53 = ($47 & 4 | 0) == 0;
      $$0434 = $24;
      while (1) {
       if ($$0434 >>> 0 >= $29 >>> 0) {
        $$1429 = $25;
        break L5;
       }
       if ($19) {
        $55 = HEAP32[$2 >> 2] | 0;
        $56 = $55 + ($$0434 * 24 | 0) + 12 | 0;
        $58 = HEAP8[$56 + 11 >> 0] | 0;
        $59 = $58 << 24 >> 24 < 0;
        if ($59) {
         $$in = HEAP32[$55 + ($$0434 * 24 | 0) + 16 >> 2] | 0;
         $66 = HEAP32[$56 >> 2] | 0;
        } else {
         $$in = $58 & 255;
         $66 = $56;
        }
        $64 = $$in + -2 | 0;
        if ((HEAP8[$66 + $64 >> 0] | 0) == 38) $$0435 = $$in + -3 | 0; else {
         if ($59) {
          $75 = HEAP32[$56 >> 2] | 0;
          $76 = HEAP32[$55 + ($$0434 * 24 | 0) + 16 >> 2] | 0;
         } else {
          $75 = $56;
          $76 = $58 & 255;
         }
         $$0435 = (HEAP8[$75 + $76 + -1 >> 0] | 0) == 38 ? $64 : $$in;
        }
        if ($49) $$1436 = $$0435; else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($56, $$0435, 14994) | 0;
         $$1436 = $$0435 + 6 | 0;
        }
        if ($51) $$2437 = $$1436; else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) + 12 | 0, $$1436, 15001) | 0;
         $$2437 = $$1436 + 9 | 0;
        }
        if (!$53) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) + 12 | 0, $$2437, 15011) | 0;
       } else {
        if (!$49) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0, 14994) | 0;
        if (!$51) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0, 15001) | 0;
        if (!$53) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0, 15011) | 0;
       }
       $92 = HEAP32[$31 >> 2] | 0;
       $94 = (HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0;
       $95 = $92 + -12 | 0;
       $96 = HEAP32[$95 >> 2] | 0;
       if (($96 | 0) == (HEAP32[$92 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($92 + -16 | 0, $94); else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($96, $94);
        HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 24;
       }
       $$0434 = $$0434 + 1 | 0;
      }
     }
    } while (0);
    $$5 = $$1429;
    break L1;
    break;
   }
  default:
   {}
  }
  $104 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($104 | 0) == ($0 | 0)) {
   $108 = $0 + 1 | 0;
   $109 = ($108 | 0) != ($1 | 0);
   L58 : do switch (HEAP8[$0 >> 0] | 0) {
   case 65:
    {
     $110 = __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($110 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $114 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($114 | 0)) {
      $$5 = $0;
      break L1;
     }
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $114 + -24 | 0, $4);
     $117 = $2 + 20 | 0;
     $118 = HEAP32[$117 >> 2] | 0;
     if ($118 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$118 >> 2] = 0;
      $123 = $118 + 4 | 0;
      HEAP32[$123 >> 2] = 0;
      $125 = HEAP32[$3 + 12 >> 2] | 0;
      HEAP32[$118 + 8 >> 2] = 0;
      HEAP32[$118 + 12 >> 2] = $125;
      HEAP32[$118 >> 2] = HEAP32[$3 >> 2];
      $128 = $3 + 4 | 0;
      HEAP32[$123 >> 2] = HEAP32[$128 >> 2];
      $130 = $3 + 8 | 0;
      HEAP32[$118 + 8 >> 2] = HEAP32[$130 >> 2];
      HEAP32[$130 >> 2] = 0;
      HEAP32[$128 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$117 >> 2] = (HEAP32[$117 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $110;
     break L1;
     break;
    }
   case 67:
    {
     $135 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($108, $1, $2) | 0;
     if (($135 | 0) == ($108 | 0)) {
      $$5 = $0;
      break L1;
     }
     $138 = $2 + 4 | 0;
     $139 = HEAP32[$138 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($139 | 0)) {
      $$5 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($139 + -24 | 0, 15021) | 0;
     $143 = (HEAP32[$138 >> 2] | 0) + -24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $143, $4);
     $144 = $2 + 20 | 0;
     $145 = HEAP32[$144 >> 2] | 0;
     if ($145 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$145 >> 2] = 0;
      $150 = $145 + 4 | 0;
      HEAP32[$150 >> 2] = 0;
      $152 = HEAP32[$3 + 12 >> 2] | 0;
      HEAP32[$145 + 8 >> 2] = 0;
      HEAP32[$145 + 12 >> 2] = $152;
      HEAP32[$145 >> 2] = HEAP32[$3 >> 2];
      $155 = $3 + 4 | 0;
      HEAP32[$150 >> 2] = HEAP32[$155 >> 2];
      $157 = $3 + 8 | 0;
      HEAP32[$145 + 8 >> 2] = HEAP32[$157 >> 2];
      HEAP32[$157 >> 2] = 0;
      HEAP32[$155 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $135;
     break L1;
     break;
    }
   case 70:
    {
     $162 = __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($162 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $166 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($166 | 0)) {
      $$5 = $0;
      break L1;
     }
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $166 + -24 | 0, $4);
     $169 = $2 + 20 | 0;
     $170 = HEAP32[$169 >> 2] | 0;
     if ($170 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$170 >> 2] = 0;
      $175 = $170 + 4 | 0;
      HEAP32[$175 >> 2] = 0;
      $177 = HEAP32[$3 + 12 >> 2] | 0;
      HEAP32[$170 + 8 >> 2] = 0;
      HEAP32[$170 + 12 >> 2] = $177;
      HEAP32[$170 >> 2] = HEAP32[$3 >> 2];
      $180 = $3 + 4 | 0;
      HEAP32[$175 >> 2] = HEAP32[$180 >> 2];
      $182 = $3 + 8 | 0;
      HEAP32[$170 + 8 >> 2] = HEAP32[$182 >> 2];
      HEAP32[$182 >> 2] = 0;
      HEAP32[$180 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $162;
     break L1;
     break;
    }
   case 71:
    {
     $187 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($108, $1, $2) | 0;
     if (($187 | 0) == ($108 | 0)) {
      $$5 = $0;
      break L1;
     }
     $190 = $2 + 4 | 0;
     $191 = HEAP32[$190 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($191 | 0)) {
      $$5 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($191 + -24 | 0, 15030) | 0;
     $195 = (HEAP32[$190 >> 2] | 0) + -24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $195, $4);
     $196 = $2 + 20 | 0;
     $197 = HEAP32[$196 >> 2] | 0;
     if ($197 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$197 >> 2] = 0;
      $202 = $197 + 4 | 0;
      HEAP32[$202 >> 2] = 0;
      $204 = HEAP32[$3 + 12 >> 2] | 0;
      HEAP32[$197 + 8 >> 2] = 0;
      HEAP32[$197 + 12 >> 2] = $204;
      HEAP32[$197 >> 2] = HEAP32[$3 >> 2];
      $207 = $3 + 4 | 0;
      HEAP32[$202 >> 2] = HEAP32[$207 >> 2];
      $209 = $3 + 8 | 0;
      HEAP32[$197 + 8 >> 2] = HEAP32[$209 >> 2];
      HEAP32[$209 >> 2] = 0;
      HEAP32[$207 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $187;
     break L1;
     break;
    }
   case 77:
    {
     $214 = __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($214 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $218 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($218 | 0)) {
      $$5 = $0;
      break L1;
     }
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $218 + -24 | 0, $4);
     $221 = $2 + 20 | 0;
     $222 = HEAP32[$221 >> 2] | 0;
     if ($222 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$222 >> 2] = 0;
      $227 = $222 + 4 | 0;
      HEAP32[$227 >> 2] = 0;
      $229 = HEAP32[$3 + 12 >> 2] | 0;
      HEAP32[$222 + 8 >> 2] = 0;
      HEAP32[$222 + 12 >> 2] = $229;
      HEAP32[$222 >> 2] = HEAP32[$3 >> 2];
      $232 = $3 + 4 | 0;
      HEAP32[$227 >> 2] = HEAP32[$232 >> 2];
      $234 = $3 + 8 | 0;
      HEAP32[$222 + 8 >> 2] = HEAP32[$234 >> 2];
      HEAP32[$234 >> 2] = 0;
      HEAP32[$232 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$221 >> 2] = (HEAP32[$221 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$5 = $214;
     break L1;
     break;
    }
   case 79:
    {
     $239 = $2 + 4 | 0;
     $243 = ((HEAP32[$239 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $244 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($108, $1, $2) | 0;
     $248 = ((HEAP32[$239 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($244 | 0) == ($108 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$copyload$i525605 = HEAP32[$2 + 12 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i525605;
     $250 = $2 + 20 | 0;
     $251 = HEAP32[$250 >> 2] | 0;
     if ($251 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$251 >> 2] = 0;
      HEAP32[$251 + 4 >> 2] = 0;
      HEAP32[$251 + 8 >> 2] = 0;
      HEAP32[$251 + 12 >> 2] = $$sroa$0$0$copyload$i525605;
      HEAP32[$250 >> 2] = (HEAP32[$250 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($15, $3);
     $260 = $3 + 11 | 0;
     $261 = $3 + 4 | 0;
     $$0478 = $243;
     while (1) {
      if ($$0478 >>> 0 >= $248 >>> 0) {
       $$5 = $244;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) + 12 | 0, 2);
      $265 = __ZNSt3__211char_traitsIcE6lengthEPKc(15041) | 0;
      $266 = HEAP8[$260 >> 0] | 0;
      if (($265 | 0) == (($266 << 24 >> 24 < 0 ? HEAP32[$261 >> 2] | 0 : $266 & 255) | 0)) $$0$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15041, $265) | 0) == 0; else $$0$i = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $274 = HEAP32[$2 >> 2] | 0;
      if ($$0$i) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($274 + ($$0478 * 24 | 0) | 0, 15044) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) + 12 | 0, 0, 15047) | 0;
      } else {
       $278 = $274 + ($$0478 * 24 | 0) + 12 | 0;
       if ((HEAP8[$278 + 11 >> 0] | 0) < 0) $284 = HEAP32[$278 >> 2] | 0; else $284 = $278;
       if ((HEAP8[$284 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($274 + ($$0478 * 24 | 0) | 0, 15049) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) + 12 | 0, 0, 15047) | 0;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0, 15051) | 0;
      $291 = HEAP32[$250 >> 2] | 0;
      $293 = (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0;
      $294 = $291 + -12 | 0;
      $295 = HEAP32[$294 >> 2] | 0;
      if (($295 | 0) == (HEAP32[$291 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($291 + -16 | 0, $293); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($295, $293);
       HEAP32[$294 >> 2] = (HEAP32[$294 >> 2] | 0) + 24;
      }
      $$0478 = $$0478 + 1 | 0;
     }
     break;
    }
   case 80:
    {
     $303 = $2 + 4 | 0;
     $307 = ((HEAP32[$303 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $308 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($108, $1, $2) | 0;
     $312 = ((HEAP32[$303 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($308 | 0) == ($108 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$copyload$i529604 = HEAP32[$2 + 12 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i529604;
     $314 = $2 + 20 | 0;
     $315 = HEAP32[$314 >> 2] | 0;
     if ($315 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$315 >> 2] = 0;
      HEAP32[$315 + 4 >> 2] = 0;
      HEAP32[$315 + 8 >> 2] = 0;
      HEAP32[$315 + 12 >> 2] = $$sroa$0$0$copyload$i529604;
      HEAP32[$314 >> 2] = (HEAP32[$314 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($15, $3);
     $324 = $3 + 11 | 0;
     $325 = $3 + 4 | 0;
     $326 = $3 + 11 | 0;
     $327 = $3 + 4 | 0;
     $$0477 = $307;
     while (1) {
      if ($$0477 >>> 0 >= $312 >>> 0) {
       $$5 = $308;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0477 * 24 | 0) + 12 | 0, 2);
      $331 = __ZNSt3__211char_traitsIcE6lengthEPKc(15041) | 0;
      $332 = HEAP8[$324 >> 0] | 0;
      if (($331 | 0) == (($332 << 24 >> 24 < 0 ? HEAP32[$325 >> 2] | 0 : $332 & 255) | 0)) $$0$i532 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15041, $331) | 0) == 0; else $$0$i532 = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $340 = HEAP32[$2 >> 2] | 0;
      if ($$0$i532) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($340 + ($$0477 * 24 | 0) | 0, 15044) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0477 * 24 | 0) + 12 | 0, 0, 15047) | 0;
      } else {
       $344 = $340 + ($$0477 * 24 | 0) + 12 | 0;
       if ((HEAP8[$344 + 11 >> 0] | 0) < 0) $350 = HEAP32[$344 >> 2] | 0; else $350 = $344;
       if ((HEAP8[$350 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($340 + ($$0477 * 24 | 0) | 0, 15049) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0477 * 24 | 0) + 12 | 0, 0, 15047) | 0;
       }
      }
      if ((HEAP8[$108 >> 0] | 0) == 85) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0477 * 24 | 0) | 0, 12);
       $361 = __ZNSt3__211char_traitsIcE6lengthEPKc(15054) | 0;
       $362 = HEAP8[$326 >> 0] | 0;
       if (($361 | 0) == (($362 << 24 >> 24 < 0 ? HEAP32[$327 >> 2] | 0 : $362 & 255) | 0)) $$ph = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15054, $361) | 0) != 0; else $$ph = 1;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $370 = (HEAP32[$2 >> 2] | 0) + ($$0477 * 24 | 0) | 0;
       if ($$ph) {
        $371 = $370;
        label = 112;
       } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($370);
      } else {
       $371 = (HEAP32[$2 >> 2] | 0) + ($$0477 * 24 | 0) | 0;
       label = 112;
      }
      if ((label | 0) == 112) {
       label = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($371, 15067) | 0;
      }
      $372 = HEAP32[$314 >> 2] | 0;
      $374 = (HEAP32[$2 >> 2] | 0) + ($$0477 * 24 | 0) | 0;
      $375 = $372 + -12 | 0;
      $376 = HEAP32[$375 >> 2] | 0;
      if (($376 | 0) == (HEAP32[$372 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($372 + -16 | 0, $374); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($376, $374);
       HEAP32[$375 >> 2] = (HEAP32[$375 >> 2] | 0) + 24;
      }
      $$0477 = $$0477 + 1 | 0;
     }
     break;
    }
   case 82:
    {
     $384 = $2 + 4 | 0;
     $388 = ((HEAP32[$384 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $389 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($108, $1, $2) | 0;
     $393 = ((HEAP32[$384 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($389 | 0) == ($108 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$copyload$i537603 = HEAP32[$2 + 12 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i537603;
     $395 = $2 + 20 | 0;
     $396 = HEAP32[$395 >> 2] | 0;
     if ($396 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$396 >> 2] = 0;
      HEAP32[$396 + 4 >> 2] = 0;
      HEAP32[$396 + 8 >> 2] = 0;
      HEAP32[$396 + 12 >> 2] = $$sroa$0$0$copyload$i537603;
      HEAP32[$395 >> 2] = (HEAP32[$395 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($15, $3);
     $405 = $3 + 11 | 0;
     $406 = $3 + 4 | 0;
     $$0444 = $388;
     while (1) {
      if ($$0444 >>> 0 >= $393 >>> 0) {
       $$5 = $389;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) + 12 | 0, 2);
      $410 = __ZNSt3__211char_traitsIcE6lengthEPKc(15041) | 0;
      $411 = HEAP8[$405 >> 0] | 0;
      if (($410 | 0) == (($411 << 24 >> 24 < 0 ? HEAP32[$406 >> 2] | 0 : $411 & 255) | 0)) $$0$i540 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15041, $410) | 0) == 0; else $$0$i540 = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $419 = HEAP32[$2 >> 2] | 0;
      if ($$0$i540) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($419 + ($$0444 * 24 | 0) | 0, 15044) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) + 12 | 0, 0, 15047) | 0;
      } else {
       $423 = $419 + ($$0444 * 24 | 0) + 12 | 0;
       if ((HEAP8[$423 + 11 >> 0] | 0) < 0) $429 = HEAP32[$423 >> 2] | 0; else $429 = $423;
       if ((HEAP8[$429 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($419 + ($$0444 * 24 | 0) | 0, 15049) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) + 12 | 0, 0, 15047) | 0;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) | 0, 15069) | 0;
      $436 = HEAP32[$395 >> 2] | 0;
      $438 = (HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) | 0;
      $439 = $436 + -12 | 0;
      $440 = HEAP32[$439 >> 2] | 0;
      if (($440 | 0) == (HEAP32[$436 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($436 + -16 | 0, $438); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($440, $438);
       HEAP32[$439 >> 2] = (HEAP32[$439 >> 2] | 0) + 24;
      }
      $$0444 = $$0444 + 1 | 0;
     }
     break;
    }
   case 84:
    {
     $448 = $2 + 4 | 0;
     $452 = ((HEAP32[$448 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $453 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     $457 = ((HEAP32[$448 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($453 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$$sroa_idx$i544 = $2 + 12 | 0;
     $$sroa$0$0$copyload$i545601 = HEAP32[$$sroa$0$0$$sroa_idx$i544 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i545601;
     $459 = $2 + 20 | 0;
     $460 = HEAP32[$459 >> 2] | 0;
     $461 = $2 + 24 | 0;
     if ($460 >>> 0 < (HEAP32[$461 >> 2] | 0) >>> 0) {
      HEAP32[$460 >> 2] = 0;
      HEAP32[$460 + 4 >> 2] = 0;
      HEAP32[$460 + 8 >> 2] = 0;
      HEAP32[$460 + 12 >> 2] = $$sroa$0$0$copyload$i545601;
      HEAP32[$459 >> 2] = (HEAP32[$459 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($15, $3);
     $$0438 = $452;
     while (1) {
      if ($$0438 >>> 0 >= $457 >>> 0) break;
      $475 = HEAP32[$459 >> 2] | 0;
      $477 = (HEAP32[$2 >> 2] | 0) + ($$0438 * 24 | 0) | 0;
      $478 = $475 + -12 | 0;
      $479 = HEAP32[$478 >> 2] | 0;
      if (($479 | 0) == (HEAP32[$475 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($475 + -16 | 0, $477); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($479, $477);
       HEAP32[$478 >> 2] = (HEAP32[$478 >> 2] | 0) + 24;
      }
      $$0438 = $$0438 + 1 | 0;
     }
     if (!(($457 | 0) == ($452 + 1 | 0) & (HEAP8[$2 + 63 >> 0] | 0) != 0)) {
      $$5 = $453;
      break L1;
     }
     $487 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($453, $1, $2) | 0;
     if (($487 | 0) == ($453 | 0)) {
      $$5 = $453;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, (HEAP32[$448 >> 2] | 0) + -24 | 0);
     $491 = HEAP32[$448 >> 2] | 0;
     $492 = $491 + -24 | 0;
     $494 = $491;
     while (1) {
      if (($494 | 0) == ($492 | 0)) break;
      $495 = $494 + -24 | 0;
      HEAP32[$448 >> 2] = $495;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($495);
      $494 = HEAP32[$448 >> 2] | 0;
     }
     $498 = HEAP8[$3 + 11 >> 0] | 0;
     $499 = $498 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($491 + -48 | 0, $499 ? HEAP32[$3 >> 2] | 0 : $3, $499 ? HEAP32[$3 + 4 >> 2] | 0 : $498 & 255) | 0;
     $507 = (HEAP32[$448 >> 2] | 0) + -24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i544 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $507, $5);
     $508 = HEAP32[$459 >> 2] | 0;
     if ($508 >>> 0 < (HEAP32[$461 >> 2] | 0) >>> 0) {
      HEAP32[$508 >> 2] = 0;
      $512 = $508 + 4 | 0;
      HEAP32[$512 >> 2] = 0;
      $514 = HEAP32[$4 + 12 >> 2] | 0;
      HEAP32[$508 + 8 >> 2] = 0;
      HEAP32[$508 + 12 >> 2] = $514;
      HEAP32[$508 >> 2] = HEAP32[$4 >> 2];
      $517 = $4 + 4 | 0;
      HEAP32[$512 >> 2] = HEAP32[$517 >> 2];
      $519 = $4 + 8 | 0;
      HEAP32[$508 + 8 >> 2] = HEAP32[$519 >> 2];
      HEAP32[$519 >> 2] = 0;
      HEAP32[$517 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$459 >> 2] = (HEAP32[$459 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $4);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$5 = $487;
     break L1;
     break;
    }
   case 85:
    {
     if (!$109) {
      $$5 = $0;
      break L1;
     }
     $524 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($108, $1, $2) | 0;
     if (($524 | 0) == ($108 | 0)) {
      $$5 = $0;
      break L1;
     }
     $526 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($524, $1, $2) | 0;
     if (($526 | 0) == ($524 | 0)) {
      $$5 = $0;
      break L1;
     }
     $528 = $2 + 4 | 0;
     $529 = HEAP32[$528 >> 2] | 0;
     if ((($529 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$5 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $529 + -24 | 0);
     $536 = HEAP32[$528 >> 2] | 0;
     $537 = $536 + -24 | 0;
     $539 = $536;
     while (1) {
      if (($539 | 0) == ($537 | 0)) break;
      $540 = $539 + -24 | 0;
      HEAP32[$528 >> 2] = $540;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($540);
      $539 = HEAP32[$528 >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($4, $536 + -48 | 0, 9);
     $542 = __ZNSt3__211char_traitsIcE6lengthEPKc(15071) | 0;
     $544 = HEAP8[$4 + 11 >> 0] | 0;
     if (($542 | 0) == (($544 << 24 >> 24 < 0 ? HEAP32[$4 + 4 >> 2] | 0 : $544 & 255) | 0)) {
      $phitmp$i562 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($4, 15071, $542) | 0) == 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      if ($phitmp$i562) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$528 >> 2] | 0) + -24 | 0);
       $570 = HEAP32[$528 >> 2] | 0;
       $571 = $570 + -24 | 0;
       $573 = $570;
       while (1) {
        if (($573 | 0) == ($571 | 0)) break;
        $574 = $573 + -24 | 0;
        HEAP32[$528 >> 2] = $574;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($574);
        $573 = HEAP32[$528 >> 2] | 0;
       }
       $575 = $4 + 11 | 0;
       $576 = HEAP8[$575 >> 0] | 0;
       $577 = $576 << 24 >> 24 < 0;
       $578 = HEAP32[$4 >> 2] | 0;
       $586 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($577 ? $578 + 9 | 0 : $4 + 9 | 0, ($577 ? $578 : $4) + ($577 ? HEAP32[$4 + 4 >> 2] | 0 : $576 & 255) | 0, $2) | 0;
       if (($586 | 0) == (((HEAP8[$575 >> 0] | 0) < 0 ? HEAP32[$4 >> 2] | 0 : $4) + 9 | 0)) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($7, $3, 15081);
        $612 = HEAP8[$575 >> 0] | 0;
        $613 = $612 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $613 ? HEAP32[$4 >> 2] | 0 : $4, $613 ? HEAP32[$4 + 4 >> 2] | 0 : $612 & 255) | 0;
        HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$11 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
        HEAP32[$11 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
        $$0$i$i$i578 = 0;
        while (1) {
         if (($$0$i$i$i578 | 0) == 3) break;
         HEAP32[$7 + ($$0$i$i$i578 << 2) >> 2] = 0;
         $$0$i$i$i578 = $$0$i$i$i578 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $11);
        $623 = HEAP32[$528 >> 2] | 0;
        if ($623 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($623, $5);
         HEAP32[$528 >> 2] = (HEAP32[$528 >> 2] | 0) + 24;
        } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $5);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       } else {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($9, $3, 15083);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($10, (HEAP32[$528 >> 2] | 0) + -24 | 0);
        $596 = HEAP8[$10 + 11 >> 0] | 0;
        $597 = $596 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($9, $597 ? HEAP32[$10 >> 2] | 0 : $10, $597 ? HEAP32[$10 + 4 >> 2] | 0 : $596 & 255) | 0;
        HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
        $$0$i$i$i571 = 0;
        while (1) {
         if (($$0$i$i$i571 | 0) == 3) break;
         HEAP32[$9 + ($$0$i$i$i571 << 2) >> 2] = 0;
         $$0$i$i$i571 = $$0$i$i$i571 + 1 | 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 15085) | 0;
        HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$8 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
        HEAP32[$8 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
        $$0$i$i$i575 = 0;
        while (1) {
         if (($$0$i$i$i575 | 0) == 3) break;
         HEAP32[$7 + ($$0$i$i$i575 << 2) >> 2] = 0;
         $$0$i$i$i575 = $$0$i$i$i575 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $8);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$528 >> 2] | 0) + -24 | 0, $5);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      } else label = 166;
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      label = 166;
     }
     if ((label | 0) == 166) {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($5, $3, 15081);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, (HEAP32[$528 >> 2] | 0) + -24 | 0);
      $555 = HEAP8[$7 + 11 >> 0] | 0;
      $556 = $555 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, $556 ? HEAP32[$7 >> 2] | 0 : $7, $556 ? HEAP32[$7 + 4 >> 2] | 0 : $555 & 255) | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $6);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$528 >> 2] | 0) + -24 | 0, $4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $630 = (HEAP32[$528 >> 2] | 0) + -24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $630, $5);
     $631 = $2 + 20 | 0;
     $632 = HEAP32[$631 >> 2] | 0;
     if ($632 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$632 >> 2] = 0;
      $637 = $632 + 4 | 0;
      HEAP32[$637 >> 2] = 0;
      $639 = HEAP32[$4 + 12 >> 2] | 0;
      HEAP32[$632 + 8 >> 2] = 0;
      HEAP32[$632 + 12 >> 2] = $639;
      HEAP32[$632 >> 2] = HEAP32[$4 >> 2];
      $642 = $4 + 4 | 0;
      HEAP32[$637 >> 2] = HEAP32[$642 >> 2];
      $644 = $4 + 8 | 0;
      HEAP32[$632 + 8 >> 2] = HEAP32[$644 >> 2];
      HEAP32[$644 >> 2] = 0;
      HEAP32[$642 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$631 >> 2] = (HEAP32[$631 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $4);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$5 = $526;
     break L1;
     break;
    }
   case 83:
    {
     if ($109) if ((HEAP8[$108 >> 0] | 0) == 116) {
      $651 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      if (($651 | 0) == ($0 | 0)) {
       $$5 = $0;
       break L1;
      }
      $655 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($655 | 0)) {
       $$5 = $0;
       break L1;
      }
      HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $655 + -24 | 0, $4);
      $658 = $2 + 20 | 0;
      $659 = HEAP32[$658 >> 2] | 0;
      if ($659 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
       HEAP32[$659 >> 2] = 0;
       $664 = $659 + 4 | 0;
       HEAP32[$664 >> 2] = 0;
       $666 = HEAP32[$3 + 12 >> 2] | 0;
       HEAP32[$659 + 8 >> 2] = 0;
       HEAP32[$659 + 12 >> 2] = $666;
       HEAP32[$659 >> 2] = HEAP32[$3 >> 2];
       $669 = $3 + 4 | 0;
       HEAP32[$664 >> 2] = HEAP32[$669 >> 2];
       $671 = $3 + 8 | 0;
       HEAP32[$659 + 8 >> 2] = HEAP32[$671 >> 2];
       HEAP32[$671 >> 2] = 0;
       HEAP32[$669 >> 2] = 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$658 >> 2] = (HEAP32[$658 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $3);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$5 = $651;
      break L1;
     }
     $676 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($676 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $678 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($676, $1, $2) | 0;
     if (($678 | 0) == ($676 | 0)) {
      $$5 = $676;
      break L1;
     }
     $680 = $2 + 4 | 0;
     $681 = HEAP32[$680 >> 2] | 0;
     if ((($681 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$5 = $676;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $681 + -24 | 0);
     $688 = HEAP32[$680 >> 2] | 0;
     $689 = $688 + -24 | 0;
     $691 = $688;
     while (1) {
      if (($691 | 0) == ($689 | 0)) break;
      $692 = $691 + -24 | 0;
      HEAP32[$680 >> 2] = $692;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($692);
      $691 = HEAP32[$680 >> 2] | 0;
     }
     $695 = HEAP8[$3 + 11 >> 0] | 0;
     $696 = $695 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($688 + -48 | 0, $696 ? HEAP32[$3 >> 2] | 0 : $3, $696 ? HEAP32[$3 + 4 >> 2] | 0 : $695 & 255) | 0;
     $704 = (HEAP32[$680 >> 2] | 0) + -24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $704, $5);
     $705 = $2 + 20 | 0;
     $706 = HEAP32[$705 >> 2] | 0;
     if ($706 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$706 >> 2] = 0;
      $711 = $706 + 4 | 0;
      HEAP32[$711 >> 2] = 0;
      $713 = HEAP32[$4 + 12 >> 2] | 0;
      HEAP32[$706 + 8 >> 2] = 0;
      HEAP32[$706 + 12 >> 2] = $713;
      HEAP32[$706 >> 2] = HEAP32[$4 >> 2];
      $716 = $4 + 4 | 0;
      HEAP32[$711 >> 2] = HEAP32[$716 >> 2];
      $718 = $4 + 8 | 0;
      HEAP32[$706 + 8 >> 2] = HEAP32[$718 >> 2];
      HEAP32[$718 >> 2] = 0;
      HEAP32[$716 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$705 >> 2] = (HEAP32[$705 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $4);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$5 = $678;
     break L1;
     break;
    }
   case 68:
    {
     if ($109) switch (HEAP8[$108 >> 0] | 0) {
     case 112:
      {
       $725 = $2 + 4 | 0;
       $729 = ((HEAP32[$725 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       $730 = $0 + 2 | 0;
       $731 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($730, $1, $2) | 0;
       $735 = ((HEAP32[$725 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       if (($731 | 0) == ($730 | 0)) break L58;
       $$sroa$0$0$copyload$i489597 = HEAP32[$2 + 12 >> 2] | 0;
       HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i489597;
       $737 = $2 + 20 | 0;
       $738 = HEAP32[$737 >> 2] | 0;
       if ($738 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
        HEAP32[$738 >> 2] = 0;
        HEAP32[$738 + 4 >> 2] = 0;
        HEAP32[$738 + 8 >> 2] = 0;
        HEAP32[$738 + 12 >> 2] = $$sroa$0$0$copyload$i489597;
        HEAP32[$737 >> 2] = (HEAP32[$737 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($15, $3);
       $$0 = $729;
       while (1) {
        if ($$0 >>> 0 >= $735 >>> 0) {
         $$5 = $731;
         break L1;
        }
        $748 = HEAP32[$737 >> 2] | 0;
        $750 = (HEAP32[$2 >> 2] | 0) + ($$0 * 24 | 0) | 0;
        $751 = $748 + -12 | 0;
        $752 = HEAP32[$751 >> 2] | 0;
        if (($752 | 0) == (HEAP32[$748 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($748 + -16 | 0, $750); else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($752, $750);
         HEAP32[$751 >> 2] = (HEAP32[$751 >> 2] | 0) + 24;
        }
        $$0 = $$0 + 1 | 0;
       }
       break;
      }
     case 84:
     case 116:
      {
       $760 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
       if (($760 | 0) == ($0 | 0)) break L58;
       $764 = HEAP32[$2 + 4 >> 2] | 0;
       if ((HEAP32[$2 >> 2] | 0) == ($764 | 0)) {
        $$5 = $0;
        break L1;
       }
       HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $764 + -24 | 0, $4);
       $767 = $2 + 20 | 0;
       $768 = HEAP32[$767 >> 2] | 0;
       if ($768 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
        HEAP32[$768 >> 2] = 0;
        $773 = $768 + 4 | 0;
        HEAP32[$773 >> 2] = 0;
        $775 = HEAP32[$3 + 12 >> 2] | 0;
        HEAP32[$768 + 8 >> 2] = 0;
        HEAP32[$768 + 12 >> 2] = $775;
        HEAP32[$768 >> 2] = HEAP32[$3 >> 2];
        $778 = $3 + 4 | 0;
        HEAP32[$773 >> 2] = HEAP32[$778 >> 2];
        $780 = $3 + 8 | 0;
        HEAP32[$768 + 8 >> 2] = HEAP32[$780 >> 2];
        HEAP32[$780 >> 2] = 0;
        HEAP32[$778 >> 2] = 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$767 >> 2] = (HEAP32[$767 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $3);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
       $$5 = $760;
       break L1;
       break;
      }
     case 118:
      {
       $785 = __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
       if (($785 | 0) == ($0 | 0)) break L58;
       $789 = HEAP32[$2 + 4 >> 2] | 0;
       if ((HEAP32[$2 >> 2] | 0) == ($789 | 0)) {
        $$5 = $0;
        break L1;
       }
       HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $789 + -24 | 0, $4);
       $792 = $2 + 20 | 0;
       $793 = HEAP32[$792 >> 2] | 0;
       if ($793 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
        HEAP32[$793 >> 2] = 0;
        $798 = $793 + 4 | 0;
        HEAP32[$798 >> 2] = 0;
        $800 = HEAP32[$3 + 12 >> 2] | 0;
        HEAP32[$793 + 8 >> 2] = 0;
        HEAP32[$793 + 12 >> 2] = $800;
        HEAP32[$793 >> 2] = HEAP32[$3 >> 2];
        $803 = $3 + 4 | 0;
        HEAP32[$798 >> 2] = HEAP32[$803 >> 2];
        $805 = $3 + 8 | 0;
        HEAP32[$793 + 8 >> 2] = HEAP32[$805 >> 2];
        HEAP32[$805 >> 2] = 0;
        HEAP32[$803 >> 2] = 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$792 >> 2] = (HEAP32[$792 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $3);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
       $$5 = $785;
       break L1;
       break;
      }
     default:
      break L58;
     }
     break;
    }
   default:
    {}
   } while (0);
   $810 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($810 | 0) == ($0 | 0)) {
    $812 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    if (($812 | 0) == ($0 | 0)) $$5 = $0; else {
     $816 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($816 | 0)) $$5 = $0; else {
      HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $816 + -24 | 0, $4);
      $819 = $2 + 20 | 0;
      $820 = HEAP32[$819 >> 2] | 0;
      if ($820 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
       HEAP32[$820 >> 2] = 0;
       $825 = $820 + 4 | 0;
       HEAP32[$825 >> 2] = 0;
       $827 = HEAP32[$3 + 12 >> 2] | 0;
       HEAP32[$820 + 8 >> 2] = 0;
       HEAP32[$820 + 12 >> 2] = $827;
       HEAP32[$820 >> 2] = HEAP32[$3 >> 2];
       $830 = $3 + 4 | 0;
       HEAP32[$825 >> 2] = HEAP32[$830 >> 2];
       $832 = $3 + 8 | 0;
       HEAP32[$820 + 8 >> 2] = HEAP32[$832 >> 2];
       HEAP32[$832 >> 2] = 0;
       HEAP32[$830 >> 2] = 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$819 >> 2] = (HEAP32[$819 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($15, $3);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$5 = $812;
     }
    }
   } else $$5 = $810;
  } else $$5 = $104;
 } while (0);
 STACKTOP = sp;
 return $$5 | 0;
}

function _arPattGetImage2($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = +$10;
 $11 = $11 | 0;
 var $$$21466 = 0, $$0 = 0, $$01442 = 0, $$01443 = 0, $$01464 = 0, $$01468 = 0, $$01474 = 0, $$01495 = 0, $$1 = 0, $$10 = 0, $$101453 = 0, $$101484 = 0, $$101505 = 0, $$11 = 0, $$111454 = 0, $$111485 = 0, $$111506 = 0, $$11444 = 0, $$11465 = 0, $$11469 = 0, $$11475 = 0, $$11496 = 0, $$12 = 0, $$121455 = 0, $$121486 = 0, $$121507 = 0, $$13 = 0, $$131456 = 0, $$131487 = 0, $$131508 = 0, $$14 = 0, $$141457 = 0, $$141488 = 0, $$141509 = 0, $$15 = 0, $$151458 = 0, $$151489 = 0, $$151510 = 0, $$16 = 0, $$161459 = 0, $$161490 = 0, $$161511 = 0, $$17 = 0, $$171460 = 0, $$171491 = 0, $$171512 = 0, $$18 = 0, $$181461 = 0, $$181492 = 0, $$181513 = 0, $$19 = 0, $$191462 = 0, $$191493 = 0, $$191514 = 0, $$2 = 0, $$20 = 0, $$201463 = 0, $$201494 = 0, $$201515 = 0, $$21 = 0, $$21445 = 0, $$21466 = 0, $$21470 = 0, $$21476 = 0, $$21497 = 0, $$22 = 0, $$23 = 0, $$3 = 0, $$31446 = 0, $$31471 = 0, $$31477 = 0, $$31498 = 0, $$4 = 0, $$41447 = 0, $$41478 = 0, $$41499 = 0, $$5 = 0, $$51448 = 0, $$51479 = 0, $$51500 = 0, $$6 = 0, $$61449 = 0, $$61480 = 0, $$61501 = 0, $$7 = 0, $$71450 = 0, $$71481 = 0, $$71502 = 0, $$8 = 0, $$81451 = 0, $$81482 = 0, $$81503 = 0, $$9 = 0, $$91452 = 0, $$91483 = 0, $$91504 = 0, $1003 = 0.0, $101 = 0, $1010 = 0.0, $102 = 0, $1020 = 0.0, $1029 = 0.0, $1030 = 0.0, $1031 = 0.0, $1050 = 0, $1053 = 0, $106 = 0.0, $1061 = 0, $1062 = 0, $1066 = 0, $1075 = 0, $108 = 0, $1082 = 0, $1087 = 0, $109 = 0, $1093 = 0.0, $1099 = 0.0, $110 = 0, $1106 = 0.0, $111 = 0, $1116 = 0.0, $112 = 0.0, $1125 = 0.0, $1126 = 0.0, $1127 = 0.0, $113 = 0, $114 = 0, $1146 = 0, $1149 = 0, $115 = 0.0, $1157 = 0, $1158 = 0, $116 = 0, $1162 = 0, $117 = 0, $1171 = 0, $1178 = 0, $118 = 0, $1183 = 0, $1189 = 0.0, $119 = 0, $1195 = 0.0, $12 = 0, $120 = 0, $1202 = 0.0, $121 = 0, $1212 = 0.0, $122 = 0.0, $1221 = 0.0, $1222 = 0.0, $1223 = 0.0, $123 = 0, $124 = 0, $1242 = 0, $125 = 0, $1253 = 0, $1254 = 0, $1258 = 0, $126 = 0, $1263 = 0, $127 = 0, $1270 = 0, $1282 = 0, $1285 = 0, $1286 = 0, $129 = 0, $1292 = 0.0, $1298 = 0.0, $13 = 0, $130 = 0, $1305 = 0.0, $131 = 0, $1315 = 0.0, $132 = 0, $1324 = 0.0, $1325 = 0.0, $1326 = 0.0, $133 = 0, $134 = 0, $1345 = 0, $135 = 0, $1364 = 0, $1374 = 0.0, $1380 = 0.0, $1387 = 0.0, $1397 = 0.0, $14 = 0, $1406 = 0.0, $1407 = 0.0, $1408 = 0.0, $141 = 0.0, $1427 = 0, $1446 = 0, $1453 = 0, $1459 = 0.0, $1465 = 0.0, $147 = 0.0, $1472 = 0.0, $1482 = 0.0, $1491 = 0.0, $1492 = 0.0, $1493 = 0.0, $15 = 0, $1512 = 0, $1532 = 0, $1537 = 0, $154 = 0.0, $1543 = 0.0, $1549 = 0.0, $1556 = 0.0, $1566 = 0.0, $1575 = 0.0, $1576 = 0.0, $1577 = 0.0, $1596 = 0, $16 = 0, $1603 = 0, $1608 = 0, $1614 = 0.0, $1620 = 0.0, $1627 = 0.0, $1637 = 0.0, $164 = 0.0, $1646 = 0.0, $1647 = 0.0, $1648 = 0.0, $1669 = 0, $1676 = 0, $1681 = 0, $1687 = 0.0, $1693 = 0.0, $1700 = 0.0, $1710 = 0.0, $1719 = 0.0, $1720 = 0.0, $1721 = 0.0, $173 = 0.0, $174 = 0.0, $1741 = 0, $1748 = 0, $175 = 0.0, $1753 = 0, $1759 = 0.0, $1765 = 0.0, $1772 = 0.0, $1782 = 0.0, $1791 = 0.0, $1792 = 0.0, $1793 = 0.0, $1812 = 0, $1815 = 0, $1823 = 0, $1838 = 0, $1843 = 0, $1849 = 0.0, $1855 = 0.0, $1862 = 0.0, $1872 = 0.0, $1881 = 0.0, $1882 = 0.0, $1883 = 0.0, $1902 = 0, $1905 = 0, $1913 = 0, $1928 = 0, $1933 = 0, $1939 = 0.0, $194 = 0, $1945 = 0.0, $1952 = 0.0, $1962 = 0.0, $1971 = 0.0, $1972 = 0.0, $1973 = 0.0, $1992 = 0, $1995 = 0, $2014 = 0, $2026 = 0, $203 = 0, $204 = 0, $212 = 0, $219 = 0, $229 = 0.0, $235 = 0.0, $242 = 0.0, $252 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $282 = 0, $290 = 0, $291 = 0, $299 = 0, $307 = 0, $31 = 0.0, $317 = 0.0, $323 = 0.0, $33 = 0.0, $330 = 0.0, $34 = 0.0, $340 = 0.0, $349 = 0.0, $350 = 0.0, $351 = 0.0, $37 = 0.0, $370 = 0, $379 = 0, $380 = 0, $388 = 0, $39 = 0.0, $395 = 0, $40 = 0.0, $405 = 0.0, $411 = 0.0, $418 = 0.0, $428 = 0.0, $43 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $45 = 0.0, $458 = 0, $466 = 0, $467 = 0, $47 = 0.0, $475 = 0, $48 = 0.0, $483 = 0, $493 = 0.0, $499 = 0.0, $506 = 0.0, $51 = 0.0, $516 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $53 = 0.0, $54 = 0.0, $546 = 0, $555 = 0, $556 = 0, $564 = 0, $57 = 0, $572 = 0, $58 = 0.0, $582 = 0.0, $588 = 0.0, $595 = 0.0, $60 = 0.0, $605 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $63 = 0, $635 = 0, $637 = 0, $64 = 0.0, $642 = 0, $643 = 0, $647 = 0, $651 = 0, $66 = 0.0, $661 = 0.0, $667 = 0.0, $674 = 0.0, $684 = 0.0, $69 = 0, $693 = 0.0, $694 = 0.0, $695 = 0.0, $714 = 0, $723 = 0, $724 = 0, $732 = 0, $740 = 0, $745 = 0, $75 = 0, $751 = 0.0, $757 = 0.0, $764 = 0.0, $774 = 0.0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $79 = 0, $802 = 0, $805 = 0, $810 = 0.0, $824 = 0.0, $825 = 0.0, $829 = 0, $835 = 0, $839 = 0, $841 = 0, $847 = 0, $848 = 0, $852 = 0, $856 = 0, $860 = 0, $863 = 0, $868 = 0, $874 = 0.0, $880 = 0.0, $887 = 0.0, $897 = 0.0, $906 = 0.0, $907 = 0.0, $908 = 0.0, $925 = 0, $935 = 0, $941 = 0.0, $947 = 0.0, $948 = 0.0, $952 = 0, $958 = 0, $962 = 0, $964 = 0, $970 = 0, $971 = 0, $975 = 0, $979 = 0, $983 = 0, $986 = 0, $991 = 0, $997 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $vararg_buffer5 = sp + 224 | 0;
 $vararg_buffer3 = sp + 216 | 0;
 $vararg_buffer1 = sp + 208 | 0;
 $vararg_buffer = sp + 200 | 0;
 $12 = sp + 136 | 0;
 $13 = sp + 72 | 0;
 $14 = sp;
 $15 = sp + 232 | 0;
 $16 = sp + 228 | 0;
 HEAPF64[$12 >> 3] = 100.0;
 HEAPF64[$12 + 8 >> 3] = 100.0;
 HEAPF64[$12 + 16 >> 3] = 110.0;
 HEAPF64[$12 + 24 >> 3] = 100.0;
 HEAPF64[$12 + 32 >> 3] = 110.0;
 HEAPF64[$12 + 40 >> 3] = 110.0;
 HEAPF64[$12 + 48 >> 3] = 100.0;
 HEAPF64[$12 + 56 >> 3] = 110.0;
 $$01474 = 0;
 while (1) {
  if (($$01474 | 0) == 4) break;
  HEAPF64[$13 + ($$01474 << 4) >> 3] = +HEAPF64[$9 + ($$01474 << 4) >> 3];
  HEAPF64[$13 + ($$01474 << 4) + 8 >> 3] = +HEAPF64[$9 + ($$01474 << 4) + 8 >> 3];
  $$01474 = $$01474 + 1 | 0;
 }
 _get_cpara($12, $13, $14);
 $31 = +HEAPF64[$13 >> 3];
 $33 = +HEAPF64[$13 + 16 >> 3];
 $34 = $31 - $33;
 $37 = +HEAPF64[$13 + 8 >> 3];
 $39 = +HEAPF64[$13 + 24 >> 3];
 $40 = $37 - $39;
 $43 = ~~($34 * $34 + $40 * $40);
 $45 = +HEAPF64[$13 + 32 >> 3];
 $47 = +HEAPF64[$13 + 48 >> 3];
 $48 = $45 - $47;
 $51 = +HEAPF64[$13 + 40 >> 3];
 $53 = +HEAPF64[$13 + 56 >> 3];
 $54 = $51 - $53;
 $57 = ~~($48 * $48 + $54 * $54);
 $58 = $33 - $45;
 $60 = $39 - $51;
 $63 = ~~($58 * $58 + $60 * $60);
 $64 = $47 - $31;
 $66 = $53 - $37;
 $69 = ~~($64 * $64 + $66 * $66);
 $75 = ~~(+((($57 | 0) > ($43 | 0) ? $57 : $43) | 0) * $10 * $10);
 $79 = ~~(+((($69 | 0) > ($63 | 0) ? $69 : $63) | 0) * $10 * $10);
 if (!$0) {
  $$01464 = $2;
  while (1) if (($$01464 | 0) < ($3 | 0) & (Math_imul($$01464, $$01464) | 0) < ($75 | 0)) $$01464 = $$01464 << 1; else {
   $$01468 = $2;
   break;
  }
  while (1) if (($$01468 | 0) < ($3 | 0) & (Math_imul($$01468, $$01468) | 0) < ($79 | 0)) $$01468 = $$01468 << 1; else {
   $$21466 = $$01464;
   $$21470 = $$01468;
   break;
  }
 } else {
  $$11465 = $2;
  while (1) if (($$11465 | 0) < ($3 | 0) & (Math_imul($$11465 << 2, $$11465) | 0) < ($75 | 0)) $$11465 = $$11465 << 1; else {
   $$11469 = $2;
   break;
  }
  while (1) if (($$11469 | 0) < ($3 | 0) & (Math_imul($$11469 << 2, $$11469) | 0) < ($79 | 0)) $$11469 = $$11469 << 1; else {
   $$21466 = $$11465;
   $$21470 = $$11469;
   break;
  }
 }
 $$$21466 = ($$21466 | 0) > ($3 | 0) ? $3 : $$21466;
 $$31471 = ($$21470 | 0) > ($3 | 0) ? $3 : $$21470;
 $101 = ($$$21466 | 0) / ($2 | 0) | 0;
 $102 = ($$31471 | 0) / ($2 | 0) | 0;
 $106 = $10 * 10.0;
 $108 = Math_imul($2, $2) | 0;
 $109 = $14 + 16 | 0;
 $110 = ($7 | 0) == 7;
 $111 = ($7 | 0) == 9;
 $112 = +($$31471 | 0);
 $113 = Math_imul($102, $101) | 0;
 $114 = ($7 | 0) == 8;
 $115 = (1.0 - $10) * .5 * 10.0 + 100.0;
 $116 = $14 + 8 | 0;
 $117 = ($7 | 0) == 10;
 $118 = $14 + 40 | 0;
 $119 = $14 + 56 | 0;
 $120 = $14 + 64 | 0;
 $121 = ($7 | 0) == 11;
 $122 = +($$$21466 | 0);
 $123 = $14 + 32 | 0;
 $124 = $14 + 24 | 0;
 $125 = $14 + 48 | 0;
 L15 : do if (!$1) {
  $126 = $108 * 3 | 0;
  $127 = _calloc($126, 4) | 0;
  if (!$127) {
   _arLog(3, 4787, $vararg_buffer);
   _exit(1);
  }
  L20 : do switch ($7 | 0) {
  case 0:
   {
    $135 = ($0 | 0) == 1;
    $$01495 = 0;
    while (1) {
     if (($$01495 | 0) >= ($$31471 | 0)) {
      $$131487 = 0;
      break L20;
     }
     $141 = $115 + $106 * (+($$01495 | 0) + .5) / $112;
     $$11475 = 0;
     while (1) {
      if (($$11475 | 0) >= ($$$21466 | 0)) break;
      $147 = $115 + $106 * (+($$11475 | 0) + .5) / $122;
      $154 = +HEAPF64[$120 >> 3] + ($147 * +HEAPF64[$125 >> 3] + $141 * +HEAPF64[$119 >> 3]);
      if ($154 == 0.0) {
       $2026 = $127;
       label = 309;
       break L15;
      }
      $164 = (+HEAPF64[$109 >> 3] + ($147 * +HEAPF64[$14 >> 3] + $141 * +HEAPF64[$116 >> 3])) / $154;
      HEAPF32[$15 >> 2] = $164;
      $173 = (+HEAPF64[$118 >> 3] + ($147 * +HEAPF64[$124 >> 3] + $141 * +HEAPF64[$123 >> 3])) / $154;
      HEAPF32[$16 >> 2] = $173;
      _arParamIdeal2ObservLTf($8, $164, $173, $15, $16) | 0;
      $174 = +HEAPF32[$15 >> 2];
      $175 = +HEAPF32[$16 >> 2];
      if ($135) {
       $$01442 = ((~~($174 + 1.0) | 0) / 2 | 0) << 1;
       $$01443 = ((~~($175 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$01442 = ~~($174 + .5);
       $$01443 = ~~($175 + .5);
      }
      if (($$01442 | 0) > -1) if (($$01443 | 0) < ($6 | 0) & (($$01443 | 0) > -1 & ($$01442 | 0) < ($5 | 0))) {
       $194 = ((Math_imul($$01443, $5) | 0) + $$01442 | 0) * 3 | 0;
       $203 = ((Math_imul(($$01495 | 0) / ($102 | 0) | 0, $2) | 0) + (($$11475 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $204 = $127 + ($203 << 2) | 0;
       HEAP32[$204 >> 2] = (HEAP32[$204 >> 2] | 0) + (HEAPU8[$4 + ($194 + 2) >> 0] | 0);
       $212 = $127 + ($203 + 1 << 2) | 0;
       HEAP32[$212 >> 2] = (HEAP32[$212 >> 2] | 0) + (HEAPU8[$4 + ($194 + 1) >> 0] | 0);
       $219 = $127 + ($203 + 2 << 2) | 0;
       HEAP32[$219 >> 2] = (HEAP32[$219 >> 2] | 0) + (HEAPU8[$4 + $194 >> 0] | 0);
      }
      $$11475 = $$11475 + 1 | 0;
     }
     $$01495 = $$01495 + 1 | 0;
    }
    break;
   }
  case 1:
   {
    $134 = ($0 | 0) == 1;
    $$11496 = 0;
    while (1) {
     if (($$11496 | 0) >= ($$31471 | 0)) {
      $$131487 = 0;
      break L20;
     }
     $229 = $115 + $106 * (+($$11496 | 0) + .5) / $112;
     $$21476 = 0;
     while (1) {
      if (($$21476 | 0) >= ($$$21466 | 0)) break;
      $235 = $115 + $106 * (+($$21476 | 0) + .5) / $122;
      $242 = +HEAPF64[$120 >> 3] + ($235 * +HEAPF64[$125 >> 3] + $229 * +HEAPF64[$119 >> 3]);
      if ($242 == 0.0) {
       $2026 = $127;
       label = 309;
       break L15;
      }
      $252 = (+HEAPF64[$109 >> 3] + ($235 * +HEAPF64[$14 >> 3] + $229 * +HEAPF64[$116 >> 3])) / $242;
      HEAPF32[$15 >> 2] = $252;
      $261 = (+HEAPF64[$118 >> 3] + ($235 * +HEAPF64[$124 >> 3] + $229 * +HEAPF64[$123 >> 3])) / $242;
      HEAPF32[$16 >> 2] = $261;
      _arParamIdeal2ObservLTf($8, $252, $261, $15, $16) | 0;
      $262 = +HEAPF32[$15 >> 2];
      $263 = +HEAPF32[$16 >> 2];
      if ($134) {
       $$1 = ((~~($262 + 1.0) | 0) / 2 | 0) << 1;
       $$11444 = ((~~($263 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$1 = ~~($262 + .5);
       $$11444 = ~~($263 + .5);
      }
      if (($$1 | 0) > -1) if (($$11444 | 0) < ($6 | 0) & (($$11444 | 0) > -1 & ($$1 | 0) < ($5 | 0))) {
       $282 = ((Math_imul($$11444, $5) | 0) + $$1 | 0) * 3 | 0;
       $290 = ((Math_imul(($$11496 | 0) / ($102 | 0) | 0, $2) | 0) + (($$21476 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $291 = $127 + ($290 << 2) | 0;
       HEAP32[$291 >> 2] = (HEAP32[$291 >> 2] | 0) + (HEAPU8[$4 + $282 >> 0] | 0);
       $299 = $127 + ($290 + 1 << 2) | 0;
       HEAP32[$299 >> 2] = (HEAP32[$299 >> 2] | 0) + (HEAPU8[$4 + ($282 + 1) >> 0] | 0);
       $307 = $127 + ($290 + 2 << 2) | 0;
       HEAP32[$307 >> 2] = (HEAP32[$307 >> 2] | 0) + (HEAPU8[$4 + ($282 + 2) >> 0] | 0);
      }
      $$21476 = $$21476 + 1 | 0;
     }
     $$11496 = $$11496 + 1 | 0;
    }
    break;
   }
  case 2:
   {
    $133 = ($0 | 0) == 1;
    $$21497 = 0;
    while (1) {
     if (($$21497 | 0) >= ($$31471 | 0)) {
      $$131487 = 0;
      break L20;
     }
     $317 = $115 + $106 * (+($$21497 | 0) + .5) / $112;
     $$31477 = 0;
     while (1) {
      if (($$31477 | 0) >= ($$$21466 | 0)) break;
      $323 = $115 + $106 * (+($$31477 | 0) + .5) / $122;
      $330 = +HEAPF64[$120 >> 3] + ($323 * +HEAPF64[$125 >> 3] + $317 * +HEAPF64[$119 >> 3]);
      if ($330 == 0.0) {
       $2026 = $127;
       label = 309;
       break L15;
      }
      $340 = (+HEAPF64[$109 >> 3] + ($323 * +HEAPF64[$14 >> 3] + $317 * +HEAPF64[$116 >> 3])) / $330;
      HEAPF32[$15 >> 2] = $340;
      $349 = (+HEAPF64[$118 >> 3] + ($323 * +HEAPF64[$124 >> 3] + $317 * +HEAPF64[$123 >> 3])) / $330;
      HEAPF32[$16 >> 2] = $349;
      _arParamIdeal2ObservLTf($8, $340, $349, $15, $16) | 0;
      $350 = +HEAPF32[$15 >> 2];
      $351 = +HEAPF32[$16 >> 2];
      if ($133) {
       $$2 = ((~~($350 + 1.0) | 0) / 2 | 0) << 1;
       $$21445 = ((~~($351 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$2 = ~~($350 + .5);
       $$21445 = ~~($351 + .5);
      }
      if (($$2 | 0) > -1) if (($$21445 | 0) < ($6 | 0) & (($$21445 | 0) > -1 & ($$2 | 0) < ($5 | 0))) {
       $370 = (Math_imul($$21445, $5) | 0) + $$2 << 2;
       $379 = ((Math_imul(($$21497 | 0) / ($102 | 0) | 0, $2) | 0) + (($$31477 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $380 = $127 + ($379 << 2) | 0;
       HEAP32[$380 >> 2] = (HEAP32[$380 >> 2] | 0) + (HEAPU8[$4 + ($370 | 2) >> 0] | 0);
       $388 = $127 + ($379 + 1 << 2) | 0;
       HEAP32[$388 >> 2] = (HEAP32[$388 >> 2] | 0) + (HEAPU8[$4 + ($370 | 1) >> 0] | 0);
       $395 = $127 + ($379 + 2 << 2) | 0;
       HEAP32[$395 >> 2] = (HEAP32[$395 >> 2] | 0) + (HEAPU8[$4 + $370 >> 0] | 0);
      }
      $$31477 = $$31477 + 1 | 0;
     }
     $$21497 = $$21497 + 1 | 0;
    }
    break;
   }
  case 3:
   {
    $132 = ($0 | 0) == 1;
    $$31498 = 0;
    while (1) {
     if (($$31498 | 0) >= ($$31471 | 0)) {
      $$131487 = 0;
      break L20;
     }
     $405 = $115 + $106 * (+($$31498 | 0) + .5) / $112;
     $$41478 = 0;
     while (1) {
      if (($$41478 | 0) >= ($$$21466 | 0)) break;
      $411 = $115 + $106 * (+($$41478 | 0) + .5) / $122;
      $418 = +HEAPF64[$120 >> 3] + ($411 * +HEAPF64[$125 >> 3] + $405 * +HEAPF64[$119 >> 3]);
      if ($418 == 0.0) {
       $2026 = $127;
       label = 309;
       break L15;
      }
      $428 = (+HEAPF64[$109 >> 3] + ($411 * +HEAPF64[$14 >> 3] + $405 * +HEAPF64[$116 >> 3])) / $418;
      HEAPF32[$15 >> 2] = $428;
      $437 = (+HEAPF64[$118 >> 3] + ($411 * +HEAPF64[$124 >> 3] + $405 * +HEAPF64[$123 >> 3])) / $418;
      HEAPF32[$16 >> 2] = $437;
      _arParamIdeal2ObservLTf($8, $428, $437, $15, $16) | 0;
      $438 = +HEAPF32[$15 >> 2];
      $439 = +HEAPF32[$16 >> 2];
      if ($132) {
       $$3 = ((~~($438 + 1.0) | 0) / 2 | 0) << 1;
       $$31446 = ((~~($439 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$3 = ~~($438 + .5);
       $$31446 = ~~($439 + .5);
      }
      if (($$3 | 0) > -1) if (($$31446 | 0) < ($6 | 0) & (($$31446 | 0) > -1 & ($$3 | 0) < ($5 | 0))) {
       $458 = (Math_imul($$31446, $5) | 0) + $$3 << 2;
       $466 = ((Math_imul(($$31498 | 0) / ($102 | 0) | 0, $2) | 0) + (($$41478 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $467 = $127 + ($466 << 2) | 0;
       HEAP32[$467 >> 2] = (HEAP32[$467 >> 2] | 0) + (HEAPU8[$4 + $458 >> 0] | 0);
       $475 = $127 + ($466 + 1 << 2) | 0;
       HEAP32[$475 >> 2] = (HEAP32[$475 >> 2] | 0) + (HEAPU8[$4 + ($458 | 1) >> 0] | 0);
       $483 = $127 + ($466 + 2 << 2) | 0;
       HEAP32[$483 >> 2] = (HEAP32[$483 >> 2] | 0) + (HEAPU8[$4 + ($458 | 2) >> 0] | 0);
      }
      $$41478 = $$41478 + 1 | 0;
     }
     $$31498 = $$31498 + 1 | 0;
    }
    break;
   }
  case 4:
   {
    $131 = ($0 | 0) == 1;
    $$41499 = 0;
    while (1) {
     if (($$41499 | 0) >= ($$31471 | 0)) {
      $$131487 = 0;
      break L20;
     }
     $493 = $115 + $106 * (+($$41499 | 0) + .5) / $112;
     $$51479 = 0;
     while (1) {
      if (($$51479 | 0) >= ($$$21466 | 0)) break;
      $499 = $115 + $106 * (+($$51479 | 0) + .5) / $122;
      $506 = +HEAPF64[$120 >> 3] + ($499 * +HEAPF64[$125 >> 3] + $493 * +HEAPF64[$119 >> 3]);
      if ($506 == 0.0) {
       $2026 = $127;
       label = 309;
       break L15;
      }
      $516 = (+HEAPF64[$109 >> 3] + ($499 * +HEAPF64[$14 >> 3] + $493 * +HEAPF64[$116 >> 3])) / $506;
      HEAPF32[$15 >> 2] = $516;
      $525 = (+HEAPF64[$118 >> 3] + ($499 * +HEAPF64[$124 >> 3] + $493 * +HEAPF64[$123 >> 3])) / $506;
      HEAPF32[$16 >> 2] = $525;
      _arParamIdeal2ObservLTf($8, $516, $525, $15, $16) | 0;
      $526 = +HEAPF32[$15 >> 2];
      $527 = +HEAPF32[$16 >> 2];
      if ($131) {
       $$4 = ((~~($526 + 1.0) | 0) / 2 | 0) << 1;
       $$41447 = ((~~($527 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$4 = ~~($526 + .5);
       $$41447 = ~~($527 + .5);
      }
      if (($$4 | 0) > -1) if (($$41447 | 0) < ($6 | 0) & (($$41447 | 0) > -1 & ($$4 | 0) < ($5 | 0))) {
       $546 = (Math_imul($$41447, $5) | 0) + $$4 << 2;
       $555 = ((Math_imul(($$41499 | 0) / ($102 | 0) | 0, $2) | 0) + (($$51479 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $556 = $127 + ($555 << 2) | 0;
       HEAP32[$556 >> 2] = (HEAP32[$556 >> 2] | 0) + (HEAPU8[$4 + ($546 | 1) >> 0] | 0);
       $564 = $127 + ($555 + 1 << 2) | 0;
       HEAP32[$564 >> 2] = (HEAP32[$564 >> 2] | 0) + (HEAPU8[$4 + ($546 | 2) >> 0] | 0);
       $572 = $127 + ($555 + 2 << 2) | 0;
       HEAP32[$572 >> 2] = (HEAP32[$572 >> 2] | 0) + (HEAPU8[$4 + ($546 | 3) >> 0] | 0);
      }
      $$51479 = $$51479 + 1 | 0;
     }
     $$41499 = $$41499 + 1 | 0;
    }
    break;
   }
  case 5:
  case 12:
  case 13:
  case 14:
   {
    $130 = ($0 | 0) == 1;
    $$51500 = 0;
    while (1) {
     if (($$51500 | 0) >= ($$31471 | 0)) {
      $$131487 = 0;
      break L20;
     }
     $582 = $115 + $106 * (+($$51500 | 0) + .5) / $112;
     $$61480 = 0;
     while (1) {
      if (($$61480 | 0) >= ($$$21466 | 0)) break;
      $588 = $115 + $106 * (+($$61480 | 0) + .5) / $122;
      $595 = +HEAPF64[$120 >> 3] + ($588 * +HEAPF64[$125 >> 3] + $582 * +HEAPF64[$119 >> 3]);
      if ($595 == 0.0) {
       $2026 = $127;
       label = 309;
       break L15;
      }
      $605 = (+HEAPF64[$109 >> 3] + ($588 * +HEAPF64[$14 >> 3] + $582 * +HEAPF64[$116 >> 3])) / $595;
      HEAPF32[$15 >> 2] = $605;
      $614 = (+HEAPF64[$118 >> 3] + ($588 * +HEAPF64[$124 >> 3] + $582 * +HEAPF64[$123 >> 3])) / $595;
      HEAPF32[$16 >> 2] = $614;
      _arParamIdeal2ObservLTf($8, $605, $614, $15, $16) | 0;
      $615 = +HEAPF32[$15 >> 2];
      $616 = +HEAPF32[$16 >> 2];
      if ($130) {
       $$5 = ((~~($615 + 1.0) | 0) / 2 | 0) << 1;
       $$51448 = ((~~($616 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$5 = ~~($615 + .5);
       $$51448 = ~~($616 + .5);
      }
      if (($$5 | 0) > -1) if (($$51448 | 0) < ($6 | 0) & (($$51448 | 0) > -1 & ($$5 | 0) < ($5 | 0))) {
       $635 = $4 + ((Math_imul($$51448, $5) | 0) + $$5) | 0;
       $637 = HEAPU8[$635 >> 0] | 0;
       $642 = ((Math_imul(($$51500 | 0) / ($102 | 0) | 0, $2) | 0) + (($$61480 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $643 = $127 + ($642 << 2) | 0;
       HEAP32[$643 >> 2] = (HEAP32[$643 >> 2] | 0) + $637;
       $647 = $127 + ($642 + 1 << 2) | 0;
       HEAP32[$647 >> 2] = (HEAP32[$647 >> 2] | 0) + $637;
       $651 = $127 + ($642 + 2 << 2) | 0;
       HEAP32[$651 >> 2] = (HEAP32[$651 >> 2] | 0) + $637;
      }
      $$61480 = $$61480 + 1 | 0;
     }
     $$51500 = $$51500 + 1 | 0;
    }
    break;
   }
  case 6:
   {
    $129 = ($0 | 0) == 1;
    $$61501 = 0;
    while (1) {
     if (($$61501 | 0) >= ($$31471 | 0)) {
      $$131487 = 0;
      break L20;
     }
     $661 = $115 + $106 * (+($$61501 | 0) + .5) / $112;
     $$71481 = 0;
     while (1) {
      if (($$71481 | 0) >= ($$$21466 | 0)) break;
      $667 = $115 + $106 * (+($$71481 | 0) + .5) / $122;
      $674 = +HEAPF64[$120 >> 3] + ($667 * +HEAPF64[$125 >> 3] + $661 * +HEAPF64[$119 >> 3]);
      if ($674 == 0.0) {
       $2026 = $127;
       label = 309;
       break L15;
      }
      $684 = (+HEAPF64[$109 >> 3] + ($667 * +HEAPF64[$14 >> 3] + $661 * +HEAPF64[$116 >> 3])) / $674;
      HEAPF32[$15 >> 2] = $684;
      $693 = (+HEAPF64[$118 >> 3] + ($667 * +HEAPF64[$124 >> 3] + $661 * +HEAPF64[$123 >> 3])) / $674;
      HEAPF32[$16 >> 2] = $693;
      _arParamIdeal2ObservLTf($8, $684, $693, $15, $16) | 0;
      $694 = +HEAPF32[$15 >> 2];
      $695 = +HEAPF32[$16 >> 2];
      if ($129) {
       $$6 = ((~~($694 + 1.0) | 0) / 2 | 0) << 1;
       $$61449 = ((~~($695 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$6 = ~~($694 + .5);
       $$61449 = ~~($695 + .5);
      }
      if (($$6 | 0) > -1) if (($$61449 | 0) < ($6 | 0) & (($$61449 | 0) > -1 & ($$6 | 0) < ($5 | 0))) {
       $714 = (Math_imul($$61449, $5) | 0) + $$6 << 2;
       $723 = ((Math_imul(($$61501 | 0) / ($102 | 0) | 0, $2) | 0) + (($$71481 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $724 = $127 + ($723 << 2) | 0;
       HEAP32[$724 >> 2] = (HEAP32[$724 >> 2] | 0) + (HEAPU8[$4 + ($714 | 3) >> 0] | 0);
       $732 = $127 + ($723 + 1 << 2) | 0;
       HEAP32[$732 >> 2] = (HEAP32[$732 >> 2] | 0) + (HEAPU8[$4 + ($714 | 2) >> 0] | 0);
       $740 = $127 + ($723 + 2 << 2) | 0;
       HEAP32[$740 >> 2] = (HEAP32[$740 >> 2] | 0) + (HEAPU8[$4 + ($714 | 1) >> 0] | 0);
      }
      $$71481 = $$71481 + 1 | 0;
     }
     $$61501 = $$61501 + 1 | 0;
    }
    break;
   }
  default:
   {
    if ($110) {
     $745 = ($0 | 0) == 1;
     $$71502 = 0;
     while (1) {
      if (($$71502 | 0) >= ($$31471 | 0)) {
       $$131487 = 0;
       break L20;
      }
      $751 = $115 + $106 * (+($$71502 | 0) + .5) / $112;
      $$81482 = 0;
      while (1) {
       if (($$81482 | 0) >= ($$$21466 | 0)) break;
       $757 = $115 + $106 * (+($$81482 | 0) + .5) / $122;
       $764 = +HEAPF64[$120 >> 3] + ($757 * +HEAPF64[$125 >> 3] + $751 * +HEAPF64[$119 >> 3]);
       if ($764 == 0.0) {
        $2026 = $127;
        label = 309;
        break L15;
       }
       $774 = (+HEAPF64[$109 >> 3] + ($757 * +HEAPF64[$14 >> 3] + $751 * +HEAPF64[$116 >> 3])) / $764;
       HEAPF32[$15 >> 2] = $774;
       $783 = (+HEAPF64[$118 >> 3] + ($757 * +HEAPF64[$124 >> 3] + $751 * +HEAPF64[$123 >> 3])) / $764;
       HEAPF32[$16 >> 2] = $783;
       _arParamIdeal2ObservLTf($8, $774, $783, $15, $16) | 0;
       $784 = +HEAPF32[$15 >> 2];
       $785 = +HEAPF32[$16 >> 2];
       if ($745) {
        $$7 = ((~~($784 + 1.0) | 0) / 2 | 0) << 1;
        $$71450 = ((~~($785 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$7 = ~~($784 + .5);
        $$71450 = ~~($785 + .5);
       }
       if (($$7 | 0) > -1) if (($$71450 | 0) < ($6 | 0) & (($$71450 | 0) > -1 & ($$7 | 0) < ($5 | 0))) {
        $802 = Math_imul($$71450, $5) | 0;
        $805 = ($$7 & 65534) + $802 << 1;
        $810 = +((HEAPU8[$4 + $805 >> 0] | 0) + -128 | 0);
        $824 = +((HEAPU8[$4 + ($805 + 2) >> 0] | 0) + -128 | 0);
        $825 = +((HEAPU8[$4 + ($802 + $$7 << 1 | 1) >> 0] | 0) + -16 | 0) * 298.0820007324219;
        $829 = ~~($810 * 516.4110107421875 + $825) >> 8;
        $835 = ~~($825 - $810 * 100.29100036621094 - $824 * 208.1199951171875) >> 8;
        $839 = ~~($825 + $824 * 408.5830078125) >> 8;
        $841 = ($829 | 0) > 0 ? $829 : 0;
        $847 = ((Math_imul(($$71502 | 0) / ($102 | 0) | 0, $2) | 0) + (($$81482 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
        $848 = $127 + ($847 << 2) | 0;
        HEAP32[$848 >> 2] = (($841 | 0) < 255 ? $841 : 255) + (HEAP32[$848 >> 2] | 0);
        $852 = ($835 | 0) > 0 ? $835 : 0;
        $856 = $127 + ($847 + 1 << 2) | 0;
        HEAP32[$856 >> 2] = (($852 | 0) < 255 ? $852 : 255) + (HEAP32[$856 >> 2] | 0);
        $860 = ($839 | 0) > 0 ? $839 : 0;
        $863 = $127 + ($847 + 2 << 2) | 0;
        HEAP32[$863 >> 2] = (($860 | 0) < 255 ? $860 : 255) + (HEAP32[$863 >> 2] | 0);
       }
       $$81482 = $$81482 + 1 | 0;
      }
      $$71502 = $$71502 + 1 | 0;
     }
    }
    if ($114) {
     $868 = ($0 | 0) == 1;
     $$81503 = 0;
     while (1) {
      if (($$81503 | 0) >= ($$31471 | 0)) {
       $$131487 = 0;
       break L20;
      }
      $874 = $115 + $106 * (+($$81503 | 0) + .5) / $112;
      $$91483 = 0;
      while (1) {
       if (($$91483 | 0) >= ($$$21466 | 0)) break;
       $880 = $115 + $106 * (+($$91483 | 0) + .5) / $122;
       $887 = +HEAPF64[$120 >> 3] + ($880 * +HEAPF64[$125 >> 3] + $874 * +HEAPF64[$119 >> 3]);
       if ($887 == 0.0) {
        $2026 = $127;
        label = 309;
        break L15;
       }
       $897 = (+HEAPF64[$109 >> 3] + ($880 * +HEAPF64[$14 >> 3] + $874 * +HEAPF64[$116 >> 3])) / $887;
       HEAPF32[$15 >> 2] = $897;
       $906 = (+HEAPF64[$118 >> 3] + ($880 * +HEAPF64[$124 >> 3] + $874 * +HEAPF64[$123 >> 3])) / $887;
       HEAPF32[$16 >> 2] = $906;
       _arParamIdeal2ObservLTf($8, $897, $906, $15, $16) | 0;
       $907 = +HEAPF32[$15 >> 2];
       $908 = +HEAPF32[$16 >> 2];
       if ($868) {
        $$8 = ((~~($907 + 1.0) | 0) / 2 | 0) << 1;
        $$81451 = ((~~($908 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$8 = ~~($907 + .5);
        $$81451 = ~~($908 + .5);
       }
       if (($$8 | 0) > -1) if (($$81451 | 0) < ($6 | 0) & (($$81451 | 0) > -1 & ($$8 | 0) < ($5 | 0))) {
        $925 = Math_imul($$81451, $5) | 0;
        $935 = ($$8 & 65534) + $925 << 1;
        $941 = +((HEAPU8[$4 + ($935 | 1) >> 0] | 0) + -128 | 0);
        $947 = +((HEAPU8[$4 + ($935 + 3) >> 0] | 0) + -128 | 0);
        $948 = +((HEAPU8[$4 + ($925 + $$8 << 1) >> 0] | 0) + -16 | 0) * 298.0820007324219;
        $952 = ~~($948 + $941 * 516.4110107421875) >> 8;
        $958 = ~~($948 - $941 * 100.29100036621094 - $947 * 208.1199951171875) >> 8;
        $962 = ~~($948 + $947 * 408.5830078125) >> 8;
        $964 = ($952 | 0) > 0 ? $952 : 0;
        $970 = ((Math_imul(($$81503 | 0) / ($102 | 0) | 0, $2) | 0) + (($$91483 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
        $971 = $127 + ($970 << 2) | 0;
        HEAP32[$971 >> 2] = (($964 | 0) < 255 ? $964 : 255) + (HEAP32[$971 >> 2] | 0);
        $975 = ($958 | 0) > 0 ? $958 : 0;
        $979 = $127 + ($970 + 1 << 2) | 0;
        HEAP32[$979 >> 2] = (($975 | 0) < 255 ? $975 : 255) + (HEAP32[$979 >> 2] | 0);
        $983 = ($962 | 0) > 0 ? $962 : 0;
        $986 = $127 + ($970 + 2 << 2) | 0;
        HEAP32[$986 >> 2] = (($983 | 0) < 255 ? $983 : 255) + (HEAP32[$986 >> 2] | 0);
       }
       $$91483 = $$91483 + 1 | 0;
      }
      $$81503 = $$81503 + 1 | 0;
     }
    }
    if ($111) {
     $991 = ($0 | 0) == 1;
     $$91504 = 0;
     while (1) {
      if (($$91504 | 0) >= ($$31471 | 0)) {
       $$131487 = 0;
       break L20;
      }
      $997 = $115 + $106 * (+($$91504 | 0) + .5) / $112;
      $$101484 = 0;
      while (1) {
       if (($$101484 | 0) >= ($$$21466 | 0)) break;
       $1003 = $115 + $106 * (+($$101484 | 0) + .5) / $122;
       $1010 = +HEAPF64[$120 >> 3] + ($1003 * +HEAPF64[$125 >> 3] + $997 * +HEAPF64[$119 >> 3]);
       if ($1010 == 0.0) {
        $2026 = $127;
        label = 309;
        break L15;
       }
       $1020 = (+HEAPF64[$109 >> 3] + ($1003 * +HEAPF64[$14 >> 3] + $997 * +HEAPF64[$116 >> 3])) / $1010;
       HEAPF32[$15 >> 2] = $1020;
       $1029 = (+HEAPF64[$118 >> 3] + ($1003 * +HEAPF64[$124 >> 3] + $997 * +HEAPF64[$123 >> 3])) / $1010;
       HEAPF32[$16 >> 2] = $1029;
       _arParamIdeal2ObservLTf($8, $1020, $1029, $15, $16) | 0;
       $1030 = +HEAPF32[$15 >> 2];
       $1031 = +HEAPF32[$16 >> 2];
       if ($991) {
        $$9 = ((~~($1030 + 1.0) | 0) / 2 | 0) << 1;
        $$91452 = ((~~($1031 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$9 = ~~($1030 + .5);
        $$91452 = ~~($1031 + .5);
       }
       if (($$9 | 0) > -1) if (($$91452 | 0) < ($6 | 0) & (($$91452 | 0) > -1 & ($$9 | 0) < ($5 | 0))) {
        $1050 = (Math_imul($$91452, $5) | 0) + $$9 << 1;
        $1053 = HEAP8[$4 + ($1050 | 1) >> 0] | 0;
        $1061 = ((Math_imul(($$91504 | 0) / ($102 | 0) | 0, $2) | 0) + (($$101484 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
        $1062 = $127 + ($1061 << 2) | 0;
        HEAP32[$1062 >> 2] = (HEAP32[$1062 >> 2] | 0) + (($1053 << 3 & 255 | 4) & 255);
        $1066 = HEAP8[$4 + $1050 >> 0] | 0;
        $1075 = $127 + ($1061 + 1 << 2) | 0;
        HEAP32[$1075 >> 2] = (($1066 << 5 & 255 | 2) & 255 | ($1053 & -32 & 255) >>> 3) + (HEAP32[$1075 >> 2] | 0);
        $1082 = $127 + ($1061 + 2 << 2) | 0;
        HEAP32[$1082 >> 2] = (($1066 & -8 | 4) & 255) + (HEAP32[$1082 >> 2] | 0);
       }
       $$101484 = $$101484 + 1 | 0;
      }
      $$91504 = $$91504 + 1 | 0;
     }
    }
    if ($117) {
     $1087 = ($0 | 0) == 1;
     $$101505 = 0;
     while (1) {
      if (($$101505 | 0) >= ($$31471 | 0)) {
       $$131487 = 0;
       break L20;
      }
      $1093 = $115 + $106 * (+($$101505 | 0) + .5) / $112;
      $$111485 = 0;
      while (1) {
       if (($$111485 | 0) >= ($$$21466 | 0)) break;
       $1099 = $115 + $106 * (+($$111485 | 0) + .5) / $122;
       $1106 = +HEAPF64[$120 >> 3] + ($1099 * +HEAPF64[$125 >> 3] + $1093 * +HEAPF64[$119 >> 3]);
       if ($1106 == 0.0) {
        $2026 = $127;
        label = 309;
        break L15;
       }
       $1116 = (+HEAPF64[$109 >> 3] + ($1099 * +HEAPF64[$14 >> 3] + $1093 * +HEAPF64[$116 >> 3])) / $1106;
       HEAPF32[$15 >> 2] = $1116;
       $1125 = (+HEAPF64[$118 >> 3] + ($1099 * +HEAPF64[$124 >> 3] + $1093 * +HEAPF64[$123 >> 3])) / $1106;
       HEAPF32[$16 >> 2] = $1125;
       _arParamIdeal2ObservLTf($8, $1116, $1125, $15, $16) | 0;
       $1126 = +HEAPF32[$15 >> 2];
       $1127 = +HEAPF32[$16 >> 2];
       if ($1087) {
        $$10 = ((~~($1126 + 1.0) | 0) / 2 | 0) << 1;
        $$101453 = ((~~($1127 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$10 = ~~($1126 + .5);
        $$101453 = ~~($1127 + .5);
       }
       if (($$10 | 0) > -1) if (($$101453 | 0) < ($6 | 0) & (($$101453 | 0) > -1 & ($$10 | 0) < ($5 | 0))) {
        $1146 = (Math_imul($$101453, $5) | 0) + $$10 << 1;
        $1149 = HEAP8[$4 + ($1146 | 1) >> 0] | 0;
        $1157 = ((Math_imul(($$101505 | 0) / ($102 | 0) | 0, $2) | 0) + (($$111485 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
        $1158 = $127 + ($1157 << 2) | 0;
        HEAP32[$1158 >> 2] = (HEAP32[$1158 >> 2] | 0) + (($1149 << 2 & 255 | 4) & 255);
        $1162 = HEAP8[$4 + $1146 >> 0] | 0;
        $1171 = $127 + ($1157 + 1 << 2) | 0;
        HEAP32[$1171 >> 2] = (($1162 << 5 & 255 | 4) & 255 | ($1149 & -64 & 255) >>> 3) + (HEAP32[$1171 >> 2] | 0);
        $1178 = $127 + ($1157 + 2 << 2) | 0;
        HEAP32[$1178 >> 2] = (($1162 & -8 | 4) & 255) + (HEAP32[$1178 >> 2] | 0);
       }
       $$111485 = $$111485 + 1 | 0;
      }
      $$101505 = $$101505 + 1 | 0;
     }
    }
    if (!$121) {
     _arLog(3, 3931, $vararg_buffer1);
     $2026 = $127;
     label = 309;
     break L15;
    }
    $1183 = ($0 | 0) == 1;
    $$111506 = 0;
    while (1) {
     if (($$111506 | 0) >= ($$31471 | 0)) {
      $$131487 = 0;
      break L20;
     }
     $1189 = $115 + $106 * (+($$111506 | 0) + .5) / $112;
     $$121486 = 0;
     while (1) {
      if (($$121486 | 0) >= ($$$21466 | 0)) break;
      $1195 = $115 + $106 * (+($$121486 | 0) + .5) / $122;
      $1202 = +HEAPF64[$120 >> 3] + ($1195 * +HEAPF64[$125 >> 3] + $1189 * +HEAPF64[$119 >> 3]);
      if ($1202 == 0.0) {
       $2026 = $127;
       label = 309;
       break L15;
      }
      $1212 = (+HEAPF64[$109 >> 3] + ($1195 * +HEAPF64[$14 >> 3] + $1189 * +HEAPF64[$116 >> 3])) / $1202;
      HEAPF32[$15 >> 2] = $1212;
      $1221 = (+HEAPF64[$118 >> 3] + ($1195 * +HEAPF64[$124 >> 3] + $1189 * +HEAPF64[$123 >> 3])) / $1202;
      HEAPF32[$16 >> 2] = $1221;
      _arParamIdeal2ObservLTf($8, $1212, $1221, $15, $16) | 0;
      $1222 = +HEAPF32[$15 >> 2];
      $1223 = +HEAPF32[$16 >> 2];
      if ($1183) {
       $$11 = ((~~($1222 + 1.0) | 0) / 2 | 0) << 1;
       $$111454 = ((~~($1223 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$11 = ~~($1222 + .5);
       $$111454 = ~~($1223 + .5);
      }
      if (($$11 | 0) > -1) if (($$111454 | 0) < ($6 | 0) & (($$111454 | 0) > -1 & ($$11 | 0) < ($5 | 0))) {
       $1242 = (Math_imul($$111454, $5) | 0) + $$11 << 1;
       $1253 = ((Math_imul(($$111506 | 0) / ($102 | 0) | 0, $2) | 0) + (($$121486 | 0) / ($101 | 0) | 0) | 0) * 3 | 0;
       $1254 = $127 + ($1253 << 2) | 0;
       HEAP32[$1254 >> 2] = (HEAP32[$1254 >> 2] | 0) + ((HEAP8[$4 + ($1242 | 1) >> 0] & -16 | 8) & 255);
       $1258 = HEAP8[$4 + $1242 >> 0] | 0;
       $1263 = $127 + ($1253 + 1 << 2) | 0;
       HEAP32[$1263 >> 2] = (($1258 << 4 & 255 | 8) & 255) + (HEAP32[$1263 >> 2] | 0);
       $1270 = $127 + ($1253 + 2 << 2) | 0;
       HEAP32[$1270 >> 2] = (($1258 & -16 | 8) & 255) + (HEAP32[$1270 >> 2] | 0);
      }
      $$121486 = $$121486 + 1 | 0;
     }
     $$111506 = $$111506 + 1 | 0;
    }
   }
  } while (0);
  while (1) {
   if (($$131487 | 0) >= ($126 | 0)) break;
   HEAP8[$11 + $$131487 >> 0] = ((HEAP32[$127 + ($$131487 << 2) >> 2] | 0) >>> 0) / ($113 >>> 0) | 0;
   $$131487 = $$131487 + 1 | 0;
  }
  _free($127);
  $$0 = 0;
 } else {
  $1282 = _calloc($108, 4) | 0;
  if (!$1282) {
   _arLog(3, 4787, $vararg_buffer3);
   _exit(1);
  }
  L244 : do switch ($7 | 1 | 0) {
  case 1:
   {
    $1286 = ($0 | 0) == 1;
    $$121507 = 0;
    while (1) {
     if (($$121507 | 0) >= ($$31471 | 0)) {
      $$23 = 0;
      break L244;
     }
     $1292 = $115 + $106 * (+($$121507 | 0) + .5) / $112;
     $$141488 = 0;
     while (1) {
      if (($$141488 | 0) >= ($$$21466 | 0)) break;
      $1298 = $115 + $106 * (+($$141488 | 0) + .5) / $122;
      $1305 = +HEAPF64[$120 >> 3] + ($1298 * +HEAPF64[$125 >> 3] + $1292 * +HEAPF64[$119 >> 3]);
      if ($1305 == 0.0) {
       $2026 = $1282;
       label = 309;
       break L15;
      }
      $1315 = (+HEAPF64[$109 >> 3] + ($1298 * +HEAPF64[$14 >> 3] + $1292 * +HEAPF64[$116 >> 3])) / $1305;
      HEAPF32[$15 >> 2] = $1315;
      $1324 = (+HEAPF64[$118 >> 3] + ($1298 * +HEAPF64[$124 >> 3] + $1292 * +HEAPF64[$123 >> 3])) / $1305;
      HEAPF32[$16 >> 2] = $1324;
      _arParamIdeal2ObservLTf($8, $1315, $1324, $15, $16) | 0;
      $1325 = +HEAPF32[$15 >> 2];
      $1326 = +HEAPF32[$16 >> 2];
      if ($1286) {
       $$12 = ((~~($1325 + 1.0) | 0) / 2 | 0) << 1;
       $$121455 = ((~~($1326 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$12 = ~~($1325 + .5);
       $$121455 = ~~($1326 + .5);
      }
      if (($$12 | 0) > -1) if (($$121455 | 0) < ($6 | 0) & (($$121455 | 0) > -1 & ($$12 | 0) < ($5 | 0))) {
       $1345 = ((Math_imul($$121455, $5) | 0) + $$12 | 0) * 3 | 0;
       $1364 = $1282 + ((Math_imul(($$121507 | 0) / ($102 | 0) | 0, $2) | 0) + (($$141488 | 0) / ($101 | 0) | 0) << 2) | 0;
       HEAP32[$1364 >> 2] = (HEAP32[$1364 >> 2] | 0) + ((((HEAPU8[$4 + ($1345 + 1) >> 0] | 0) + (HEAPU8[$4 + $1345 >> 0] | 0) + (HEAPU8[$4 + ($1345 + 2) >> 0] | 0) | 0) >>> 0) / 3 | 0);
      }
      $$141488 = $$141488 + 1 | 0;
     }
     $$121507 = $$121507 + 1 | 0;
    }
    break;
   }
  case 3:
   {
    $1285 = ($0 | 0) == 1;
    $$131508 = 0;
    while (1) {
     if (($$131508 | 0) >= ($$31471 | 0)) {
      $$23 = 0;
      break L244;
     }
     $1374 = $115 + $106 * (+($$131508 | 0) + .5) / $112;
     $$151489 = 0;
     while (1) {
      if (($$151489 | 0) >= ($$$21466 | 0)) break;
      $1380 = $115 + $106 * (+($$151489 | 0) + .5) / $122;
      $1387 = +HEAPF64[$120 >> 3] + ($1380 * +HEAPF64[$125 >> 3] + $1374 * +HEAPF64[$119 >> 3]);
      if ($1387 == 0.0) {
       $2026 = $1282;
       label = 309;
       break L15;
      }
      $1397 = (+HEAPF64[$109 >> 3] + ($1380 * +HEAPF64[$14 >> 3] + $1374 * +HEAPF64[$116 >> 3])) / $1387;
      HEAPF32[$15 >> 2] = $1397;
      $1406 = (+HEAPF64[$118 >> 3] + ($1380 * +HEAPF64[$124 >> 3] + $1374 * +HEAPF64[$123 >> 3])) / $1387;
      HEAPF32[$16 >> 2] = $1406;
      _arParamIdeal2ObservLTf($8, $1397, $1406, $15, $16) | 0;
      $1407 = +HEAPF32[$15 >> 2];
      $1408 = +HEAPF32[$16 >> 2];
      if ($1285) {
       $$13 = ((~~($1407 + 1.0) | 0) / 2 | 0) << 1;
       $$131456 = ((~~($1408 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$13 = ~~($1407 + .5);
       $$131456 = ~~($1408 + .5);
      }
      if (($$13 | 0) > -1) if (($$131456 | 0) < ($6 | 0) & (($$131456 | 0) > -1 & ($$13 | 0) < ($5 | 0))) {
       $1427 = (Math_imul($$131456, $5) | 0) + $$13 << 2;
       $1446 = $1282 + ((Math_imul(($$131508 | 0) / ($102 | 0) | 0, $2) | 0) + (($$151489 | 0) / ($101 | 0) | 0) << 2) | 0;
       HEAP32[$1446 >> 2] = (HEAP32[$1446 >> 2] | 0) + ((((HEAPU8[$4 + ($1427 | 1) >> 0] | 0) + (HEAPU8[$4 + $1427 >> 0] | 0) + (HEAPU8[$4 + ($1427 | 2) >> 0] | 0) | 0) >>> 0) / 3 | 0);
      }
      $$151489 = $$151489 + 1 | 0;
     }
     $$131508 = $$131508 + 1 | 0;
    }
    break;
   }
  default:
   {
    if (($7 | 2 | 0) == 6) {
     $1453 = ($0 | 0) == 1;
     $$141509 = 0;
     while (1) {
      if (($$141509 | 0) >= ($$31471 | 0)) {
       $$23 = 0;
       break L244;
      }
      $1459 = $115 + $106 * (+($$141509 | 0) + .5) / $112;
      $$161490 = 0;
      while (1) {
       if (($$161490 | 0) >= ($$$21466 | 0)) break;
       $1465 = $115 + $106 * (+($$161490 | 0) + .5) / $122;
       $1472 = +HEAPF64[$120 >> 3] + ($1465 * +HEAPF64[$125 >> 3] + $1459 * +HEAPF64[$119 >> 3]);
       if ($1472 == 0.0) {
        $2026 = $1282;
        label = 309;
        break L15;
       }
       $1482 = (+HEAPF64[$109 >> 3] + ($1465 * +HEAPF64[$14 >> 3] + $1459 * +HEAPF64[$116 >> 3])) / $1472;
       HEAPF32[$15 >> 2] = $1482;
       $1491 = (+HEAPF64[$118 >> 3] + ($1465 * +HEAPF64[$124 >> 3] + $1459 * +HEAPF64[$123 >> 3])) / $1472;
       HEAPF32[$16 >> 2] = $1491;
       _arParamIdeal2ObservLTf($8, $1482, $1491, $15, $16) | 0;
       $1492 = +HEAPF32[$15 >> 2];
       $1493 = +HEAPF32[$16 >> 2];
       if ($1453) {
        $$14 = ((~~($1492 + 1.0) | 0) / 2 | 0) << 1;
        $$141457 = ((~~($1493 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$14 = ~~($1492 + .5);
        $$141457 = ~~($1493 + .5);
       }
       if (($$14 | 0) > -1) if (($$141457 | 0) < ($6 | 0) & (($$141457 | 0) > -1 & ($$14 | 0) < ($5 | 0))) {
        $1512 = (Math_imul($$141457, $5) | 0) + $$14 << 2;
        $1532 = $1282 + ((Math_imul(($$141509 | 0) / ($102 | 0) | 0, $2) | 0) + (($$161490 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$1532 >> 2] = (HEAP32[$1532 >> 2] | 0) + ((((HEAPU8[$4 + ($1512 | 2) >> 0] | 0) + (HEAPU8[$4 + ($1512 | 1) >> 0] | 0) + (HEAPU8[$4 + ($1512 | 3) >> 0] | 0) | 0) >>> 0) / 3 | 0);
       }
       $$161490 = $$161490 + 1 | 0;
      }
      $$141509 = $$141509 + 1 | 0;
     }
    }
    switch ($7 | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $1537 = ($0 | 0) == 1;
      $$151510 = 0;
      while (1) {
       if (($$151510 | 0) >= ($$31471 | 0)) {
        $$23 = 0;
        break L244;
       }
       $1543 = $115 + $106 * (+($$151510 | 0) + .5) / $112;
       $$171491 = 0;
       while (1) {
        if (($$171491 | 0) >= ($$$21466 | 0)) break;
        $1549 = $115 + $106 * (+($$171491 | 0) + .5) / $122;
        $1556 = +HEAPF64[$120 >> 3] + ($1549 * +HEAPF64[$125 >> 3] + $1543 * +HEAPF64[$119 >> 3]);
        if ($1556 == 0.0) {
         $2026 = $1282;
         label = 309;
         break L15;
        }
        $1566 = (+HEAPF64[$109 >> 3] + ($1549 * +HEAPF64[$14 >> 3] + $1543 * +HEAPF64[$116 >> 3])) / $1556;
        HEAPF32[$15 >> 2] = $1566;
        $1575 = (+HEAPF64[$118 >> 3] + ($1549 * +HEAPF64[$124 >> 3] + $1543 * +HEAPF64[$123 >> 3])) / $1556;
        HEAPF32[$16 >> 2] = $1575;
        _arParamIdeal2ObservLTf($8, $1566, $1575, $15, $16) | 0;
        $1576 = +HEAPF32[$15 >> 2];
        $1577 = +HEAPF32[$16 >> 2];
        if ($1537) {
         $$15 = ((~~($1576 + 1.0) | 0) / 2 | 0) << 1;
         $$151458 = ((~~($1577 + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $$15 = ~~($1576 + .5);
         $$151458 = ~~($1577 + .5);
        }
        if (($$15 | 0) > -1) if (($$151458 | 0) < ($6 | 0) & (($$151458 | 0) > -1 & ($$15 | 0) < ($5 | 0))) {
         $1596 = $4 + ((Math_imul($$151458, $5) | 0) + $$15) | 0;
         $1603 = $1282 + ((Math_imul(($$151510 | 0) / ($102 | 0) | 0, $2) | 0) + (($$171491 | 0) / ($101 | 0) | 0) << 2) | 0;
         HEAP32[$1603 >> 2] = (HEAP32[$1603 >> 2] | 0) + (HEAPU8[$1596 >> 0] | 0);
        }
        $$171491 = $$171491 + 1 | 0;
       }
       $$151510 = $$151510 + 1 | 0;
      }
      break;
     }
    default:
     {}
    }
    if ($110) {
     $1608 = ($0 | 0) == 1;
     $$161511 = 0;
     while (1) {
      if (($$161511 | 0) >= ($$31471 | 0)) {
       $$23 = 0;
       break L244;
      }
      $1614 = $115 + $106 * (+($$161511 | 0) + .5) / $112;
      $$181492 = 0;
      while (1) {
       if (($$181492 | 0) >= ($$$21466 | 0)) break;
       $1620 = $115 + $106 * (+($$181492 | 0) + .5) / $122;
       $1627 = +HEAPF64[$120 >> 3] + ($1620 * +HEAPF64[$125 >> 3] + $1614 * +HEAPF64[$119 >> 3]);
       if ($1627 == 0.0) {
        $2026 = $1282;
        label = 309;
        break L15;
       }
       $1637 = (+HEAPF64[$109 >> 3] + ($1620 * +HEAPF64[$14 >> 3] + $1614 * +HEAPF64[$116 >> 3])) / $1627;
       HEAPF32[$15 >> 2] = $1637;
       $1646 = (+HEAPF64[$118 >> 3] + ($1620 * +HEAPF64[$124 >> 3] + $1614 * +HEAPF64[$123 >> 3])) / $1627;
       HEAPF32[$16 >> 2] = $1646;
       _arParamIdeal2ObservLTf($8, $1637, $1646, $15, $16) | 0;
       $1647 = +HEAPF32[$15 >> 2];
       $1648 = +HEAPF32[$16 >> 2];
       if ($1608) {
        $$16 = ((~~($1647 + 1.0) | 0) / 2 | 0) << 1;
        $$161459 = ((~~($1648 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$16 = ~~($1647 + .5);
        $$161459 = ~~($1648 + .5);
       }
       if (($$16 | 0) > -1) if (($$161459 | 0) < ($6 | 0) & (($$161459 | 0) > -1 & ($$16 | 0) < ($5 | 0))) {
        $1669 = $4 + ((Math_imul($$161459, $5) | 0) + $$16 << 1 | 1) | 0;
        $1676 = $1282 + ((Math_imul(($$161511 | 0) / ($102 | 0) | 0, $2) | 0) + (($$181492 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$1676 >> 2] = (HEAP32[$1676 >> 2] | 0) + (HEAPU8[$1669 >> 0] | 0);
       }
       $$181492 = $$181492 + 1 | 0;
      }
      $$161511 = $$161511 + 1 | 0;
     }
    }
    if ($114) {
     $1681 = ($0 | 0) == 1;
     $$171512 = 0;
     while (1) {
      if (($$171512 | 0) >= ($$31471 | 0)) {
       $$23 = 0;
       break L244;
      }
      $1687 = $115 + $106 * (+($$171512 | 0) + .5) / $112;
      $$191493 = 0;
      while (1) {
       if (($$191493 | 0) >= ($$$21466 | 0)) break;
       $1693 = $115 + $106 * (+($$191493 | 0) + .5) / $122;
       $1700 = +HEAPF64[$120 >> 3] + ($1693 * +HEAPF64[$125 >> 3] + $1687 * +HEAPF64[$119 >> 3]);
       if ($1700 == 0.0) {
        $2026 = $1282;
        label = 309;
        break L15;
       }
       $1710 = (+HEAPF64[$109 >> 3] + ($1693 * +HEAPF64[$14 >> 3] + $1687 * +HEAPF64[$116 >> 3])) / $1700;
       HEAPF32[$15 >> 2] = $1710;
       $1719 = (+HEAPF64[$118 >> 3] + ($1693 * +HEAPF64[$124 >> 3] + $1687 * +HEAPF64[$123 >> 3])) / $1700;
       HEAPF32[$16 >> 2] = $1719;
       _arParamIdeal2ObservLTf($8, $1710, $1719, $15, $16) | 0;
       $1720 = +HEAPF32[$15 >> 2];
       $1721 = +HEAPF32[$16 >> 2];
       if ($1681) {
        $$17 = ((~~($1720 + 1.0) | 0) / 2 | 0) << 1;
        $$171460 = ((~~($1721 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$17 = ~~($1720 + .5);
        $$171460 = ~~($1721 + .5);
       }
       if (($$17 | 0) > -1) if (($$171460 | 0) < ($6 | 0) & (($$171460 | 0) > -1 & ($$17 | 0) < ($5 | 0))) {
        $1741 = $4 + ((Math_imul($$171460, $5) | 0) + $$17 << 1) | 0;
        $1748 = $1282 + ((Math_imul(($$171512 | 0) / ($102 | 0) | 0, $2) | 0) + (($$191493 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$1748 >> 2] = (HEAP32[$1748 >> 2] | 0) + (HEAPU8[$1741 >> 0] | 0);
       }
       $$191493 = $$191493 + 1 | 0;
      }
      $$171512 = $$171512 + 1 | 0;
     }
    }
    if ($111) {
     $1753 = ($0 | 0) == 1;
     $$181513 = 0;
     while (1) {
      if (($$181513 | 0) >= ($$31471 | 0)) {
       $$23 = 0;
       break L244;
      }
      $1759 = $115 + $106 * (+($$181513 | 0) + .5) / $112;
      $$201494 = 0;
      while (1) {
       if (($$201494 | 0) >= ($$$21466 | 0)) break;
       $1765 = $115 + $106 * (+($$201494 | 0) + .5) / $122;
       $1772 = +HEAPF64[$120 >> 3] + ($1765 * +HEAPF64[$125 >> 3] + $1759 * +HEAPF64[$119 >> 3]);
       if ($1772 == 0.0) {
        $2026 = $1282;
        label = 309;
        break L15;
       }
       $1782 = (+HEAPF64[$109 >> 3] + ($1765 * +HEAPF64[$14 >> 3] + $1759 * +HEAPF64[$116 >> 3])) / $1772;
       HEAPF32[$15 >> 2] = $1782;
       $1791 = (+HEAPF64[$118 >> 3] + ($1765 * +HEAPF64[$124 >> 3] + $1759 * +HEAPF64[$123 >> 3])) / $1772;
       HEAPF32[$16 >> 2] = $1791;
       _arParamIdeal2ObservLTf($8, $1782, $1791, $15, $16) | 0;
       $1792 = +HEAPF32[$15 >> 2];
       $1793 = +HEAPF32[$16 >> 2];
       if ($1753) {
        $$18 = ((~~($1792 + 1.0) | 0) / 2 | 0) << 1;
        $$181461 = ((~~($1793 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$18 = ~~($1792 + .5);
        $$181461 = ~~($1793 + .5);
       }
       if (($$18 | 0) > -1) if (($$181461 | 0) < ($6 | 0) & (($$181461 | 0) > -1 & ($$18 | 0) < ($5 | 0))) {
        $1812 = (Math_imul($$181461, $5) | 0) + $$18 << 1;
        $1815 = HEAPU8[$4 + $1812 >> 0] | 0;
        $1823 = HEAPU8[$4 + ($1812 | 1) >> 0] | 0;
        $1838 = $1282 + ((Math_imul(($$181513 | 0) / ($102 | 0) | 0, $2) | 0) + (($$201494 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$1838 >> 2] = (((($1823 << 3 & 248 | 4) + ($1815 & 248 | 4) + ($1815 << 5 & 224 | $1823 >>> 3 & 28 | 2) | 0) >>> 0) / 3 | 0) + (HEAP32[$1838 >> 2] | 0);
       }
       $$201494 = $$201494 + 1 | 0;
      }
      $$181513 = $$181513 + 1 | 0;
     }
    }
    if ($117) {
     $1843 = ($0 | 0) == 1;
     $$191514 = 0;
     while (1) {
      if (($$191514 | 0) >= ($$31471 | 0)) {
       $$23 = 0;
       break L244;
      }
      $1849 = $115 + $106 * (+($$191514 | 0) + .5) / $112;
      $$21 = 0;
      while (1) {
       if (($$21 | 0) >= ($$$21466 | 0)) break;
       $1855 = $115 + $106 * (+($$21 | 0) + .5) / $122;
       $1862 = +HEAPF64[$120 >> 3] + ($1855 * +HEAPF64[$125 >> 3] + $1849 * +HEAPF64[$119 >> 3]);
       if ($1862 == 0.0) {
        $2026 = $1282;
        label = 309;
        break L15;
       }
       $1872 = (+HEAPF64[$109 >> 3] + ($1855 * +HEAPF64[$14 >> 3] + $1849 * +HEAPF64[$116 >> 3])) / $1862;
       HEAPF32[$15 >> 2] = $1872;
       $1881 = (+HEAPF64[$118 >> 3] + ($1855 * +HEAPF64[$124 >> 3] + $1849 * +HEAPF64[$123 >> 3])) / $1862;
       HEAPF32[$16 >> 2] = $1881;
       _arParamIdeal2ObservLTf($8, $1872, $1881, $15, $16) | 0;
       $1882 = +HEAPF32[$15 >> 2];
       $1883 = +HEAPF32[$16 >> 2];
       if ($1843) {
        $$19 = ((~~($1882 + 1.0) | 0) / 2 | 0) << 1;
        $$191462 = ((~~($1883 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $$19 = ~~($1882 + .5);
        $$191462 = ~~($1883 + .5);
       }
       if (($$19 | 0) > -1) if (($$191462 | 0) < ($6 | 0) & (($$191462 | 0) > -1 & ($$19 | 0) < ($5 | 0))) {
        $1902 = (Math_imul($$191462, $5) | 0) + $$19 << 1;
        $1905 = HEAPU8[$4 + $1902 >> 0] | 0;
        $1913 = HEAPU8[$4 + ($1902 | 1) >> 0] | 0;
        $1928 = $1282 + ((Math_imul(($$191514 | 0) / ($102 | 0) | 0, $2) | 0) + (($$21 | 0) / ($101 | 0) | 0) << 2) | 0;
        HEAP32[$1928 >> 2] = (((($1913 << 2 & 248 | 4) + ($1905 & 248 | 4) + ($1905 << 5 & 224 | $1913 >>> 3 & 24 | 4) | 0) >>> 0) / 3 | 0) + (HEAP32[$1928 >> 2] | 0);
       }
       $$21 = $$21 + 1 | 0;
      }
      $$191514 = $$191514 + 1 | 0;
     }
    }
    if (!$121) {
     _arLog(3, 3931, $vararg_buffer5);
     $2026 = $1282;
     label = 309;
     break L15;
    }
    $1933 = ($0 | 0) == 1;
    $$201515 = 0;
    while (1) {
     if (($$201515 | 0) >= ($$31471 | 0)) {
      $$23 = 0;
      break L244;
     }
     $1939 = $115 + $106 * (+($$201515 | 0) + .5) / $112;
     $$22 = 0;
     while (1) {
      if (($$22 | 0) >= ($$$21466 | 0)) break;
      $1945 = $115 + $106 * (+($$22 | 0) + .5) / $122;
      $1952 = +HEAPF64[$120 >> 3] + ($1945 * +HEAPF64[$125 >> 3] + $1939 * +HEAPF64[$119 >> 3]);
      if ($1952 == 0.0) {
       $2026 = $1282;
       label = 309;
       break L15;
      }
      $1962 = (+HEAPF64[$109 >> 3] + ($1945 * +HEAPF64[$14 >> 3] + $1939 * +HEAPF64[$116 >> 3])) / $1952;
      HEAPF32[$15 >> 2] = $1962;
      $1971 = (+HEAPF64[$118 >> 3] + ($1945 * +HEAPF64[$124 >> 3] + $1939 * +HEAPF64[$123 >> 3])) / $1952;
      HEAPF32[$16 >> 2] = $1971;
      _arParamIdeal2ObservLTf($8, $1962, $1971, $15, $16) | 0;
      $1972 = +HEAPF32[$15 >> 2];
      $1973 = +HEAPF32[$16 >> 2];
      if ($1933) {
       $$20 = ((~~($1972 + 1.0) | 0) / 2 | 0) << 1;
       $$201463 = ((~~($1973 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $$20 = ~~($1972 + .5);
       $$201463 = ~~($1973 + .5);
      }
      if (($$20 | 0) > -1) if (($$201463 | 0) < ($6 | 0) & (($$201463 | 0) > -1 & ($$20 | 0) < ($5 | 0))) {
       $1992 = (Math_imul($$201463, $5) | 0) + $$20 << 1;
       $1995 = HEAPU8[$4 + $1992 >> 0] | 0;
       $2014 = $1282 + ((Math_imul(($$201515 | 0) / ($102 | 0) | 0, $2) | 0) + (($$22 | 0) / ($101 | 0) | 0) << 2) | 0;
       HEAP32[$2014 >> 2] = (((($1995 << 4 & 240 | 8) + ($1995 & 240 | 8) + ((HEAP8[$4 + ($1992 | 1) >> 0] & -16 | 8) & 255) | 0) >>> 0) / 3 | 0) + (HEAP32[$2014 >> 2] | 0);
      }
      $$22 = $$22 + 1 | 0;
     }
     $$201515 = $$201515 + 1 | 0;
    }
   }
  } while (0);
  while (1) {
   if (($$23 | 0) >= ($108 | 0)) break;
   HEAP8[$11 + $$23 >> 0] = ((HEAP32[$1282 + ($$23 << 2) >> 2] | 0) >>> 0) / ($113 >>> 0) | 0;
   $$23 = $$23 + 1 | 0;
  }
  _free($1282);
  $$0 = 0;
 } while (0);
 if ((label | 0) == 309) {
  _free($2026);
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1001 = 0, $1007 = 0, $101 = 0, $1010 = 0, $1011 = 0, $102 = 0, $1029 = 0, $1031 = 0, $1038 = 0, $1039 = 0, $1040 = 0, $1048 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1058 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $145 = 0, $148 = 0, $149 = 0, $155 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $188 = 0, $189 = 0, $19 = 0, $20 = 0, $201 = 0, $205 = 0, $211 = 0, $218 = 0, $222 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $239 = 0, $240 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $258 = 0, $259 = 0, $262 = 0, $264 = 0, $267 = 0, $27 = 0, $272 = 0, $279 = 0, $289 = 0, $293 = 0, $299 = 0, $30 = 0, $303 = 0, $306 = 0, $310 = 0, $312 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $325 = 0, $327 = 0, $337 = 0, $338 = 0, $34 = 0, $348 = 0, $350 = 0, $353 = 0, $355 = 0, $358 = 0, $360 = 0, $363 = 0, $366 = 0, $367 = 0, $369 = 0, $37 = 0, $370 = 0, $372 = 0, $373 = 0, $375 = 0, $376 = 0, $381 = 0, $382 = 0, $387 = 0, $394 = 0, $398 = 0, $404 = 0, $41 = 0, $411 = 0, $415 = 0, $423 = 0, $426 = 0, $427 = 0, $428 = 0, $432 = 0, $433 = 0, $439 = 0, $44 = 0, $444 = 0, $445 = 0, $448 = 0, $450 = 0, $453 = 0, $458 = 0, $464 = 0, $466 = 0, $468 = 0, $47 = 0, $470 = 0, $487 = 0, $489 = 0, $49 = 0, $496 = 0, $497 = 0, $498 = 0, $50 = 0, $506 = 0, $508 = 0, $509 = 0, $511 = 0, $52 = 0, $520 = 0, $524 = 0, $526 = 0, $527 = 0, $528 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $546 = 0, $548 = 0, $549 = 0, $555 = 0, $557 = 0, $559 = 0, $56 = 0, $564 = 0, $566 = 0, $568 = 0, $569 = 0, $570 = 0, $578 = 0, $579 = 0, $58 = 0, $582 = 0, $586 = 0, $589 = 0, $591 = 0, $597 = 0, $6 = 0, $60 = 0, $601 = 0, $605 = 0, $614 = 0, $615 = 0, $62 = 0, $621 = 0, $623 = 0, $627 = 0, $630 = 0, $632 = 0, $637 = 0, $64 = 0, $643 = 0, $648 = 0, $649 = 0, $650 = 0, $656 = 0, $657 = 0, $658 = 0, $662 = 0, $67 = 0, $673 = 0, $678 = 0, $679 = 0, $681 = 0, $687 = 0, $689 = 0, $69 = 0, $693 = 0, $699 = 0, $7 = 0, $70 = 0, $703 = 0, $709 = 0, $71 = 0, $711 = 0, $717 = 0, $72 = 0, $721 = 0, $722 = 0, $727 = 0, $73 = 0, $733 = 0, $738 = 0, $741 = 0, $742 = 0, $745 = 0, $747 = 0, $749 = 0, $752 = 0, $763 = 0, $768 = 0, $77 = 0, $770 = 0, $773 = 0, $775 = 0, $778 = 0, $781 = 0, $782 = 0, $783 = 0, $785 = 0, $787 = 0, $788 = 0, $790 = 0, $791 = 0, $796 = 0, $797 = 0, $8 = 0, $80 = 0, $810 = 0, $813 = 0, $814 = 0, $820 = 0, $828 = 0, $834 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $843 = 0, $844 = 0, $850 = 0, $855 = 0, $856 = 0, $859 = 0, $861 = 0, $864 = 0, $869 = 0, $87 = 0, $875 = 0, $877 = 0, $879 = 0, $880 = 0, $898 = 0, $9 = 0, $900 = 0, $907 = 0, $908 = 0, $909 = 0, $916 = 0, $92 = 0, $920 = 0, $924 = 0, $926 = 0, $93 = 0, $932 = 0, $933 = 0, $935 = 0, $936 = 0, $940 = 0, $945 = 0, $946 = 0, $947 = 0, $95 = 0, $953 = 0, $955 = 0, $96 = 0, $961 = 0, $966 = 0, $969 = 0, $970 = 0, $971 = 0, $975 = 0, $976 = 0, $98 = 0, $982 = 0, $987 = 0, $988 = 0, $991 = 0, $993 = 0, $996 = 0, label = 0, sp = 0, $955$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 do if ($0 >>> 0 < 245) {
  $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
  $7 = $6 >>> 3;
  $8 = HEAP32[4359] | 0;
  $9 = $8 >>> $7;
  if ($9 & 3 | 0) {
   $14 = ($9 & 1 ^ 1) + $7 | 0;
   $16 = 17476 + ($14 << 1 << 2) | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   do if (($16 | 0) == ($20 | 0)) HEAP32[4359] = $8 & ~(1 << $14); else {
    if ($20 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort();
    $27 = $20 + 12 | 0;
    if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$27 >> 2] = $16;
     HEAP32[$17 >> 2] = $20;
     break;
    } else _abort();
   } while (0);
   $30 = $14 << 3;
   HEAP32[$18 + 4 >> 2] = $30 | 3;
   $34 = $18 + $30 + 4 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
   $$0 = $19;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $37 = HEAP32[4361] | 0;
  if ($6 >>> 0 > $37 >>> 0) {
   if ($9 | 0) {
    $41 = 2 << $7;
    $44 = $9 << $7 & ($41 | 0 - $41);
    $47 = ($44 & 0 - $44) + -1 | 0;
    $49 = $47 >>> 12 & 16;
    $50 = $47 >>> $49;
    $52 = $50 >>> 5 & 8;
    $54 = $50 >>> $52;
    $56 = $54 >>> 2 & 4;
    $58 = $54 >>> $56;
    $60 = $58 >>> 1 & 2;
    $62 = $58 >>> $60;
    $64 = $62 >>> 1 & 1;
    $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0;
    $69 = 17476 + ($67 << 1 << 2) | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 + 8 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    do if (($69 | 0) == ($73 | 0)) {
     $77 = $8 & ~(1 << $67);
     HEAP32[4359] = $77;
     $98 = $77;
    } else {
     if ($73 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort();
     $80 = $73 + 12 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
      HEAP32[$80 >> 2] = $69;
      HEAP32[$70 >> 2] = $73;
      $98 = $8;
      break;
     } else _abort();
    } while (0);
    $84 = ($67 << 3) - $6 | 0;
    HEAP32[$71 + 4 >> 2] = $6 | 3;
    $87 = $71 + $6 | 0;
    HEAP32[$87 + 4 >> 2] = $84 | 1;
    HEAP32[$87 + $84 >> 2] = $84;
    if ($37 | 0) {
     $92 = HEAP32[4364] | 0;
     $93 = $37 >>> 3;
     $95 = 17476 + ($93 << 1 << 2) | 0;
     $96 = 1 << $93;
     if (!($98 & $96)) {
      HEAP32[4359] = $98 | $96;
      $$0199 = $95;
      $$pre$phiZ2D = $95 + 8 | 0;
     } else {
      $101 = $95 + 8 | 0;
      $102 = HEAP32[$101 >> 2] | 0;
      if ($102 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
       $$0199 = $102;
       $$pre$phiZ2D = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $92;
     HEAP32[$$0199 + 12 >> 2] = $92;
     HEAP32[$92 + 8 >> 2] = $$0199;
     HEAP32[$92 + 12 >> 2] = $95;
    }
    HEAP32[4361] = $84;
    HEAP32[4364] = $87;
    $$0 = $72;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $108 = HEAP32[4360] | 0;
   if (!$108) $$0197 = $6; else {
    $112 = ($108 & 0 - $108) + -1 | 0;
    $114 = $112 >>> 12 & 16;
    $115 = $112 >>> $114;
    $117 = $115 >>> 5 & 8;
    $119 = $115 >>> $117;
    $121 = $119 >>> 2 & 4;
    $123 = $119 >>> $121;
    $125 = $123 >>> 1 & 2;
    $127 = $123 >>> $125;
    $129 = $127 >>> 1 & 1;
    $134 = HEAP32[17740 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0;
    $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0;
    $142 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!$142) {
     $$0192$lcssa$i = $134;
     $$0193$lcssa$i = $138;
    } else {
     $$01928$i = $134;
     $$01937$i = $138;
     $145 = $142;
     while (1) {
      $148 = (HEAP32[$145 + 4 >> 2] & -8) - $6 | 0;
      $149 = $148 >>> 0 < $$01937$i >>> 0;
      $$$0193$i = $149 ? $148 : $$01937$i;
      $$$0192$i = $149 ? $145 : $$01928$i;
      $145 = HEAP32[$145 + 16 + (((HEAP32[$145 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
      if (!$145) {
       $$0192$lcssa$i = $$$0192$i;
       $$0193$lcssa$i = $$$0193$i;
       break;
      } else {
       $$01928$i = $$$0192$i;
       $$01937$i = $$$0193$i;
      }
     }
    }
    $155 = HEAP32[4363] | 0;
    if ($$0192$lcssa$i >>> 0 < $155 >>> 0) _abort();
    $157 = $$0192$lcssa$i + $6 | 0;
    if ($$0192$lcssa$i >>> 0 >= $157 >>> 0) _abort();
    $160 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0;
    $162 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0;
    do if (($162 | 0) == ($$0192$lcssa$i | 0)) {
     $173 = $$0192$lcssa$i + 20 | 0;
     $174 = HEAP32[$173 >> 2] | 0;
     if (!$174) {
      $176 = $$0192$lcssa$i + 16 | 0;
      $177 = HEAP32[$176 >> 2] | 0;
      if (!$177) {
       $$3$i = 0;
       break;
      } else {
       $$1196$i = $177;
       $$1198$i = $176;
      }
     } else {
      $$1196$i = $174;
      $$1198$i = $173;
     }
     while (1) {
      $179 = $$1196$i + 20 | 0;
      $180 = HEAP32[$179 >> 2] | 0;
      if ($180 | 0) {
       $$1196$i = $180;
       $$1198$i = $179;
       continue;
      }
      $182 = $$1196$i + 16 | 0;
      $183 = HEAP32[$182 >> 2] | 0;
      if (!$183) break; else {
       $$1196$i = $183;
       $$1198$i = $182;
      }
     }
     if ($$1198$i >>> 0 < $155 >>> 0) _abort(); else {
      HEAP32[$$1198$i >> 2] = 0;
      $$3$i = $$1196$i;
      break;
     }
    } else {
     $165 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0;
     if ($165 >>> 0 < $155 >>> 0) _abort();
     $167 = $165 + 12 | 0;
     if ((HEAP32[$167 >> 2] | 0) != ($$0192$lcssa$i | 0)) _abort();
     $170 = $162 + 8 | 0;
     if ((HEAP32[$170 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
      HEAP32[$167 >> 2] = $162;
      HEAP32[$170 >> 2] = $165;
      $$3$i = $162;
      break;
     } else _abort();
    } while (0);
    L73 : do if ($160 | 0) {
     $188 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0;
     $189 = 17740 + ($188 << 2) | 0;
     do if (($$0192$lcssa$i | 0) == (HEAP32[$189 >> 2] | 0)) {
      HEAP32[$189 >> 2] = $$3$i;
      if (!$$3$i) {
       HEAP32[4360] = $108 & ~(1 << $188);
       break L73;
      }
     } else if ($160 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
      HEAP32[$160 + 16 + (((HEAP32[$160 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i;
      if (!$$3$i) break L73; else break;
     } while (0);
     $201 = HEAP32[4363] | 0;
     if ($$3$i >>> 0 < $201 >>> 0) _abort();
     HEAP32[$$3$i + 24 >> 2] = $160;
     $205 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0;
     do if ($205 | 0) if ($205 >>> 0 < $201 >>> 0) _abort(); else {
      HEAP32[$$3$i + 16 >> 2] = $205;
      HEAP32[$205 + 24 >> 2] = $$3$i;
      break;
     } while (0);
     $211 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0;
     if ($211 | 0) if ($211 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
      HEAP32[$$3$i + 20 >> 2] = $211;
      HEAP32[$211 + 24 >> 2] = $$3$i;
      break;
     }
    } while (0);
    if ($$0193$lcssa$i >>> 0 < 16) {
     $218 = $$0193$lcssa$i + $6 | 0;
     HEAP32[$$0192$lcssa$i + 4 >> 2] = $218 | 3;
     $222 = $$0192$lcssa$i + $218 + 4 | 0;
     HEAP32[$222 >> 2] = HEAP32[$222 >> 2] | 1;
    } else {
     HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3;
     HEAP32[$157 + 4 >> 2] = $$0193$lcssa$i | 1;
     HEAP32[$157 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i;
     if ($37 | 0) {
      $231 = HEAP32[4364] | 0;
      $232 = $37 >>> 3;
      $234 = 17476 + ($232 << 1 << 2) | 0;
      $235 = 1 << $232;
      if (!($8 & $235)) {
       HEAP32[4359] = $8 | $235;
       $$0189$i = $234;
       $$pre$phi$iZ2D = $234 + 8 | 0;
      } else {
       $239 = $234 + 8 | 0;
       $240 = HEAP32[$239 >> 2] | 0;
       if ($240 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
        $$0189$i = $240;
        $$pre$phi$iZ2D = $239;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $231;
      HEAP32[$$0189$i + 12 >> 2] = $231;
      HEAP32[$231 + 8 >> 2] = $$0189$i;
      HEAP32[$231 + 12 >> 2] = $234;
     }
     HEAP32[4361] = $$0193$lcssa$i;
     HEAP32[4364] = $157;
    }
    $$0 = $$0192$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $$0197 = $6;
 } else if ($0 >>> 0 > 4294967231) $$0197 = -1; else {
  $248 = $0 + 11 | 0;
  $249 = $248 & -8;
  $250 = HEAP32[4360] | 0;
  if (!$250) $$0197 = $249; else {
   $252 = 0 - $249 | 0;
   $253 = $248 >>> 8;
   if (!$253) $$0358$i = 0; else if ($249 >>> 0 > 16777215) $$0358$i = 31; else {
    $258 = ($253 + 1048320 | 0) >>> 16 & 8;
    $259 = $253 << $258;
    $262 = ($259 + 520192 | 0) >>> 16 & 4;
    $264 = $259 << $262;
    $267 = ($264 + 245760 | 0) >>> 16 & 2;
    $272 = 14 - ($262 | $258 | $267) + ($264 << $267 >>> 15) | 0;
    $$0358$i = $249 >>> ($272 + 7 | 0) & 1 | $272 << 1;
   }
   $279 = HEAP32[17740 + ($$0358$i << 2) >> 2] | 0;
   L117 : do if (!$279) {
    $$2355$i = 0;
    $$3$i201 = 0;
    $$3350$i = $252;
    label = 81;
   } else {
    $$0342$i = 0;
    $$0347$i = $252;
    $$0353$i = $279;
    $$0359$i = $249 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0);
    $$0362$i = 0;
    while (1) {
     $289 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $249 | 0;
     if ($289 >>> 0 < $$0347$i >>> 0) if (!$289) {
      $$415$i = $$0353$i;
      $$435114$i = 0;
      $$435713$i = $$0353$i;
      label = 85;
      break L117;
     } else {
      $$1343$i = $$0353$i;
      $$1348$i = $289;
     } else {
      $$1343$i = $$0342$i;
      $$1348$i = $$0347$i;
     }
     $293 = HEAP32[$$0353$i + 20 >> 2] | 0;
     $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0;
     $$1363$i = ($293 | 0) == 0 | ($293 | 0) == ($$0353$i | 0) ? $$0362$i : $293;
     $299 = ($$0353$i | 0) == 0;
     if ($299) {
      $$2355$i = $$1363$i;
      $$3$i201 = $$1343$i;
      $$3350$i = $$1348$i;
      label = 81;
      break;
     } else {
      $$0342$i = $$1343$i;
      $$0347$i = $$1348$i;
      $$0359$i = $$0359$i << (($299 ^ 1) & 1);
      $$0362$i = $$1363$i;
     }
    }
   } while (0);
   if ((label | 0) == 81) {
    if (($$2355$i | 0) == 0 & ($$3$i201 | 0) == 0) {
     $303 = 2 << $$0358$i;
     $306 = $250 & ($303 | 0 - $303);
     if (!$306) {
      $$0197 = $249;
      break;
     }
     $310 = ($306 & 0 - $306) + -1 | 0;
     $312 = $310 >>> 12 & 16;
     $313 = $310 >>> $312;
     $315 = $313 >>> 5 & 8;
     $317 = $313 >>> $315;
     $319 = $317 >>> 2 & 4;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 2;
     $325 = $321 >>> $323;
     $327 = $325 >>> 1 & 1;
     $$4$ph$i = 0;
     $$4357$ph$i = HEAP32[17740 + (($315 | $312 | $319 | $323 | $327) + ($325 >>> $327) << 2) >> 2] | 0;
    } else {
     $$4$ph$i = $$3$i201;
     $$4357$ph$i = $$2355$i;
    }
    if (!$$4357$ph$i) {
     $$4$lcssa$i = $$4$ph$i;
     $$4351$lcssa$i = $$3350$i;
    } else {
     $$415$i = $$4$ph$i;
     $$435114$i = $$3350$i;
     $$435713$i = $$4357$ph$i;
     label = 85;
    }
   }
   if ((label | 0) == 85) while (1) {
    label = 0;
    $337 = (HEAP32[$$435713$i + 4 >> 2] & -8) - $249 | 0;
    $338 = $337 >>> 0 < $$435114$i >>> 0;
    $$$4351$i = $338 ? $337 : $$435114$i;
    $$4357$$4$i = $338 ? $$435713$i : $$415$i;
    $$435713$i = HEAP32[$$435713$i + 16 + (((HEAP32[$$435713$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!$$435713$i) {
     $$4$lcssa$i = $$4357$$4$i;
     $$4351$lcssa$i = $$$4351$i;
     break;
    } else {
     $$415$i = $$4357$$4$i;
     $$435114$i = $$$4351$i;
     label = 85;
    }
   }
   if (!$$4$lcssa$i) $$0197 = $249; else if ($$4351$lcssa$i >>> 0 < ((HEAP32[4361] | 0) - $249 | 0) >>> 0) {
    $348 = HEAP32[4363] | 0;
    if ($$4$lcssa$i >>> 0 < $348 >>> 0) _abort();
    $350 = $$4$lcssa$i + $249 | 0;
    if ($$4$lcssa$i >>> 0 >= $350 >>> 0) _abort();
    $353 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0;
    $355 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0;
    do if (($355 | 0) == ($$4$lcssa$i | 0)) {
     $366 = $$4$lcssa$i + 20 | 0;
     $367 = HEAP32[$366 >> 2] | 0;
     if (!$367) {
      $369 = $$4$lcssa$i + 16 | 0;
      $370 = HEAP32[$369 >> 2] | 0;
      if (!$370) {
       $$3372$i = 0;
       break;
      } else {
       $$1370$i = $370;
       $$1374$i = $369;
      }
     } else {
      $$1370$i = $367;
      $$1374$i = $366;
     }
     while (1) {
      $372 = $$1370$i + 20 | 0;
      $373 = HEAP32[$372 >> 2] | 0;
      if ($373 | 0) {
       $$1370$i = $373;
       $$1374$i = $372;
       continue;
      }
      $375 = $$1370$i + 16 | 0;
      $376 = HEAP32[$375 >> 2] | 0;
      if (!$376) break; else {
       $$1370$i = $376;
       $$1374$i = $375;
      }
     }
     if ($$1374$i >>> 0 < $348 >>> 0) _abort(); else {
      HEAP32[$$1374$i >> 2] = 0;
      $$3372$i = $$1370$i;
      break;
     }
    } else {
     $358 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0;
     if ($358 >>> 0 < $348 >>> 0) _abort();
     $360 = $358 + 12 | 0;
     if ((HEAP32[$360 >> 2] | 0) != ($$4$lcssa$i | 0)) _abort();
     $363 = $355 + 8 | 0;
     if ((HEAP32[$363 >> 2] | 0) == ($$4$lcssa$i | 0)) {
      HEAP32[$360 >> 2] = $355;
      HEAP32[$363 >> 2] = $358;
      $$3372$i = $355;
      break;
     } else _abort();
    } while (0);
    L164 : do if (!$353) $470 = $250; else {
     $381 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0;
     $382 = 17740 + ($381 << 2) | 0;
     do if (($$4$lcssa$i | 0) == (HEAP32[$382 >> 2] | 0)) {
      HEAP32[$382 >> 2] = $$3372$i;
      if (!$$3372$i) {
       $387 = $250 & ~(1 << $381);
       HEAP32[4360] = $387;
       $470 = $387;
       break L164;
      }
     } else if ($353 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
      HEAP32[$353 + 16 + (((HEAP32[$353 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i;
      if (!$$3372$i) {
       $470 = $250;
       break L164;
      } else break;
     } while (0);
     $394 = HEAP32[4363] | 0;
     if ($$3372$i >>> 0 < $394 >>> 0) _abort();
     HEAP32[$$3372$i + 24 >> 2] = $353;
     $398 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0;
     do if ($398 | 0) if ($398 >>> 0 < $394 >>> 0) _abort(); else {
      HEAP32[$$3372$i + 16 >> 2] = $398;
      HEAP32[$398 + 24 >> 2] = $$3372$i;
      break;
     } while (0);
     $404 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0;
     if (!$404) $470 = $250; else if ($404 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
      HEAP32[$$3372$i + 20 >> 2] = $404;
      HEAP32[$404 + 24 >> 2] = $$3372$i;
      $470 = $250;
      break;
     }
    } while (0);
    do if ($$4351$lcssa$i >>> 0 < 16) {
     $411 = $$4351$lcssa$i + $249 | 0;
     HEAP32[$$4$lcssa$i + 4 >> 2] = $411 | 3;
     $415 = $$4$lcssa$i + $411 + 4 | 0;
     HEAP32[$415 >> 2] = HEAP32[$415 >> 2] | 1;
    } else {
     HEAP32[$$4$lcssa$i + 4 >> 2] = $249 | 3;
     HEAP32[$350 + 4 >> 2] = $$4351$lcssa$i | 1;
     HEAP32[$350 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i;
     $423 = $$4351$lcssa$i >>> 3;
     if ($$4351$lcssa$i >>> 0 < 256) {
      $426 = 17476 + ($423 << 1 << 2) | 0;
      $427 = HEAP32[4359] | 0;
      $428 = 1 << $423;
      if (!($427 & $428)) {
       HEAP32[4359] = $427 | $428;
       $$0368$i = $426;
       $$pre$phi$i211Z2D = $426 + 8 | 0;
      } else {
       $432 = $426 + 8 | 0;
       $433 = HEAP32[$432 >> 2] | 0;
       if ($433 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
        $$0368$i = $433;
        $$pre$phi$i211Z2D = $432;
       }
      }
      HEAP32[$$pre$phi$i211Z2D >> 2] = $350;
      HEAP32[$$0368$i + 12 >> 2] = $350;
      HEAP32[$350 + 8 >> 2] = $$0368$i;
      HEAP32[$350 + 12 >> 2] = $426;
      break;
     }
     $439 = $$4351$lcssa$i >>> 8;
     if (!$439) $$0361$i = 0; else if ($$4351$lcssa$i >>> 0 > 16777215) $$0361$i = 31; else {
      $444 = ($439 + 1048320 | 0) >>> 16 & 8;
      $445 = $439 << $444;
      $448 = ($445 + 520192 | 0) >>> 16 & 4;
      $450 = $445 << $448;
      $453 = ($450 + 245760 | 0) >>> 16 & 2;
      $458 = 14 - ($448 | $444 | $453) + ($450 << $453 >>> 15) | 0;
      $$0361$i = $$4351$lcssa$i >>> ($458 + 7 | 0) & 1 | $458 << 1;
     }
     $464 = 17740 + ($$0361$i << 2) | 0;
     HEAP32[$350 + 28 >> 2] = $$0361$i;
     $466 = $350 + 16 | 0;
     HEAP32[$466 + 4 >> 2] = 0;
     HEAP32[$466 >> 2] = 0;
     $468 = 1 << $$0361$i;
     if (!($470 & $468)) {
      HEAP32[4360] = $470 | $468;
      HEAP32[$464 >> 2] = $350;
      HEAP32[$350 + 24 >> 2] = $464;
      HEAP32[$350 + 12 >> 2] = $350;
      HEAP32[$350 + 8 >> 2] = $350;
      break;
     }
     $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0);
     $$0345$i = HEAP32[$464 >> 2] | 0;
     while (1) {
      if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
       label = 139;
       break;
      }
      $487 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0;
      $489 = HEAP32[$487 >> 2] | 0;
      if (!$489) {
       label = 136;
       break;
      } else {
       $$0344$i = $$0344$i << 1;
       $$0345$i = $489;
      }
     }
     if ((label | 0) == 136) if ($487 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
      HEAP32[$487 >> 2] = $350;
      HEAP32[$350 + 24 >> 2] = $$0345$i;
      HEAP32[$350 + 12 >> 2] = $350;
      HEAP32[$350 + 8 >> 2] = $350;
      break;
     } else if ((label | 0) == 139) {
      $496 = $$0345$i + 8 | 0;
      $497 = HEAP32[$496 >> 2] | 0;
      $498 = HEAP32[4363] | 0;
      if ($497 >>> 0 >= $498 >>> 0 & $$0345$i >>> 0 >= $498 >>> 0) {
       HEAP32[$497 + 12 >> 2] = $350;
       HEAP32[$496 >> 2] = $350;
       HEAP32[$350 + 8 >> 2] = $497;
       HEAP32[$350 + 12 >> 2] = $$0345$i;
       HEAP32[$350 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $$0197 = $249;
  }
 } while (0);
 $506 = HEAP32[4361] | 0;
 if ($506 >>> 0 >= $$0197 >>> 0) {
  $508 = $506 - $$0197 | 0;
  $509 = HEAP32[4364] | 0;
  if ($508 >>> 0 > 15) {
   $511 = $509 + $$0197 | 0;
   HEAP32[4364] = $511;
   HEAP32[4361] = $508;
   HEAP32[$511 + 4 >> 2] = $508 | 1;
   HEAP32[$511 + $508 >> 2] = $508;
   HEAP32[$509 + 4 >> 2] = $$0197 | 3;
  } else {
   HEAP32[4361] = 0;
   HEAP32[4364] = 0;
   HEAP32[$509 + 4 >> 2] = $506 | 3;
   $520 = $509 + $506 + 4 | 0;
   HEAP32[$520 >> 2] = HEAP32[$520 >> 2] | 1;
  }
  $$0 = $509 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $524 = HEAP32[4362] | 0;
 if ($524 >>> 0 > $$0197 >>> 0) {
  $526 = $524 - $$0197 | 0;
  HEAP32[4362] = $526;
  $527 = HEAP32[4365] | 0;
  $528 = $527 + $$0197 | 0;
  HEAP32[4365] = $528;
  HEAP32[$528 + 4 >> 2] = $526 | 1;
  HEAP32[$527 + 4 >> 2] = $$0197 | 3;
  $$0 = $527 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[4477] | 0)) {
  HEAP32[4479] = 4096;
  HEAP32[4478] = 4096;
  HEAP32[4480] = -1;
  HEAP32[4481] = -1;
  HEAP32[4482] = 0;
  HEAP32[4470] = 0;
  $538 = $1 & -16 ^ 1431655768;
  HEAP32[$1 >> 2] = $538;
  HEAP32[4477] = $538;
  $542 = 4096;
 } else $542 = HEAP32[4479] | 0;
 $539 = $$0197 + 48 | 0;
 $540 = $$0197 + 47 | 0;
 $541 = $542 + $540 | 0;
 $543 = 0 - $542 | 0;
 $544 = $541 & $543;
 if ($544 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $546 = HEAP32[4469] | 0;
 if ($546 | 0) {
  $548 = HEAP32[4467] | 0;
  $549 = $548 + $544 | 0;
  if ($549 >>> 0 <= $548 >>> 0 | $549 >>> 0 > $546 >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L244 : do if (!(HEAP32[4470] & 4)) {
  $555 = HEAP32[4365] | 0;
  L246 : do if (!$555) label = 163; else {
   $$0$i$i = 17884;
   while (1) {
    $557 = HEAP32[$$0$i$i >> 2] | 0;
    if ($557 >>> 0 <= $555 >>> 0) {
     $559 = $$0$i$i + 4 | 0;
     if (($557 + (HEAP32[$559 >> 2] | 0) | 0) >>> 0 > $555 >>> 0) break;
    }
    $564 = HEAP32[$$0$i$i + 8 >> 2] | 0;
    if (!$564) {
     label = 163;
     break L246;
    } else $$0$i$i = $564;
   }
   $589 = $541 - $524 & $543;
   if ($589 >>> 0 < 2147483647) {
    $591 = _sbrk($589 | 0) | 0;
    if (($591 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$559 >> 2] | 0) | 0)) if (($591 | 0) == (-1 | 0)) $$2234253237$i = $589; else {
     $$723948$i = $589;
     $$749$i = $591;
     label = 180;
     break L244;
    } else {
     $$2247$ph$i = $591;
     $$2253$ph$i = $589;
     label = 171;
    }
   } else $$2234253237$i = 0;
  } while (0);
  do if ((label | 0) == 163) {
   $566 = _sbrk(0) | 0;
   if (($566 | 0) == (-1 | 0)) $$2234253237$i = 0; else {
    $568 = $566;
    $569 = HEAP32[4478] | 0;
    $570 = $569 + -1 | 0;
    $$$i = (($570 & $568 | 0) == 0 ? 0 : ($570 + $568 & 0 - $569) - $568 | 0) + $544 | 0;
    $578 = HEAP32[4467] | 0;
    $579 = $$$i + $578 | 0;
    if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
     $582 = HEAP32[4469] | 0;
     if ($582 | 0) if ($579 >>> 0 <= $578 >>> 0 | $579 >>> 0 > $582 >>> 0) {
      $$2234253237$i = 0;
      break;
     }
     $586 = _sbrk($$$i | 0) | 0;
     if (($586 | 0) == ($566 | 0)) {
      $$723948$i = $$$i;
      $$749$i = $566;
      label = 180;
      break L244;
     } else {
      $$2247$ph$i = $586;
      $$2253$ph$i = $$$i;
      label = 171;
     }
    } else $$2234253237$i = 0;
   }
  } while (0);
  do if ((label | 0) == 171) {
   $597 = 0 - $$2253$ph$i | 0;
   if (!($539 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) if (($$2247$ph$i | 0) == (-1 | 0)) {
    $$2234253237$i = 0;
    break;
   } else {
    $$723948$i = $$2253$ph$i;
    $$749$i = $$2247$ph$i;
    label = 180;
    break L244;
   }
   $601 = HEAP32[4479] | 0;
   $605 = $540 - $$2253$ph$i + $601 & 0 - $601;
   if ($605 >>> 0 >= 2147483647) {
    $$723948$i = $$2253$ph$i;
    $$749$i = $$2247$ph$i;
    label = 180;
    break L244;
   }
   if ((_sbrk($605 | 0) | 0) == (-1 | 0)) {
    _sbrk($597 | 0) | 0;
    $$2234253237$i = 0;
    break;
   } else {
    $$723948$i = $605 + $$2253$ph$i | 0;
    $$749$i = $$2247$ph$i;
    label = 180;
    break L244;
   }
  } while (0);
  HEAP32[4470] = HEAP32[4470] | 4;
  $$4236$i = $$2234253237$i;
  label = 178;
 } else {
  $$4236$i = 0;
  label = 178;
 } while (0);
 if ((label | 0) == 178) if ($544 >>> 0 < 2147483647) {
  $614 = _sbrk($544 | 0) | 0;
  $615 = _sbrk(0) | 0;
  $621 = $615 - $614 | 0;
  $623 = $621 >>> 0 > ($$0197 + 40 | 0) >>> 0;
  if (!(($614 | 0) == (-1 | 0) | $623 ^ 1 | $614 >>> 0 < $615 >>> 0 & (($614 | 0) != (-1 | 0) & ($615 | 0) != (-1 | 0)) ^ 1)) {
   $$723948$i = $623 ? $621 : $$4236$i;
   $$749$i = $614;
   label = 180;
  }
 }
 if ((label | 0) == 180) {
  $627 = (HEAP32[4467] | 0) + $$723948$i | 0;
  HEAP32[4467] = $627;
  if ($627 >>> 0 > (HEAP32[4468] | 0) >>> 0) HEAP32[4468] = $627;
  $630 = HEAP32[4365] | 0;
  do if (!$630) {
   $632 = HEAP32[4363] | 0;
   if (($632 | 0) == 0 | $$749$i >>> 0 < $632 >>> 0) HEAP32[4363] = $$749$i;
   HEAP32[4471] = $$749$i;
   HEAP32[4472] = $$723948$i;
   HEAP32[4474] = 0;
   HEAP32[4368] = HEAP32[4477];
   HEAP32[4367] = -1;
   $$01$i$i = 0;
   do {
    $637 = 17476 + ($$01$i$i << 1 << 2) | 0;
    HEAP32[$637 + 12 >> 2] = $637;
    HEAP32[$637 + 8 >> 2] = $637;
    $$01$i$i = $$01$i$i + 1 | 0;
   } while (($$01$i$i | 0) != 32);
   $643 = $$749$i + 8 | 0;
   $648 = ($643 & 7 | 0) == 0 ? 0 : 0 - $643 & 7;
   $649 = $$749$i + $648 | 0;
   $650 = $$723948$i + -40 - $648 | 0;
   HEAP32[4365] = $649;
   HEAP32[4362] = $650;
   HEAP32[$649 + 4 >> 2] = $650 | 1;
   HEAP32[$649 + $650 + 4 >> 2] = 40;
   HEAP32[4366] = HEAP32[4481];
  } else {
   $$024371$i = 17884;
   while (1) {
    $656 = HEAP32[$$024371$i >> 2] | 0;
    $657 = $$024371$i + 4 | 0;
    $658 = HEAP32[$657 >> 2] | 0;
    if (($$749$i | 0) == ($656 + $658 | 0)) {
     label = 190;
     break;
    }
    $662 = HEAP32[$$024371$i + 8 >> 2] | 0;
    if (!$662) break; else $$024371$i = $662;
   }
   if ((label | 0) == 190) if (!(HEAP32[$$024371$i + 12 >> 2] & 8)) if ($630 >>> 0 < $$749$i >>> 0 & $630 >>> 0 >= $656 >>> 0) {
    HEAP32[$657 >> 2] = $658 + $$723948$i;
    $673 = $630 + 8 | 0;
    $678 = ($673 & 7 | 0) == 0 ? 0 : 0 - $673 & 7;
    $679 = $630 + $678 | 0;
    $681 = (HEAP32[4362] | 0) + ($$723948$i - $678) | 0;
    HEAP32[4365] = $679;
    HEAP32[4362] = $681;
    HEAP32[$679 + 4 >> 2] = $681 | 1;
    HEAP32[$679 + $681 + 4 >> 2] = 40;
    HEAP32[4366] = HEAP32[4481];
    break;
   }
   $687 = HEAP32[4363] | 0;
   if ($$749$i >>> 0 < $687 >>> 0) {
    HEAP32[4363] = $$749$i;
    $752 = $$749$i;
   } else $752 = $687;
   $689 = $$749$i + $$723948$i | 0;
   $$124470$i = 17884;
   while (1) {
    if ((HEAP32[$$124470$i >> 2] | 0) == ($689 | 0)) {
     label = 198;
     break;
    }
    $693 = HEAP32[$$124470$i + 8 >> 2] | 0;
    if (!$693) break; else $$124470$i = $693;
   }
   if ((label | 0) == 198) if (!(HEAP32[$$124470$i + 12 >> 2] & 8)) {
    HEAP32[$$124470$i >> 2] = $$749$i;
    $699 = $$124470$i + 4 | 0;
    HEAP32[$699 >> 2] = (HEAP32[$699 >> 2] | 0) + $$723948$i;
    $703 = $$749$i + 8 | 0;
    $709 = $$749$i + (($703 & 7 | 0) == 0 ? 0 : 0 - $703 & 7) | 0;
    $711 = $689 + 8 | 0;
    $717 = $689 + (($711 & 7 | 0) == 0 ? 0 : 0 - $711 & 7) | 0;
    $721 = $709 + $$0197 | 0;
    $722 = $717 - $709 - $$0197 | 0;
    HEAP32[$709 + 4 >> 2] = $$0197 | 3;
    do if (($717 | 0) == ($630 | 0)) {
     $727 = (HEAP32[4362] | 0) + $722 | 0;
     HEAP32[4362] = $727;
     HEAP32[4365] = $721;
     HEAP32[$721 + 4 >> 2] = $727 | 1;
    } else {
     if (($717 | 0) == (HEAP32[4364] | 0)) {
      $733 = (HEAP32[4361] | 0) + $722 | 0;
      HEAP32[4361] = $733;
      HEAP32[4364] = $721;
      HEAP32[$721 + 4 >> 2] = $733 | 1;
      HEAP32[$721 + $733 >> 2] = $733;
      break;
     }
     $738 = HEAP32[$717 + 4 >> 2] | 0;
     if (($738 & 3 | 0) == 1) {
      $741 = $738 & -8;
      $742 = $738 >>> 3;
      L314 : do if ($738 >>> 0 < 256) {
       $745 = HEAP32[$717 + 8 >> 2] | 0;
       $747 = HEAP32[$717 + 12 >> 2] | 0;
       $749 = 17476 + ($742 << 1 << 2) | 0;
       do if (($745 | 0) != ($749 | 0)) {
        if ($745 >>> 0 < $752 >>> 0) _abort();
        if ((HEAP32[$745 + 12 >> 2] | 0) == ($717 | 0)) break;
        _abort();
       } while (0);
       if (($747 | 0) == ($745 | 0)) {
        HEAP32[4359] = HEAP32[4359] & ~(1 << $742);
        break;
       }
       do if (($747 | 0) == ($749 | 0)) $$pre$phi11$i$iZ2D = $747 + 8 | 0; else {
        if ($747 >>> 0 < $752 >>> 0) _abort();
        $763 = $747 + 8 | 0;
        if ((HEAP32[$763 >> 2] | 0) == ($717 | 0)) {
         $$pre$phi11$i$iZ2D = $763;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$745 + 12 >> 2] = $747;
       HEAP32[$$pre$phi11$i$iZ2D >> 2] = $745;
      } else {
       $768 = HEAP32[$717 + 24 >> 2] | 0;
       $770 = HEAP32[$717 + 12 >> 2] | 0;
       do if (($770 | 0) == ($717 | 0)) {
        $781 = $717 + 16 | 0;
        $782 = $781 + 4 | 0;
        $783 = HEAP32[$782 >> 2] | 0;
        if (!$783) {
         $785 = HEAP32[$781 >> 2] | 0;
         if (!$785) {
          $$3$i$i = 0;
          break;
         } else {
          $$1291$i$i = $785;
          $$1293$i$i = $781;
         }
        } else {
         $$1291$i$i = $783;
         $$1293$i$i = $782;
        }
        while (1) {
         $787 = $$1291$i$i + 20 | 0;
         $788 = HEAP32[$787 >> 2] | 0;
         if ($788 | 0) {
          $$1291$i$i = $788;
          $$1293$i$i = $787;
          continue;
         }
         $790 = $$1291$i$i + 16 | 0;
         $791 = HEAP32[$790 >> 2] | 0;
         if (!$791) break; else {
          $$1291$i$i = $791;
          $$1293$i$i = $790;
         }
        }
        if ($$1293$i$i >>> 0 < $752 >>> 0) _abort(); else {
         HEAP32[$$1293$i$i >> 2] = 0;
         $$3$i$i = $$1291$i$i;
         break;
        }
       } else {
        $773 = HEAP32[$717 + 8 >> 2] | 0;
        if ($773 >>> 0 < $752 >>> 0) _abort();
        $775 = $773 + 12 | 0;
        if ((HEAP32[$775 >> 2] | 0) != ($717 | 0)) _abort();
        $778 = $770 + 8 | 0;
        if ((HEAP32[$778 >> 2] | 0) == ($717 | 0)) {
         HEAP32[$775 >> 2] = $770;
         HEAP32[$778 >> 2] = $773;
         $$3$i$i = $770;
         break;
        } else _abort();
       } while (0);
       if (!$768) break;
       $796 = HEAP32[$717 + 28 >> 2] | 0;
       $797 = 17740 + ($796 << 2) | 0;
       do if (($717 | 0) == (HEAP32[$797 >> 2] | 0)) {
        HEAP32[$797 >> 2] = $$3$i$i;
        if ($$3$i$i | 0) break;
        HEAP32[4360] = HEAP32[4360] & ~(1 << $796);
        break L314;
       } else if ($768 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
        HEAP32[$768 + 16 + (((HEAP32[$768 + 16 >> 2] | 0) != ($717 | 0) & 1) << 2) >> 2] = $$3$i$i;
        if (!$$3$i$i) break L314; else break;
       } while (0);
       $810 = HEAP32[4363] | 0;
       if ($$3$i$i >>> 0 < $810 >>> 0) _abort();
       HEAP32[$$3$i$i + 24 >> 2] = $768;
       $813 = $717 + 16 | 0;
       $814 = HEAP32[$813 >> 2] | 0;
       do if ($814 | 0) if ($814 >>> 0 < $810 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 16 >> 2] = $814;
        HEAP32[$814 + 24 >> 2] = $$3$i$i;
        break;
       } while (0);
       $820 = HEAP32[$813 + 4 >> 2] | 0;
       if (!$820) break;
       if ($820 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 20 >> 2] = $820;
        HEAP32[$820 + 24 >> 2] = $$3$i$i;
        break;
       }
      } while (0);
      $$0$i18$i = $717 + $741 | 0;
      $$0287$i$i = $741 + $722 | 0;
     } else {
      $$0$i18$i = $717;
      $$0287$i$i = $722;
     }
     $828 = $$0$i18$i + 4 | 0;
     HEAP32[$828 >> 2] = HEAP32[$828 >> 2] & -2;
     HEAP32[$721 + 4 >> 2] = $$0287$i$i | 1;
     HEAP32[$721 + $$0287$i$i >> 2] = $$0287$i$i;
     $834 = $$0287$i$i >>> 3;
     if ($$0287$i$i >>> 0 < 256) {
      $837 = 17476 + ($834 << 1 << 2) | 0;
      $838 = HEAP32[4359] | 0;
      $839 = 1 << $834;
      do if (!($838 & $839)) {
       HEAP32[4359] = $838 | $839;
       $$0295$i$i = $837;
       $$pre$phi$i20$iZ2D = $837 + 8 | 0;
      } else {
       $843 = $837 + 8 | 0;
       $844 = HEAP32[$843 >> 2] | 0;
       if ($844 >>> 0 >= (HEAP32[4363] | 0) >>> 0) {
        $$0295$i$i = $844;
        $$pre$phi$i20$iZ2D = $843;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i20$iZ2D >> 2] = $721;
      HEAP32[$$0295$i$i + 12 >> 2] = $721;
      HEAP32[$721 + 8 >> 2] = $$0295$i$i;
      HEAP32[$721 + 12 >> 2] = $837;
      break;
     }
     $850 = $$0287$i$i >>> 8;
     do if (!$850) $$0296$i$i = 0; else {
      if ($$0287$i$i >>> 0 > 16777215) {
       $$0296$i$i = 31;
       break;
      }
      $855 = ($850 + 1048320 | 0) >>> 16 & 8;
      $856 = $850 << $855;
      $859 = ($856 + 520192 | 0) >>> 16 & 4;
      $861 = $856 << $859;
      $864 = ($861 + 245760 | 0) >>> 16 & 2;
      $869 = 14 - ($859 | $855 | $864) + ($861 << $864 >>> 15) | 0;
      $$0296$i$i = $$0287$i$i >>> ($869 + 7 | 0) & 1 | $869 << 1;
     } while (0);
     $875 = 17740 + ($$0296$i$i << 2) | 0;
     HEAP32[$721 + 28 >> 2] = $$0296$i$i;
     $877 = $721 + 16 | 0;
     HEAP32[$877 + 4 >> 2] = 0;
     HEAP32[$877 >> 2] = 0;
     $879 = HEAP32[4360] | 0;
     $880 = 1 << $$0296$i$i;
     if (!($879 & $880)) {
      HEAP32[4360] = $879 | $880;
      HEAP32[$875 >> 2] = $721;
      HEAP32[$721 + 24 >> 2] = $875;
      HEAP32[$721 + 12 >> 2] = $721;
      HEAP32[$721 + 8 >> 2] = $721;
      break;
     }
     $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0);
     $$0289$i$i = HEAP32[$875 >> 2] | 0;
     while (1) {
      if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
       label = 265;
       break;
      }
      $898 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0;
      $900 = HEAP32[$898 >> 2] | 0;
      if (!$900) {
       label = 262;
       break;
      } else {
       $$0288$i$i = $$0288$i$i << 1;
       $$0289$i$i = $900;
      }
     }
     if ((label | 0) == 262) if ($898 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
      HEAP32[$898 >> 2] = $721;
      HEAP32[$721 + 24 >> 2] = $$0289$i$i;
      HEAP32[$721 + 12 >> 2] = $721;
      HEAP32[$721 + 8 >> 2] = $721;
      break;
     } else if ((label | 0) == 265) {
      $907 = $$0289$i$i + 8 | 0;
      $908 = HEAP32[$907 >> 2] | 0;
      $909 = HEAP32[4363] | 0;
      if ($908 >>> 0 >= $909 >>> 0 & $$0289$i$i >>> 0 >= $909 >>> 0) {
       HEAP32[$908 + 12 >> 2] = $721;
       HEAP32[$907 >> 2] = $721;
       HEAP32[$721 + 8 >> 2] = $908;
       HEAP32[$721 + 12 >> 2] = $$0289$i$i;
       HEAP32[$721 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $709 + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0$i$i$i = 17884;
   while (1) {
    $916 = HEAP32[$$0$i$i$i >> 2] | 0;
    if ($916 >>> 0 <= $630 >>> 0) {
     $920 = $916 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($920 >>> 0 > $630 >>> 0) break;
    }
    $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0;
   }
   $924 = $920 + -47 | 0;
   $926 = $924 + 8 | 0;
   $932 = $924 + (($926 & 7 | 0) == 0 ? 0 : 0 - $926 & 7) | 0;
   $933 = $630 + 16 | 0;
   $935 = $932 >>> 0 < $933 >>> 0 ? $630 : $932;
   $936 = $935 + 8 | 0;
   $940 = $$749$i + 8 | 0;
   $945 = ($940 & 7 | 0) == 0 ? 0 : 0 - $940 & 7;
   $946 = $$749$i + $945 | 0;
   $947 = $$723948$i + -40 - $945 | 0;
   HEAP32[4365] = $946;
   HEAP32[4362] = $947;
   HEAP32[$946 + 4 >> 2] = $947 | 1;
   HEAP32[$946 + $947 + 4 >> 2] = 40;
   HEAP32[4366] = HEAP32[4481];
   $953 = $935 + 4 | 0;
   HEAP32[$953 >> 2] = 27;
   HEAP32[$936 >> 2] = HEAP32[4471];
   HEAP32[$936 + 4 >> 2] = HEAP32[4472];
   HEAP32[$936 + 8 >> 2] = HEAP32[4473];
   HEAP32[$936 + 12 >> 2] = HEAP32[4474];
   HEAP32[4471] = $$749$i;
   HEAP32[4472] = $$723948$i;
   HEAP32[4474] = 0;
   HEAP32[4473] = $936;
   $955 = $935 + 24 | 0;
   do {
    $955$looptemp = $955;
    $955 = $955 + 4 | 0;
    HEAP32[$955 >> 2] = 7;
   } while (($955$looptemp + 8 | 0) >>> 0 < $920 >>> 0);
   if (($935 | 0) != ($630 | 0)) {
    $961 = $935 - $630 | 0;
    HEAP32[$953 >> 2] = HEAP32[$953 >> 2] & -2;
    HEAP32[$630 + 4 >> 2] = $961 | 1;
    HEAP32[$935 >> 2] = $961;
    $966 = $961 >>> 3;
    if ($961 >>> 0 < 256) {
     $969 = 17476 + ($966 << 1 << 2) | 0;
     $970 = HEAP32[4359] | 0;
     $971 = 1 << $966;
     if (!($970 & $971)) {
      HEAP32[4359] = $970 | $971;
      $$0211$i$i = $969;
      $$pre$phi$i$iZ2D = $969 + 8 | 0;
     } else {
      $975 = $969 + 8 | 0;
      $976 = HEAP32[$975 >> 2] | 0;
      if ($976 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
       $$0211$i$i = $976;
       $$pre$phi$i$iZ2D = $975;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $630;
     HEAP32[$$0211$i$i + 12 >> 2] = $630;
     HEAP32[$630 + 8 >> 2] = $$0211$i$i;
     HEAP32[$630 + 12 >> 2] = $969;
     break;
    }
    $982 = $961 >>> 8;
    if (!$982) $$0212$i$i = 0; else if ($961 >>> 0 > 16777215) $$0212$i$i = 31; else {
     $987 = ($982 + 1048320 | 0) >>> 16 & 8;
     $988 = $982 << $987;
     $991 = ($988 + 520192 | 0) >>> 16 & 4;
     $993 = $988 << $991;
     $996 = ($993 + 245760 | 0) >>> 16 & 2;
     $1001 = 14 - ($991 | $987 | $996) + ($993 << $996 >>> 15) | 0;
     $$0212$i$i = $961 >>> ($1001 + 7 | 0) & 1 | $1001 << 1;
    }
    $1007 = 17740 + ($$0212$i$i << 2) | 0;
    HEAP32[$630 + 28 >> 2] = $$0212$i$i;
    HEAP32[$630 + 20 >> 2] = 0;
    HEAP32[$933 >> 2] = 0;
    $1010 = HEAP32[4360] | 0;
    $1011 = 1 << $$0212$i$i;
    if (!($1010 & $1011)) {
     HEAP32[4360] = $1010 | $1011;
     HEAP32[$1007 >> 2] = $630;
     HEAP32[$630 + 24 >> 2] = $1007;
     HEAP32[$630 + 12 >> 2] = $630;
     HEAP32[$630 + 8 >> 2] = $630;
     break;
    }
    $$0206$i$i = $961 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0);
    $$0207$i$i = HEAP32[$1007 >> 2] | 0;
    while (1) {
     if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($961 | 0)) {
      label = 292;
      break;
     }
     $1029 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0;
     $1031 = HEAP32[$1029 >> 2] | 0;
     if (!$1031) {
      label = 289;
      break;
     } else {
      $$0206$i$i = $$0206$i$i << 1;
      $$0207$i$i = $1031;
     }
    }
    if ((label | 0) == 289) if ($1029 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
     HEAP32[$1029 >> 2] = $630;
     HEAP32[$630 + 24 >> 2] = $$0207$i$i;
     HEAP32[$630 + 12 >> 2] = $630;
     HEAP32[$630 + 8 >> 2] = $630;
     break;
    } else if ((label | 0) == 292) {
     $1038 = $$0207$i$i + 8 | 0;
     $1039 = HEAP32[$1038 >> 2] | 0;
     $1040 = HEAP32[4363] | 0;
     if ($1039 >>> 0 >= $1040 >>> 0 & $$0207$i$i >>> 0 >= $1040 >>> 0) {
      HEAP32[$1039 + 12 >> 2] = $630;
      HEAP32[$1038 >> 2] = $630;
      HEAP32[$630 + 8 >> 2] = $1039;
      HEAP32[$630 + 12 >> 2] = $$0207$i$i;
      HEAP32[$630 + 24 >> 2] = 0;
      break;
     } else _abort();
    }
   }
  } while (0);
  $1048 = HEAP32[4362] | 0;
  if ($1048 >>> 0 > $$0197 >>> 0) {
   $1050 = $1048 - $$0197 | 0;
   HEAP32[4362] = $1050;
   $1051 = HEAP32[4365] | 0;
   $1052 = $1051 + $$0197 | 0;
   HEAP32[4365] = $1052;
   HEAP32[$1052 + 4 >> 2] = $1050 | 1;
   HEAP32[$1051 + 4 >> 2] = $$0197 | 3;
   $$0 = $1051 + 8 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $1058 = ___errno_location() | 0;
 HEAP32[$1058 >> 2] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$3 = 0, $10 = 0, $105 = 0, $106 = 0, $11 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $128 = 0, $129 = 0, $137 = 0, $138 = 0, $14 = 0, $144 = 0, $145 = 0, $15 = 0, $153 = 0, $154 = 0, $162 = 0, $163 = 0, $169 = 0, $173 = 0, $176 = 0, $177 = 0, $183 = 0, $184 = 0, $190 = 0, $191 = 0, $199 = 0, $200 = 0, $206 = 0, $207 = 0, $21 = 0, $213 = 0, $214 = 0, $22 = 0, $220 = 0, $221 = 0, $227 = 0, $228 = 0, $236 = 0, $237 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $257 = 0, $258 = 0, $264 = 0, $265 = 0, $273 = 0, $274 = 0, $28 = 0, $280 = 0, $281 = 0, $287 = 0, $288 = 0, $29 = 0, $296 = 0, $297 = 0, $3 = 0, $303 = 0, $304 = 0, $310 = 0, $311 = 0, $317 = 0, $318 = 0, $324 = 0, $325 = 0, $331 = 0, $332 = 0, $340 = 0, $341 = 0, $349 = 0, $35 = 0, $350 = 0, $356 = 0, $357 = 0, $36 = 0, $363 = 0, $364 = 0, $370 = 0, $371 = 0, $379 = 0, $383 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $71 = 0, $77 = 0, $78 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 L1 : do if (($1 - $0 | 0) > 1) {
  $10 = $0 + 2 | 0;
  $11 = $0 + 1 | 0;
  do switch (HEAP8[$0 >> 0] | 0) {
  case 97:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 97:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15349);
      $14 = $2 + 4 | 0;
      $15 = HEAP32[$14 >> 2] | 0;
      if ($15 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($15, $3);
       HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 110:
    case 100:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15360);
      $21 = $2 + 4 | 0;
      $22 = HEAP32[$21 >> 2] | 0;
      if ($22 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($22, $3);
       HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 78:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15370);
      $28 = $2 + 4 | 0;
      $29 = HEAP32[$28 >> 2] | 0;
      if ($29 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($29, $3);
       HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 83:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15381);
      $35 = $2 + 4 | 0;
      $36 = HEAP32[$35 >> 2] | 0;
      if ($36 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($36, $3);
       HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 108:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15391);
      $44 = $2 + 4 | 0;
      $45 = HEAP32[$44 >> 2] | 0;
      if ($45 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($45, $3);
       HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 109:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15402);
      $51 = $2 + 4 | 0;
      $52 = HEAP32[$51 >> 2] | 0;
      if ($52 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($52, $3);
       HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 111:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15412);
      $58 = $2 + 4 | 0;
      $59 = HEAP32[$58 >> 2] | 0;
      if ($59 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($59, $3);
       HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 118:
     {
      $65 = $2 + 63 | 0;
      $66 = HEAP8[$65 >> 0] | 0;
      HEAP8[$65 >> 0] = 0;
      $67 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($10, $1, $2) | 0;
      HEAP8[$65 >> 0] = $66;
      if (($67 | 0) == ($10 | 0)) {
       $$3 = $0;
       break L1;
      }
      $71 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($71 | 0)) {
       $$3 = $0;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($71 + -24 | 0, 0, 15422) | 0;
      HEAP8[$2 + 60 >> 0] = 1;
      $$3 = $67;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 100:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 97:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($3, 15432);
      $77 = $2 + 4 | 0;
      $78 = HEAP32[$77 >> 2] | 0;
      if ($78 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($78, $3);
       HEAP32[$77 >> 2] = (HEAP32[$77 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15450);
      $84 = $2 + 4 | 0;
      $85 = HEAP32[$84 >> 2] | 0;
      if ($85 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($85, $3);
       HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 108:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($3);
      $91 = $2 + 4 | 0;
      $92 = HEAP32[$91 >> 2] | 0;
      if ($92 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($92, $3);
       HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 118:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15460);
      $98 = $2 + 4 | 0;
      $99 = HEAP32[$98 >> 2] | 0;
      if ($99 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($99, $3);
       HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 86:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15470);
      $105 = $2 + 4 | 0;
      $106 = HEAP32[$105 >> 2] | 0;
      if ($106 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($106, $3);
       HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 101:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 111:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15481);
      $114 = $2 + 4 | 0;
      $115 = HEAP32[$114 >> 2] | 0;
      if ($115 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($115, $3);
       HEAP32[$114 >> 2] = (HEAP32[$114 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 79:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15491);
      $121 = $2 + 4 | 0;
      $122 = HEAP32[$121 >> 2] | 0;
      if ($122 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($122, $3);
       HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 113:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15502);
      $128 = $2 + 4 | 0;
      $129 = HEAP32[$128 >> 2] | 0;
      if ($129 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($129, $3);
       HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 103:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15513);
      $137 = $2 + 4 | 0;
      $138 = HEAP32[$137 >> 2] | 0;
      if ($138 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($138, $3);
       HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 116:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15524);
      $144 = $2 + 4 | 0;
      $145 = HEAP32[$144 >> 2] | 0;
      if ($145 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($145, $3);
       HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 105:
   {
    if ((HEAP8[$11 >> 0] | 0) != 120) {
     $$3 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15534);
    $153 = $2 + 4 | 0;
    $154 = HEAP32[$153 >> 2] | 0;
    if ($154 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($154, $3);
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$3 = $10;
    break L1;
    break;
   }
  case 108:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15545);
      $162 = $2 + 4 | 0;
      $163 = HEAP32[$162 >> 2] | 0;
      if ($163 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($163, $3);
       HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 105:
     {
      $169 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($10, $1, $2) | 0;
      if (($169 | 0) == ($10 | 0)) {
       $$3 = $0;
       break L1;
      }
      $173 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($173 | 0)) {
       $$3 = $0;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($173 + -24 | 0, 0, 15556) | 0;
      $$3 = $169;
      break L1;
      break;
     }
    case 115:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15568);
      $176 = $2 + 4 | 0;
      $177 = HEAP32[$176 >> 2] | 0;
      if ($177 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($177, $3);
       HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 83:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 15579);
      $183 = $2 + 4 | 0;
      $184 = HEAP32[$183 >> 2] | 0;
      if ($184 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($184, $3);
       HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 116:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15591);
      $190 = $2 + 4 | 0;
      $191 = HEAP32[$190 >> 2] | 0;
      if ($191 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($191, $3);
       HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 109:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 105:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15601);
      $199 = $2 + 4 | 0;
      $200 = HEAP32[$199 >> 2] | 0;
      if ($200 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($200, $3);
       HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 73:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15611);
      $206 = $2 + 4 | 0;
      $207 = HEAP32[$206 >> 2] | 0;
      if ($207 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($207, $3);
       HEAP32[$206 >> 2] = (HEAP32[$206 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 108:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15450);
      $213 = $2 + 4 | 0;
      $214 = HEAP32[$213 >> 2] | 0;
      if ($214 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($214, $3);
       HEAP32[$213 >> 2] = (HEAP32[$213 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 76:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15622);
      $220 = $2 + 4 | 0;
      $221 = HEAP32[$220 >> 2] | 0;
      if ($221 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($221, $3);
       HEAP32[$220 >> 2] = (HEAP32[$220 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 109:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15633);
      $227 = $2 + 4 | 0;
      $228 = HEAP32[$227 >> 2] | 0;
      if ($228 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($228, $3);
       HEAP32[$227 >> 2] = (HEAP32[$227 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 110:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 97:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3, 15644);
      $236 = $2 + 4 | 0;
      $237 = HEAP32[$236 >> 2] | 0;
      if ($237 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($237, $3);
       HEAP32[$236 >> 2] = (HEAP32[$236 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15659);
      $243 = $2 + 4 | 0;
      $244 = HEAP32[$243 >> 2] | 0;
      if ($244 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($244, $3);
       HEAP32[$243 >> 2] = (HEAP32[$243 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 103:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15601);
      $250 = $2 + 4 | 0;
      $251 = HEAP32[$250 >> 2] | 0;
      if ($251 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($251, $3);
       HEAP32[$250 >> 2] = (HEAP32[$250 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 116:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15670);
      $257 = $2 + 4 | 0;
      $258 = HEAP32[$257 >> 2] | 0;
      if ($258 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($258, $3);
       HEAP32[$257 >> 2] = (HEAP32[$257 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 119:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 15680);
      $264 = $2 + 4 | 0;
      $265 = HEAP32[$264 >> 2] | 0;
      if ($265 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($265, $3);
       HEAP32[$264 >> 2] = (HEAP32[$264 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 111:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 111:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15693);
      $273 = $2 + 4 | 0;
      $274 = HEAP32[$273 >> 2] | 0;
      if ($274 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($274, $3);
       HEAP32[$273 >> 2] = (HEAP32[$273 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 114:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15704);
      $280 = $2 + 4 | 0;
      $281 = HEAP32[$280 >> 2] | 0;
      if ($281 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($281, $3);
       HEAP32[$280 >> 2] = (HEAP32[$280 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 82:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15714);
      $287 = $2 + 4 | 0;
      $288 = HEAP32[$287 >> 2] | 0;
      if ($288 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($288, $3);
       HEAP32[$287 >> 2] = (HEAP32[$287 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 112:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 109:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 15725);
      $296 = $2 + 4 | 0;
      $297 = HEAP32[$296 >> 2] | 0;
      if ($297 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($297, $3);
       HEAP32[$296 >> 2] = (HEAP32[$296 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 108:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15737);
      $303 = $2 + 4 | 0;
      $304 = HEAP32[$303 >> 2] | 0;
      if ($304 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($304, $3);
       HEAP32[$303 >> 2] = (HEAP32[$303 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 76:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15747);
      $310 = $2 + 4 | 0;
      $311 = HEAP32[$310 >> 2] | 0;
      if ($311 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($311, $3);
       HEAP32[$310 >> 2] = (HEAP32[$310 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 112:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15758);
      $317 = $2 + 4 | 0;
      $318 = HEAP32[$317 >> 2] | 0;
      if ($318 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($318, $3);
       HEAP32[$317 >> 2] = (HEAP32[$317 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 115:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15737);
      $324 = $2 + 4 | 0;
      $325 = HEAP32[$324 >> 2] | 0;
      if ($325 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($325, $3);
       HEAP32[$324 >> 2] = (HEAP32[$324 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 116:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15769);
      $331 = $2 + 4 | 0;
      $332 = HEAP32[$331 >> 2] | 0;
      if ($332 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($332, $3);
       HEAP32[$331 >> 2] = (HEAP32[$331 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 113:
   {
    if ((HEAP8[$11 >> 0] | 0) != 117) {
     $$3 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15780);
    $340 = $2 + 4 | 0;
    $341 = HEAP32[$340 >> 2] | 0;
    if ($341 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($341, $3);
     HEAP32[$340 >> 2] = (HEAP32[$340 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$3 = $10;
    break L1;
    break;
   }
  case 114:
   {
    switch (HEAP8[$11 >> 0] | 0) {
    case 109:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 15790);
      $349 = $2 + 4 | 0;
      $350 = HEAP32[$349 >> 2] | 0;
      if ($350 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($350, $3);
       HEAP32[$349 >> 2] = (HEAP32[$349 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 77:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15800);
      $356 = $2 + 4 | 0;
      $357 = HEAP32[$356 >> 2] | 0;
      if ($357 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($357, $3);
       HEAP32[$356 >> 2] = (HEAP32[$356 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 115:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 15811);
      $363 = $2 + 4 | 0;
      $364 = HEAP32[$363 >> 2] | 0;
      if ($364 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($364, $3);
       HEAP32[$363 >> 2] = (HEAP32[$363 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    case 83:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 15822);
      $370 = $2 + 4 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if ($371 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($371, $3);
       HEAP32[$370 >> 2] = (HEAP32[$370 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $10;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 118:
   {
    if (((HEAP8[$11 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $$3 = $0;
     break L1;
    }
    $379 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($10, $1, $2) | 0;
    if (($379 | 0) == ($10 | 0)) {
     $$3 = $0;
     break L1;
    }
    $383 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($383 | 0)) {
     $$3 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($383 + -24 | 0, 0, 15422) | 0;
    $$3 = $379;
    break L1;
    break;
   }
  default:
   {
    $$3 = $0;
    break L1;
   }
  } while (0);
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}
function __ZNSt3__212__next_primeEj($0) {
 $0 = $0 | 0;
 var $$$0337 = 0, $$0 = 0, $$0328 = 0, $$0334 = 0, $$0337 = 0, $$1 = 0, $$1336$sink = 0, $$2332 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$8 = 0, $$sink = 0, $1 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $113 = 0, $114 = 0, $118 = 0, $119 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $143 = 0, $144 = 0, $148 = 0, $149 = 0, $153 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $163 = 0, $164 = 0, $168 = 0, $169 = 0, $173 = 0, $174 = 0, $178 = 0, $179 = 0, $183 = 0, $184 = 0, $188 = 0, $189 = 0, $19 = 0, $193 = 0, $194 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $203 = 0, $204 = 0, $208 = 0, $209 = 0, $213 = 0, $214 = 0, $218 = 0, $219 = 0, $223 = 0, $224 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $243 = 0, $244 = 0, $248 = 0, $249 = 0, $253 = 0, $254 = 0, $258 = 0, $259 = 0, $260 = 0, $262 = 0, $265 = 0, $266 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $54 = 0, $58 = 0, $59 = 0, $63 = 0, $64 = 0, $68 = 0, $69 = 0, $7 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $88 = 0, $89 = 0, $93 = 0, $94 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 do if ($0 >>> 0 < 212) {
  $5 = __ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(2660, 2852, $2, $1) | 0;
  $$8 = HEAP32[$5 >> 2] | 0;
 } else {
  $7 = ($0 >>> 0) / 210 | 0;
  $8 = $7 * 210 | 0;
  HEAP32[$3 >> 2] = $0 - $8;
  $$0328 = 0;
  $$0337 = $7;
  $$1336$sink = (__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(2852, 3044, $3, $1) | 0) - 2852 >> 2;
  $$sink = $8;
  L4 : while (1) {
   $16 = (HEAP32[2852 + ($$1336$sink << 2) >> 2] | 0) + $$sink | 0;
   $$0334 = 5;
   while (1) {
    if ($$0334 >>> 0 >= 47) {
     $$0 = 211;
     $$4 = $$0328;
     label = 8;
     break;
    }
    $19 = HEAP32[2660 + ($$0334 << 2) >> 2] | 0;
    $20 = ($16 >>> 0) / ($19 >>> 0) | 0;
    if ($20 >>> 0 < $19 >>> 0) {
     label = 106;
     break L4;
    }
    if (($16 | 0) == (Math_imul($20, $19) | 0)) {
     $$6 = $$0328;
     break;
    } else $$0334 = $$0334 + 1 | 0;
   }
   L10 : do if ((label | 0) == 8) {
    L11 : while (1) {
     label = 0;
     $24 = ($16 >>> 0) / ($$0 >>> 0) | 0;
     do if ($24 >>> 0 < $$0 >>> 0) {
      $$1 = $$0;
      $$2332 = 1;
      $$5 = $16;
     } else if (($16 | 0) == (Math_imul($24, $$0) | 0)) {
      $$1 = $$0;
      $$2332 = 9;
      $$5 = $$4;
     } else {
      $28 = $$0 + 10 | 0;
      $29 = ($16 >>> 0) / ($28 >>> 0) | 0;
      if ($29 >>> 0 < $28 >>> 0) {
       $$1 = $28;
       $$2332 = 1;
       $$5 = $16;
      } else if (($16 | 0) == (Math_imul($29, $28) | 0)) {
       $$1 = $28;
       $$2332 = 9;
       $$5 = $$4;
      } else {
       $33 = $$0 + 12 | 0;
       $34 = ($16 >>> 0) / ($33 >>> 0) | 0;
       if ($34 >>> 0 < $33 >>> 0) {
        $$1 = $33;
        $$2332 = 1;
        $$5 = $16;
       } else if (($16 | 0) == (Math_imul($34, $33) | 0)) {
        $$1 = $33;
        $$2332 = 9;
        $$5 = $$4;
       } else {
        $38 = $$0 + 16 | 0;
        $39 = ($16 >>> 0) / ($38 >>> 0) | 0;
        if ($39 >>> 0 < $38 >>> 0) {
         $$1 = $38;
         $$2332 = 1;
         $$5 = $16;
        } else if (($16 | 0) == (Math_imul($39, $38) | 0)) {
         $$1 = $38;
         $$2332 = 9;
         $$5 = $$4;
        } else {
         $43 = $$0 + 18 | 0;
         $44 = ($16 >>> 0) / ($43 >>> 0) | 0;
         if ($44 >>> 0 < $43 >>> 0) {
          $$1 = $43;
          $$2332 = 1;
          $$5 = $16;
         } else if (($16 | 0) == (Math_imul($44, $43) | 0)) {
          $$1 = $43;
          $$2332 = 9;
          $$5 = $$4;
         } else {
          $48 = $$0 + 22 | 0;
          $49 = ($16 >>> 0) / ($48 >>> 0) | 0;
          if ($49 >>> 0 < $48 >>> 0) {
           $$1 = $48;
           $$2332 = 1;
           $$5 = $16;
          } else if (($16 | 0) == (Math_imul($49, $48) | 0)) {
           $$1 = $48;
           $$2332 = 9;
           $$5 = $$4;
          } else {
           $53 = $$0 + 28 | 0;
           $54 = ($16 >>> 0) / ($53 >>> 0) | 0;
           if ($54 >>> 0 < $53 >>> 0) {
            $$1 = $53;
            $$2332 = 1;
            $$5 = $16;
           } else if (($16 | 0) == (Math_imul($54, $53) | 0)) {
            $$1 = $53;
            $$2332 = 9;
            $$5 = $$4;
           } else {
            $58 = $$0 + 30 | 0;
            $59 = ($16 >>> 0) / ($58 >>> 0) | 0;
            if ($59 >>> 0 < $58 >>> 0) {
             $$1 = $58;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($59, $58) | 0)) {
             $$1 = $58;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $63 = $$0 + 36 | 0;
            $64 = ($16 >>> 0) / ($63 >>> 0) | 0;
            if ($64 >>> 0 < $63 >>> 0) {
             $$1 = $63;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($64, $63) | 0)) {
             $$1 = $63;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $68 = $$0 + 40 | 0;
            $69 = ($16 >>> 0) / ($68 >>> 0) | 0;
            if ($69 >>> 0 < $68 >>> 0) {
             $$1 = $68;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($69, $68) | 0)) {
             $$1 = $68;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $73 = $$0 + 42 | 0;
            $74 = ($16 >>> 0) / ($73 >>> 0) | 0;
            if ($74 >>> 0 < $73 >>> 0) {
             $$1 = $73;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($74, $73) | 0)) {
             $$1 = $73;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $78 = $$0 + 46 | 0;
            $79 = ($16 >>> 0) / ($78 >>> 0) | 0;
            if ($79 >>> 0 < $78 >>> 0) {
             $$1 = $78;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($79, $78) | 0)) {
             $$1 = $78;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $83 = $$0 + 52 | 0;
            $84 = ($16 >>> 0) / ($83 >>> 0) | 0;
            if ($84 >>> 0 < $83 >>> 0) {
             $$1 = $83;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($84, $83) | 0)) {
             $$1 = $83;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $88 = $$0 + 58 | 0;
            $89 = ($16 >>> 0) / ($88 >>> 0) | 0;
            if ($89 >>> 0 < $88 >>> 0) {
             $$1 = $88;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($89, $88) | 0)) {
             $$1 = $88;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $93 = $$0 + 60 | 0;
            $94 = ($16 >>> 0) / ($93 >>> 0) | 0;
            if ($94 >>> 0 < $93 >>> 0) {
             $$1 = $93;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($94, $93) | 0)) {
             $$1 = $93;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $98 = $$0 + 66 | 0;
            $99 = ($16 >>> 0) / ($98 >>> 0) | 0;
            if ($99 >>> 0 < $98 >>> 0) {
             $$1 = $98;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($99, $98) | 0)) {
             $$1 = $98;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $103 = $$0 + 70 | 0;
            $104 = ($16 >>> 0) / ($103 >>> 0) | 0;
            if ($104 >>> 0 < $103 >>> 0) {
             $$1 = $103;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($104, $103) | 0)) {
             $$1 = $103;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $108 = $$0 + 72 | 0;
            $109 = ($16 >>> 0) / ($108 >>> 0) | 0;
            if ($109 >>> 0 < $108 >>> 0) {
             $$1 = $108;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($109, $108) | 0)) {
             $$1 = $108;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $113 = $$0 + 78 | 0;
            $114 = ($16 >>> 0) / ($113 >>> 0) | 0;
            if ($114 >>> 0 < $113 >>> 0) {
             $$1 = $113;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($114, $113) | 0)) {
             $$1 = $113;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $118 = $$0 + 82 | 0;
            $119 = ($16 >>> 0) / ($118 >>> 0) | 0;
            if ($119 >>> 0 < $118 >>> 0) {
             $$1 = $118;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($119, $118) | 0)) {
             $$1 = $118;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $123 = $$0 + 88 | 0;
            $124 = ($16 >>> 0) / ($123 >>> 0) | 0;
            if ($124 >>> 0 < $123 >>> 0) {
             $$1 = $123;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($124, $123) | 0)) {
             $$1 = $123;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $128 = $$0 + 96 | 0;
            $129 = ($16 >>> 0) / ($128 >>> 0) | 0;
            if ($129 >>> 0 < $128 >>> 0) {
             $$1 = $128;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($129, $128) | 0)) {
             $$1 = $128;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $133 = $$0 + 100 | 0;
            $134 = ($16 >>> 0) / ($133 >>> 0) | 0;
            if ($134 >>> 0 < $133 >>> 0) {
             $$1 = $133;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($134, $133) | 0)) {
             $$1 = $133;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $138 = $$0 + 102 | 0;
            $139 = ($16 >>> 0) / ($138 >>> 0) | 0;
            if ($139 >>> 0 < $138 >>> 0) {
             $$1 = $138;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($139, $138) | 0)) {
             $$1 = $138;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $143 = $$0 + 106 | 0;
            $144 = ($16 >>> 0) / ($143 >>> 0) | 0;
            if ($144 >>> 0 < $143 >>> 0) {
             $$1 = $143;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($144, $143) | 0)) {
             $$1 = $143;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $148 = $$0 + 108 | 0;
            $149 = ($16 >>> 0) / ($148 >>> 0) | 0;
            if ($149 >>> 0 < $148 >>> 0) {
             $$1 = $148;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($149, $148) | 0)) {
             $$1 = $148;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $153 = $$0 + 112 | 0;
            $154 = ($16 >>> 0) / ($153 >>> 0) | 0;
            if ($154 >>> 0 < $153 >>> 0) {
             $$1 = $153;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($154, $153) | 0)) {
             $$1 = $153;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $158 = $$0 + 120 | 0;
            $159 = ($16 >>> 0) / ($158 >>> 0) | 0;
            if ($159 >>> 0 < $158 >>> 0) {
             $$1 = $158;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($159, $158) | 0)) {
             $$1 = $158;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $163 = $$0 + 126 | 0;
            $164 = ($16 >>> 0) / ($163 >>> 0) | 0;
            if ($164 >>> 0 < $163 >>> 0) {
             $$1 = $163;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($164, $163) | 0)) {
             $$1 = $163;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $168 = $$0 + 130 | 0;
            $169 = ($16 >>> 0) / ($168 >>> 0) | 0;
            if ($169 >>> 0 < $168 >>> 0) {
             $$1 = $168;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($169, $168) | 0)) {
             $$1 = $168;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $173 = $$0 + 136 | 0;
            $174 = ($16 >>> 0) / ($173 >>> 0) | 0;
            if ($174 >>> 0 < $173 >>> 0) {
             $$1 = $173;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($174, $173) | 0)) {
             $$1 = $173;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $178 = $$0 + 138 | 0;
            $179 = ($16 >>> 0) / ($178 >>> 0) | 0;
            if ($179 >>> 0 < $178 >>> 0) {
             $$1 = $178;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($179, $178) | 0)) {
             $$1 = $178;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $183 = $$0 + 142 | 0;
            $184 = ($16 >>> 0) / ($183 >>> 0) | 0;
            if ($184 >>> 0 < $183 >>> 0) {
             $$1 = $183;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($184, $183) | 0)) {
             $$1 = $183;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $188 = $$0 + 148 | 0;
            $189 = ($16 >>> 0) / ($188 >>> 0) | 0;
            if ($189 >>> 0 < $188 >>> 0) {
             $$1 = $188;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($189, $188) | 0)) {
             $$1 = $188;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $193 = $$0 + 150 | 0;
            $194 = ($16 >>> 0) / ($193 >>> 0) | 0;
            if ($194 >>> 0 < $193 >>> 0) {
             $$1 = $193;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($194, $193) | 0)) {
             $$1 = $193;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $198 = $$0 + 156 | 0;
            $199 = ($16 >>> 0) / ($198 >>> 0) | 0;
            if ($199 >>> 0 < $198 >>> 0) {
             $$1 = $198;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($199, $198) | 0)) {
             $$1 = $198;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $203 = $$0 + 162 | 0;
            $204 = ($16 >>> 0) / ($203 >>> 0) | 0;
            if ($204 >>> 0 < $203 >>> 0) {
             $$1 = $203;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($204, $203) | 0)) {
             $$1 = $203;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $208 = $$0 + 166 | 0;
            $209 = ($16 >>> 0) / ($208 >>> 0) | 0;
            if ($209 >>> 0 < $208 >>> 0) {
             $$1 = $208;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($209, $208) | 0)) {
             $$1 = $208;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $213 = $$0 + 168 | 0;
            $214 = ($16 >>> 0) / ($213 >>> 0) | 0;
            if ($214 >>> 0 < $213 >>> 0) {
             $$1 = $213;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($214, $213) | 0)) {
             $$1 = $213;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $218 = $$0 + 172 | 0;
            $219 = ($16 >>> 0) / ($218 >>> 0) | 0;
            if ($219 >>> 0 < $218 >>> 0) {
             $$1 = $218;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($219, $218) | 0)) {
             $$1 = $218;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $223 = $$0 + 178 | 0;
            $224 = ($16 >>> 0) / ($223 >>> 0) | 0;
            if ($224 >>> 0 < $223 >>> 0) {
             $$1 = $223;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($224, $223) | 0)) {
             $$1 = $223;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $228 = $$0 + 180 | 0;
            $229 = ($16 >>> 0) / ($228 >>> 0) | 0;
            if ($229 >>> 0 < $228 >>> 0) {
             $$1 = $228;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($229, $228) | 0)) {
             $$1 = $228;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $233 = $$0 + 186 | 0;
            $234 = ($16 >>> 0) / ($233 >>> 0) | 0;
            if ($234 >>> 0 < $233 >>> 0) {
             $$1 = $233;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($234, $233) | 0)) {
             $$1 = $233;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $238 = $$0 + 190 | 0;
            $239 = ($16 >>> 0) / ($238 >>> 0) | 0;
            if ($239 >>> 0 < $238 >>> 0) {
             $$1 = $238;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($239, $238) | 0)) {
             $$1 = $238;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $243 = $$0 + 192 | 0;
            $244 = ($16 >>> 0) / ($243 >>> 0) | 0;
            if ($244 >>> 0 < $243 >>> 0) {
             $$1 = $243;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($244, $243) | 0)) {
             $$1 = $243;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $248 = $$0 + 196 | 0;
            $249 = ($16 >>> 0) / ($248 >>> 0) | 0;
            if ($249 >>> 0 < $248 >>> 0) {
             $$1 = $248;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($249, $248) | 0)) {
             $$1 = $248;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $253 = $$0 + 198 | 0;
            $254 = ($16 >>> 0) / ($253 >>> 0) | 0;
            if ($254 >>> 0 < $253 >>> 0) {
             $$1 = $253;
             $$2332 = 1;
             $$5 = $16;
             break;
            }
            if (($16 | 0) == (Math_imul($254, $253) | 0)) {
             $$1 = $253;
             $$2332 = 9;
             $$5 = $$4;
             break;
            }
            $258 = $$0 + 208 | 0;
            $259 = ($16 >>> 0) / ($258 >>> 0) | 0;
            $260 = $259 >>> 0 < $258 >>> 0;
            $262 = ($16 | 0) == (Math_imul($259, $258) | 0);
            $$1 = $260 | $262 ? $258 : $$0 + 210 | 0;
            $$2332 = $260 ? 1 : $262 ? 9 : 0;
            $$5 = $260 ? $16 : $$4;
           }
          }
         }
        }
       }
      }
     } while (0);
     switch ($$2332 & 15) {
     case 9:
      {
       $$6 = $$5;
       break L10;
       break;
      }
     case 0:
      {
       $$0 = $$1;
       $$4 = $$5;
       label = 8;
       break;
      }
     default:
      break L11;
     }
    }
    if (!$$2332) $$6 = $$5; else {
     label = 107;
     break L4;
    }
   } while (0);
   $265 = $$1336$sink + 1 | 0;
   $266 = ($265 | 0) == 48;
   $$$0337 = ($266 & 1) + $$0337 | 0;
   $$0328 = $$6;
   $$0337 = $$$0337;
   $$1336$sink = $266 ? 0 : $265;
   $$sink = $$$0337 * 210 | 0;
  }
  if ((label | 0) == 106) {
   HEAP32[$2 >> 2] = $16;
   $$8 = $16;
   break;
  } else if ((label | 0) == 107) {
   HEAP32[$2 >> 2] = $16;
   $$8 = $$5;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$8 | 0;
}

function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$$0305 = 0, $$$3 = 0, $$0266$lcssa = 0, $$0266417 = 0, $$0268 = 0, $$0272 = 0, $$0273429 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283428 = 0, $$0286420 = 0, $$0288425 = 0, $$0292 = 0, $$0293 = 0, $$0305423 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$327 = 0, $$328$le441 = 0, $$3281 = 0, $$3291 = 0, $$3416 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$9314$ph = 0, $$lcssa355 = 0, $$ph = 0, $$ph353 = 0, $$pre$phi516Z2D = 0, $$sink443 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $102 = 0, $103 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $119 = 0, $126 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $140 = 0, $141 = 0, $147 = 0, $15 = 0, $150 = 0, $154 = 0, $156 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $17 = 0, $172 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $187 = 0, $19 = 0, $195 = 0, $20 = 0, $205 = 0, $207 = 0, $21 = 0, $211 = 0, $213 = 0, $22 = 0, $221 = 0, $229 = 0, $230 = 0, $233 = 0, $235 = 0, $24 = 0, $241 = 0, $248 = 0, $250 = 0, $256 = 0, $263 = 0, $268 = 0, $269 = 0, $27 = 0, $276 = 0, $285 = 0.0, $3 = 0, $304 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $39 = 0, $4 = 0, $45 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $68 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $isdigittmp = 0, $narrow = 0, $narrow469 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $3 = sp + 8 | 0;
 $4 = sp + 17 | 0;
 $5 = sp;
 $6 = sp + 16 | 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $306 = ___lockfile($0) | 0; else $306 = 0;
 $11 = HEAP8[$1 >> 0] | 0;
 L4 : do if (!($11 << 24 >> 24)) $$3291 = 0; else {
  $13 = $0 + 4 | 0;
  $14 = $0 + 100 | 0;
  $15 = $0 + 108 | 0;
  $16 = $0 + 8 | 0;
  $17 = $4 + 10 | 0;
  $18 = $4 + 33 | 0;
  $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0;
  $19 = $4 + 46 | 0;
  $20 = $4 + 94 | 0;
  $21 = $4 + 1 | 0;
  $22 = $4 + 1 | 0;
  $$0273429 = $1;
  $$0283428 = 0;
  $$0288425 = 0;
  $$0305423 = 0;
  $102 = 0;
  $24 = $11;
  L6 : while (1) {
   L8 : do if (!(_isspace($24 & 255) | 0)) {
    $53 = $24 << 24 >> 24 == 37;
    L10 : do if ($53) {
     $54 = $$0273429 + 1 | 0;
     $55 = HEAP8[$54 >> 0] | 0;
     L12 : do switch ($55 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $$0293 = 0;
       $$2275 = $$0273429 + 2 | 0;
       break;
      }
     default:
      {
       $isdigittmp = ($55 & 255) + -48 | 0;
       if ($isdigittmp >>> 0 < 10) if ((HEAP8[$$0273429 + 2 >> 0] | 0) == 36) {
        $$0293 = _arg_n($2, $isdigittmp) | 0;
        $$2275 = $$0273429 + 3 | 0;
        break L12;
       }
       $88 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $89 = HEAP32[$88 >> 2] | 0;
       HEAP32[$2 >> 2] = $88 + 4;
       $$0293 = $89;
       $$2275 = $54;
      }
     } while (0);
     $90 = HEAP8[$$2275 >> 0] | 0;
     $91 = $90 & 255;
     if (($91 + -48 | 0) >>> 0 < 10) {
      $$0266417 = 0;
      $$3416 = $$2275;
      $95 = $91;
      while (1) {
       $94 = ($$0266417 * 10 | 0) + -48 + $95 | 0;
       $96 = $$3416 + 1 | 0;
       $97 = HEAP8[$96 >> 0] | 0;
       $95 = $97 & 255;
       if (($95 + -48 | 0) >>> 0 >= 10) {
        $$0266$lcssa = $94;
        $$3$lcssa = $96;
        $$lcssa355 = $97;
        break;
       } else {
        $$0266417 = $94;
        $$3416 = $96;
       }
      }
     } else {
      $$0266$lcssa = 0;
      $$3$lcssa = $$2275;
      $$lcssa355 = $90;
     }
     $99 = $$lcssa355 << 24 >> 24 == 109;
     $100 = ($$0293 | 0) != 0;
     $$$0305 = $99 ? 0 : $$0305423;
     $$327 = $99 ? 0 : $102;
     $$$3 = $99 ? $$3$lcssa + 1 | 0 : $$3$lcssa;
     $narrow = $100 & $99;
     $103 = $$$3 + 1 | 0;
     switch (HEAP8[$$$3 >> 0] | 0) {
     case 104:
      {
       $106 = (HEAP8[$103 >> 0] | 0) == 104;
       $$0268 = $106 ? -2 : -1;
       $$5 = $106 ? $$$3 + 2 | 0 : $103;
       break;
      }
     case 108:
      {
       $109 = (HEAP8[$103 >> 0] | 0) == 108;
       $$0268 = $109 ? 3 : 1;
       $$5 = $109 ? $$$3 + 2 | 0 : $103;
       break;
      }
     case 106:
      {
       $$0268 = 3;
       $$5 = $103;
       break;
      }
     case 116:
     case 122:
      {
       $$0268 = 1;
       $$5 = $103;
       break;
      }
     case 76:
      {
       $$0268 = 2;
       $$5 = $103;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $$0268 = 0;
       $$5 = $$$3;
       break;
      }
     default:
      {
       $$7312 = $$$0305;
       $309 = $$327;
       $narrow469 = $narrow;
       label = 137;
       break L6;
      }
     }
     $112 = HEAPU8[$$5 >> 0] | 0;
     $114 = ($112 & 47 | 0) == 3;
     $$ = $114 ? $112 | 32 : $112;
     $$$0268 = $114 ? 1 : $$0268;
     $trunc = $$ & 255;
     switch ($trunc << 24 >> 24) {
     case 99:
      {
       $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1;
       $$1284 = $$0283428;
       break;
      }
     case 91:
      {
       $$1267 = $$0266$lcssa;
       $$1284 = $$0283428;
       break;
      }
     case 110:
      {
       _store_int($$0293, $$$0268, $$0283428, (($$0283428 | 0) < 0) << 31 >> 31);
       $$11 = $$5;
       $$1289 = $$0288425;
       $$2285 = $$0283428;
       $$6311 = $$$0305;
       $307 = $$327;
       break L8;
       break;
      }
     default:
      {
       ___shlim($0, 0);
       do {
        $119 = HEAP32[$13 >> 2] | 0;
        if ($119 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
         HEAP32[$13 >> 2] = $119 + 1;
         $126 = HEAPU8[$119 >> 0] | 0;
        } else $126 = ___shgetc($0) | 0;
       } while ((_isspace($126) | 0) != 0);
       if (!(HEAP32[$14 >> 2] | 0)) $138 = HEAP32[$13 >> 2] | 0; else {
        $132 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
        HEAP32[$13 >> 2] = $132;
        $138 = $132;
       }
       $$1267 = $$0266$lcssa;
       $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283428 + $138 - (HEAP32[$16 >> 2] | 0) | 0;
      }
     }
     ___shlim($0, $$1267);
     $140 = HEAP32[$13 >> 2] | 0;
     $141 = HEAP32[$14 >> 2] | 0;
     if ($140 >>> 0 < $141 >>> 0) {
      HEAP32[$13 >> 2] = $140 + 1;
      $147 = $141;
     } else {
      if ((___shgetc($0) | 0) < 0) {
       $$7312 = $$$0305;
       $309 = $$327;
       $narrow469 = $narrow;
       label = 137;
       break L6;
      }
      $147 = HEAP32[$14 >> 2] | 0;
     }
     if ($147 | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
     L55 : do switch ($trunc << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       $150 = ($$ | 0) == 99;
       L57 : do if (($$ | 16 | 0) == 115) {
        _memset($21 | 0, -1, 256) | 0;
        HEAP8[$4 >> 0] = 0;
        if (($$ | 0) == 115) {
         HEAP8[$18 >> 0] = 0;
         HEAP8[$17 >> 0] = 0;
         HEAP8[$17 + 1 >> 0] = 0;
         HEAP8[$17 + 2 >> 0] = 0;
         HEAP8[$17 + 3 >> 0] = 0;
         HEAP8[$17 + 4 >> 0] = 0;
         $$9 = $$5;
        } else $$9 = $$5;
       } else {
        $154 = $$5 + 1 | 0;
        $156 = (HEAP8[$154 >> 0] | 0) == 94;
        $$0292 = $156 & 1;
        $$6 = $156 ? $$5 + 2 | 0 : $154;
        _memset($22 | 0, $156 & 1 | 0, 256) | 0;
        HEAP8[$4 >> 0] = 0;
        switch (HEAP8[$$6 >> 0] | 0) {
        case 45:
         {
          $$sink443 = $19;
          label = 64;
          break;
         }
        case 93:
         {
          $$sink443 = $20;
          label = 64;
          break;
         }
        default:
         {
          $$7$ph = $$6;
          $$pre$phi516Z2D = ($$0292 ^ 1) & 255;
         }
        }
        if ((label | 0) == 64) {
         label = 0;
         $162 = ($$0292 ^ 1) & 255;
         HEAP8[$$sink443 >> 0] = $162;
         $$7$ph = $$6 + 1 | 0;
         $$pre$phi516Z2D = $162;
        }
        $$7 = $$7$ph;
        while (1) {
         $163 = HEAP8[$$7 >> 0] | 0;
         L69 : do switch ($163 << 24 >> 24) {
         case 0:
          {
           $$7312 = $$$0305;
           $309 = $$327;
           $narrow469 = $narrow;
           label = 137;
           break L6;
           break;
          }
         case 93:
          {
           $$9 = $$7;
           break L57;
           break;
          }
         case 45:
          {
           $164 = $$7 + 1 | 0;
           $165 = HEAP8[$164 >> 0] | 0;
           switch ($165 << 24 >> 24) {
           case 93:
           case 0:
            {
             $$8 = $$7;
             $176 = 45;
             break L69;
             break;
            }
           default:
            {}
           }
           $167 = HEAP8[$$7 + -1 >> 0] | 0;
           if (($167 & 255) < ($165 & 255)) {
            $$0286420 = $167 & 255;
            do {
             $$0286420 = $$0286420 + 1 | 0;
             HEAP8[$4 + $$0286420 >> 0] = $$pre$phi516Z2D;
             $172 = HEAP8[$164 >> 0] | 0;
            } while (($$0286420 | 0) < ($172 & 255 | 0));
            $$8 = $164;
            $176 = $172;
           } else {
            $$8 = $164;
            $176 = $165;
           }
           break;
          }
         default:
          {
           $$8 = $$7;
           $176 = $163;
          }
         } while (0);
         HEAP8[$4 + (($176 & 255) + 1) >> 0] = $$pre$phi516Z2D;
         $$7 = $$8 + 1 | 0;
        }
       } while (0);
       $181 = $150 ? $$1267 + 1 | 0 : 31;
       $182 = ($$$0268 | 0) == 1;
       L77 : do if ($182) {
        if ($narrow) {
         $184 = _malloc($181 << 2) | 0;
         if (!$184) {
          $$7312 = 0;
          $309 = 0;
          $narrow469 = 1;
          label = 137;
          break L6;
         } else $311 = $184;
        } else $311 = $$0293;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0;
        $$0276$ph = $181;
        $$0278$ph = 0;
        $$ph = $311;
        L82 : while (1) {
         $186 = ($$ph | 0) == 0;
         $$0278$ph336 = $$0278$ph;
         while (1) {
          L86 : while (1) {
           $187 = HEAP32[$13 >> 2] | 0;
           if ($187 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $187 + 1;
            $195 = HEAPU8[$187 >> 0] | 0;
           } else $195 = ___shgetc($0) | 0;
           if (!(HEAP8[$4 + ($195 + 1) >> 0] | 0)) break L82;
           HEAP8[$6 >> 0] = $195;
           switch (_mbrtowc($5, $6, 1, $3) | 0) {
           case -1:
            {
             $$7312 = 0;
             $309 = $$ph;
             $narrow469 = $narrow;
             label = 137;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L86;
           }
          }
          if ($186) $$1279 = $$0278$ph336; else {
           HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2];
           $$1279 = $$0278$ph336 + 1 | 0;
          }
          if ($narrow & ($$1279 | 0) == ($$0276$ph | 0)) break; else $$0278$ph336 = $$1279;
         }
         $205 = $$0276$ph << 1 | 1;
         $207 = _realloc($$ph, $205 << 2) | 0;
         if (!$207) {
          $$7312 = 0;
          $309 = $$ph;
          $narrow469 = 1;
          label = 137;
          break L6;
         } else {
          $$0278$ph$phi = $$0276$ph;
          $$0276$ph = $205;
          $$ph = $207;
          $$0278$ph = $$0278$ph$phi;
         }
        }
        if (!(_mbsinit($3) | 0)) {
         $$7312 = 0;
         $309 = $$ph;
         $narrow469 = $narrow;
         label = 137;
         break L6;
        } else {
         $$4282 = $$0278$ph336;
         $$4309 = 0;
         $$5299 = $$ph;
         $312 = $$ph;
        }
       } else {
        if ($narrow) {
         $211 = _malloc($181) | 0;
         if (!$211) {
          $$7312 = 0;
          $309 = 0;
          $narrow469 = 1;
          label = 137;
          break L6;
         } else {
          $$1277$ph = $181;
          $$2280$ph = 0;
          $$2307$ph = $211;
         }
         while (1) {
          $$2280 = $$2280$ph;
          do {
           $213 = HEAP32[$13 >> 2] | 0;
           if ($213 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $213 + 1;
            $221 = HEAPU8[$213 >> 0] | 0;
           } else $221 = ___shgetc($0) | 0;
           if (!(HEAP8[$4 + ($221 + 1) >> 0] | 0)) {
            $$4282 = $$2280;
            $$4309 = $$2307$ph;
            $$5299 = 0;
            $312 = 0;
            break L77;
           }
           HEAP8[$$2307$ph + $$2280 >> 0] = $221;
           $$2280 = $$2280 + 1 | 0;
          } while (($$2280 | 0) != ($$1277$ph | 0));
          $229 = $$1277$ph << 1 | 1;
          $230 = _realloc($$2307$ph, $229) | 0;
          if (!$230) {
           $$7312 = $$2307$ph;
           $309 = 0;
           $narrow469 = 1;
           label = 137;
           break L6;
          } else {
           $$2280$ph$phi = $$1277$ph;
           $$1277$ph = $229;
           $$2307$ph = $230;
           $$2280$ph = $$2280$ph$phi;
          }
         }
        }
        if (!$$0293) {
         $250 = $147;
         while (1) {
          $248 = HEAP32[$13 >> 2] | 0;
          if ($248 >>> 0 < $250 >>> 0) {
           HEAP32[$13 >> 2] = $248 + 1;
           $256 = HEAPU8[$248 >> 0] | 0;
          } else $256 = ___shgetc($0) | 0;
          if (!(HEAP8[$4 + ($256 + 1) >> 0] | 0)) {
           $$4282 = 0;
           $$4309 = 0;
           $$5299 = 0;
           $312 = 0;
           break L77;
          }
          $250 = HEAP32[$14 >> 2] | 0;
         }
        } else {
         $$3281 = 0;
         $235 = $147;
         while (1) {
          $233 = HEAP32[$13 >> 2] | 0;
          if ($233 >>> 0 < $235 >>> 0) {
           HEAP32[$13 >> 2] = $233 + 1;
           $241 = HEAPU8[$233 >> 0] | 0;
          } else $241 = ___shgetc($0) | 0;
          if (!(HEAP8[$4 + ($241 + 1) >> 0] | 0)) {
           $$4282 = $$3281;
           $$4309 = $$0293;
           $$5299 = 0;
           $312 = 0;
           break L77;
          }
          HEAP8[$$0293 + $$3281 >> 0] = $241;
          $$3281 = $$3281 + 1 | 0;
          $235 = HEAP32[$14 >> 2] | 0;
         }
        }
       } while (0);
       if (!(HEAP32[$14 >> 2] | 0)) $268 = HEAP32[$13 >> 2] | 0; else {
        $263 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
        HEAP32[$13 >> 2] = $263;
        $268 = $263;
       }
       $269 = $268 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0;
       if (!$269) {
        $$9314$ph = $$4309;
        $$ph353 = $312;
        label = 139;
        break L6;
       }
       if (!(($269 | 0) == ($$1267 | 0) | $150 ^ 1)) {
        $$9314$ph = $$4309;
        $$ph353 = $312;
        label = 139;
        break L6;
       }
       do if ($narrow) if ($182) {
        HEAP32[$$0293 >> 2] = $$5299;
        break;
       } else {
        HEAP32[$$0293 >> 2] = $$4309;
        break;
       } while (0);
       if ($150) {
        $$10 = $$9;
        $$5310 = $$4309;
        $310 = $312;
       } else {
        if ($$5299 | 0) HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0;
        if (!$$4309) {
         $$10 = $$9;
         $$5310 = 0;
         $310 = $312;
         break L55;
        }
        HEAP8[$$4309 + $$4282 >> 0] = 0;
        $$10 = $$9;
        $$5310 = $$4309;
        $310 = $312;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $$0272 = 16;
       label = 125;
       break;
      }
     case 111:
      {
       $$0272 = 8;
       label = 125;
       break;
      }
     case 117:
     case 100:
      {
       $$0272 = 10;
       label = 125;
       break;
      }
     case 105:
      {
       $$0272 = 0;
       label = 125;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $285 = +___floatscan($0, $$$0268, 0);
       if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
        $$9314$ph = $$$0305;
        $$ph353 = $$327;
        label = 139;
        break L6;
       }
       if (!$$0293) {
        $$10 = $$5;
        $$5310 = $$$0305;
        $310 = $$327;
       } else switch ($$$0268 | 0) {
       case 0:
        {
         HEAPF32[$$0293 >> 2] = $285;
         $$10 = $$5;
         $$5310 = $$$0305;
         $310 = $$327;
         break L55;
         break;
        }
       case 1:
        {
         HEAPF64[$$0293 >> 3] = $285;
         $$10 = $$5;
         $$5310 = $$$0305;
         $310 = $$327;
         break L55;
         break;
        }
       case 2:
        {
         HEAPF64[$$0293 >> 3] = $285;
         $$10 = $$5;
         $$5310 = $$$0305;
         $310 = $$327;
         break L55;
         break;
        }
       default:
        {
         $$10 = $$5;
         $$5310 = $$$0305;
         $310 = $$327;
         break L55;
        }
       }
       break;
      }
     default:
      {
       $$10 = $$5;
       $$5310 = $$$0305;
       $310 = $$327;
      }
     } while (0);
     do if ((label | 0) == 125) {
      label = 0;
      $276 = ___intscan($0, $$0272, 0, -1, -1) | 0;
      if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
       $$9314$ph = $$$0305;
       $$ph353 = $$327;
       label = 139;
       break L6;
      }
      if ($100 & ($$ | 0) == 112) {
       HEAP32[$$0293 >> 2] = $276;
       $$10 = $$5;
       $$5310 = $$$0305;
       $310 = $$327;
       break;
      } else {
       _store_int($$0293, $$$0268, $276, tempRet0);
       $$10 = $$5;
       $$5310 = $$$0305;
       $310 = $$327;
       break;
      }
     } while (0);
     $$11 = $$10;
     $$1289 = ($100 & 1) + $$0288425 | 0;
     $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0;
     $$6311 = $$5310;
     $307 = $310;
     break L8;
    } while (0);
    $57 = $$0273429 + ($53 & 1) | 0;
    ___shlim($0, 0);
    $58 = HEAP32[$13 >> 2] | 0;
    if ($58 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $58 + 1;
     $68 = HEAPU8[$58 >> 0] | 0;
    } else $68 = ___shgetc($0) | 0;
    if (($68 | 0) != (HEAPU8[$57 >> 0] | 0)) {
     label = 22;
     break L6;
    }
    $$11 = $57;
    $$1289 = $$0288425;
    $$2285 = $$0283428 + 1 | 0;
    $$6311 = $$0305423;
    $307 = $102;
   } else {
    $$1274 = $$0273429;
    while (1) {
     $27 = $$1274 + 1 | 0;
     if (!(_isspace(HEAPU8[$27 >> 0] | 0) | 0)) break; else $$1274 = $27;
    }
    ___shlim($0, 0);
    do {
     $32 = HEAP32[$13 >> 2] | 0;
     if ($32 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
      HEAP32[$13 >> 2] = $32 + 1;
      $39 = HEAPU8[$32 >> 0] | 0;
     } else $39 = ___shgetc($0) | 0;
    } while ((_isspace($39) | 0) != 0);
    if (!(HEAP32[$14 >> 2] | 0)) $51 = HEAP32[$13 >> 2] | 0; else {
     $45 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
     HEAP32[$13 >> 2] = $45;
     $51 = $45;
    }
    $$11 = $$1274;
    $$1289 = $$0288425;
    $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283428 + $51 - (HEAP32[$16 >> 2] | 0) | 0;
    $$6311 = $$0305423;
    $307 = $102;
   } while (0);
   $$0273429 = $$11 + 1 | 0;
   $24 = HEAP8[$$0273429 >> 0] | 0;
   if (!($24 << 24 >> 24)) {
    $$3291 = $$1289;
    break L4;
   } else {
    $$0283428 = $$2285;
    $$0288425 = $$1289;
    $$0305423 = $$6311;
    $102 = $307;
   }
  }
  if ((label | 0) == 22) {
   if (HEAP32[$14 >> 2] | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
   if (($$0288425 | 0) != 0 | ($68 | 0) > -1) {
    $$3291 = $$0288425;
    break;
   } else {
    $$1271 = 0;
    $$8313 = $$0305423;
    $308 = $102;
    label = 138;
   }
  } else if ((label | 0) == 137) {
   $$328$le441 = $narrow469 & 1;
   if (!$$0288425) {
    $$1271 = $$328$le441;
    $$8313 = $$7312;
    $308 = $309;
    label = 138;
   } else {
    $$2 = $$328$le441;
    $$2290 = $$0288425;
    $$9314 = $$7312;
    $304 = $309;
   }
  } else if ((label | 0) == 139) {
   $$2 = $narrow & 1;
   $$2290 = $$0288425;
   $$9314 = $$9314$ph;
   $304 = $$ph353;
  }
  if ((label | 0) == 138) {
   $$2 = $$1271;
   $$2290 = -1;
   $$9314 = $$8313;
   $304 = $308;
  }
  if (!$$2) $$3291 = $$2290; else {
   _free($$9314);
   _free($304);
   $$3291 = $$2290;
  }
 } while (0);
 if ($306 | 0) ___unlockfile($0);
 STACKTOP = sp;
 return $$3291 | 0;
}

function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332490 = 0, $$0333 = 0, $$0334 = 0, $$0336486 = 0, $$0340496 = 0, $$0341$lcssa = 0, $$0341463 = 0, $$0341464 = 0, $$0341465 = 0, $$0341513 = 0, $$0345$lcssa = 0, $$0345467 = 0, $$0345468 = 0, $$0345469 = 0, $$0345512 = 0, $$0350$lcssa554 = 0, $$0350494 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365484 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa553 = 0, $$0385493 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401473 = 0, $$0401474 = 0, $$0401475 = 0, $$0401509 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph448 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph558 = 0, $$1394$lcssa = 0, $$1394511 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph449 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph447 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344503 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399510 = 0, $$3514 = 0, $$425 = 0, $$4349495 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph559 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph445 = 0, $$4400 = 0, $$4485 = 0, $$5 = 0, $$5$in = 0, $$5355488 = 0, $$5390487 = 0, $$6378$ph = 0, $$6489 = 0, $$9483 = 0, $$pre = 0, $$sink = 0, $$sink421$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $130 = 0, $134 = 0, $136 = 0, $142 = 0, $148 = 0, $150 = 0, $157 = 0, $17 = 0, $170 = 0, $182 = 0, $186 = 0, $189 = 0, $191 = 0, $192 = 0, $193 = 0, $196 = 0, $210 = 0, $211 = 0, $212 = 0, $216 = 0, $218 = 0, $220 = 0, $221 = 0, $227 = 0, $229 = 0, $234 = 0, $241 = 0, $244 = 0, $247 = 0, $25 = 0, $254 = 0, $257 = 0, $259 = 0, $26 = 0, $262 = 0, $265 = 0, $266 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $275 = 0, $28 = 0, $287 = 0, $29 = 0, $292 = 0, $297 = 0, $300 = 0, $309 = 0.0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $318 = 0.0, $321 = 0.0, $325 = 0, $328 = 0, $352 = 0.0, $357 = 0, $364 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $99 = 0, $or$cond420 = 0, $or$cond426 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $6 = sp;
 $sum = $3 + $2 | 0;
 $7 = 0 - $sum | 0;
 $8 = $0 + 4 | 0;
 $9 = $0 + 100 | 0;
 $$0329 = $1;
 $$0396 = 0;
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    $$0393 = 0;
    $$2 = $$0329;
    $$2398 = $$0396;
    $366 = 0;
    $367 = 0;
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0;
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1;
   $$0329 = HEAPU8[$10 >> 0] | 0;
   $$0396 = 1;
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0;
   $$0396 = 1;
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0;
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1;
   $$1330$ph = HEAPU8[$17 >> 0] | 0;
  } else $$1330$ph = ___shgetc($0) | 0;
  if (($$1330$ph | 0) == 48) {
   $25 = 0;
   $26 = 0;
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0;
    $28 = tempRet0;
    $29 = HEAP32[$8 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1;
     $$1330$be = HEAPU8[$29 >> 0] | 0;
    } else $$1330$be = ___shgetc($0) | 0;
    if (($$1330$be | 0) == 48) {
     $25 = $27;
     $26 = $28;
    } else {
     $$0393 = 1;
     $$2 = $$1330$be;
     $$2398 = 1;
     $366 = $27;
     $367 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;
   $$2 = $$1330$ph;
   $$2398 = $$0396;
   $366 = 0;
   $367 = 0;
  }
 }
 HEAP32[$6 >> 2] = 0;
 $37 = $$2 + -48 | 0;
 $39 = ($$2 | 0) == 46;
 L20 : do if ($39 | $37 >>> 0 < 10) {
  $41 = $6 + 496 | 0;
  $$0341513 = 0;
  $$0345512 = 0;
  $$0401509 = 0;
  $$1394511 = $$0393;
  $$3399510 = $$2398;
  $$3514 = $$2;
  $368 = $39;
  $369 = $37;
  $370 = $366;
  $371 = $367;
  $44 = 0;
  $45 = 0;
  L22 : while (1) {
   do if ($368) if (!$$1394511) {
    $$2343 = $$0341513;
    $$2347 = $$0345512;
    $$2395 = 1;
    $$2403 = $$0401509;
    $$4400 = $$3399510;
    $372 = $44;
    $373 = $45;
    $374 = $44;
    $375 = $45;
   } else break L22; else {
    $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0;
    $47 = tempRet0;
    $48 = ($$3514 | 0) != 48;
    if (($$0345512 | 0) >= 125) {
     if (!$48) {
      $$2343 = $$0341513;
      $$2347 = $$0345512;
      $$2395 = $$1394511;
      $$2403 = $$0401509;
      $$4400 = $$3399510;
      $372 = $370;
      $373 = $371;
      $374 = $46;
      $375 = $47;
      break;
     }
     HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1;
     $$2343 = $$0341513;
     $$2347 = $$0345512;
     $$2395 = $$1394511;
     $$2403 = $$0401509;
     $$4400 = $$3399510;
     $372 = $370;
     $373 = $371;
     $374 = $46;
     $375 = $47;
     break;
    }
    $$pre = $6 + ($$0345512 << 2) | 0;
    if (!$$0341513) $$sink = $369; else $$sink = $$3514 + -48 + ((HEAP32[$$pre >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$$pre >> 2] = $$sink;
    $54 = $$0341513 + 1 | 0;
    $55 = ($54 | 0) == 9;
    $$2343 = $55 ? 0 : $54;
    $$2347 = ($55 & 1) + $$0345512 | 0;
    $$2395 = $$1394511;
    $$2403 = $48 ? $46 : $$0401509;
    $$4400 = 1;
    $372 = $370;
    $373 = $371;
    $374 = $46;
    $375 = $47;
   } while (0);
   $59 = HEAP32[$8 >> 2] | 0;
   if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
    HEAP32[$8 >> 2] = $59 + 1;
    $$3$be = HEAPU8[$59 >> 0] | 0;
   } else $$3$be = ___shgetc($0) | 0;
   $369 = $$3$be + -48 | 0;
   $368 = ($$3$be | 0) == 46;
   if (!($368 | $369 >>> 0 < 10)) {
    $$0341$lcssa = $$2343;
    $$0345$lcssa = $$2347;
    $$0401$lcssa = $$2403;
    $$1394$lcssa = $$2395;
    $$3$lcssa = $$3$be;
    $$3399$lcssa = $$4400;
    $72 = $374;
    $73 = $372;
    $75 = $375;
    $76 = $373;
    label = 29;
    break L20;
   } else {
    $$0341513 = $$2343;
    $$0345512 = $$2347;
    $$0401509 = $$2403;
    $$1394511 = $$2395;
    $$3399510 = $$4400;
    $$3514 = $$3$be;
    $370 = $372;
    $371 = $373;
    $44 = $374;
    $45 = $375;
   }
  }
  $$0341465 = $$0341513;
  $$0345469 = $$0345512;
  $$0401475 = $$0401509;
  $376 = $44;
  $377 = $45;
  $378 = $370;
  $379 = $371;
  $380 = ($$3399510 | 0) != 0;
  label = 37;
 } else {
  $$0341$lcssa = 0;
  $$0345$lcssa = 0;
  $$0401$lcssa = 0;
  $$1394$lcssa = $$0393;
  $$3$lcssa = $$2;
  $$3399$lcssa = $$2398;
  $72 = 0;
  $73 = $366;
  $75 = 0;
  $76 = $367;
  label = 29;
 } while (0);
 do if ((label | 0) == 29) {
  $70 = ($$1394$lcssa | 0) == 0;
  $71 = $70 ? $72 : $73;
  $74 = $70 ? $75 : $76;
  $77 = ($$3399$lcssa | 0) != 0;
  if (!($77 & ($$3$lcssa | 32 | 0) == 101)) if (($$3$lcssa | 0) > -1) {
   $$0341465 = $$0341$lcssa;
   $$0345469 = $$0345$lcssa;
   $$0401475 = $$0401$lcssa;
   $376 = $72;
   $377 = $75;
   $378 = $71;
   $379 = $74;
   $380 = $77;
   label = 37;
   break;
  } else {
   $$0341464 = $$0341$lcssa;
   $$0345468 = $$0345$lcssa;
   $$0401474 = $$0401$lcssa;
   $381 = $72;
   $382 = $75;
   $383 = $77;
   $384 = $71;
   $385 = $74;
   label = 39;
   break;
  }
  $80 = _scanexp($0, $5) | 0;
  $81 = tempRet0;
  if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
   if (!$5) {
    ___shlim($0, 0);
    $$1 = 0.0;
    break;
   }
   if (!(HEAP32[$9 >> 2] | 0)) {
    $90 = 0;
    $91 = 0;
   } else {
    HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
    $90 = 0;
    $91 = 0;
   }
  } else {
   $90 = $80;
   $91 = $81;
  }
  $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0;
  $$0341463 = $$0341$lcssa;
  $$0345467 = $$0345$lcssa;
  $$0401473 = $$0401$lcssa;
  $105 = $92;
  $106 = $72;
  $108 = tempRet0;
  $109 = $75;
  label = 41;
 } while (0);
 if ((label | 0) == 37) if (!(HEAP32[$9 >> 2] | 0)) {
  $$0341464 = $$0341465;
  $$0345468 = $$0345469;
  $$0401474 = $$0401475;
  $381 = $376;
  $382 = $377;
  $383 = $380;
  $384 = $378;
  $385 = $379;
  label = 39;
 } else {
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
  if ($380) {
   $$0341463 = $$0341465;
   $$0345467 = $$0345469;
   $$0401473 = $$0401475;
   $105 = $378;
   $106 = $376;
   $108 = $379;
   $109 = $377;
   label = 41;
  } else label = 40;
 }
 if ((label | 0) == 39) if ($383) {
  $$0341463 = $$0341464;
  $$0345467 = $$0345468;
  $$0401473 = $$0401474;
  $105 = $384;
  $106 = $381;
  $108 = $385;
  $109 = $382;
  label = 41;
 } else label = 40;
 do if ((label | 0) == 40) {
  $99 = ___errno_location() | 0;
  HEAP32[$99 >> 2] = 22;
  ___shlim($0, 0);
  $$1 = 0.0;
 } else if ((label | 0) == 41) {
  $100 = HEAP32[$6 >> 2] | 0;
  if (!$100) {
   $$1 = +($4 | 0) * 0.0;
   break;
  }
  if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
   $$1 = +($4 | 0) * +($100 >>> 0);
   break;
  }
  $122 = ($3 | 0) / -2 | 0;
  $124 = (($122 | 0) < 0) << 31 >> 31;
  if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
   $130 = ___errno_location() | 0;
   HEAP32[$130 >> 2] = 34;
   $$1 = +($4 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $134 = $3 + -106 | 0;
  $136 = (($134 | 0) < 0) << 31 >> 31;
  if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
   $142 = ___errno_location() | 0;
   HEAP32[$142 >> 2] = 34;
   $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!$$0341463) $$3348 = $$0345467; else {
   if (($$0341463 | 0) < 9) {
    $148 = $6 + ($$0345467 << 2) | 0;
    $$3344503 = $$0341463;
    $150 = HEAP32[$148 >> 2] | 0;
    do {
     $150 = $150 * 10 | 0;
     $$3344503 = $$3344503 + 1 | 0;
    } while (($$3344503 | 0) != 9);
    HEAP32[$148 >> 2] = $150;
   }
   $$3348 = $$0345467 + 1 | 0;
  }
  if (($$0401473 | 0) < 9) if (($$0401473 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
   $157 = HEAP32[$6 >> 2] | 0;
   if (($105 | 0) == 9) {
    $$1 = +($4 | 0) * +($157 >>> 0);
    break;
   }
   if (($105 | 0) < 9) {
    $$1 = +($4 | 0) * +($157 >>> 0) / +(HEAP32[2620 + (8 - $105 << 2) >> 2] | 0);
    break;
   }
   $170 = $2 + 27 + (Math_imul($105, -3) | 0) | 0;
   if (($170 | 0) > 30 | ($157 >>> $170 | 0) == 0) {
    $$1 = +($4 | 0) * +($157 >>> 0) * +(HEAP32[2620 + ($105 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  $182 = ($105 | 0) % 9 | 0;
  if (!$182) {
   $$0380$ph = 0;
   $$1373$ph448 = $$3348;
   $$2352$ph449 = 0;
   $$2387$ph447 = $105;
  } else {
   $186 = ($105 | 0) > -1 ? $182 : $182 + 9 | 0;
   $189 = HEAP32[2620 + (8 - $186 << 2) >> 2] | 0;
   if (!$$3348) {
    $$0350$lcssa554 = 0;
    $$0372 = 0;
    $$0385$lcssa553 = $105;
   } else {
    $191 = 1e9 / ($189 | 0) | 0;
    $$0340496 = 0;
    $$0350494 = 0;
    $$0385493 = $105;
    $$4349495 = 0;
    do {
     $192 = $6 + ($$4349495 << 2) | 0;
     $193 = HEAP32[$192 >> 2] | 0;
     $196 = (($193 >>> 0) / ($189 >>> 0) | 0) + $$0340496 | 0;
     HEAP32[$192 >> 2] = $196;
     $$0340496 = Math_imul($191, ($193 >>> 0) % ($189 >>> 0) | 0) | 0;
     $or$cond420 = ($$4349495 | 0) == ($$0350494 | 0) & ($196 | 0) == 0;
     $$0385493 = $or$cond420 ? $$0385493 + -9 | 0 : $$0385493;
     $$0350494 = $or$cond420 ? $$0350494 + 1 & 127 : $$0350494;
     $$4349495 = $$4349495 + 1 | 0;
    } while (($$4349495 | 0) != ($$3348 | 0));
    if (!$$0340496) {
     $$0350$lcssa554 = $$0350494;
     $$0372 = $$3348;
     $$0385$lcssa553 = $$0385493;
    } else {
     HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340496;
     $$0350$lcssa554 = $$0350494;
     $$0372 = $$3348 + 1 | 0;
     $$0385$lcssa553 = $$0385493;
    }
   }
   $$0380$ph = 0;
   $$1373$ph448 = $$0372;
   $$2352$ph449 = $$0350$lcssa554;
   $$2387$ph447 = 9 - $186 + $$0385$lcssa553 | 0;
  }
  L101 : while (1) {
   $210 = ($$2387$ph447 | 0) < 18;
   $211 = ($$2387$ph447 | 0) == 18;
   $212 = $6 + ($$2352$ph449 << 2) | 0;
   $$0380 = $$0380$ph;
   $$1373 = $$1373$ph448;
   while (1) {
    if (!$210) {
     if (!$211) {
      $$1381$ph = $$0380;
      $$4354$ph = $$2352$ph449;
      $$4389$ph445 = $$2387$ph447;
      $$6378$ph = $$1373;
      break L101;
     }
     if ((HEAP32[$212 >> 2] | 0) >>> 0 >= 9007199) {
      $$1381$ph = $$0380;
      $$4354$ph = $$2352$ph449;
      $$4389$ph445 = 18;
      $$6378$ph = $$1373;
      break L101;
     }
    }
    $$0334 = 0;
    $$2374 = $$1373;
    $$5$in = $$1373 + 127 | 0;
    while (1) {
     $$5 = $$5$in & 127;
     $216 = $6 + ($$5 << 2) | 0;
     $218 = _bitshift64Shl(HEAP32[$216 >> 2] | 0, 0, 29) | 0;
     $220 = _i64Add($218 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0;
     $221 = tempRet0;
     if ($221 >>> 0 > 0 | ($221 | 0) == 0 & $220 >>> 0 > 1e9) {
      $227 = ___udivdi3($220 | 0, $221 | 0, 1e9, 0) | 0;
      $229 = ___uremdi3($220 | 0, $221 | 0, 1e9, 0) | 0;
      $$1335 = $227;
      $$sink421$off0 = $229;
     } else {
      $$1335 = 0;
      $$sink421$off0 = $220;
     }
     HEAP32[$216 >> 2] = $$sink421$off0;
     $234 = ($$5 | 0) == ($$2352$ph449 | 0);
     $$2374 = ($$sink421$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $234) ^ 1) ? $$5 : $$2374;
     if ($234) break; else {
      $$0334 = $$1335;
      $$5$in = $$5 + -1 | 0;
     }
    }
    $$0380 = $$0380 + -29 | 0;
    if ($$1335 | 0) break; else $$1373 = $$2374;
   }
   $241 = $$2352$ph449 + 127 & 127;
   $244 = $$2374 + 127 & 127;
   $247 = $6 + (($$2374 + 126 & 127) << 2) | 0;
   if (($241 | 0) == ($$2374 | 0)) {
    HEAP32[$247 >> 2] = HEAP32[$247 >> 2] | HEAP32[$6 + ($244 << 2) >> 2];
    $$4376 = $244;
   } else $$4376 = $$2374;
   HEAP32[$6 + ($241 << 2) >> 2] = $$1335;
   $$0380$ph = $$0380;
   $$1373$ph448 = $$4376;
   $$2352$ph449 = $241;
   $$2387$ph447 = $$2387$ph447 + 9 | 0;
  }
  L119 : while (1) {
   $287 = $$6378$ph + 1 & 127;
   $292 = $6 + (($$6378$ph + 127 & 127) << 2) | 0;
   $$1381$ph558 = $$1381$ph;
   $$4354$ph559 = $$4354$ph;
   $$4389$ph = $$4389$ph445;
   while (1) {
    $265 = ($$4389$ph | 0) == 18;
    $$425 = ($$4389$ph | 0) > 27 ? 9 : 1;
    $$1381 = $$1381$ph558;
    $$4354 = $$4354$ph559;
    while (1) {
     $$0336486 = 0;
     while (1) {
      $254 = $$0336486 + $$4354 & 127;
      if (($254 | 0) == ($$6378$ph | 0)) {
       $$1337 = 2;
       label = 88;
       break;
      }
      $257 = HEAP32[$6 + ($254 << 2) >> 2] | 0;
      $259 = HEAP32[2652 + ($$0336486 << 2) >> 2] | 0;
      if ($257 >>> 0 < $259 >>> 0) {
       $$1337 = 2;
       label = 88;
       break;
      }
      if ($257 >>> 0 > $259 >>> 0) break;
      $262 = $$0336486 + 1 | 0;
      if (($262 | 0) < 2) $$0336486 = $262; else {
       $$1337 = $262;
       label = 88;
       break;
      }
     }
     if ((label | 0) == 88) {
      label = 0;
      if ($265 & ($$1337 | 0) == 2) {
       $$0365484 = 0.0;
       $$4485 = 0;
       $$9483 = $$6378$ph;
       break L119;
      }
     }
     $266 = $$425 + $$1381 | 0;
     if (($$4354 | 0) == ($$6378$ph | 0)) {
      $$1381 = $266;
      $$4354 = $$6378$ph;
     } else break;
    }
    $269 = (1 << $$425) + -1 | 0;
    $270 = 1e9 >>> $$425;
    $$0332490 = 0;
    $$5355488 = $$4354;
    $$5390487 = $$4389$ph;
    $$6489 = $$4354;
    do {
     $271 = $6 + ($$6489 << 2) | 0;
     $272 = HEAP32[$271 >> 2] | 0;
     $275 = ($272 >>> $$425) + $$0332490 | 0;
     HEAP32[$271 >> 2] = $275;
     $$0332490 = Math_imul($272 & $269, $270) | 0;
     $or$cond426 = ($$6489 | 0) == ($$5355488 | 0) & ($275 | 0) == 0;
     $$5390487 = $or$cond426 ? $$5390487 + -9 | 0 : $$5390487;
     $$5355488 = $or$cond426 ? $$5355488 + 1 & 127 : $$5355488;
     $$6489 = $$6489 + 1 & 127;
    } while (($$6489 | 0) != ($$6378$ph | 0));
    if (!$$0332490) {
     $$1381$ph558 = $266;
     $$4354$ph559 = $$5355488;
     $$4389$ph = $$5390487;
     continue;
    }
    if (($287 | 0) != ($$5355488 | 0)) break;
    HEAP32[$292 >> 2] = HEAP32[$292 >> 2] | 1;
    $$1381$ph558 = $266;
    $$4354$ph559 = $$5355488;
    $$4389$ph = $$5390487;
   }
   HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332490;
   $$1381$ph = $266;
   $$4354$ph = $$5355488;
   $$4389$ph445 = $$5390487;
   $$6378$ph = $287;
  }
  while (1) {
   $297 = $$4485 + $$4354 & 127;
   $300 = $$9483 + 1 & 127;
   if (($297 | 0) == ($$9483 | 0)) {
    HEAP32[$6 + ($300 + -1 << 2) >> 2] = 0;
    $$10 = $300;
   } else $$10 = $$9483;
   $$0365484 = $$0365484 * 1.0e9 + +((HEAP32[$6 + ($297 << 2) >> 2] | 0) >>> 0);
   $$4485 = $$4485 + 1 | 0;
   if (($$4485 | 0) == 2) break; else $$9483 = $$10;
  }
  $309 = +($4 | 0);
  $310 = $309 * $$0365484;
  $311 = $$1381 + 53 | 0;
  $312 = $311 - $3 | 0;
  $313 = ($312 | 0) < ($2 | 0);
  $$0333 = $313 ? (($312 | 0) > 0 ? $312 : 0) : $2;
  if (($$0333 | 0) < 53) {
   $318 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $310);
   $321 = +_fmodl($310, +_scalbn(1.0, 53 - $$0333 | 0));
   $$0360 = $318;
   $$0361 = $321;
   $$1366 = $318 + ($310 - $321);
  } else {
   $$0360 = 0.0;
   $$0361 = 0.0;
   $$1366 = $310;
  }
  $325 = $$4354 + 2 & 127;
  if (($325 | 0) == ($$10 | 0)) $$3364 = $$0361; else {
   $328 = HEAP32[$6 + ($325 << 2) >> 2] | 0;
   do if ($328 >>> 0 < 5e8) {
    if (!$328) if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
     $$1362 = $$0361;
     break;
    }
    $$1362 = $309 * .25 + $$0361;
   } else {
    if (($328 | 0) != 5e8) {
     $$1362 = $309 * .75 + $$0361;
     break;
    }
    if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
     $$1362 = $309 * .5 + $$0361;
     break;
    } else {
     $$1362 = $309 * .75 + $$0361;
     break;
    }
   } while (0);
   if ((53 - $$0333 | 0) > 1) if (+_fmodl($$1362, 1.0) != 0.0) $$3364 = $$1362; else $$3364 = $$1362 + 1.0; else $$3364 = $$1362;
  }
  $352 = $$1366 + $$3364 - $$0360;
  do if (($311 & 2147483647 | 0) > (-2 - $sum | 0)) {
   $357 = !(+Math_abs(+$352) >= 9007199254740992.0);
   $$3383 = (($357 ^ 1) & 1) + $$1381 | 0;
   $$2367 = $357 ? $352 : $352 * .5;
   if (($$3383 + 50 | 0) <= ($7 | 0)) if (!($$3364 != 0.0 & ($313 & (($$0333 | 0) != ($312 | 0) | $357)))) {
    $$3368 = $$2367;
    $$4384 = $$3383;
    break;
   }
   $364 = ___errno_location() | 0;
   HEAP32[$364 >> 2] = 34;
   $$3368 = $$2367;
   $$4384 = $$3383;
  } else {
   $$3368 = $352;
   $$4384 = $$1381;
  } while (0);
  $$1 = +_scalbnl($$3368, $$4384);
 } while (0);
 STACKTOP = sp;
 return +$$1;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0151$off0$ph = 0, $$0157 = 0, $$1158 = 0, $$2159 = 0, $$2159$ph = 0, $$4166 = 0, $$sink = 0, $$sroa$0$0$$sroa_idx$i207 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $111 = 0, $119 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $131 = 0, $137 = 0, $140 = 0, $141 = 0, $148 = 0, $149 = 0, $15 = 0, $152 = 0, $154 = 0, $16 = 0, $164 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $182 = 0, $185 = 0, $186 = 0, $193 = 0, $194 = 0, $197 = 0, $199 = 0, $207 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $226 = 0, $227 = 0, $230 = 0, $232 = 0, $241 = 0, $246 = 0, $247 = 0, $249 = 0, $250 = 0, $251 = 0, $253 = 0, $259 = 0, $262 = 0, $263 = 0, $270 = 0, $271 = 0, $274 = 0, $276 = 0, $287 = 0, $289 = 0, $291 = 0, $292 = 0, $3 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $76 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $94 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$4166 = $0; else if ((HEAP8[$0 >> 0] | 0) == 78) {
  $11 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0 + 1 | 0, $1, $3) | 0;
  L4 : do if (($11 | 0) != ($1 | 0)) {
   $13 = $2 + 52 | 0;
   HEAP32[$13 >> 2] = 0;
   $15 = $11 + 1 | 0;
   switch (HEAP8[$11 >> 0] | 0) {
   case 82:
    {
     $$sink = 1;
     label = 6;
     break;
    }
   case 79:
    {
     $$sink = 2;
     label = 6;
     break;
    }
   default:
    $$0157 = $11;
   }
   if ((label | 0) == 6) {
    HEAP32[$13 >> 2] = $$sink;
    $$0157 = $15;
   }
   $16 = $2 + 4 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if ($17 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    HEAP32[$17 >> 2] = 0;
    HEAP32[$17 + 4 >> 2] = 0;
    HEAP32[$17 + 8 >> 2] = 0;
    HEAP32[$17 + 12 >> 2] = 0;
    HEAP32[$17 + 16 >> 2] = 0;
    HEAP32[$17 + 20 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($17);
    HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
   if (($1 - $$0157 | 0) > 1) if ((HEAP8[$$0157 >> 0] | 0) == 83) if ((HEAP8[$$0157 + 1 >> 0] | 0) == 116) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc((HEAP32[$16 >> 2] | 0) + -24 | 0, 16425);
    $$1158 = $$0157 + 2 | 0;
   } else $$1158 = $$0157; else $$1158 = $$0157; else $$1158 = $$0157;
   if (($$1158 | 0) == ($1 | 0)) {
    $64 = HEAP32[$16 >> 2] | 0;
    $65 = $64 + -24 | 0;
    $67 = $64;
    while (1) {
     if (($67 | 0) == ($65 | 0)) break L4;
     $68 = $67 + -24 | 0;
     HEAP32[$16 >> 2] = $68;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($68);
     $67 = HEAP32[$16 >> 2] | 0;
    }
   }
   $36 = $2 + 16 | 0;
   $37 = $4 + 11 | 0;
   $38 = $4 + 4 | 0;
   $$sroa$0$0$$sroa_idx$i207 = $2 + 12 | 0;
   $39 = $2 + 20 | 0;
   $40 = $2 + 24 | 0;
   $41 = $5 + 12 | 0;
   $42 = $5 + 4 | 0;
   $43 = $5 + 8 | 0;
   $44 = $5 + 12 | 0;
   $45 = $5 + 4 | 0;
   $46 = $5 + 8 | 0;
   $47 = $5 + 11 | 0;
   $48 = $5 + 4 | 0;
   $49 = $5 + 11 | 0;
   $50 = $5 + 4 | 0;
   $51 = $5 + 12 | 0;
   $52 = $5 + 4 | 0;
   $53 = $5 + 8 | 0;
   $54 = $5 + 12 | 0;
   $55 = $5 + 4 | 0;
   $56 = $5 + 8 | 0;
   $57 = $5 + 11 | 0;
   $58 = $5 + 4 | 0;
   $59 = $5 + 12 | 0;
   $60 = $5 + 4 | 0;
   $61 = $5 + 8 | 0;
   $62 = $5 + 11 | 0;
   $63 = $5 + 4 | 0;
   $$0151$off0$ph = 0;
   $$2159$ph = $$1158;
   L26 : while (1) {
    $$2159 = $$2159$ph;
    L28 : while (1) {
     $69 = HEAP8[$$2159 >> 0] | 0;
     $71 = $$2159 + 1 | 0;
     if ($69 << 24 >> 24 == 69) break L26;
     switch ($69 << 24 >> 24 | 0) {
     case 83:
      {
       label = 21;
       break L28;
       break;
      }
     case 84:
      {
       label = 37;
       break L28;
       break;
      }
     case 68:
      {
       label = 51;
       break L28;
       break;
      }
     case 73:
      break;
     case 76:
      {
       if (($71 | 0) == ($1 | 0)) break L4; else {
        $$2159 = $71;
        continue L28;
       }
       break;
      }
     default:
      break L28;
     }
     $207 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($207 | 0) == ($$2159 | 0) | ($207 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $212 = HEAP32[$16 >> 2] | 0;
     $213 = $212 + -24 | 0;
     $215 = $212;
     while (1) {
      if (($215 | 0) == ($213 | 0)) break;
      $216 = $215 + -24 | 0;
      HEAP32[$16 >> 2] = $216;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($216);
      $215 = HEAP32[$16 >> 2] | 0;
     }
     $218 = HEAP8[$37 >> 0] | 0;
     $219 = $218 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($212 + -48 | 0, $219 ? HEAP32[$4 >> 2] | 0 : $4, $219 ? HEAP32[$38 >> 2] | 0 : $218 & 255) | 0;
     $226 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i207 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $226, $6);
     $227 = HEAP32[$39 >> 2] | 0;
     if ($227 >>> 0 < (HEAP32[$40 >> 2] | 0) >>> 0) {
      HEAP32[$227 >> 2] = 0;
      $230 = $227 + 4 | 0;
      HEAP32[$230 >> 2] = 0;
      $232 = HEAP32[$41 >> 2] | 0;
      HEAP32[$227 + 8 >> 2] = 0;
      HEAP32[$227 + 12 >> 2] = $232;
      HEAP32[$227 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$230 >> 2] = HEAP32[$42 >> 2];
      HEAP32[$227 + 8 >> 2] = HEAP32[$43 >> 2];
      HEAP32[$43 >> 2] = 0;
      HEAP32[$42 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($36, $5);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$2159 = $207;
    }
    L43 : do if ((label | 0) == 21) {
     label = 0;
     if (($71 | 0) != ($1 | 0)) if ((HEAP8[$71 >> 0] | 0) == 116) break;
     $76 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($76 | 0) == ($$2159 | 0) | ($76 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $81 = HEAP32[$16 >> 2] | 0;
     $82 = $81 + -24 | 0;
     $84 = $81;
     while (1) {
      if (($84 | 0) == ($82 | 0)) break;
      $85 = $84 + -24 | 0;
      HEAP32[$16 >> 2] = $85;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($85);
      $84 = HEAP32[$16 >> 2] | 0;
     }
     $86 = $81 + -48 | 0;
     $88 = HEAP8[$86 + 11 >> 0] | 0;
     if ($88 << 24 >> 24 < 0) $94 = HEAP32[$81 + -44 >> 2] | 0; else $94 = $88 & 255;
     if (!$94) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($86, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15121, $4);
      $97 = HEAP8[$49 >> 0] | 0;
      $98 = $97 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$16 >> 2] | 0) + -24 | 0, $98 ? HEAP32[$5 >> 2] | 0 : $5, $98 ? HEAP32[$50 >> 2] | 0 : $97 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $105 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i207 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $105, $6);
      $106 = HEAP32[$39 >> 2] | 0;
      if ($106 >>> 0 < (HEAP32[$40 >> 2] | 0) >>> 0) {
       HEAP32[$106 >> 2] = 0;
       $109 = $106 + 4 | 0;
       HEAP32[$109 >> 2] = 0;
       $111 = HEAP32[$51 >> 2] | 0;
       HEAP32[$106 + 8 >> 2] = 0;
       HEAP32[$106 + 12 >> 2] = $111;
       HEAP32[$106 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$109 >> 2] = HEAP32[$52 >> 2];
       HEAP32[$106 + 8 >> 2] = HEAP32[$53 >> 2];
       HEAP32[$53 >> 2] = 0;
       HEAP32[$52 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($36, $5);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$0151$off0$ph = 1;
     $$2159$ph = $76;
     continue L26;
    } else if ((label | 0) == 37) {
     label = 0;
     $119 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($119 | 0) == ($$2159 | 0) | ($119 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $124 = HEAP32[$16 >> 2] | 0;
     $125 = $124 + -24 | 0;
     $127 = $124;
     while (1) {
      if (($127 | 0) == ($125 | 0)) break;
      $128 = $127 + -24 | 0;
      HEAP32[$16 >> 2] = $128;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($128);
      $127 = HEAP32[$16 >> 2] | 0;
     }
     $129 = $124 + -48 | 0;
     $131 = HEAP8[$129 + 11 >> 0] | 0;
     if ($131 << 24 >> 24 < 0) $137 = HEAP32[$124 + -44 >> 2] | 0; else $137 = $131 & 255;
     if (!$137) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($129, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15121, $4);
      $140 = HEAP8[$57 >> 0] | 0;
      $141 = $140 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$16 >> 2] | 0) + -24 | 0, $141 ? HEAP32[$5 >> 2] | 0 : $5, $141 ? HEAP32[$58 >> 2] | 0 : $140 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $148 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i207 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $148, $6);
     $149 = HEAP32[$39 >> 2] | 0;
     if ($149 >>> 0 < (HEAP32[$40 >> 2] | 0) >>> 0) {
      HEAP32[$149 >> 2] = 0;
      $152 = $149 + 4 | 0;
      HEAP32[$152 >> 2] = 0;
      $154 = HEAP32[$54 >> 2] | 0;
      HEAP32[$149 + 8 >> 2] = 0;
      HEAP32[$149 + 12 >> 2] = $154;
      HEAP32[$149 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$152 >> 2] = HEAP32[$55 >> 2];
      HEAP32[$149 + 8 >> 2] = HEAP32[$56 >> 2];
      HEAP32[$56 >> 2] = 0;
      HEAP32[$55 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($36, $5);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$0151$off0$ph = 1;
     $$2159$ph = $119;
     continue L26;
    } else if ((label | 0) == 51) {
     label = 0;
     if (($71 | 0) != ($1 | 0)) switch (HEAP8[$71 >> 0] | 0) {
     case 84:
     case 116:
      break;
     default:
      break L43;
     }
     $164 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($164 | 0) == ($$2159 | 0) | ($164 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $169 = HEAP32[$16 >> 2] | 0;
     $170 = $169 + -24 | 0;
     $172 = $169;
     while (1) {
      if (($172 | 0) == ($170 | 0)) break;
      $173 = $172 + -24 | 0;
      HEAP32[$16 >> 2] = $173;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($173);
      $172 = HEAP32[$16 >> 2] | 0;
     }
     $174 = $169 + -48 | 0;
     $176 = HEAP8[$174 + 11 >> 0] | 0;
     if ($176 << 24 >> 24 < 0) $182 = HEAP32[$169 + -44 >> 2] | 0; else $182 = $176 & 255;
     if (!$182) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($174, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15121, $4);
      $185 = HEAP8[$62 >> 0] | 0;
      $186 = $185 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$16 >> 2] | 0) + -24 | 0, $186 ? HEAP32[$5 >> 2] | 0 : $5, $186 ? HEAP32[$63 >> 2] | 0 : $185 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $193 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i207 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $193, $6);
     $194 = HEAP32[$39 >> 2] | 0;
     if ($194 >>> 0 < (HEAP32[$40 >> 2] | 0) >>> 0) {
      HEAP32[$194 >> 2] = 0;
      $197 = $194 + 4 | 0;
      HEAP32[$197 >> 2] = 0;
      $199 = HEAP32[$59 >> 2] | 0;
      HEAP32[$194 + 8 >> 2] = 0;
      HEAP32[$194 + 12 >> 2] = $199;
      HEAP32[$194 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$197 >> 2] = HEAP32[$60 >> 2];
      HEAP32[$194 + 8 >> 2] = HEAP32[$61 >> 2];
      HEAP32[$61 >> 2] = 0;
      HEAP32[$60 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($36, $5);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$0151$off0$ph = 1;
     $$2159$ph = $164;
     continue L26;
    } while (0);
    $241 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
    if (($241 | 0) == ($$2159 | 0) | ($241 | 0) == ($1 | 0)) break L4;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
    $246 = HEAP32[$16 >> 2] | 0;
    $247 = $246 + -24 | 0;
    $249 = $246;
    while (1) {
     if (($249 | 0) == ($247 | 0)) break;
     $250 = $249 + -24 | 0;
     HEAP32[$16 >> 2] = $250;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($250);
     $249 = HEAP32[$16 >> 2] | 0;
    }
    $251 = $246 + -48 | 0;
    $253 = HEAP8[$251 + 11 >> 0] | 0;
    if ($253 << 24 >> 24 < 0) $259 = HEAP32[$246 + -44 >> 2] | 0; else $259 = $253 & 255;
    if (!$259) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($251, $4); else {
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15121, $4);
     $262 = HEAP8[$47 >> 0] | 0;
     $263 = $262 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$16 >> 2] | 0) + -24 | 0, $263 ? HEAP32[$5 >> 2] | 0 : $5, $263 ? HEAP32[$48 >> 2] | 0 : $262 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    }
    $270 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
    HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i207 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5, $270, $6);
    $271 = HEAP32[$39 >> 2] | 0;
    if ($271 >>> 0 < (HEAP32[$40 >> 2] | 0) >>> 0) {
     HEAP32[$271 >> 2] = 0;
     $274 = $271 + 4 | 0;
     HEAP32[$274 >> 2] = 0;
     $276 = HEAP32[$44 >> 2] | 0;
     HEAP32[$271 + 8 >> 2] = 0;
     HEAP32[$271 + 12 >> 2] = $276;
     HEAP32[$271 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$274 >> 2] = HEAP32[$45 >> 2];
     HEAP32[$271 + 8 >> 2] = HEAP32[$46 >> 2];
     HEAP32[$46 >> 2] = 0;
     HEAP32[$45 >> 2] = 0;
     HEAP32[$5 >> 2] = 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($36, $5);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    $$0151$off0$ph = 1;
    $$2159$ph = $241;
   }
   HEAP32[$2 + 48 >> 2] = HEAP32[$3 >> 2];
   L123 : do if ($$0151$off0$ph) {
    $287 = HEAP32[$39 >> 2] | 0;
    if ((HEAP32[$36 >> 2] | 0) != ($287 | 0)) {
     $289 = $287 + -16 | 0;
     $291 = $287;
     while (1) {
      if (($291 | 0) == ($289 | 0)) break L123;
      $292 = $291 + -16 | 0;
      HEAP32[$39 >> 2] = $292;
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($292);
      $291 = HEAP32[$39 >> 2] | 0;
     }
    }
   } while (0);
   $$4166 = $71;
   break L1;
  } while (0);
  $$4166 = $0;
 } else $$4166 = $0; while (0);
 STACKTOP = sp;
 return $$4166 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $100 = 0, $106 = 0, $107 = 0, $113 = 0, $114 = 0, $120 = 0, $121 = 0, $127 = 0, $128 = 0, $134 = 0, $135 = 0, $141 = 0, $142 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $168 = 0, $169 = 0, $175 = 0, $176 = 0, $182 = 0, $183 = 0, $189 = 0, $190 = 0, $196 = 0, $197 = 0, $203 = 0, $204 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $43 = 0, $44 = 0, $50 = 0, $51 = 0, $57 = 0, $58 = 0, $64 = 0, $65 = 0, $7 = 0, $71 = 0, $72 = 0, $78 = 0, $79 = 0, $8 = 0, $85 = 0, $86 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else {
  $7 = $0 + 1 | 0;
  do switch (HEAP8[$0 >> 0] | 0) {
  case 118:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16486);
    $8 = $2 + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    if ($9 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($9, $3);
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 119:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($3);
    $15 = $2 + 4 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    if ($16 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16, $3);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 98:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16491);
    $22 = $2 + 4 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    if ($23 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($23, $3);
     HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 99:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16260);
    $29 = $2 + 4 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    if ($30 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($30, $3);
     HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 97:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 16265);
    $36 = $2 + 4 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    if ($37 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($37, $3);
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 104:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($3, 16277);
    $43 = $2 + 4 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    if ($44 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($44, $3);
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 115:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3, 16291);
    $50 = $2 + 4 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    if ($51 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($51, $3);
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 116:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3, 16297);
    $57 = $2 + 4 | 0;
    $58 = HEAP32[$57 >> 2] | 0;
    if ($58 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($58, $3);
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 105:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($3, 16496);
    $64 = $2 + 4 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    if ($65 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65, $3);
     HEAP32[$64 >> 2] = (HEAP32[$64 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 106:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 16500);
    $71 = $2 + 4 | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    if ($72 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($72, $3);
     HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 108:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16513);
    $78 = $2 + 4 | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    if ($79 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($79, $3);
     HEAP32[$78 >> 2] = (HEAP32[$78 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 109:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($3, 16518);
    $85 = $2 + 4 | 0;
    $86 = HEAP32[$85 >> 2] | 0;
    if ($86 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($86, $3);
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 120:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 16532);
    $92 = $2 + 4 | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    if ($93 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($93, $3);
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 121:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($3);
    $99 = $2 + 4 | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    if ($100 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($100, $3);
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 110:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($3, 16326);
    $106 = $2 + 4 | 0;
    $107 = HEAP32[$106 >> 2] | 0;
    if ($107 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($107, $3);
     HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 111:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($3, 16335);
    $113 = $2 + 4 | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    if ($114 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($114, $3);
     HEAP32[$113 >> 2] = (HEAP32[$113 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 102:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3, 16542);
    $120 = $2 + 4 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    if ($121 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($121, $3);
     HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 100:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($3);
    $127 = $2 + 4 | 0;
    $128 = HEAP32[$127 >> 2] | 0;
    if ($128 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($128, $3);
     HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 101:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 16548);
    $134 = $2 + 4 | 0;
    $135 = HEAP32[$134 >> 2] | 0;
    if ($135 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($135, $3);
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 103:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 16560);
    $141 = $2 + 4 | 0;
    $142 = HEAP32[$141 >> 2] | 0;
    if ($142 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($142, $3);
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 122:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($3, 16571);
    $148 = $2 + 4 | 0;
    $149 = HEAP32[$148 >> 2] | 0;
    if ($149 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($149, $3);
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $7;
    break L1;
    break;
   }
  case 117:
   {
    $155 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($7, $1, $2) | 0;
    $$1 = ($155 | 0) == ($7 | 0) ? $0 : $155;
    break L1;
    break;
   }
  case 68:
   {
    if (($7 | 0) == ($1 | 0)) {
     $$1 = $0;
     break L1;
    }
    $160 = $0 + 2 | 0;
    switch (HEAP8[$7 >> 0] | 0) {
    case 100:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 16575);
      $161 = $2 + 4 | 0;
      $162 = HEAP32[$161 >> 2] | 0;
      if ($162 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($162, $3);
       HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$1 = $160;
      break L1;
      break;
     }
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3, 16585);
      $168 = $2 + 4 | 0;
      $169 = HEAP32[$168 >> 2] | 0;
      if ($169 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($169, $3);
       HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$1 = $160;
      break L1;
      break;
     }
    case 102:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 16596);
      $175 = $2 + 4 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      if ($176 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($176, $3);
       HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$1 = $160;
      break L1;
      break;
     }
    case 104:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 16606);
      $182 = $2 + 4 | 0;
      $183 = HEAP32[$182 >> 2] | 0;
      if ($183 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($183, $3);
       HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$1 = $160;
      break L1;
      break;
     }
    case 105:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($3, 16616);
      $189 = $2 + 4 | 0;
      $190 = HEAP32[$189 >> 2] | 0;
      if ($190 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($190, $3);
       HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$1 = $160;
      break L1;
      break;
     }
    case 115:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($3, 16625);
      $196 = $2 + 4 | 0;
      $197 = HEAP32[$196 >> 2] | 0;
      if ($197 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($197, $3);
       HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$1 = $160;
      break L1;
      break;
     }
    case 97:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16634);
      $203 = $2 + 4 | 0;
      $204 = HEAP32[$203 >> 2] | 0;
      if ($204 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($204, $3);
       HEAP32[$203 >> 2] = (HEAP32[$203 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$1 = $160;
      break L1;
      break;
     }
    case 110:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3, 16639);
      $210 = $2 + 4 | 0;
      $211 = HEAP32[$210 >> 2] | 0;
      if ($211 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($211, $3);
       HEAP32[$210 >> 2] = (HEAP32[$210 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$1 = $160;
      break L1;
      break;
     }
    default:
     {
      $$1 = $0;
      break L1;
     }
    }
    break;
   }
  default:
   {
    $$1 = $0;
    break L1;
   }
  } while (0);
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484692 = 0, $$$4502 = 0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488653 = 0, $$0488655 = 0, $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$556 = 0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre$phi690Z2D = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $104 = 0, $11 = 0, $111 = 0, $114 = 0, $122 = 0, $123 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $136 = 0, $138 = 0, $142 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $158 = 0, $159 = 0, $160 = 0, $172 = 0, $183 = 0, $187 = 0, $188 = 0, $191 = 0, $196 = 0, $197 = 0, $199 = 0, $207 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $215 = 0, $218 = 0, $222 = 0, $227 = 0, $230 = 0, $233 = 0, $235 = 0, $237 = 0, $239 = 0, $244 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $256 = 0, $264 = 0, $267 = 0, $272 = 0, $28 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $291 = 0, $293 = 0, $297 = 0, $300 = 0, $301 = 0, $305 = 0, $315 = 0, $32 = 0, $320 = 0, $323 = 0, $324 = 0, $325 = 0, $327 = 0, $332 = 0, $344 = 0, $348 = 0, $353 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $366 = 0, $37 = 0, $370 = 0, $372 = 0, $375 = 0, $378 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $6 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, $99 = 0, $notrhs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 $6 = sp + 8 | 0;
 $7 = sp;
 $8 = sp + 524 | 0;
 $9 = $8;
 $10 = sp + 512 | 0;
 HEAP32[$7 >> 2] = 0;
 $11 = $10 + 12 | 0;
 ___DOUBLE_BITS_685($1) | 0;
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1;
  $$0520 = 1;
  $$0521 = 12170;
 } else {
  $$0471 = $1;
  $$0520 = ($4 & 2049 | 0) != 0 & 1;
  $$0521 = ($4 & 2048 | 0) == 0 ? (($4 & 1 | 0) == 0 ? 12171 : 12176) : 12173;
 }
 ___DOUBLE_BITS_685($$0471) | 0;
 $21 = tempRet0 & 2146435072;
 do if ($21 >>> 0 < 2146435072 | ($21 | 0) == 2146435072 & 0 < 0) {
  $36 = +_frexpl($$0471, $7) * 2.0;
  $37 = $36 != 0.0;
  if ($37) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  $40 = $5 | 32;
  if (($40 | 0) == 97) {
   $42 = $5 & 32;
   $$0521$ = ($42 | 0) == 0 ? $$0521 : $$0521 + 9 | 0;
   $45 = $$0520 | 2;
   $47 = 12 - $3 | 0;
   do if ($3 >>> 0 > 11 | ($47 | 0) == 0) $$1472 = $36; else {
    $$0509582 = 8.0;
    $$1508583 = $47;
    do {
     $$1508583 = $$1508583 + -1 | 0;
     $$0509582 = $$0509582 * 16.0;
    } while (($$1508583 | 0) != 0);
    if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
     $$1472 = -($$0509582 + (-$36 - $$0509582));
     break;
    } else {
     $$1472 = $36 + $$0509582 - $$0509582;
     break;
    }
   } while (0);
   $61 = HEAP32[$7 >> 2] | 0;
   $64 = ($61 | 0) < 0 ? 0 - $61 | 0 : $61;
   $67 = _fmt_u($64, (($64 | 0) < 0) << 31 >> 31, $11) | 0;
   if (($67 | 0) == ($11 | 0)) {
    $69 = $10 + 11 | 0;
    HEAP8[$69 >> 0] = 48;
    $$0511 = $69;
   } else $$0511 = $67;
   HEAP8[$$0511 + -1 >> 0] = ($61 >> 31 & 2) + 43;
   $77 = $$0511 + -2 | 0;
   HEAP8[$77 >> 0] = $5 + 15;
   $notrhs = ($3 | 0) < 1;
   $79 = ($4 & 8 | 0) == 0;
   $$0523 = $8;
   $$2473 = $$1472;
   while (1) {
    $80 = ~~$$2473;
    $86 = $$0523 + 1 | 0;
    HEAP8[$$0523 >> 0] = HEAPU8[12201 + $80 >> 0] | $42;
    $$2473 = ($$2473 - +($80 | 0)) * 16.0;
    if (($86 - $9 | 0) == 1) if ($79 & ($notrhs & $$2473 == 0.0)) $$1524 = $86; else {
     HEAP8[$86 >> 0] = 46;
     $$1524 = $$0523 + 2 | 0;
    } else $$1524 = $86;
    if (!($$2473 != 0.0)) break; else $$0523 = $$1524;
   }
   $99 = $$1524 - $9 | 0;
   $100 = $11 - $77 | 0;
   $$pn = ($3 | 0) != 0 & ($99 + -2 | 0) < ($3 | 0) ? $3 + 2 | 0 : $99;
   $104 = $100 + $45 + $$pn | 0;
   _pad_684($0, 32, $2, $104, $4);
   _out($0, $$0521$, $45);
   _pad_684($0, 48, $2, $104, $4 ^ 65536);
   _out($0, $8, $99);
   _pad_684($0, 48, $$pn - $99 | 0, 0, 0);
   _out($0, $77, $100);
   _pad_684($0, 32, $2, $104, $4 ^ 8192);
   $$sink562 = $104;
   break;
  }
  $$539 = ($3 | 0) < 0 ? 6 : $3;
  if ($37) {
   $111 = (HEAP32[$7 >> 2] | 0) + -28 | 0;
   HEAP32[$7 >> 2] = $111;
   $$3 = $36 * 268435456.0;
   $$pr = $111;
  } else {
   $$3 = $36;
   $$pr = HEAP32[$7 >> 2] | 0;
  }
  $$556 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0;
  $$0498 = $$556;
  $$4 = $$3;
  do {
   $114 = ~~$$4 >>> 0;
   HEAP32[$$0498 >> 2] = $114;
   $$0498 = $$0498 + 4 | 0;
   $$4 = ($$4 - +($114 >>> 0)) * 1.0e9;
  } while ($$4 != 0.0);
  if (($$pr | 0) > 0) {
   $$1482661 = $$556;
   $$1499660 = $$0498;
   $122 = $$pr;
   while (1) {
    $123 = ($122 | 0) < 29 ? $122 : 29;
    $$0488653 = $$1499660 + -4 | 0;
    if ($$0488653 >>> 0 < $$1482661 >>> 0) $$2483$ph = $$1482661; else {
     $$0488655 = $$0488653;
     $$0497654 = 0;
     do {
      $126 = _bitshift64Shl(HEAP32[$$0488655 >> 2] | 0, 0, $123 | 0) | 0;
      $128 = _i64Add($126 | 0, tempRet0 | 0, $$0497654 | 0, 0) | 0;
      $129 = tempRet0;
      $130 = ___uremdi3($128 | 0, $129 | 0, 1e9, 0) | 0;
      HEAP32[$$0488655 >> 2] = $130;
      $$0497654 = ___udivdi3($128 | 0, $129 | 0, 1e9, 0) | 0;
      $$0488655 = $$0488655 + -4 | 0;
     } while ($$0488655 >>> 0 >= $$1482661 >>> 0);
     if (!$$0497654) $$2483$ph = $$1482661; else {
      $136 = $$1482661 + -4 | 0;
      HEAP32[$136 >> 2] = $$0497654;
      $$2483$ph = $136;
     }
    }
    $$2500 = $$1499660;
    while (1) {
     if ($$2500 >>> 0 <= $$2483$ph >>> 0) break;
     $138 = $$2500 + -4 | 0;
     if (!(HEAP32[$138 >> 2] | 0)) $$2500 = $138; else break;
    }
    $142 = (HEAP32[$7 >> 2] | 0) - $123 | 0;
    HEAP32[$7 >> 2] = $142;
    if (($142 | 0) > 0) {
     $$1482661 = $$2483$ph;
     $$1499660 = $$2500;
     $122 = $142;
    } else {
     $$1482$lcssa = $$2483$ph;
     $$1499$lcssa = $$2500;
     $$pr564 = $142;
     break;
    }
   }
  } else {
   $$1482$lcssa = $$556;
   $$1499$lcssa = $$0498;
   $$pr564 = $$pr;
  }
  if (($$pr564 | 0) < 0) {
   $147 = (($$539 + 25 | 0) / 9 | 0) + 1 | 0;
   $148 = ($40 | 0) == 102;
   $$3484648 = $$1482$lcssa;
   $$3501647 = $$1499$lcssa;
   $150 = $$pr564;
   while (1) {
    $149 = 0 - $150 | 0;
    $152 = ($149 | 0) < 9 ? $149 : 9;
    if ($$3484648 >>> 0 < $$3501647 >>> 0) {
     $158 = (1 << $152) + -1 | 0;
     $159 = 1e9 >>> $152;
     $$0487642 = 0;
     $$1489641 = $$3484648;
     do {
      $160 = HEAP32[$$1489641 >> 2] | 0;
      HEAP32[$$1489641 >> 2] = ($160 >>> $152) + $$0487642;
      $$0487642 = Math_imul($160 & $158, $159) | 0;
      $$1489641 = $$1489641 + 4 | 0;
     } while ($$1489641 >>> 0 < $$3501647 >>> 0);
     $$$3484 = (HEAP32[$$3484648 >> 2] | 0) == 0 ? $$3484648 + 4 | 0 : $$3484648;
     if (!$$0487642) {
      $$$3484692 = $$$3484;
      $$4502 = $$3501647;
     } else {
      HEAP32[$$3501647 >> 2] = $$0487642;
      $$$3484692 = $$$3484;
      $$4502 = $$3501647 + 4 | 0;
     }
    } else {
     $$$3484692 = (HEAP32[$$3484648 >> 2] | 0) == 0 ? $$3484648 + 4 | 0 : $$3484648;
     $$4502 = $$3501647;
    }
    $172 = $148 ? $$556 : $$$3484692;
    $$$4502 = ($$4502 - $172 >> 2 | 0) > ($147 | 0) ? $172 + ($147 << 2) | 0 : $$4502;
    $150 = (HEAP32[$7 >> 2] | 0) + $152 | 0;
    HEAP32[$7 >> 2] = $150;
    if (($150 | 0) >= 0) {
     $$3484$lcssa = $$$3484692;
     $$3501$lcssa = $$$4502;
     break;
    } else {
     $$3484648 = $$$3484692;
     $$3501647 = $$$4502;
    }
   }
  } else {
   $$3484$lcssa = $$1482$lcssa;
   $$3501$lcssa = $$1499$lcssa;
  }
  $183 = $$556;
  if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
   $187 = ($183 - $$3484$lcssa >> 2) * 9 | 0;
   $188 = HEAP32[$$3484$lcssa >> 2] | 0;
   if ($188 >>> 0 < 10) $$1515 = $187; else {
    $$0514637 = $187;
    $$0530636 = 10;
    while (1) {
     $$0530636 = $$0530636 * 10 | 0;
     $191 = $$0514637 + 1 | 0;
     if ($188 >>> 0 < $$0530636 >>> 0) {
      $$1515 = $191;
      break;
     } else $$0514637 = $191;
    }
   }
  } else $$1515 = 0;
  $196 = ($40 | 0) == 103;
  $197 = ($$539 | 0) != 0;
  $199 = $$539 - (($40 | 0) != 102 ? $$1515 : 0) + (($197 & $196) << 31 >> 31) | 0;
  if (($199 | 0) < ((($$3501$lcssa - $183 >> 2) * 9 | 0) + -9 | 0)) {
   $207 = $199 + 9216 | 0;
   $210 = $$556 + 4 + ((($207 | 0) / 9 | 0) + -1024 << 2) | 0;
   $$0527629 = (($207 | 0) % 9 | 0) + 1 | 0;
   if (($$0527629 | 0) < 9) {
    $$0527631 = $$0527629;
    $$1531630 = 10;
    while (1) {
     $213 = $$1531630 * 10 | 0;
     $$0527631 = $$0527631 + 1 | 0;
     if (($$0527631 | 0) == 9) {
      $$1531$lcssa = $213;
      break;
     } else $$1531630 = $213;
    }
   } else $$1531$lcssa = 10;
   $214 = HEAP32[$210 >> 2] | 0;
   $215 = ($214 >>> 0) % ($$1531$lcssa >>> 0) | 0;
   $218 = ($210 + 4 | 0) == ($$3501$lcssa | 0);
   if ($218 & ($215 | 0) == 0) {
    $$4492 = $210;
    $$4518 = $$1515;
    $$8 = $$3484$lcssa;
   } else {
    $$542 = ((($214 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $222 = ($$1531$lcssa | 0) / 2 | 0;
    $$$559 = $215 >>> 0 < $222 >>> 0 ? .5 : $218 & ($215 | 0) == ($222 | 0) ? 1.0 : 1.5;
    if (!$$0520) {
     $$1467 = $$$559;
     $$1469 = $$542;
    } else {
     $227 = (HEAP8[$$0521 >> 0] | 0) == 45;
     $$1467 = $227 ? -$$$559 : $$$559;
     $$1469 = $227 ? -$$542 : $$542;
    }
    $230 = $214 - $215 | 0;
    HEAP32[$210 >> 2] = $230;
    if ($$1469 + $$1467 != $$1469) {
     $233 = $230 + $$1531$lcssa | 0;
     HEAP32[$210 >> 2] = $233;
     if ($233 >>> 0 > 999999999) {
      $$5486623 = $$3484$lcssa;
      $$sink545622 = $210;
      while (1) {
       $235 = $$sink545622 + -4 | 0;
       HEAP32[$$sink545622 >> 2] = 0;
       if ($235 >>> 0 < $$5486623 >>> 0) {
        $237 = $$5486623 + -4 | 0;
        HEAP32[$237 >> 2] = 0;
        $$6 = $237;
       } else $$6 = $$5486623;
       $239 = (HEAP32[$235 >> 2] | 0) + 1 | 0;
       HEAP32[$235 >> 2] = $239;
       if ($239 >>> 0 > 999999999) {
        $$5486623 = $$6;
        $$sink545622 = $235;
       } else {
        $$5486$lcssa = $$6;
        $$sink545$lcssa = $235;
        break;
       }
      }
     } else {
      $$5486$lcssa = $$3484$lcssa;
      $$sink545$lcssa = $210;
     }
     $244 = ($183 - $$5486$lcssa >> 2) * 9 | 0;
     $245 = HEAP32[$$5486$lcssa >> 2] | 0;
     if ($245 >>> 0 < 10) {
      $$4492 = $$sink545$lcssa;
      $$4518 = $244;
      $$8 = $$5486$lcssa;
     } else {
      $$2516618 = $244;
      $$2532617 = 10;
      while (1) {
       $$2532617 = $$2532617 * 10 | 0;
       $248 = $$2516618 + 1 | 0;
       if ($245 >>> 0 < $$2532617 >>> 0) {
        $$4492 = $$sink545$lcssa;
        $$4518 = $248;
        $$8 = $$5486$lcssa;
        break;
       } else $$2516618 = $248;
      }
     }
    } else {
     $$4492 = $210;
     $$4518 = $$1515;
     $$8 = $$3484$lcssa;
    }
   }
   $250 = $$4492 + 4 | 0;
   $$5519$ph = $$4518;
   $$7505$ph = $$3501$lcssa >>> 0 > $250 >>> 0 ? $250 : $$3501$lcssa;
   $$9$ph = $$8;
  } else {
   $$5519$ph = $$1515;
   $$7505$ph = $$3501$lcssa;
   $$9$ph = $$3484$lcssa;
  }
  $$7505 = $$7505$ph;
  while (1) {
   if ($$7505 >>> 0 <= $$9$ph >>> 0) {
    $$lcssa673 = 0;
    break;
   }
   $253 = $$7505 + -4 | 0;
   if (!(HEAP32[$253 >> 2] | 0)) $$7505 = $253; else {
    $$lcssa673 = 1;
    break;
   }
  }
  $256 = 0 - $$5519$ph | 0;
  do if ($196) {
   $$539$ = (($197 ^ 1) & 1) + $$539 | 0;
   if (($$539$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
    $$0479 = $5 + -1 | 0;
    $$2476 = $$539$ + -1 - $$5519$ph | 0;
   } else {
    $$0479 = $5 + -2 | 0;
    $$2476 = $$539$ + -1 | 0;
   }
   $264 = $4 & 8;
   if (!$264) {
    if ($$lcssa673) {
     $267 = HEAP32[$$7505 + -4 >> 2] | 0;
     if (!$267) $$2529 = 9; else if (!(($267 >>> 0) % 10 | 0)) {
      $$1528614 = 0;
      $$3533613 = 10;
      while (1) {
       $$3533613 = $$3533613 * 10 | 0;
       $272 = $$1528614 + 1 | 0;
       if (($267 >>> 0) % ($$3533613 >>> 0) | 0 | 0) {
        $$2529 = $272;
        break;
       } else $$1528614 = $272;
      }
     } else $$2529 = 0;
    } else $$2529 = 9;
    $281 = (($$7505 - $183 >> 2) * 9 | 0) + -9 | 0;
    if (($$0479 | 32 | 0) == 102) {
     $282 = $281 - $$2529 | 0;
     $$546 = ($282 | 0) > 0 ? $282 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($$546 | 0) ? $$2476 : $$546;
     $$pre$phi690Z2D = 0;
     break;
    } else {
     $286 = $281 + $$5519$ph - $$2529 | 0;
     $$548 = ($286 | 0) > 0 ? $286 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548;
     $$pre$phi690Z2D = 0;
     break;
    }
   } else {
    $$1480 = $$0479;
    $$3477 = $$2476;
    $$pre$phi690Z2D = $264;
   }
  } else {
   $$1480 = $5;
   $$3477 = $$539;
   $$pre$phi690Z2D = $4 & 8;
  } while (0);
  $289 = $$3477 | $$pre$phi690Z2D;
  $291 = ($289 | 0) != 0 & 1;
  $293 = ($$1480 | 32 | 0) == 102;
  if ($293) {
   $$2513 = 0;
   $$pn566 = ($$5519$ph | 0) > 0 ? $$5519$ph : 0;
  } else {
   $297 = ($$5519$ph | 0) < 0 ? $256 : $$5519$ph;
   $300 = _fmt_u($297, (($297 | 0) < 0) << 31 >> 31, $11) | 0;
   $301 = $11;
   if (($301 - $300 | 0) < 2) {
    $$1512607 = $300;
    while (1) {
     $305 = $$1512607 + -1 | 0;
     HEAP8[$305 >> 0] = 48;
     if (($301 - $305 | 0) < 2) $$1512607 = $305; else {
      $$1512$lcssa = $305;
      break;
     }
    }
   } else $$1512$lcssa = $300;
   HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43;
   $315 = $$1512$lcssa + -2 | 0;
   HEAP8[$315 >> 0] = $$1480;
   $$2513 = $315;
   $$pn566 = $301 - $315 | 0;
  }
  $320 = $$0520 + 1 + $$3477 + $291 + $$pn566 | 0;
  _pad_684($0, 32, $2, $320, $4);
  _out($0, $$0521, $$0520);
  _pad_684($0, 48, $2, $320, $4 ^ 65536);
  if ($293) {
   $$0496$$9 = $$9$ph >>> 0 > $$556 >>> 0 ? $$556 : $$9$ph;
   $323 = $8 + 9 | 0;
   $324 = $323;
   $325 = $8 + 8 | 0;
   $$5493597 = $$0496$$9;
   do {
    $327 = _fmt_u(HEAP32[$$5493597 >> 2] | 0, 0, $323) | 0;
    if (($$5493597 | 0) == ($$0496$$9 | 0)) if (($327 | 0) == ($323 | 0)) {
     HEAP8[$325 >> 0] = 48;
     $$1465 = $325;
    } else $$1465 = $327; else if ($327 >>> 0 > $8 >>> 0) {
     _memset($8 | 0, 48, $327 - $9 | 0) | 0;
     $$0464594 = $327;
     while (1) {
      $332 = $$0464594 + -1 | 0;
      if ($332 >>> 0 > $8 >>> 0) $$0464594 = $332; else {
       $$1465 = $332;
       break;
      }
     }
    } else $$1465 = $327;
    _out($0, $$1465, $324 - $$1465 | 0);
    $$5493597 = $$5493597 + 4 | 0;
   } while ($$5493597 >>> 0 <= $$556 >>> 0);
   if ($289 | 0) _out($0, 15338, 1);
   if ($$5493597 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
    $$4478590 = $$3477;
    $$6494589 = $$5493597;
    while (1) {
     $344 = _fmt_u(HEAP32[$$6494589 >> 2] | 0, 0, $323) | 0;
     if ($344 >>> 0 > $8 >>> 0) {
      _memset($8 | 0, 48, $344 - $9 | 0) | 0;
      $$0463584 = $344;
      while (1) {
       $348 = $$0463584 + -1 | 0;
       if ($348 >>> 0 > $8 >>> 0) $$0463584 = $348; else {
        $$0463$lcssa = $348;
        break;
       }
      }
     } else $$0463$lcssa = $344;
     _out($0, $$0463$lcssa, ($$4478590 | 0) < 9 ? $$4478590 : 9);
     $$6494589 = $$6494589 + 4 | 0;
     $353 = $$4478590 + -9 | 0;
     if (!($$6494589 >>> 0 < $$7505 >>> 0 & ($$4478590 | 0) > 9)) {
      $$4478$lcssa = $353;
      break;
     } else $$4478590 = $353;
    }
   } else $$4478$lcssa = $$3477;
   _pad_684($0, 48, $$4478$lcssa + 9 | 0, 9, 0);
  } else {
   $$7505$ = $$lcssa673 ? $$7505 : $$9$ph + 4 | 0;
   if (($$3477 | 0) > -1) {
    $360 = $8 + 9 | 0;
    $361 = ($$pre$phi690Z2D | 0) == 0;
    $362 = $360;
    $363 = 0 - $9 | 0;
    $364 = $8 + 8 | 0;
    $$5602 = $$3477;
    $$7495601 = $$9$ph;
    while (1) {
     $366 = _fmt_u(HEAP32[$$7495601 >> 2] | 0, 0, $360) | 0;
     if (($366 | 0) == ($360 | 0)) {
      HEAP8[$364 >> 0] = 48;
      $$0 = $364;
     } else $$0 = $366;
     do if (($$7495601 | 0) == ($$9$ph | 0)) {
      $372 = $$0 + 1 | 0;
      _out($0, $$0, 1);
      if ($361 & ($$5602 | 0) < 1) {
       $$2 = $372;
       break;
      }
      _out($0, 15338, 1);
      $$2 = $372;
     } else {
      if ($$0 >>> 0 <= $8 >>> 0) {
       $$2 = $$0;
       break;
      }
      _memset($8 | 0, 48, $$0 + $363 | 0) | 0;
      $$1598 = $$0;
      while (1) {
       $370 = $$1598 + -1 | 0;
       if ($370 >>> 0 > $8 >>> 0) $$1598 = $370; else {
        $$2 = $370;
        break;
       }
      }
     } while (0);
     $375 = $362 - $$2 | 0;
     _out($0, $$2, ($$5602 | 0) > ($375 | 0) ? $375 : $$5602);
     $378 = $$5602 - $375 | 0;
     $$7495601 = $$7495601 + 4 | 0;
     if (!($$7495601 >>> 0 < $$7505$ >>> 0 & ($378 | 0) > -1)) {
      $$5$lcssa = $378;
      break;
     } else $$5602 = $378;
    }
   } else $$5$lcssa = $$3477;
   _pad_684($0, 48, $$5$lcssa + 18 | 0, 18, 0);
   _out($0, $$2513, $11 - $$2513 | 0);
  }
  _pad_684($0, 32, $2, $320, $4 ^ 8192);
  $$sink562 = $320;
 } else {
  $28 = ($5 & 32 | 0) != 0;
  $32 = $$0520 + 3 | 0;
  _pad_684($0, 32, $2, $32, $4 & -65537);
  _out($0, $$0521, $$0520);
  _out($0, $$0471 != $$0471 | 0.0 != 0.0 ? ($28 ? 14118 : 12197) : $28 ? 12189 : 12193, 3);
  _pad_684($0, 32, $2, $32, $4 ^ 8192);
  $$sink562 = $32;
 } while (0);
 STACKTOP = sp;
 return (($$sink562 | 0) < ($2 | 0) ? $2 : $$sink562) | 0;
}

function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3303 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre347 = 0, $$pre349 = 0, $10 = 0, $11 = 0, $112 = 0, $116 = 0, $12 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $151 = 0, $152 = 0, $157 = 0, $164 = 0, $165 = 0, $176 = 0, $18 = 0, $188 = 0, $195 = 0, $197 = 0, $20 = 0, $200 = 0, $202 = 0, $21 = 0, $210 = 0, $212 = 0, $215 = 0, $216 = 0, $220 = 0, $224 = 0, $226 = 0, $229 = 0, $23 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $242 = 0, $243 = 0, $248 = 0, $25 = 0, $250 = 0, $251 = 0, $257 = 0, $266 = 0, $269 = 0, $27 = 0, $272 = 0, $273 = 0, $285 = 0, $287 = 0, $292 = 0, $296 = 0, $298 = 0, $30 = 0, $31 = 0, $310 = 0, $312 = 0, $319 = 0, $329 = 0, $330 = 0, $331 = 0, $36 = 0, $38 = 0, $39 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $94 = 0, $99 = 0, $isdigittmp = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $or$cond = 0, $or$cond283 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $5 = sp + 16 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 20 | 0;
 HEAP32[$5 >> 2] = $1;
 $10 = ($0 | 0) != 0;
 $11 = $7 + 40 | 0;
 $12 = $11;
 $13 = $7 + 39 | 0;
 $14 = $8 + 4 | 0;
 $$0243 = 0;
 $$0247 = 0;
 $$0269 = 0;
 $21 = $1;
 L1 : while (1) {
  do if (($$0247 | 0) > -1) if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
   $18 = ___errno_location() | 0;
   HEAP32[$18 >> 2] = 75;
   $$1248 = -1;
   break;
  } else {
   $$1248 = $$0243 + $$0247 | 0;
   break;
  } else $$1248 = $$0247; while (0);
  $20 = HEAP8[$21 >> 0] | 0;
  if (!($20 << 24 >> 24)) {
   label = 87;
   break;
  } else {
   $23 = $20;
   $25 = $21;
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249306 = $25;
     $27 = $25;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25;
     $39 = $25;
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0;
   HEAP32[$5 >> 2] = $24;
   $23 = HEAP8[$24 >> 0] | 0;
   $25 = $24;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
    $$0249$lcssa = $$0249306;
    $39 = $27;
    break L12;
   }
   $30 = $$0249306 + 1 | 0;
   $31 = $27 + 2 | 0;
   HEAP32[$5 >> 2] = $31;
   if ((HEAP8[$31 >> 0] | 0) == 37) {
    $$0249306 = $30;
    $27 = $31;
    label = 9;
   } else {
    $$0249$lcssa = $30;
    $39 = $31;
    break;
   }
  } while (0);
  $36 = $$0249$lcssa - $21 | 0;
  if ($10) _out($0, $21, $36);
  if ($36 | 0) {
   $$0243 = $36;
   $$0247 = $$1248;
   $21 = $39;
   continue;
  }
  $38 = $39 + 1 | 0;
  $isdigittmp = (HEAP8[$38 >> 0] | 0) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $44 = (HEAP8[$39 + 2 >> 0] | 0) == 36;
   $$0253 = $44 ? $isdigittmp : -1;
   $$1270 = $44 ? 1 : $$0269;
   $storemerge = $44 ? $39 + 3 | 0 : $38;
  } else {
   $$0253 = -1;
   $$1270 = $$0269;
   $storemerge = $38;
  }
  HEAP32[$5 >> 2] = $storemerge;
  $46 = HEAP8[$storemerge >> 0] | 0;
  $48 = ($46 << 24 >> 24) + -32 | 0;
  L24 : do if ($48 >>> 0 < 32) {
   $$0262311 = 0;
   $329 = $46;
   $51 = $48;
   $storemerge273310 = $storemerge;
   while (1) {
    $50 = 1 << $51;
    if (!($50 & 75913)) {
     $$0262$lcssa = $$0262311;
     $$lcssa295 = $329;
     $62 = $storemerge273310;
     break L24;
    }
    $54 = $50 | $$0262311;
    $55 = $storemerge273310 + 1 | 0;
    HEAP32[$5 >> 2] = $55;
    $56 = HEAP8[$55 >> 0] | 0;
    $51 = ($56 << 24 >> 24) + -32 | 0;
    if ($51 >>> 0 >= 32) {
     $$0262$lcssa = $54;
     $$lcssa295 = $56;
     $62 = $55;
     break;
    } else {
     $$0262311 = $54;
     $329 = $56;
     $storemerge273310 = $55;
    }
   }
  } else {
   $$0262$lcssa = 0;
   $$lcssa295 = $46;
   $62 = $storemerge;
  } while (0);
  if ($$lcssa295 << 24 >> 24 == 42) {
   $61 = $62 + 1 | 0;
   $isdigittmp276 = (HEAP8[$61 >> 0] | 0) + -48 | 0;
   if ($isdigittmp276 >>> 0 < 10) if ((HEAP8[$62 + 2 >> 0] | 0) == 36) {
    HEAP32[$4 + ($isdigittmp276 << 2) >> 2] = 10;
    $$0259 = HEAP32[$3 + ((HEAP8[$61 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $$2271 = 1;
    $storemerge278 = $62 + 3 | 0;
   } else label = 23; else label = 23;
   if ((label | 0) == 23) {
    label = 0;
    if ($$1270 | 0) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $86 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $87 = HEAP32[$86 >> 2] | 0;
     HEAP32[$2 >> 2] = $86 + 4;
     $$0259 = $87;
     $$2271 = 0;
     $storemerge278 = $61;
    } else {
     $$0259 = 0;
     $$2271 = 0;
     $storemerge278 = $61;
    }
   }
   HEAP32[$5 >> 2] = $storemerge278;
   $88 = ($$0259 | 0) < 0;
   $$1260 = $88 ? 0 - $$0259 | 0 : $$0259;
   $$1263 = $88 ? $$0262$lcssa | 8192 : $$0262$lcssa;
   $$3272 = $$2271;
   $94 = $storemerge278;
  } else {
   $91 = _getint($5) | 0;
   if (($91 | 0) < 0) {
    $$0 = -1;
    break;
   }
   $$1260 = $91;
   $$1263 = $$0262$lcssa;
   $$3272 = $$1270;
   $94 = HEAP32[$5 >> 2] | 0;
  }
  do if ((HEAP8[$94 >> 0] | 0) == 46) {
   if ((HEAP8[$94 + 1 >> 0] | 0) != 42) {
    HEAP32[$5 >> 2] = $94 + 1;
    $126 = _getint($5) | 0;
    $$0254 = $126;
    $$pre347 = HEAP32[$5 >> 2] | 0;
    break;
   }
   $99 = $94 + 2 | 0;
   $isdigittmp274 = (HEAP8[$99 >> 0] | 0) + -48 | 0;
   if ($isdigittmp274 >>> 0 < 10) if ((HEAP8[$94 + 3 >> 0] | 0) == 36) {
    HEAP32[$4 + ($isdigittmp274 << 2) >> 2] = 10;
    $112 = HEAP32[$3 + ((HEAP8[$99 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $116 = $94 + 4 | 0;
    HEAP32[$5 >> 2] = $116;
    $$0254 = $112;
    $$pre347 = $116;
    break;
   }
   if ($$3272 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($10) {
    $123 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $124 = HEAP32[$123 >> 2] | 0;
    HEAP32[$2 >> 2] = $123 + 4;
    $330 = $124;
   } else $330 = 0;
   HEAP32[$5 >> 2] = $99;
   $$0254 = $330;
   $$pre347 = $99;
  } else {
   $$0254 = -1;
   $$pre347 = $94;
  } while (0);
  $$0252 = 0;
  $128 = $$pre347;
  while (1) {
   if (((HEAP8[$128 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $132 = $128 + 1 | 0;
   HEAP32[$5 >> 2] = $132;
   $137 = HEAP8[(HEAP8[$128 >> 0] | 0) + -65 + (11689 + ($$0252 * 58 | 0)) >> 0] | 0;
   $138 = $137 & 255;
   if (($138 + -1 | 0) >>> 0 < 8) {
    $$0252 = $138;
    $128 = $132;
   } else break;
  }
  if (!($137 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $143 = ($$0253 | 0) > -1;
  do if ($137 << 24 >> 24 == 19) if ($143) {
   $$0 = -1;
   break L1;
  } else label = 49; else {
   if ($143) {
    HEAP32[$4 + ($$0253 << 2) >> 2] = $138;
    $146 = $3 + ($$0253 << 3) | 0;
    $151 = HEAP32[$146 + 4 >> 2] | 0;
    $152 = $6;
    HEAP32[$152 >> 2] = HEAP32[$146 >> 2];
    HEAP32[$152 + 4 >> 2] = $151;
    label = 49;
    break;
   }
   if (!$10) {
    $$0 = 0;
    break L1;
   }
   _pop_arg($6, $138, $2);
  } while (0);
  if ((label | 0) == 49) {
   label = 0;
   if (!$10) {
    $$0243 = 0;
    $$0247 = $$1248;
    $$0269 = $$3272;
    $21 = $132;
    continue;
   }
  }
  $157 = HEAP8[$128 >> 0] | 0;
  $$0235 = ($$0252 | 0) != 0 & ($157 & 15 | 0) == 3 ? $157 & -33 : $157;
  $164 = $$1263 & -65537;
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $164;
  L71 : do switch ($$0235 | 0) {
  case 110:
   {
    switch (($$0252 & 255) << 24 >> 24) {
    case 0:
     {
      HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
      $$0243 = 0;
      $$0247 = $$1248;
      $$0269 = $$3272;
      $21 = $132;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
      $$0243 = 0;
      $$0247 = $$1248;
      $$0269 = $$3272;
      $21 = $132;
      continue L1;
      break;
     }
    case 2:
     {
      $176 = HEAP32[$6 >> 2] | 0;
      HEAP32[$176 >> 2] = $$1248;
      HEAP32[$176 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
      $$0243 = 0;
      $$0247 = $$1248;
      $$0269 = $$3272;
      $21 = $132;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248;
      $$0243 = 0;
      $$0247 = $$1248;
      $$0269 = $$3272;
      $21 = $132;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248;
      $$0243 = 0;
      $$0247 = $$1248;
      $$0269 = $$3272;
      $21 = $132;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
      $$0243 = 0;
      $$0247 = $$1248;
      $$0269 = $$3272;
      $21 = $132;
      continue L1;
      break;
     }
    case 7:
     {
      $188 = HEAP32[$6 >> 2] | 0;
      HEAP32[$188 >> 2] = $$1248;
      HEAP32[$188 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
      $$0243 = 0;
      $$0247 = $$1248;
      $$0269 = $$3272;
      $21 = $132;
      continue L1;
      break;
     }
    default:
     {
      $$0243 = 0;
      $$0247 = $$1248;
      $$0269 = $$3272;
      $21 = $132;
      continue L1;
     }
    }
    break;
   }
  case 112:
   {
    $$1236 = 120;
    $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8;
    $$3265 = $$1263$ | 8;
    label = 61;
    break;
   }
  case 88:
  case 120:
   {
    $$1236 = $$0235;
    $$1255 = $$0254;
    $$3265 = $$1263$;
    label = 61;
    break;
   }
  case 111:
   {
    $210 = $6;
    $212 = HEAP32[$210 >> 2] | 0;
    $215 = HEAP32[$210 + 4 >> 2] | 0;
    $216 = _fmt_o($212, $215, $11) | 0;
    $220 = $12 - $216 | 0;
    $$0228 = $216;
    $$1233 = 0;
    $$1238 = 12153;
    $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($220 | 0) ? $$0254 : $220 + 1 | 0;
    $$4266 = $$1263$;
    $248 = $212;
    $250 = $215;
    label = 67;
    break;
   }
  case 105:
  case 100:
   {
    $224 = $6;
    $226 = HEAP32[$224 >> 2] | 0;
    $229 = HEAP32[$224 + 4 >> 2] | 0;
    if (($229 | 0) < 0) {
     $231 = _i64Subtract(0, 0, $226 | 0, $229 | 0) | 0;
     $232 = tempRet0;
     $233 = $6;
     HEAP32[$233 >> 2] = $231;
     HEAP32[$233 + 4 >> 2] = $232;
     $$0232 = 1;
     $$0237 = 12153;
     $242 = $231;
     $243 = $232;
     label = 66;
     break L71;
    } else {
     $$0232 = ($$1263$ & 2049 | 0) != 0 & 1;
     $$0237 = ($$1263$ & 2048 | 0) == 0 ? (($$1263$ & 1 | 0) == 0 ? 12153 : 12155) : 12154;
     $242 = $226;
     $243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
  case 117:
   {
    $165 = $6;
    $$0232 = 0;
    $$0237 = 12153;
    $242 = HEAP32[$165 >> 2] | 0;
    $243 = HEAP32[$165 + 4 >> 2] | 0;
    label = 66;
    break;
   }
  case 99:
   {
    HEAP8[$13 >> 0] = HEAP32[$6 >> 2];
    $$2 = $13;
    $$2234 = 0;
    $$2239 = 12153;
    $$2251 = $11;
    $$5 = 1;
    $$6268 = $164;
    break;
   }
  case 109:
   {
    $266 = ___errno_location() | 0;
    $$1 = _strerror(HEAP32[$266 >> 2] | 0) | 0;
    label = 71;
    break;
   }
  case 115:
   {
    $269 = HEAP32[$6 >> 2] | 0;
    $$1 = $269 | 0 ? $269 : 12163;
    label = 71;
    break;
   }
  case 67:
   {
    HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$14 >> 2] = 0;
    HEAP32[$6 >> 2] = $8;
    $$4258355 = -1;
    $331 = $8;
    label = 75;
    break;
   }
  case 83:
   {
    $$pre349 = HEAP32[$6 >> 2] | 0;
    if (!$$0254) {
     _pad_684($0, 32, $$1260, 0, $$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;
     $331 = $$pre349;
     label = 75;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0;
    $$0247 = $$1248;
    $$0269 = $$3272;
    $21 = $132;
    continue L1;
    break;
   }
  default:
   {
    $$2 = $21;
    $$2234 = 0;
    $$2239 = 12153;
    $$2251 = $11;
    $$5 = $$0254;
    $$6268 = $$1263$;
   }
  } while (0);
  L95 : do if ((label | 0) == 61) {
   label = 0;
   $195 = $6;
   $197 = HEAP32[$195 >> 2] | 0;
   $200 = HEAP32[$195 + 4 >> 2] | 0;
   $202 = _fmt_x($197, $200, $11, $$1236 & 32) | 0;
   $or$cond283 = ($$3265 & 8 | 0) == 0 | ($197 | 0) == 0 & ($200 | 0) == 0;
   $$0228 = $202;
   $$1233 = $or$cond283 ? 0 : 2;
   $$1238 = $or$cond283 ? 12153 : 12153 + ($$1236 >> 4) | 0;
   $$2256 = $$1255;
   $$4266 = $$3265;
   $248 = $197;
   $250 = $200;
   label = 67;
  } else if ((label | 0) == 66) {
   label = 0;
   $$0228 = _fmt_u($242, $243, $11) | 0;
   $$1233 = $$0232;
   $$1238 = $$0237;
   $$2256 = $$0254;
   $$4266 = $$1263$;
   $248 = $242;
   $250 = $243;
   label = 67;
  } else if ((label | 0) == 71) {
   label = 0;
   $272 = _memchr($$1, 0, $$0254) | 0;
   $273 = ($272 | 0) == 0;
   $$2 = $$1;
   $$2234 = 0;
   $$2239 = 12153;
   $$2251 = $273 ? $$1 + $$0254 | 0 : $272;
   $$5 = $273 ? $$0254 : $272 - $$1 | 0;
   $$6268 = $164;
  } else if ((label | 0) == 75) {
   label = 0;
   $$0229322 = $331;
   $$0240321 = 0;
   $$1244320 = 0;
   while (1) {
    $285 = HEAP32[$$0229322 >> 2] | 0;
    if (!$285) {
     $$0240$lcssa = $$0240321;
     $$2245 = $$1244320;
     break;
    }
    $287 = _wctomb($9, $285) | 0;
    if (($287 | 0) < 0 | $287 >>> 0 > ($$4258355 - $$0240321 | 0) >>> 0) {
     $$0240$lcssa = $$0240321;
     $$2245 = $287;
     break;
    }
    $292 = $287 + $$0240321 | 0;
    if ($$4258355 >>> 0 > $292 >>> 0) {
     $$0229322 = $$0229322 + 4 | 0;
     $$0240321 = $292;
     $$1244320 = $287;
    } else {
     $$0240$lcssa = $292;
     $$2245 = $287;
     break;
    }
   }
   if (($$2245 | 0) < 0) {
    $$0 = -1;
    break L1;
   }
   _pad_684($0, 32, $$1260, $$0240$lcssa, $$1263$);
   if (!$$0240$lcssa) {
    $$0240$lcssa357 = 0;
    label = 84;
   } else {
    $$1230333 = $331;
    $$1241332 = 0;
    while (1) {
     $296 = HEAP32[$$1230333 >> 2] | 0;
     if (!$296) {
      $$0240$lcssa357 = $$0240$lcssa;
      label = 84;
      break L95;
     }
     $298 = _wctomb($9, $296) | 0;
     $$1241332 = $298 + $$1241332 | 0;
     if (($$1241332 | 0) > ($$0240$lcssa | 0)) {
      $$0240$lcssa357 = $$0240$lcssa;
      label = 84;
      break L95;
     }
     _out($0, $9, $298);
     if ($$1241332 >>> 0 >= $$0240$lcssa >>> 0) {
      $$0240$lcssa357 = $$0240$lcssa;
      label = 84;
      break;
     } else $$1230333 = $$1230333 + 4 | 0;
    }
   }
  } while (0);
  if ((label | 0) == 67) {
   label = 0;
   $251 = ($248 | 0) != 0 | ($250 | 0) != 0;
   $or$cond = ($$2256 | 0) != 0 | $251;
   $257 = (($251 ^ 1) & 1) + ($12 - $$0228) | 0;
   $$2 = $or$cond ? $$0228 : $11;
   $$2234 = $$1233;
   $$2239 = $$1238;
   $$2251 = $11;
   $$5 = $or$cond ? (($$2256 | 0) > ($257 | 0) ? $$2256 : $257) : $$2256;
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266;
  } else if ((label | 0) == 84) {
   label = 0;
   _pad_684($0, 32, $$1260, $$0240$lcssa357, $$1263$ ^ 8192);
   $$0243 = ($$1260 | 0) > ($$0240$lcssa357 | 0) ? $$1260 : $$0240$lcssa357;
   $$0247 = $$1248;
   $$0269 = $$3272;
   $21 = $132;
   continue;
  }
  $310 = $$2251 - $$2 | 0;
  $$$5 = ($$5 | 0) < ($310 | 0) ? $310 : $$5;
  $312 = $$$5 + $$2234 | 0;
  $$2261 = ($$1260 | 0) < ($312 | 0) ? $312 : $$1260;
  _pad_684($0, 32, $$2261, $312, $$6268);
  _out($0, $$2239, $$2234);
  _pad_684($0, 48, $$2261, $312, $$6268 ^ 65536);
  _pad_684($0, 48, $$$5, $310, 0);
  _out($0, $$2, $310);
  _pad_684($0, 32, $$2261, $312, $$6268 ^ 8192);
  $$0243 = $$2261;
  $$0247 = $$1248;
  $$0269 = $$3272;
  $21 = $132;
 }
 L114 : do if ((label | 0) == 87) if (!$0) if (!$$0269) $$0 = 0; else {
  $$2242305 = 1;
  while (1) {
   $319 = HEAP32[$4 + ($$2242305 << 2) >> 2] | 0;
   if (!$319) {
    $$3303 = $$2242305;
    break;
   }
   _pop_arg($3 + ($$2242305 << 3) | 0, $319, $2);
   $$2242305 = $$2242305 + 1 | 0;
   if (($$2242305 | 0) >= 10) {
    $$0 = 1;
    break L114;
   }
  }
  while (1) {
   if (HEAP32[$4 + ($$3303 << 2) >> 2] | 0) {
    $$0 = -1;
    break L114;
   }
   $$3303 = $$3303 + 1 | 0;
   if (($$3303 | 0) >= 10) {
    $$0 = 1;
    break;
   }
  }
 } else $$0 = $$1248; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i207 = 0, $$0$i$i$i221 = 0, $$0$i$i$i229 = 0, $$0$i$i$i239 = 0, $$0182$off0 = 0, $$0183 = 0, $$1184 = 0, $$1184$ph = 0, $$2185 = 0, $$3186 = 0, $$6181 = 0, $$pre = 0, $$pre$phi281Z2D = 0, $$pre$phi283Z2D = 0, $102 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $126 = 0, $127 = 0, $13 = 0, $134 = 0, $136 = 0, $138 = 0, $139 = 0, $146 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $153 = 0, $154 = 0, $161 = 0, $164 = 0, $165 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $179 = 0, $180 = 0, $182 = 0, $183 = 0, $19 = 0, $190 = 0, $191 = 0, $198 = 0, $202 = 0, $203 = 0, $206 = 0, $207 = 0, $210 = 0, $213 = 0, $220 = 0, $221 = 0, $223 = 0, $224 = 0, $230 = 0, $231 = 0, $237 = 0, $238 = 0, $241 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $265 = 0, $266 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $71 = 0, $74 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = $1;
 L1 : do if (($5 - $0 | 0) > 2) {
  if ((HEAP8[$0 >> 0] | 0) == 103) {
   $13 = (HEAP8[$0 + 1 >> 0] | 0) == 115;
   $$0182$off0 = $13;
   $$0183 = $13 ? $0 + 2 | 0 : $0;
  } else {
   $$0182$off0 = 0;
   $$0183 = $0;
  }
  $15 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$0183, $1, $2) | 0;
  if (($15 | 0) != ($$0183 | 0)) {
   if (!$$0182$off0) {
    $$6181 = $15;
    break;
   }
   $19 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($19 | 0)) {
    $$6181 = $0;
    break;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($19 + -24 | 0, 0, 15121) | 0;
   $$6181 = $15;
   break;
  }
  if (($5 - $$0183 | 0) > 2) if ((HEAP8[$$0183 >> 0] | 0) == 115) if ((HEAP8[$$0183 + 1 >> 0] | 0) == 114) {
   $30 = $$0183 + 2 | 0;
   if ((HEAP8[$30 >> 0] | 0) == 78) {
    $33 = $$0183 + 3 | 0;
    $34 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33, $1, $2) | 0;
    if (($34 | 0) == ($33 | 0) | ($34 | 0) == ($1 | 0)) {
     $$6181 = $0;
     break;
    }
    $37 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34, $1, $2) | 0;
    $$pre = $2 + 4 | 0;
    do if (($37 | 0) == ($34 | 0)) {
     $$1184$ph = $34;
     $$pre$phi281Z2D = $2;
    } else {
     $39 = HEAP32[$$pre >> 2] | 0;
     if ((($39 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $39 + -24 | 0);
     $46 = HEAP32[$$pre >> 2] | 0;
     $47 = $46 + -24 | 0;
     $49 = $46;
     while (1) {
      if (($49 | 0) == ($47 | 0)) break;
      $50 = $49 + -24 | 0;
      HEAP32[$$pre >> 2] = $50;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
      $49 = HEAP32[$$pre >> 2] | 0;
     }
     $53 = HEAP8[$3 + 11 >> 0] | 0;
     $54 = $53 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($46 + -48 | 0, $54 ? HEAP32[$3 >> 2] | 0 : $3, $54 ? HEAP32[$3 + 4 >> 2] | 0 : $53 & 255) | 0;
     if (($37 | 0) != ($1 | 0)) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$1184$ph = $37;
      $$pre$phi281Z2D = $2;
      break;
     }
     $62 = HEAP32[$$pre >> 2] | 0;
     $63 = $62 + -24 | 0;
     $65 = $62;
     while (1) {
      if (($65 | 0) == ($63 | 0)) break;
      $66 = $65 + -24 | 0;
      HEAP32[$$pre >> 2] = $66;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($66);
      $65 = HEAP32[$$pre >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$6181 = $0;
     break L1;
    } while (0);
    $67 = $4 + 11 | 0;
    $68 = $4 + 4 | 0;
    $$1184 = $$1184$ph;
    while (1) {
     if ((HEAP8[$$1184 >> 0] | 0) == 69) break;
     $71 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$1184, $1, $2) | 0;
     if (($71 | 0) == ($$1184 | 0) | ($71 | 0) == ($1 | 0)) {
      $$6181 = $0;
      break L1;
     }
     $74 = HEAP32[$$pre >> 2] | 0;
     if ((($74 - (HEAP32[$$pre$phi281Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $74 + -24 | 0);
     $81 = HEAP32[$$pre >> 2] | 0;
     $82 = $81 + -24 | 0;
     $84 = $81;
     while (1) {
      if (($84 | 0) == ($82 | 0)) break;
      $85 = $84 + -24 | 0;
      HEAP32[$$pre >> 2] = $85;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($85);
      $84 = HEAP32[$$pre >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15121) | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$3 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     $91 = HEAP8[$67 >> 0] | 0;
     $92 = $91 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre >> 2] | 0) + -24 | 0, $92 ? HEAP32[$4 >> 2] | 0 : $4, $92 ? HEAP32[$68 >> 2] | 0 : $91 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$1184 = $71;
    }
    $98 = $$1184 + 1 | 0;
    $99 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($98, $1, $2) | 0;
    if (($99 | 0) == ($98 | 0)) {
     $102 = HEAP32[$$pre >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($102 | 0)) {
      $$6181 = $0;
      break;
     }
     $104 = $102 + -24 | 0;
     $106 = $102;
     while (1) {
      if (($106 | 0) == ($104 | 0)) {
       $$6181 = $0;
       break L1;
      }
      $107 = $106 + -24 | 0;
      HEAP32[$$pre >> 2] = $107;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($107);
      $106 = HEAP32[$$pre >> 2] | 0;
     }
    }
    $108 = HEAP32[$$pre >> 2] | 0;
    if ((($108 - (HEAP32[$$pre$phi281Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$6181 = $0;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $108 + -24 | 0);
    $115 = HEAP32[$$pre >> 2] | 0;
    $116 = $115 + -24 | 0;
    $118 = $115;
    while (1) {
     if (($118 | 0) == ($116 | 0)) break;
     $119 = $118 + -24 | 0;
     HEAP32[$$pre >> 2] = $119;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($119);
     $118 = HEAP32[$$pre >> 2] | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15121) | 0;
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $$0$i$i$i207 = 0;
    while (1) {
     if (($$0$i$i$i207 | 0) == 3) break;
     HEAP32[$3 + ($$0$i$i$i207 << 2) >> 2] = 0;
     $$0$i$i$i207 = $$0$i$i$i207 + 1 | 0;
    }
    $126 = HEAP8[$4 + 11 >> 0] | 0;
    $127 = $126 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre >> 2] | 0) + -24 | 0, $127 ? HEAP32[$4 >> 2] | 0 : $4, $127 ? HEAP32[$4 + 4 >> 2] | 0 : $126 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$6181 = $99;
    break;
   }
   $134 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30, $1, $2) | 0;
   if (($134 | 0) != ($30 | 0)) {
    $136 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($134, $1, $2) | 0;
    if (($136 | 0) == ($134 | 0)) $$2185 = $134; else {
     $138 = $2 + 4 | 0;
     $139 = HEAP32[$138 >> 2] | 0;
     if ((($139 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $139 + -24 | 0);
     $146 = HEAP32[$138 >> 2] | 0;
     $147 = $146 + -24 | 0;
     $149 = $146;
     while (1) {
      if (($149 | 0) == ($147 | 0)) break;
      $150 = $149 + -24 | 0;
      HEAP32[$138 >> 2] = $150;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($150);
      $149 = HEAP32[$138 >> 2] | 0;
     }
     $153 = HEAP8[$3 + 11 >> 0] | 0;
     $154 = $153 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($146 + -48 | 0, $154 ? HEAP32[$3 >> 2] | 0 : $3, $154 ? HEAP32[$3 + 4 >> 2] | 0 : $153 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2185 = $136;
    }
    $161 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$2185, $1, $2) | 0;
    if (($161 | 0) == ($$2185 | 0)) {
     $164 = $2 + 4 | 0;
     $165 = HEAP32[$164 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($165 | 0)) {
      $$6181 = $0;
      break;
     }
     $167 = $165 + -24 | 0;
     $169 = $165;
     while (1) {
      if (($169 | 0) == ($167 | 0)) {
       $$6181 = $0;
       break L1;
      }
      $170 = $169 + -24 | 0;
      HEAP32[$164 >> 2] = $170;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($170);
      $169 = HEAP32[$164 >> 2] | 0;
     }
    }
    $171 = $2 + 4 | 0;
    $172 = HEAP32[$171 >> 2] | 0;
    if ((($172 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$6181 = $0;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $172 + -24 | 0);
    $179 = HEAP32[$171 >> 2] | 0;
    $180 = $179 + -24 | 0;
    $182 = $179;
    while (1) {
     if (($182 | 0) == ($180 | 0)) break;
     $183 = $182 + -24 | 0;
     HEAP32[$171 >> 2] = $183;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($183);
     $182 = HEAP32[$171 >> 2] | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15121) | 0;
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $$0$i$i$i221 = 0;
    while (1) {
     if (($$0$i$i$i221 | 0) == 3) break;
     HEAP32[$3 + ($$0$i$i$i221 << 2) >> 2] = 0;
     $$0$i$i$i221 = $$0$i$i$i221 + 1 | 0;
    }
    $190 = HEAP8[$4 + 11 >> 0] | 0;
    $191 = $190 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$171 >> 2] | 0) + -24 | 0, $191 ? HEAP32[$4 >> 2] | 0 : $4, $191 ? HEAP32[$4 + 4 >> 2] | 0 : $190 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$6181 = $161;
    break;
   }
   $198 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($30, $1, $2) | 0;
   if (($198 | 0) == ($30 | 0) | ($198 | 0) == ($1 | 0)) $$6181 = $0; else {
    if ($$0182$off0) {
     $202 = $2 + 4 | 0;
     $203 = HEAP32[$202 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($203 | 0)) {
      $$6181 = $0;
      break;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($203 + -24 | 0, 0, 15121) | 0;
     $$pre$phi283Z2D = $202;
    } else $$pre$phi283Z2D = $2 + 4 | 0;
    $206 = $4 + 11 | 0;
    $207 = $4 + 4 | 0;
    $$3186 = $198;
    while (1) {
     if ((HEAP8[$$3186 >> 0] | 0) == 69) break;
     $210 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$3186, $1, $2) | 0;
     if (($210 | 0) == ($$3186 | 0) | ($210 | 0) == ($1 | 0)) {
      $$6181 = $0;
      break L1;
     }
     $213 = HEAP32[$$pre$phi283Z2D >> 2] | 0;
     if ((($213 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $213 + -24 | 0);
     $220 = HEAP32[$$pre$phi283Z2D >> 2] | 0;
     $221 = $220 + -24 | 0;
     $223 = $220;
     while (1) {
      if (($223 | 0) == ($221 | 0)) break;
      $224 = $223 + -24 | 0;
      HEAP32[$$pre$phi283Z2D >> 2] = $224;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($224);
      $223 = HEAP32[$$pre$phi283Z2D >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15121) | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $$0$i$i$i229 = 0;
     while (1) {
      if (($$0$i$i$i229 | 0) == 3) break;
      HEAP32[$3 + ($$0$i$i$i229 << 2) >> 2] = 0;
      $$0$i$i$i229 = $$0$i$i$i229 + 1 | 0;
     }
     $230 = HEAP8[$206 >> 0] | 0;
     $231 = $230 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre$phi283Z2D >> 2] | 0) + -24 | 0, $231 ? HEAP32[$4 >> 2] | 0 : $4, $231 ? HEAP32[$207 >> 2] | 0 : $230 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3186 = $210;
    }
    $237 = $$3186 + 1 | 0;
    $238 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($237, $1, $2) | 0;
    if (($238 | 0) == ($237 | 0)) {
     $241 = HEAP32[$$pre$phi283Z2D >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($241 | 0)) {
      $$6181 = $0;
      break;
     }
     $243 = $241 + -24 | 0;
     $245 = $241;
     while (1) {
      if (($245 | 0) == ($243 | 0)) {
       $$6181 = $0;
       break L1;
      }
      $246 = $245 + -24 | 0;
      HEAP32[$$pre$phi283Z2D >> 2] = $246;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($246);
      $245 = HEAP32[$$pre$phi283Z2D >> 2] | 0;
     }
    }
    $247 = HEAP32[$$pre$phi283Z2D >> 2] | 0;
    if ((($247 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$6181 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $247 + -24 | 0);
     $254 = HEAP32[$$pre$phi283Z2D >> 2] | 0;
     $255 = $254 + -24 | 0;
     $257 = $254;
     while (1) {
      if (($257 | 0) == ($255 | 0)) break;
      $258 = $257 + -24 | 0;
      HEAP32[$$pre$phi283Z2D >> 2] = $258;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($258);
      $257 = HEAP32[$$pre$phi283Z2D >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15121) | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $$0$i$i$i239 = 0;
     while (1) {
      if (($$0$i$i$i239 | 0) == 3) break;
      HEAP32[$3 + ($$0$i$i$i239 << 2) >> 2] = 0;
      $$0$i$i$i239 = $$0$i$i$i239 + 1 | 0;
     }
     $265 = HEAP8[$4 + 11 >> 0] | 0;
     $266 = $265 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre$phi283Z2D >> 2] | 0) + -24 | 0, $266 ? HEAP32[$4 >> 2] | 0 : $4, $266 ? HEAP32[$4 + 4 >> 2] | 0 : $265 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$6181 = $238;
    }
   }
  } else $$6181 = $0; else $$6181 = $0; else $$6181 = $0;
 } else $$6181 = $0; while (0);
 STACKTOP = sp;
 return $$6181 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i232 = 0, $$0$i$i$i236 = 0, $$0194 = 0, $$3 = 0, $101 = 0, $102 = 0, $107 = 0, $108 = 0, $118 = 0, $119 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $52 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $67 = 0, $7 = 0, $70 = 0, $73 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $3 = sp + 64 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 76) {
  $15 = $0 + 1 | 0;
  $18 = $0 + 3 | 0;
  $19 = $0 + 2 | 0;
  do switch (HEAP8[$15 >> 0] | 0) {
  case 84:
   {
    $$3 = $0;
    break L1;
    break;
   }
  case 119:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16241, __ZNSt3__211char_traitsIcE6lengthEPKc(16241) | 0);
    $21 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($21 | 0) == ($19 | 0) ? $0 : $21;
    break L1;
    break;
   }
  case 98:
   {
    if ((HEAP8[$18 >> 0] | 0) != 69) {
     $$3 = $0;
     break L1;
    }
    $27 = $0 + 4 | 0;
    switch (HEAP8[$19 >> 0] | 0) {
    case 48:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3, 16249);
      $28 = $2 + 4 | 0;
      $29 = HEAP32[$28 >> 2] | 0;
      if ($29 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($29, $3);
       HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $27;
      break L1;
      break;
     }
    case 49:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 16255);
      $35 = $2 + 4 | 0;
      $36 = HEAP32[$35 >> 2] | 0;
      if ($36 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($36, $3);
       HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $27;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16260, __ZNSt3__211char_traitsIcE6lengthEPKc(16260) | 0);
    $43 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($43 | 0) == ($19 | 0) ? $0 : $43;
    break L1;
    break;
   }
  case 97:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16265, __ZNSt3__211char_traitsIcE6lengthEPKc(16265) | 0);
    $46 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($46 | 0) == ($19 | 0) ? $0 : $46;
    break L1;
    break;
   }
  case 104:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16277, __ZNSt3__211char_traitsIcE6lengthEPKc(16277) | 0);
    $49 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($49 | 0) == ($19 | 0) ? $0 : $49;
    break L1;
    break;
   }
  case 115:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16291, __ZNSt3__211char_traitsIcE6lengthEPKc(16291) | 0);
    $52 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($52 | 0) == ($19 | 0) ? $0 : $52;
    break L1;
    break;
   }
  case 116:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16297, __ZNSt3__211char_traitsIcE6lengthEPKc(16297) | 0);
    $55 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($55 | 0) == ($19 | 0) ? $0 : $55;
    break L1;
    break;
   }
  case 105:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 18985, __ZNSt3__211char_traitsIcE6lengthEPKc(18985) | 0);
    $58 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($58 | 0) == ($19 | 0) ? $0 : $58;
    break L1;
    break;
   }
  case 106:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16312, __ZNSt3__211char_traitsIcE6lengthEPKc(16312) | 0);
    $61 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($61 | 0) == ($19 | 0) ? $0 : $61;
    break L1;
    break;
   }
  case 108:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16314, __ZNSt3__211char_traitsIcE6lengthEPKc(16314) | 0);
    $64 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($64 | 0) == ($19 | 0) ? $0 : $64;
    break L1;
    break;
   }
  case 109:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16316, __ZNSt3__211char_traitsIcE6lengthEPKc(16316) | 0);
    $67 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($67 | 0) == ($19 | 0) ? $0 : $67;
    break L1;
    break;
   }
  case 120:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16319, __ZNSt3__211char_traitsIcE6lengthEPKc(16319) | 0);
    $70 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($70 | 0) == ($19 | 0) ? $0 : $70;
    break L1;
    break;
   }
  case 121:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16322, __ZNSt3__211char_traitsIcE6lengthEPKc(16322) | 0);
    $73 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($73 | 0) == ($19 | 0) ? $0 : $73;
    break L1;
    break;
   }
  case 110:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16326, __ZNSt3__211char_traitsIcE6lengthEPKc(16326) | 0);
    $76 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($76 | 0) == ($19 | 0) ? $0 : $76;
    break L1;
    break;
   }
  case 111:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 16335, __ZNSt3__211char_traitsIcE6lengthEPKc(16335) | 0);
    $79 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($79 | 0) == ($19 | 0) ? $0 : $79;
    break L1;
    break;
   }
  case 102:
   {
    $81 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($19, $1, $2) | 0;
    $$3 = ($81 | 0) == ($19 | 0) ? $0 : $81;
    break L1;
    break;
   }
  case 100:
   {
    $83 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($19, $1, $2) | 0;
    $$3 = ($83 | 0) == ($19 | 0) ? $0 : $83;
    break L1;
    break;
   }
  case 101:
   {
    $85 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($19, $1, $2) | 0;
    $$3 = ($85 | 0) == ($19 | 0) ? $0 : $85;
    break L1;
    break;
   }
  case 95:
   {
    if ((HEAP8[$19 >> 0] | 0) != 90) {
     $$3 = $0;
     break L1;
    }
    $89 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($18, $1, $2) | 0;
    if (($89 | 0) == ($18 | 0) | ($89 | 0) == ($1 | 0)) {
     $$3 = $0;
     break L1;
    }
    $$3 = (HEAP8[$89 >> 0] | 0) == 69 ? $89 + 1 | 0 : $0;
    break L1;
    break;
   }
  default:
   {
    $95 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
    if (($95 | 0) == ($15 | 0) | ($95 | 0) == ($1 | 0)) {
     $$3 = $0;
     break L1;
    }
    if ((HEAP8[$95 >> 0] | 0) == 69) {
     $$3 = $95 + 1 | 0;
     break L1;
    } else $$0194 = $95;
    while (1) {
     $101 = $$0194 + 1 | 0;
     if (($$0194 | 0) == ($1 | 0)) {
      $$3 = $0;
      break L1;
     }
     $102 = HEAP8[$$0194 >> 0] | 0;
     if ((($102 << 24 >> 24) + -48 | 0) >>> 0 < 10) $$0194 = $101; else break;
    }
    if (!(($$0194 | 0) != ($95 | 0) & $102 << 24 >> 24 == 69)) {
     $$3 = $0;
     break L1;
    }
    $107 = $2 + 4 | 0;
    $108 = HEAP32[$107 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($108 | 0)) {
     $$3 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, $108 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($7, 0, 15049) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15047) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i232 = 0;
    while (1) {
     if (($$0$i$i$i232 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i232 << 2) >> 2] = 0;
     $$0$i$i$i232 = $$0$i$i$i232 + 1 | 0;
    }
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    HEAP32[$8 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($8, $95, $$0194);
    $118 = HEAP8[$8 + 11 >> 0] | 0;
    $119 = $118 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5, $119 ? HEAP32[$8 >> 2] | 0 : $8, $119 ? HEAP32[$8 + 4 >> 2] | 0 : $118 & 255) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i236 = 0;
    while (1) {
     if (($$0$i$i$i236 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i236 << 2) >> 2] = 0;
     $$0$i$i$i236 = $$0$i$i$i236 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$107 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    $$3 = $101;
    break L1;
   }
  } while (0);
 } else $$3 = $0; else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _arDetectMarker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$0 = 0, $$0446 = 0, $$0448 = 0, $$0453 = 0, $$0458 = 0, $$0462 = 0, $$0464 = 0.0, $$0468 = 0.0, $$0470 = 0.0, $$1447 = 0, $$1449 = 0, $$1454 = 0, $$1459 = 0, $$1463 = 0, $$1465 = 0.0, $$1469 = 0.0, $$1471 = 0.0, $$2450 = 0, $$2455 = 0, $$2460 = 0, $$2466 = 0.0, $$3451 = 0, $$3456 = 0, $$3461 = 0, $$4 = 0, $$4452 = 0, $$4457 = 0, $$5 = 0, $$6 = 0, $$pre = 0, $$sink7 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $11 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $122 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $165 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $186 = 0.0, $19 = 0, $191 = 0.0, $194 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $208 = 0.0, $21 = 0, $211 = 0, $213 = 0, $217 = 0, $22 = 0, $220 = 0.0, $226 = 0.0, $23 = 0, $24 = 0, $240 = 0.0, $242 = 0, $25 = 0, $254 = 0, $257 = 0.0, $263 = 0.0, $268 = 0, $272 = 0, $28 = 0, $282 = 0, $284 = 0, $29 = 0, $291 = 0, $293 = 0, $295 = 0, $297 = 0, $3 = 0, $303 = 0, $31 = 0, $313 = 0, $314 = 0, $315 = 0, $317 = 0, $322 = 0.0, $323 = 0.0, $329 = 0.0, $33 = 0, $334 = 0.0, $343 = 0, $345 = 0, $346 = 0, $35 = 0, $4 = 0, $40 = 0, $5 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer = sp;
 $2 = sp + 52 | 0;
 $3 = sp + 40 | 0;
 $4 = $0 + 44 | 0;
 HEAP32[$4 >> 2] = 0;
 $5 = $0 + 7062388 | 0;
 $8 = $0 + 12 | 0;
 $9 = $0 + 40 | 0;
 $10 = $0 + 24 | 0;
 $11 = $0 + 16 | 0;
 $12 = $0 + 7062384 | 0;
 $13 = $0 + 7062424 | 0;
 $14 = $0 + 7062396 | 0;
 $15 = $0 + 36 | 0;
 $16 = $0 + 4834144 | 0;
 $17 = $0 + 15408 | 0;
 $18 = $0 + 48 | 0;
 $19 = $0 + 4 | 0;
 $20 = $0 + 15416 | 0;
 $21 = $0 + 20 | 0;
 $22 = $0 + 32 | 0;
 $23 = $0 + 7062392 | 0;
 $24 = $0 + 7062416 | 0;
 do if ((HEAP32[$5 >> 2] | 0) == 4) {
  $25 = HEAP32[$14 >> 2] | 0;
  if (($25 | 0) > 0) {
   HEAP32[$14 >> 2] = $25 + -1;
   label = 30;
   break;
  }
  $28 = HEAP32[$11 >> 2] | 0;
  $29 = $0 + 7062400 | 0;
  $31 = (HEAP32[$29 >> 2] | 0) + $28 | 0;
  $$ = ($31 | 0) < 255 ? $31 : 255;
  HEAP32[$2 >> 2] = $$;
  $33 = $0 + 7062404 | 0;
  $35 = $28 - (HEAP32[$33 >> 2] | 0) | 0;
  $storemerge = ($35 | 0) > 0 ? $35 : 0;
  HEAP32[$2 + 4 >> 2] = $storemerge;
  HEAP32[$2 + 8 >> 2] = $28;
  $$0453 = 0;
  while (1) {
   $40 = HEAP32[$0 >> 2] | 0;
   if (($$0453 | 0) >= 3) break;
   if ((_arLabeling($1, HEAP32[$15 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$19 >> 2] | 0, $40, HEAP32[$8 >> 2] | 0, HEAP32[$2 + ($$0453 << 2) >> 2] | 0, HEAP32[$21 >> 2] | 0, $16, 0) | 0) < 0) {
    label = 27;
    break;
   }
   if ((_arDetectMarker2(HEAP32[$15 >> 2] | 0, HEAP32[$9 >> 2] | 0, $16, HEAP32[$21 >> 2] | 0, 1e6, 70, 1.0, $20, $17) | 0) < 0) {
    label = 27;
    break;
   }
   if ((_arGetMarkerInfo($1, HEAP32[$15 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$19 >> 2] | 0, $20, HEAP32[$17 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$10 >> 2] | 0, (HEAP32[$22 >> 2] | 0) + 184 | 0, +HEAPF64[$24 >> 3], $18, $4, HEAP32[$13 >> 2] | 0) | 0) < 0) {
    label = 27;
    break;
   }
   HEAP32[$3 + ($$0453 << 2) >> 2] = HEAP32[$4 >> 2];
   $$0453 = $$0453 + 1 | 0;
  }
  if ((label | 0) == 27) {
   $$4 = -1;
   break;
  }
  $74 = HEAP32[$3 >> 2] | 0;
  $75 = HEAP32[$3 + 8 >> 2] | 0;
  $76 = HEAP32[$3 + 4 >> 2] | 0;
  if (($40 | 0) == 1) {
   HEAP32[$vararg_buffer >> 2] = $storemerge;
   HEAP32[$vararg_buffer + 4 >> 2] = $76;
   HEAP32[$vararg_buffer + 8 >> 2] = $28;
   HEAP32[$vararg_buffer + 12 >> 2] = $75;
   HEAP32[$vararg_buffer + 16 >> 2] = $$;
   HEAP32[$vararg_buffer + 20 >> 2] = $74;
   _arLog(3, 3469, $vararg_buffer);
  }
  if (($74 | 0) > ($75 | 0) | ($76 | 0) > ($75 | 0)) {
   $91 = HEAP32[$2 + ((($74 | 0) < ($76 | 0) & 1) << 2) >> 2] | 0;
   HEAP32[$11 >> 2] = $91;
   $92 = $91 - $28 | 0;
   if (($92 | 0) > 0) {
    HEAP32[$29 >> 2] = $92;
    $$sink7 = 1;
   } else {
    HEAP32[$29 >> 2] = 1;
    $$sink7 = 0 - $92 | 0;
   }
   HEAP32[$33 >> 2] = $$sink7;
   if ((HEAP32[$0 >> 2] | 0) == 1) {
    HEAP32[$vararg_buffer6 >> 2] = $91;
    _arLog(3, 3545, $vararg_buffer6);
    HEAP32[$14 >> 2] = HEAP32[$23 >> 2];
    label = 30;
    break;
   } else {
    HEAP32[$14 >> 2] = HEAP32[$23 >> 2];
    label = 30;
    break;
   }
  }
  $79 = HEAP32[$29 >> 2] | 0;
  $80 = HEAP32[$33 >> 2] | 0;
  $82 = $79 + 1 | 0;
  if (($79 | 0) < ($80 | 0)) {
   HEAP32[$29 >> 2] = $82;
   $86 = $82;
  } else {
   if (($79 | 0) > ($80 | 0)) $345 = $79; else {
    HEAP32[$29 >> 2] = $82;
    $345 = $82;
   }
   HEAP32[$33 >> 2] = $80 + 1;
   $86 = $345;
  }
  if (($86 + $28 | 0) > 254) {
   HEAP32[$29 >> 2] = 1;
   $89 = 1;
  } else $89 = $86;
  if (($28 | 0) <= ($89 | 0)) HEAP32[$33 >> 2] = 1;
  HEAP32[$14 >> 2] = HEAP32[$23 >> 2];
  label = 48;
 } else label = 30; while (0);
 L41 : do if ((label | 0) == 30) {
  $100 = HEAP32[$5 >> 2] | 0;
  $102 = $0 + 7062408 | 0;
  if (($100 | 0) == 3) {
   $104 = _arImageProcLumaHistAndBoxFilterWithBias(HEAP32[$102 >> 2] | 0, $1, 9, -7) | 0;
   if (($104 | 0) < 0) {
    $$4 = $104;
    break;
   }
   $106 = HEAP32[$102 >> 2] | 0;
   $116 = _arLabeling(HEAP32[$106 >> 2] | 0, HEAP32[$106 + 8 >> 2] | 0, HEAP32[$106 + 12 >> 2] | 0, 5, HEAP32[$0 >> 2] | 0, HEAP32[$8 >> 2] | 0, 0, 0, $16, HEAP32[$106 + 4 >> 2] | 0) | 0;
   if (($116 | 0) < 0) {
    $$4 = $116;
    break;
   }
  } else {
   $118 = ($100 | 0) == 1;
   do if (($100 + -1 | 0) >>> 0 < 2) {
    $119 = HEAP32[$14 >> 2] | 0;
    if (($119 | 0) > 0) {
     HEAP32[$14 >> 2] = $119 + -1;
     break;
    }
    $122 = HEAP32[$102 >> 2] | 0;
    if ($118) $$0 = _arImageProcLumaHistAndCDFAndMedian($122, $1, $2) | 0; else $$0 = _arImageProcLumaHistAndOtsu($122, $1, $2) | 0;
    if (($$0 | 0) < 0) {
     $$4 = $$0;
     break L41;
    }
    if ((HEAP32[$0 >> 2] | 0) == 1) {
     $130 = HEAPU8[$2 >> 0] | 0;
     if ((HEAP32[$11 >> 2] | 0) != ($130 | 0)) {
      HEAP32[$vararg_buffer9 >> 2] = (HEAP32[$5 >> 2] | 0) == 1 ? 3597 : 3604;
      HEAP32[$vararg_buffer9 + 4 >> 2] = $130;
      _arLog(3, 3609, $vararg_buffer9);
     }
    }
    HEAP32[$11 >> 2] = HEAPU8[$2 >> 0];
    HEAP32[$14 >> 2] = HEAP32[$23 >> 2];
   } while (0);
   if ((_arLabeling($1, HEAP32[$15 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$19 >> 2] | 0, HEAP32[$0 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$21 >> 2] | 0, $16, 0) | 0) < 0) {
    $$4 = -1;
    break;
   }
  }
  if ((_arDetectMarker2(HEAP32[$15 >> 2] | 0, HEAP32[$9 >> 2] | 0, $16, HEAP32[$21 >> 2] | 0, 1e6, 70, 1.0, $20, $17) | 0) < 0) $$4 = -1; else if ((_arGetMarkerInfo($1, HEAP32[$15 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$19 >> 2] | 0, $20, HEAP32[$17 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$10 >> 2] | 0, (HEAP32[$22 >> 2] | 0) + 184 | 0, +HEAPF64[$24 >> 3], $18, $4, HEAP32[$13 >> 2] | 0) | 0) < 0) $$4 = -1; else label = 48;
 } while (0);
 L66 : do if ((label | 0) == 48) {
  $165 = $0 + 28 | 0;
  if ((HEAP32[$165 >> 2] | 0) == 1) {
   _confidenceCutoff($0);
   $$4 = 0;
   break;
  }
  $168 = $0 + 4818296 | 0;
  $$pre = HEAP32[$168 >> 2] | 0;
  $$1454 = 0;
  while (1) {
   if (($$1454 | 0) >= ($$pre | 0)) break;
   $170 = HEAP32[$4 >> 2] | 0;
   $171 = $0 + 4818304 + ($$1454 * 264 | 0) | 0;
   $172 = $0 + 4818304 + ($$1454 * 264 | 0) + 56 | 0;
   $173 = $0 + 4818304 + ($$1454 * 264 | 0) + 64 | 0;
   $$0448 = 0;
   $$0462 = -1;
   $$0470 = .5;
   while (1) {
    if (($$0448 | 0) >= ($170 | 0)) break;
    $179 = +(HEAP32[$0 + 48 + ($$0448 << 8) >> 2] | 0);
    $180 = +(HEAP32[$171 >> 2] | 0) / $179;
    if ($180 < .7 | $180 > 1.43) {
     $$1463 = $$0462;
     $$1471 = $$0470;
    } else {
     $186 = +HEAPF64[$0 + 48 + ($$0448 << 8) + 56 >> 3] - +HEAPF64[$172 >> 3];
     $191 = +HEAPF64[$0 + 48 + ($$0448 << 8) + 64 >> 3] - +HEAPF64[$173 >> 3];
     $194 = ($186 * $186 + $191 * $191) / $179;
     if ($194 < $$0470) {
      $$1463 = $$0448;
      $$1471 = $194;
     } else {
      $$1463 = $$0462;
      $$1471 = $$0470;
     }
    }
    $$0448 = $$0448 + 1 | 0;
    $$0462 = $$1463;
    $$0470 = $$1471;
   }
   L82 : do if (($$0462 | 0) > -1) {
    $198 = HEAP32[$10 >> 2] | 0;
    $199 = $0 + 48 + ($$0462 << 8) + 8 | 0;
    $200 = $0 + 48 + ($$0462 << 8) + 40 | 0;
    $201 = $0 + 48 + ($$0462 << 8) + 24 | 0;
    $202 = $0 + 48 + ($$0462 << 8) + 20 | 0;
    $203 = $0 + 48 + ($$0462 << 8) + 12 | 0;
    $204 = $0 + 48 + ($$0462 << 8) + 48 | 0;
    switch ($198 | 0) {
    case 0:
    case 1:
    case 2:
     break;
    case 4:
    case 3:
     {
      $240 = +HEAPF64[$0 + 4818304 + ($$1454 * 264 | 0) + 40 >> 3];
      $242 = $0 + 4818304 + ($$1454 * 264 | 0) + 48 | 0;
      if (!(+HEAPF64[$200 >> 3] < $240)) if (!(+HEAPF64[$204 >> 3] < +HEAPF64[$242 >> 3])) break L82;
      HEAPF64[$200 >> 3] = $240;
      HEAP32[$199 >> 2] = HEAP32[$0 + 4818304 + ($$1454 * 264 | 0) + 8 >> 2];
      HEAPF64[$204 >> 3] = +HEAPF64[$242 >> 3];
      HEAP32[$203 >> 2] = HEAP32[$0 + 4818304 + ($$1454 * 264 | 0) + 12 >> 2];
      $$2450 = 0;
      $$2460 = -1;
      $$2466 = 1.0e8;
      while (1) {
       if (($$2450 | 0) == 4) break; else {
        $$1447 = 0;
        $$1469 = 0.0;
       }
       while (1) {
        if (($$1447 | 0) == 4) break;
        $254 = ($$1447 + $$2450 | 0) % 4 | 0;
        $257 = +HEAPF64[$0 + 4818304 + ($$1454 * 264 | 0) + 168 + ($$1447 << 4) >> 3] - +HEAPF64[$0 + 48 + ($$0462 << 8) + 168 + ($254 << 4) >> 3];
        $263 = +HEAPF64[$0 + 4818304 + ($$1454 * 264 | 0) + 168 + ($$1447 << 4) + 8 >> 3] - +HEAPF64[$0 + 48 + ($$0462 << 8) + 168 + ($254 << 4) + 8 >> 3];
        $$1447 = $$1447 + 1 | 0;
        $$1469 = $$1469 + ($257 * $257 + $263 * $263);
       }
       $268 = $$1469 < $$2466;
       $$3461 = $268 ? $$2450 : $$2460;
       $$2450 = $$2450 + 1 | 0;
       $$2460 = $$3461;
       $$2466 = $268 ? $$1469 : $$2466;
      }
      $272 = 4 - $$2460 | 0;
      HEAP32[$202 >> 2] = ($272 + (HEAP32[$0 + 4818304 + ($$1454 * 264 | 0) + 20 >> 2] | 0) | 0) % 4 | 0;
      HEAP32[$201 >> 2] = ($272 + (HEAP32[$0 + 4818304 + ($$1454 * 264 | 0) + 24 >> 2] | 0) | 0) % 4 | 0;
      break L82;
      break;
     }
    default:
     {
      $$4 = -1;
      break L66;
     }
    }
    $205 = $0 + 48 + ($$0462 << 8) + 32 | 0;
    $208 = +HEAPF64[$0 + 4818304 + ($$1454 * 264 | 0) + 32 >> 3];
    if (+HEAPF64[$205 >> 3] < $208) {
     HEAPF64[$205 >> 3] = $208;
     $211 = HEAP32[$0 + 4818304 + ($$1454 * 264 | 0) + 4 >> 2] | 0;
     HEAP32[$0 + 48 + ($$0462 << 8) + 4 >> 2] = $211;
     $213 = $0 + 4818304 + ($$1454 * 264 | 0) + 16 | 0;
     $$0458 = -1;
     $$0464 = 1.0e8;
     $$1449 = 0;
     while (1) {
      if (($$1449 | 0) == 4) break; else {
       $$0446 = 0;
       $$0468 = 0.0;
      }
      while (1) {
       if (($$0446 | 0) == 4) break;
       $217 = ($$0446 + $$1449 | 0) % 4 | 0;
       $220 = +HEAPF64[$0 + 4818304 + ($$1454 * 264 | 0) + 168 + ($$0446 << 4) >> 3] - +HEAPF64[$0 + 48 + ($$0462 << 8) + 168 + ($217 << 4) >> 3];
       $226 = +HEAPF64[$0 + 4818304 + ($$1454 * 264 | 0) + 168 + ($$0446 << 4) + 8 >> 3] - +HEAPF64[$0 + 48 + ($$0462 << 8) + 168 + ($217 << 4) + 8 >> 3];
       $$0446 = $$0446 + 1 | 0;
       $$0468 = $$0468 + ($220 * $220 + $226 * $226);
      }
      if ($$0468 < $$0464) {
       $$1459 = (4 - $$1449 + (HEAP32[$213 >> 2] | 0) | 0) % 4 | 0;
       $$1465 = $$0468;
      } else {
       $$1459 = $$0458;
       $$1465 = $$0464;
      }
      $$0458 = $$1459;
      $$0464 = $$1465;
      $$1449 = $$1449 + 1 | 0;
     }
     HEAP32[$0 + 48 + ($$0462 << 8) + 16 >> 2] = $$0458;
     if ($198 >>> 0 < 2) {
      HEAP32[$199 >> 2] = $211;
      HEAPF64[$200 >> 3] = $208;
      HEAP32[$202 >> 2] = $$0458;
      break;
     } else {
      HEAP32[$203 >> 2] = $211;
      HEAPF64[$204 >> 3] = $208;
      HEAP32[$201 >> 2] = $$0458;
      break;
     }
    }
   } while (0);
   $$1454 = $$1454 + 1 | 0;
  }
  _confidenceCutoff($0);
  $$2455 = 0;
  $$3451 = 0;
  while (1) {
   if (($$2455 | 0) >= (HEAP32[$168 >> 2] | 0)) break;
   $282 = $0 + 4818304 + ($$2455 * 264 | 0) + 256 | 0;
   $284 = (HEAP32[$282 >> 2] | 0) + 1 | 0;
   HEAP32[$282 >> 2] = $284;
   if (($284 | 0) < 4) {
    if (($$2455 | 0) != ($$3451 | 0)) _memcpy($0 + 4818304 + ($$3451 * 264 | 0) | 0, $0 + 4818304 + ($$2455 * 264 | 0) | 0, 264) | 0;
    $$4452 = $$3451 + 1 | 0;
   } else $$4452 = $$3451;
   $$2455 = $$2455 + 1 | 0;
   $$3451 = $$4452;
  }
  HEAP32[$168 >> 2] = $$3451;
  $$3456 = 0;
  while (1) {
   $291 = HEAP32[$4 >> 2] | 0;
   if (($$3456 | 0) >= ($291 | 0)) break;
   $293 = $0 + 48 + ($$3456 << 8) | 0;
   $295 = HEAP32[$0 + 48 + ($$3456 << 8) + 4 >> 2] | 0;
   if (($295 | 0) >= 0) {
    $297 = HEAP32[$168 >> 2] | 0;
    $$5 = 0;
    while (1) {
     if (($$5 | 0) >= ($297 | 0)) break;
     if ((HEAP32[$0 + 4818304 + ($$5 * 264 | 0) + 4 >> 2] | 0) == ($295 | 0)) break;
     $$5 = $$5 + 1 | 0;
    }
    $303 = $0 + 4818304 + ($$5 * 264 | 0) | 0;
    if (($$5 | 0) == ($297 | 0)) {
     if (($297 | 0) == 60) break;
     HEAP32[$168 >> 2] = $297 + 1;
    }
    _memcpy($303 | 0, $293 | 0, 256) | 0;
    HEAP32[$0 + 4818304 + ($$5 * 264 | 0) + 256 >> 2] = 1;
   }
   $$3456 = $$3456 + 1 | 0;
  }
  if ((HEAP32[$165 >> 2] | 0) == 2) $$4 = 0; else {
   $$4457 = 0;
   $317 = $291;
   while (1) {
    if (($$4457 | 0) >= (HEAP32[$168 >> 2] | 0)) {
     $$4 = 0;
     break L66;
    }
    $313 = $0 + 4818304 + ($$4457 * 264 | 0) | 0;
    $314 = $0 + 4818304 + ($$4457 * 264 | 0) + 56 | 0;
    $315 = $0 + 4818304 + ($$4457 * 264 | 0) + 64 | 0;
    $$6 = 0;
    while (1) {
     if (($$6 | 0) >= ($317 | 0)) break;
     $322 = +(HEAP32[$0 + 48 + ($$6 << 8) >> 2] | 0);
     $323 = +(HEAP32[$313 >> 2] | 0) / $322;
     if (!($323 < .7 | $323 > 1.43)) {
      $329 = +HEAPF64[$0 + 48 + ($$6 << 8) + 56 >> 3] - +HEAPF64[$314 >> 3];
      $334 = +HEAPF64[$0 + 48 + ($$6 << 8) + 64 >> 3] - +HEAPF64[$315 >> 3];
      if (($329 * $329 + $334 * $334) / $322 < .5) break;
     }
     $$6 = $$6 + 1 | 0;
    }
    if (($$6 | 0) == ($317 | 0)) {
     _memcpy($0 + 48 + ($317 << 8) | 0, $313 | 0, 256) | 0;
     $343 = (HEAP32[$4 >> 2] | 0) + 1 | 0;
     HEAP32[$4 >> 2] = $343;
     $346 = $343;
    } else $346 = $317;
    $$4457 = $$4457 + 1 | 0;
    $317 = $346;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$4 | 0;
}

function _arGetTransMatMultiSquare2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0389 = 0, $$0394 = 0, $$0404 = 0.0, $$0404$ph = 0.0, $$0405 = 0, $$0407 = 0, $$0410 = 0, $$0413 = 0.0, $$1 = 0, $$10 = 0, $$1390 = 0, $$1395 = 0, $$1406 = 0, $$1408 = 0, $$1411 = 0, $$1414 = 0.0, $$2 = 0, $$2391 = 0, $$2396 = 0, $$2409 = 0, $$2412 = 0, $$2415 = 0.0, $$3 = 0, $$3392 = 0, $$3397 = 0, $$3416 = 0.0, $$4 = 0, $$4393 = 0, $$4398 = 0, $$4417 = 0.0, $$5 = 0, $$5399 = 0, $$5418 = 0.0, $$6 = 0, $$6400 = 0, $$6419 = 0.0, $$7 = 0, $$7401 = 0, $$8 = 0, $$8402 = 0, $$9 = 0, $$9403 = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $110 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $122 = 0, $124 = 0, $127 = 0, $134 = 0, $144 = 0, $154 = 0, $16 = 0, $165 = 0, $17 = 0, $18 = 0, $203 = 0, $216 = 0, $217 = 0, $218 = 0.0, $221 = 0.0, $224 = 0.0, $227 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0, $242 = 0.0, $243 = 0.0, $25 = 0.0, $252 = 0.0, $253 = 0.0, $262 = 0.0, $263 = 0.0, $272 = 0.0, $273 = 0.0, $286 = 0, $290 = 0, $292 = 0, $39 = 0, $42 = 0, $44 = 0, $47 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0.0, $7 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $9 = 0, $90 = 0, $93 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $vararg_buffer1 = sp + 200 | 0;
 $vararg_buffer = sp + 192 | 0;
 $5 = sp + 96 | 0;
 $6 = sp;
 $7 = $3 + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $3 + 112 | 0;
 $10 = $3 + 120 | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($8 | 0)) break;
  $12 = HEAP32[$3 >> 2] | 0;
  $16 = $12 + ($$0394 * 320 | 0) + 304 | 0;
  $17 = $12 + ($$0394 * 320 | 0) | 0;
  if (!(HEAP32[$12 + ($$0394 * 320 | 0) + 4 >> 2] | 0)) {
   $$0 = -1;
   $$0389 = 0;
   while (1) {
    if (($$0389 | 0) >= ($2 | 0)) break;
    if ((HEAP32[$1 + ($$0389 << 8) + 8 >> 2] | 0) == (HEAP32[$17 >> 2] | 0)) {
     $25 = +HEAPF64[$1 + ($$0389 << 8) + 40 >> 3];
     if ($25 < +HEAPF64[$9 >> 3]) $$1 = $$0; else if (($$0 | 0) == -1) $$1 = $$0389; else if (+HEAPF64[$1 + ($$0 << 8) + 40 >> 3] < $25) $$1 = $$0389; else $$1 = $$0;
    } else $$1 = $$0;
    $$0 = $$1;
    $$0389 = $$0389 + 1 | 0;
   }
   HEAP32[$16 >> 2] = $$0;
   if (($$0 | 0) > -1) HEAP32[$1 + ($$0 << 8) + 16 >> 2] = HEAP32[$1 + ($$0 << 8) + 20 >> 2];
  } else {
   $18 = $12 + ($$0394 * 320 | 0) + 312 | 0;
   $$1390 = 0;
   $$2 = -1;
   while (1) {
    if (($$1390 | 0) >= ($2 | 0)) break;
    $39 = HEAP32[$1 + ($$1390 << 8) + 12 >> 2] | 0;
    if (!$39) {
     $42 = $1 + ($$1390 << 8) + 248 | 0;
     $44 = HEAP32[$42 >> 2] | 0;
     $47 = HEAP32[$42 + 4 >> 2] | 0;
     if (($44 | 0) == 0 & ($47 | 0) == 0) label = 19; else {
      $51 = $18;
      if (($44 | 0) == (HEAP32[$51 >> 2] | 0) ? ($47 | 0) == (HEAP32[$51 + 4 >> 2] | 0) : 0) label = 20; else $$3 = $$2;
     }
    } else label = 19;
    if ((label | 0) == 19) {
     label = 0;
     if (($39 | 0) == (HEAP32[$17 >> 2] | 0)) label = 20; else $$3 = $$2;
    }
    if ((label | 0) == 20) {
     label = 0;
     $63 = +HEAPF64[$1 + ($$1390 << 8) + 48 >> 3];
     if ($63 < +HEAPF64[$10 >> 3]) $$3 = $$2; else if (($$2 | 0) == -1) $$3 = $$1390; else if (+HEAPF64[$1 + ($$2 << 8) + 48 >> 3] < $63) $$3 = $$1390; else $$3 = $$2;
    }
    $$1390 = $$1390 + 1 | 0;
    $$2 = $$3;
   }
   HEAP32[$16 >> 2] = $$2;
   if (($$2 | 0) > -1) HEAP32[$1 + ($$2 << 8) + 16 >> 2] = HEAP32[$1 + ($$2 << 8) + 24 >> 2];
  }
  $$0394 = $$0394 + 1 | 0;
 }
 $$0405 = 0;
 $$0407 = 0;
 $$0410 = 0;
 $$1395 = 0;
 $77 = $8;
 while (1) {
  $78 = ($$0405 | 0) == 0;
  if (($$1395 | 0) >= ($77 | 0)) break;
  $79 = HEAP32[$3 >> 2] | 0;
  $81 = HEAP32[$79 + ($$1395 * 320 | 0) + 304 >> 2] | 0;
  do if (($81 | 0) < 0) {
   $$1406 = $$0405;
   $$2409 = $$0407;
   $$2412 = $$0410;
  } else {
   $83 = $1 + ($81 << 8) | 0;
   if (+_arGetTransMatSquare($0, $83, +HEAPF64[$79 + ($$1395 * 320 | 0) + 8 >> 3], $6) > 4.0) {
    HEAP32[(HEAP32[$3 >> 2] | 0) + ($$1395 * 320 | 0) + 304 >> 2] = -1;
    $90 = $1 + ($81 << 8) + 236 | 0;
    if (HEAP32[$90 >> 2] | 0) {
     $$1406 = $$0405;
     $$2409 = $$0407;
     $$2412 = $$0410;
     break;
    }
    HEAP32[$90 >> 2] = 7;
    $$1406 = $$0405;
    $$2409 = $$0407;
    $$2412 = $$0410;
    break;
   }
   $93 = HEAP32[$83 >> 2] | 0;
   L44 : do if ($78 | ($$0407 | 0) < ($93 | 0)) {
    $$2391 = 0;
    while (1) {
     if (($$2391 | 0) == 3) {
      $$1408 = $93;
      $$1411 = $$1395;
      break L44;
     } else $$4 = 0;
     while (1) {
      if (($$4 | 0) == 4) break;
      HEAPF64[$5 + ($$2391 << 5) + ($$4 << 3) >> 3] = +HEAPF64[$6 + ($$2391 << 5) + ($$4 << 3) >> 3];
      $$4 = $$4 + 1 | 0;
     }
     $$2391 = $$2391 + 1 | 0;
    }
   } else {
    $$1408 = $$0407;
    $$1411 = $$0410;
   } while (0);
   $$1406 = $$0405 + 1 | 0;
   $$2409 = $$1408;
   $$2412 = $$1411;
  } while (0);
  $$0405 = $$1406;
  $$0407 = $$2409;
  $$0410 = $$2412;
  $$1395 = $$1395 + 1 | 0;
  $77 = HEAP32[$7 >> 2] | 0;
 }
 $102 = $3 + 104 | 0;
 L54 : do if ($78) {
  $$0404$ph = -1.0;
  $$sink = 0;
  label = 101;
 } else if (($$0405 | 0) < (HEAP32[$3 + 128 >> 2] | 0)) {
  $$0404$ph = -1.0;
  $$sink = 0;
  label = 101;
 } else {
  _arUtilMatMul($5, (HEAP32[$3 >> 2] | 0) + ($$0410 * 320 | 0) + 112 | 0, $6) | 0;
  $108 = $$0405 << 2;
  $110 = _malloc($$0405 << 6) | 0;
  if (!$110) {
   _arLog(3, 4787, $vararg_buffer);
   _exit(1);
  }
  $113 = _malloc($$0405 * 96 | 0) | 0;
  if (!$113) {
   _arLog(3, 4787, $vararg_buffer1);
   _exit(1);
  }
  $115 = HEAP32[$7 >> 2] | 0;
  $$2396 = 0;
  $$3392 = 0;
  while (1) {
   if (($$2396 | 0) >= ($115 | 0)) break;
   $117 = HEAP32[$3 >> 2] | 0;
   $119 = HEAP32[$117 + ($$2396 * 320 | 0) + 304 >> 2] | 0;
   if (($119 | 0) < 0) $$4393 = $$3392; else {
    $122 = HEAP32[$1 + ($119 << 8) + 16 >> 2] | 0;
    $124 = (4 - $122 | 0) % 4 | 0;
    $127 = $$3392 << 3;
    HEAPF64[$110 + ($127 << 3) >> 3] = +HEAPF64[$1 + ($119 << 8) + 168 + ($124 << 4) >> 3];
    HEAPF64[$110 + (($127 | 1) << 3) >> 3] = +HEAPF64[$1 + ($119 << 8) + 168 + ($124 << 4) + 8 >> 3];
    $134 = (5 - $122 | 0) % 4 | 0;
    HEAPF64[$110 + (($127 | 2) << 3) >> 3] = +HEAPF64[$1 + ($119 << 8) + 168 + ($134 << 4) >> 3];
    HEAPF64[$110 + (($127 | 3) << 3) >> 3] = +HEAPF64[$1 + ($119 << 8) + 168 + ($134 << 4) + 8 >> 3];
    $144 = (6 - $122 | 0) % 4 | 0;
    HEAPF64[$110 + (($127 | 4) << 3) >> 3] = +HEAPF64[$1 + ($119 << 8) + 168 + ($144 << 4) >> 3];
    HEAPF64[$110 + (($127 | 5) << 3) >> 3] = +HEAPF64[$1 + ($119 << 8) + 168 + ($144 << 4) + 8 >> 3];
    $154 = (7 - $122 | 0) % 4 | 0;
    HEAPF64[$110 + (($127 | 6) << 3) >> 3] = +HEAPF64[$1 + ($119 << 8) + 168 + ($154 << 4) >> 3];
    HEAPF64[$110 + (($127 | 7) << 3) >> 3] = +HEAPF64[$1 + ($119 << 8) + 168 + ($154 << 4) + 8 >> 3];
    $165 = $$3392 * 12 | 0;
    HEAPF64[$113 + ($165 << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 208 >> 3];
    HEAPF64[$113 + (($165 | 1) << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 216 >> 3];
    HEAPF64[$113 + (($165 | 2) << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 224 >> 3];
    HEAPF64[$113 + (($165 | 3) << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 232 >> 3];
    HEAPF64[$113 + ($165 + 4 << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 240 >> 3];
    HEAPF64[$113 + ($165 + 5 << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 248 >> 3];
    HEAPF64[$113 + ($165 + 6 << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 256 >> 3];
    HEAPF64[$113 + ($165 + 7 << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 264 >> 3];
    HEAPF64[$113 + ($165 + 8 << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 272 >> 3];
    HEAPF64[$113 + ($165 + 9 << 3) >> 3] = +HEAPF64[$117 + ($$2396 * 320 | 0) + 280 >> 3];
    $203 = HEAP32[$3 >> 2] | 0;
    HEAPF64[$113 + ($165 + 10 << 3) >> 3] = +HEAPF64[$203 + ($$2396 * 320 | 0) + 288 >> 3];
    HEAPF64[$113 + ($165 + 11 << 3) >> 3] = +HEAPF64[$203 + ($$2396 * 320 | 0) + 296 >> 3];
    $$4393 = $$3392 + 1 | 0;
   }
   $$2396 = $$2396 + 1 | 0;
   $$3392 = $$4393;
  }
  $216 = ($4 | 0) != 0;
  if (!(HEAP32[$102 >> 2] | 0)) {
   $217 = $3 + 8 | 0;
   $218 = +_arGetTransMat($0, $6, $110, $113, $108, $217);
   if ($216 & $218 >= 20.0) {
    _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .8) | 0;
    $221 = +_arGetTransMatRobust($0, $6, $110, $113, $108, $217);
    if (!($221 >= 20.0)) $$0413 = $221; else {
     _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .6) | 0;
     $224 = +_arGetTransMatRobust($0, $6, $110, $113, $108, $217);
     if (!($224 >= 20.0)) $$0413 = $224; else {
      _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .4) | 0;
      $227 = +_arGetTransMatRobust($0, $6, $110, $113, $108, $217);
      if (!($227 >= 20.0)) $$0413 = $227; else {
       _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, 0.0) | 0;
       $$0413 = +_arGetTransMatRobust($0, $6, $110, $113, $108, $217);
      }
     }
    }
   } else $$0413 = $218;
   _free($113);
   _free($110);
   $$6419 = $$0413;
  } else {
   $231 = +_arGetTransMat($0, $6, $110, $113, $108, $5);
   $232 = $3 + 8 | 0;
   $233 = +_arGetTransMat($0, $232, $110, $113, $108, $232);
   $234 = $231 < $233;
   L79 : do if ($216) {
    L81 : do if ($234) {
     $$5 = 0;
     while (1) {
      if (($$5 | 0) == 3) {
       $$1414 = $231;
       break L81;
      } else $$3397 = 0;
      while (1) {
       if (($$3397 | 0) == 4) break;
       HEAPF64[$3 + 8 + ($$5 << 5) + ($$3397 << 3) >> 3] = +HEAPF64[$5 + ($$5 << 5) + ($$3397 << 3) >> 3];
       $$3397 = $$3397 + 1 | 0;
      }
      $$5 = $$5 + 1 | 0;
     }
    } else $$1414 = $233; while (0);
    if (!($$1414 >= 20.0)) $$5418 = $$1414; else {
     _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .8) | 0;
     $242 = +_arGetTransMatRobust($0, $6, $110, $113, $108, $5);
     $243 = +_arGetTransMatRobust($0, $232, $110, $113, $108, $232);
     L90 : do if ($242 < $243) {
      $$6 = 0;
      while (1) {
       if (($$6 | 0) == 3) {
        $$2415 = $242;
        break L90;
       } else $$4398 = 0;
       while (1) {
        if (($$4398 | 0) == 4) break;
        HEAPF64[$3 + 8 + ($$6 << 5) + ($$4398 << 3) >> 3] = +HEAPF64[$5 + ($$6 << 5) + ($$4398 << 3) >> 3];
        $$4398 = $$4398 + 1 | 0;
       }
       $$6 = $$6 + 1 | 0;
      }
     } else $$2415 = $243; while (0);
     if (!($$2415 >= 20.0)) $$5418 = $$2415; else {
      _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .6) | 0;
      $252 = +_arGetTransMatRobust($0, $6, $110, $113, $108, $5);
      $253 = +_arGetTransMatRobust($0, $232, $110, $113, $108, $232);
      L99 : do if ($252 < $253) {
       $$7 = 0;
       while (1) {
        if (($$7 | 0) == 3) {
         $$3416 = $252;
         break L99;
        } else $$5399 = 0;
        while (1) {
         if (($$5399 | 0) == 4) break;
         HEAPF64[$3 + 8 + ($$7 << 5) + ($$5399 << 3) >> 3] = +HEAPF64[$5 + ($$7 << 5) + ($$5399 << 3) >> 3];
         $$5399 = $$5399 + 1 | 0;
        }
        $$7 = $$7 + 1 | 0;
       }
      } else $$3416 = $253; while (0);
      if (!($$3416 >= 20.0)) $$5418 = $$3416; else {
       _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, .4) | 0;
       $262 = +_arGetTransMatRobust($0, $6, $110, $113, $108, $5);
       $263 = +_arGetTransMatRobust($0, $232, $110, $113, $108, $232);
       L108 : do if ($262 < $263) {
        $$8 = 0;
        while (1) {
         if (($$8 | 0) == 3) {
          $$4417 = $262;
          break L108;
         } else $$6400 = 0;
         while (1) {
          if (($$6400 | 0) == 4) break;
          HEAPF64[$3 + 8 + ($$8 << 5) + ($$6400 << 3) >> 3] = +HEAPF64[$5 + ($$8 << 5) + ($$6400 << 3) >> 3];
          $$6400 = $$6400 + 1 | 0;
         }
         $$8 = $$8 + 1 | 0;
        }
       } else $$4417 = $263; while (0);
       if (!($$4417 >= 20.0)) $$5418 = $$4417; else {
        _icpSetInlierProbability(HEAP32[$0 >> 2] | 0, 0.0) | 0;
        $272 = +_arGetTransMatRobust($0, $6, $110, $113, $108, $5);
        $273 = +_arGetTransMatRobust($0, $232, $110, $113, $108, $232);
        if ($272 < $273) {
         $$9 = 0;
         while (1) {
          if (($$9 | 0) == 3) {
           $$5418 = $272;
           break L79;
          } else $$7401 = 0;
          while (1) {
           if (($$7401 | 0) == 4) break;
           HEAPF64[$3 + 8 + ($$9 << 5) + ($$7401 << 3) >> 3] = +HEAPF64[$5 + ($$9 << 5) + ($$7401 << 3) >> 3];
           $$7401 = $$7401 + 1 | 0;
          }
          $$9 = $$9 + 1 | 0;
         }
        } else $$5418 = $273;
       }
      }
     }
    }
   } else if ($234) {
    $$10 = 0;
    while (1) {
     if (($$10 | 0) == 3) {
      $$5418 = $231;
      break L79;
     } else $$8402 = 0;
     while (1) {
      if (($$8402 | 0) == 4) break;
      HEAPF64[$3 + 8 + ($$10 << 5) + ($$8402 << 3) >> 3] = +HEAPF64[$5 + ($$10 << 5) + ($$8402 << 3) >> 3];
      $$8402 = $$8402 + 1 | 0;
     }
     $$10 = $$10 + 1 | 0;
    }
   } else $$5418 = $233; while (0);
   _free($113);
   _free($110);
   $$6419 = $$5418;
  }
  if ($$6419 < 20.0) {
   $$0404$ph = $$6419;
   $$sink = 1;
   label = 101;
  } else {
   HEAP32[$102 >> 2] = 0;
   $286 = HEAP32[$7 >> 2] | 0;
   $$9403 = 0;
   while (1) {
    if (($$9403 | 0) >= ($286 | 0)) {
     $$0404 = $$6419;
     break L54;
    }
    $290 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($$9403 * 320 | 0) + 304 >> 2] | 0;
    if (($290 | 0) >= 0) {
     $292 = $1 + ($290 << 8) + 236 | 0;
     if (!(HEAP32[$292 >> 2] | 0)) HEAP32[$292 >> 2] = 8;
    }
    $$9403 = $$9403 + 1 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 101) {
  HEAP32[$102 >> 2] = $$sink;
  $$0404 = $$0404$ph;
 }
 STACKTOP = sp;
 return +$$0404;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i189 = 0, $$0$i$i194 = 0, $$0132 = 0, $$0141$off0$ph = 0, $$0166 = 0, $$11 = 0, $$1135 = 0, $$1167 = 0, $$1167$ph = 0, $$2136 = 0, $$3144$off0$ph = 0, $$3169 = 0, $$4157 = 0, $$5139 = 0, $$6140 = 0, $$6159 = 0, $$in = 0, $$in256 = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $106 = 0, $107 = 0, $115 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $138 = 0, $146 = 0, $147 = 0, $155 = 0, $157 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $168 = 0, $172 = 0, $173 = 0, $174 = 0, $179 = 0, $183 = 0, $184 = 0, $19 = 0, $205 = 0, $206 = 0, $21 = 0, $23 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $61 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $85 = 0, $88 = 0, $92 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 48 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 if (($0 | 0) == ($1 | 0)) {
  $$6140 = $0;
  label = 88;
 } else {
  $10 = $2 + 56 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($4, $10);
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
  $13 = $2 + 61 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($5, $13);
  if ((HEAP32[$10 >> 2] | 0) >>> 0 > 1) HEAP8[$13 >> 0] = 1;
  L6 : do switch (HEAP8[$0 >> 0] | 0) {
  case 84:
  case 71:
   {
    $$5139 = __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    $$6159 = 1;
    break;
   }
  default:
   {
    $19 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    $21 = HEAP32[$2 + 48 >> 2] | 0;
    $23 = HEAP32[$2 + 52 >> 2] | 0;
    L8 : do if (($19 | 0) == ($0 | 0)) $$2136 = $0; else if (($19 | 0) == ($1 | 0)) $$2136 = $1; else {
     switch (HEAP8[$19 >> 0] | 0) {
     case 46:
     case 69:
      {
       $$2136 = $19;
       break L8;
       break;
      }
     default:
      {}
     }
     __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($6, $13);
     HEAP8[$13 >> 0] = 0;
     HEAP32[$7 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     HEAP32[$7 + 8 >> 2] = 0;
     $$0$i$i194 = 0;
     while (1) {
      if (($$0$i$i194 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i194 << 2) >> 2] = 0;
      $$0$i$i194 = $$0$i$i194 + 1 | 0;
     }
     $30 = $2 + 4 | 0;
     $31 = HEAP32[$30 >> 2] | 0;
     L16 : do if ((HEAP32[$2 >> 2] | 0) == ($31 | 0)) {
      $$1135 = $0;
      $$4157 = 0;
     } else {
      $33 = $31 + -24 | 0;
      $35 = HEAP8[$33 + 11 >> 0] | 0;
      $36 = $35 << 24 >> 24 < 0;
      if ($36) $41 = HEAP32[$31 + -20 >> 2] | 0; else $41 = $35 & 255;
      if (!$41) {
       $$1135 = $0;
       $$4157 = 0;
      } else {
       if (!(HEAP8[$2 + 60 >> 0] | 0)) {
        if ($36) {
         $50 = HEAP32[$33 >> 2] | 0;
         $51 = HEAP32[$31 + -20 >> 2] | 0;
        } else {
         $50 = $33;
         $51 = $35 & 255;
        }
        if ((HEAP8[$50 + $51 + -1 >> 0] | 0) == 62) {
         if ($36) {
          $$in = HEAP32[$31 + -20 >> 2] | 0;
          $61 = HEAP32[$33 >> 2] | 0;
         } else {
          $$in = $35 & 255;
          $61 = $33;
         }
         if ((HEAP8[$61 + ($$in + -2) >> 0] | 0) == 45) {
          $$0166 = $19;
          $115 = $31;
         } else {
          if ($36) {
           $$in256 = HEAP32[$31 + -20 >> 2] | 0;
           $70 = HEAP32[$33 >> 2] | 0;
          } else {
           $$in256 = $35 & 255;
           $70 = $33;
          }
          if ((HEAP8[$70 + ($$in256 + -2) >> 0] | 0) == 62) {
           $$0166 = $19;
           $115 = $31;
          } else {
           $73 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
           if (($73 | 0) == ($19 | 0)) {
            $$1135 = $0;
            $$4157 = 0;
            break;
           }
           $75 = HEAP32[$30 >> 2] | 0;
           $80 = $75;
           if ((($75 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
            $$1135 = $0;
            $$4157 = 0;
            break;
           }
           $81 = $80 + -24 | 0;
           HEAP32[$8 >> 2] = HEAP32[$81 >> 2];
           HEAP32[$8 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
           HEAP32[$8 + 8 >> 2] = HEAP32[$81 + 8 >> 2];
           $$0$i$i189 = 0;
           while (1) {
            if (($$0$i$i189 | 0) == 3) break;
            HEAP32[$81 + ($$0$i$i189 << 2) >> 2] = 0;
            $$0$i$i189 = $$0$i$i189 + 1 | 0;
           }
           $84 = $80 + -12 | 0;
           $85 = $7 + 11 | 0;
           if ((HEAP8[$85 >> 0] | 0) < 0) {
            $88 = HEAP32[$7 >> 2] | 0;
            HEAP8[$3 >> 0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($88, $3);
            HEAP32[$7 + 4 >> 2] = 0;
           } else {
            HEAP8[$3 >> 0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($7, $3);
            HEAP8[$85 >> 0] = 0;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($7);
           HEAP32[$7 >> 2] = HEAP32[$84 >> 2];
           HEAP32[$7 + 4 >> 2] = HEAP32[$84 + 4 >> 2];
           HEAP32[$7 + 8 >> 2] = HEAP32[$84 + 8 >> 2];
           $$0$i$i$i$i = 0;
           while (1) {
            if (($$0$i$i$i$i | 0) == 3) break;
            HEAP32[$84 + ($$0$i$i$i$i << 2) >> 2] = 0;
            $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
           }
           $92 = HEAP8[$85 >> 0] | 0;
           if (!(($92 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $92 & 255) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($8, 32);
           $99 = HEAP32[$30 >> 2] | 0;
           $100 = $99 + -24 | 0;
           $102 = $99;
           while (1) {
            if (($102 | 0) == ($100 | 0)) break;
            $103 = $102 + -24 | 0;
            HEAP32[$30 >> 2] = $103;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($103);
            $102 = HEAP32[$30 >> 2] | 0;
           }
           $106 = HEAP8[$8 + 11 >> 0] | 0;
           $107 = $106 << 24 >> 24 < 0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($99 + -48 | 0, 0, $107 ? HEAP32[$8 >> 2] | 0 : $8, $107 ? HEAP32[$8 + 4 >> 2] | 0 : $106 & 255) | 0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
           $$0166 = $73;
           $115 = HEAP32[$30 >> 2] | 0;
          }
         }
        } else {
         $$0166 = $19;
         $115 = $31;
        }
       } else {
        $$0166 = $19;
        $115 = $31;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($115 + -24 | 0, 40);
       if (($$0166 | 0) == ($1 | 0)) label = 49; else if ((HEAP8[$$0166 >> 0] | 0) == 118) {
        $$3169 = $$0166 + 1 | 0;
        $183 = HEAP32[$2 >> 2] | 0;
        $184 = HEAP32[$30 >> 2] | 0;
       } else label = 49;
       do if ((label | 0) == 49) {
        $119 = $3 + 11 | 0;
        $120 = $3 + 4 | 0;
        $121 = $8 + 11 | 0;
        $122 = $8 + 4 | 0;
        $$0141$off0$ph = 1;
        $$1167$ph = $$0166;
        L67 : while (1) {
         $$1167 = $$1167$ph;
         $125 = HEAP32[$30 >> 2] | 0;
         $126 = HEAP32[$2 >> 2] | 0;
         while (1) {
          $127 = ($125 - $126 | 0) / 24 | 0;
          $128 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1167, $1, $2) | 0;
          $125 = HEAP32[$30 >> 2] | 0;
          $126 = HEAP32[$2 >> 2] | 0;
          $132 = ($125 - $126 | 0) / 24 | 0;
          if (($128 | 0) == ($$1167 | 0)) {
           label = 72;
           break L67;
          }
          if ($132 >>> 0 > $127 >>> 0) break; else $$1167 = $128;
         }
         HEAP32[$3 >> 2] = 0;
         HEAP32[$3 + 4 >> 2] = 0;
         HEAP32[$3 + 8 >> 2] = 0;
         $$0$i$i = 0;
         while (1) {
          if (($$0$i$i | 0) == 3) {
           $$0132 = $127;
           break;
          }
          HEAP32[$3 + ($$0$i$i << 2) >> 2] = 0;
          $$0$i$i = $$0$i$i + 1 | 0;
         }
         while (1) {
          if ($$0132 >>> 0 >= $132 >>> 0) {
           $$0 = $127;
           break;
          }
          $138 = HEAP8[$119 >> 0] | 0;
          if (($138 << 24 >> 24 < 0 ? HEAP32[$120 >> 2] | 0 : $138 & 255) | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15271) | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, (HEAP32[$2 >> 2] | 0) + ($$0132 * 24 | 0) | 0);
          $146 = HEAP8[$121 >> 0] | 0;
          $147 = $146 << 24 >> 24 < 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $147 ? HEAP32[$8 >> 2] | 0 : $8, $147 ? HEAP32[$122 >> 2] | 0 : $146 & 255) | 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          $$0132 = $$0132 + 1 | 0;
         }
         while (1) {
          if ($$0 >>> 0 >= $132 >>> 0) break;
          $161 = HEAP32[$30 >> 2] | 0;
          $162 = $161 + -24 | 0;
          $164 = $161;
          while (1) {
           if (($164 | 0) == ($162 | 0)) break;
           $165 = $164 + -24 | 0;
           HEAP32[$30 >> 2] = $165;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($165);
           $164 = HEAP32[$30 >> 2] | 0;
          }
          $$0 = $$0 + 1 | 0;
         }
         $155 = HEAP8[$119 >> 0] | 0;
         $157 = HEAP32[$120 >> 2] | 0;
         if (!(($155 << 24 >> 24 < 0 ? $157 : $155 & 255) | 0)) $$3144$off0$ph = $$0141$off0$ph; else {
          $168 = HEAP32[$30 >> 2] | 0;
          if ((HEAP32[$2 >> 2] | 0) == ($168 | 0)) {
           label = 84;
           break;
          }
          if ($$0141$off0$ph) {
           $172 = $168;
           $174 = $155;
           $179 = $157;
          } else {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($168 + -24 | 0, 15271) | 0;
           $172 = HEAP32[$30 >> 2] | 0;
           $174 = HEAP8[$119 >> 0] | 0;
           $179 = HEAP32[$120 >> 2] | 0;
          }
          $173 = $174 << 24 >> 24 < 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($172 + -24 | 0, $173 ? HEAP32[$3 >> 2] | 0 : $3, $173 ? $179 : $174 & 255) | 0;
          $$3144$off0$ph = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$0141$off0$ph = $$3144$off0$ph;
         $$1167$ph = $128;
        }
        if ((label | 0) == 72) {
         $$3169 = $$1167;
         $183 = $126;
         $184 = $125;
         break;
        } else if ((label | 0) == 84) {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$1135 = $0;
         $$4157 = 0;
         break L16;
        }
       } while (0);
       if (($183 | 0) == ($184 | 0)) {
        $$1135 = $0;
        $$4157 = 0;
       } else {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($184 + -24 | 0, 41);
        if ($21 & 1 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 14994) | 0;
        if ($21 & 2 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 15001) | 0;
        if ($21 & 4 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 15011) | 0;
        switch ($23 | 0) {
        case 1:
         {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 16475) | 0;
          break;
         }
        case 2:
         {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 16478) | 0;
          break;
         }
        default:
         {}
        }
        $205 = HEAP8[$7 + 11 >> 0] | 0;
        $206 = $205 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$30 >> 2] | 0) + -24 | 0, $206 ? HEAP32[$7 >> 2] | 0 : $7, $206 ? HEAP32[$7 + 4 >> 2] | 0 : $205 & 255) | 0;
        $$1135 = $$3169;
        $$4157 = 1;
       }
      }
     } while (0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($6);
     if ($$4157) $$2136 = $$1135; else {
      $$5139 = $$1135;
      $$6159 = 0;
      break L6;
     }
    } while (0);
    $$5139 = $$2136;
    $$6159 = 1;
   }
  } while (0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($5);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($4);
  if ($$6159) {
   $$6140 = $$5139;
   label = 88;
  } else $$11 = $0;
 }
 if ((label | 0) == 88) $$11 = $$6140;
 STACKTOP = sp;
 return $$11 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i175 = 0, $$0$i$i$i187 = 0, $$0$i$i170 = 0, $$0$i$i180 = 0, $$0$i$i193 = 0, $$0$off0216 = 0, $$0136$off0 = 0, $$0148 = 0, $$0157$off0 = 0, $$0158 = 0, $$1149 = 0, $$1159 = 0, $$16 = 0, $$3141 = 0, $$3161 = 0, $$4142 = 0, $$4162215 = 0, $$phi$trans$insert = 0, $$pre$phi214Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $102 = 0, $103 = 0, $111 = 0, $112 = 0, $123 = 0, $124 = 0, $133 = 0, $14 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $5 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $84 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, label = 0, sp = 0, $$3161$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 76 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 16 | 0;
 $8 = sp;
 $9 = sp + 52 | 0;
 $10 = $1;
 L1 : do if (($10 - $0 | 0) > 3) {
  $14 = HEAP8[$0 >> 0] | 0;
  if ($14 << 24 >> 24 == 103) {
   $18 = (HEAP8[$0 + 1 >> 0] | 0) == 115;
   $$ = $18 ? $0 + 2 | 0 : $0;
   $$0157$off0 = $18;
   $$0158 = $$;
   $21 = HEAP8[$$ >> 0] | 0;
  } else {
   $$0157$off0 = 0;
   $$0158 = $0;
   $21 = $14;
  }
  if ($21 << 24 >> 24 == 110) {
   $23 = HEAP8[$$0158 + 1 >> 0] | 0;
   $24 = $23 << 24 >> 24 == 97;
   switch ($23 << 24 >> 24) {
   case 97:
   case 119:
    break;
   default:
    {
     $$16 = $0;
     break L1;
    }
   }
   $25 = $$0158 + 2 | 0;
   L8 : do if (($25 | 0) != ($1 | 0)) {
    $$0136$off0 = 0;
    $$1159 = $25;
    while (1) {
     if ((HEAP8[$$1159 >> 0] | 0) == 95) break;
     $29 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1159, $1, $2) | 0;
     $30 = ($29 | 0) == ($$1159 | 0);
     $31 = ($29 | 0) == ($1 | 0);
     if ($30 | $31) break L8; else {
      $$0136$off0 = $$0136$off0 | ($30 | $31) ^ 1;
      $$1159 = $29;
     }
    }
    $32 = $$1159 + 1 | 0;
    $33 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($32, $1, $2) | 0;
    if (!(($33 | 0) == ($32 | 0) | ($33 | 0) == ($1 | 0))) {
     $39 = HEAP8[$33 >> 0] | 0;
     L14 : do if (($10 - $33 | 0) > 2 & $39 << 24 >> 24 == 112) {
      if ((HEAP8[$33 + 1 >> 0] | 0) != 105) break L8;
      $$3161 = $33 + 2 | 0;
      while (1) {
       if ((HEAP8[$$3161 >> 0] | 0) == 69) {
        $$0$off0216 = 1;
        $$4162215 = $$3161;
        break L14;
       }
       $$3161$looptemp = $$3161;
       $$3161 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$3161, $1, $2) | 0;
       if (($$3161 | 0) == ($$3161$looptemp | 0) | ($$3161 | 0) == ($1 | 0)) break L8;
      }
     } else if ($39 << 24 >> 24 == 69) {
      $$0$off0216 = 0;
      $$4162215 = $33;
     } else break L8; while (0);
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$4 + 8 >> 2] = 0;
     $$0$i$i = 0;
     while (1) {
      if (($$0$i$i | 0) == 3) break;
      HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
      $$0$i$i = $$0$i$i + 1 | 0;
     }
     L26 : do if ($$0$off0216) {
      $54 = $2 + 4 | 0;
      $55 = HEAP32[$54 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($55 | 0)) {
       $$1149 = $0;
       $$4142 = 1;
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $55 + -24 | 0);
       $58 = $4 + 11 | 0;
       if ((HEAP8[$58 >> 0] | 0) < 0) {
        $61 = HEAP32[$4 >> 2] | 0;
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($61, $3);
        HEAP32[$4 + 4 >> 2] = 0;
       } else {
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($4, $3);
        HEAP8[$58 >> 0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($4);
       HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
       HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
       $$0$i$i$i$i = 0;
       while (1) {
        if (($$0$i$i$i$i | 0) == 3) break;
        HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
        $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       $65 = HEAP32[$54 >> 2] | 0;
       $66 = $65 + -24 | 0;
       $68 = $65;
       while (1) {
        if (($68 | 0) == ($66 | 0)) {
         $$pre$phi214Z2D = $54;
         $$pre$phiZ2D = $2;
         $72 = $66;
         label = 31;
         break L26;
        }
        $69 = $68 + -24 | 0;
        HEAP32[$54 >> 2] = $69;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($69);
        $68 = HEAP32[$54 >> 2] | 0;
       }
      }
     } else {
      $$phi$trans$insert = $2 + 4 | 0;
      $$pre$phi214Z2D = $$phi$trans$insert;
      $$pre$phiZ2D = $2;
      $72 = HEAP32[$$phi$trans$insert >> 2] | 0;
      label = 31;
     } while (0);
     if ((label | 0) == 31) if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($72 | 0)) {
      $$1149 = $0;
      $$4142 = 1;
     } else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $72 + -24 | 0);
      $74 = HEAP32[$$pre$phi214Z2D >> 2] | 0;
      $75 = $74 + -24 | 0;
      $77 = $74;
      while (1) {
       if (($77 | 0) == ($75 | 0)) break;
       $78 = $77 + -24 | 0;
       HEAP32[$$pre$phi214Z2D >> 2] = $78;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($78);
       $77 = HEAP32[$$pre$phi214Z2D >> 2] | 0;
      }
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      $$0$i$i170 = 0;
      while (1) {
       if (($$0$i$i170 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i170 << 2) >> 2] = 0;
       $$0$i$i170 = $$0$i$i170 + 1 | 0;
      }
      L52 : do if ($$0136$off0) if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($75 | 0)) {
       $$0148 = $0;
       $$3141 = 1;
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, $74 + -48 | 0);
       $84 = $6 + 11 | 0;
       if ((HEAP8[$84 >> 0] | 0) < 0) {
        $87 = HEAP32[$6 >> 2] | 0;
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($87, $3);
        HEAP32[$6 + 4 >> 2] = 0;
       } else {
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($6, $3);
        HEAP8[$84 >> 0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($6);
       HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
       HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
       $$0$i$i$i$i175 = 0;
       while (1) {
        if (($$0$i$i$i$i175 | 0) == 3) break;
        HEAP32[$7 + ($$0$i$i$i$i175 << 2) >> 2] = 0;
        $$0$i$i$i$i175 = $$0$i$i$i$i175 + 1 | 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $91 = HEAP32[$$pre$phi214Z2D >> 2] | 0;
       $92 = $91 + -24 | 0;
       $94 = $91;
       while (1) {
        if (($94 | 0) == ($92 | 0)) {
         label = 49;
         break L52;
        }
        $95 = $94 + -24 | 0;
        HEAP32[$$pre$phi214Z2D >> 2] = $95;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($95);
        $94 = HEAP32[$$pre$phi214Z2D >> 2] | 0;
       }
      } else label = 49; while (0);
      if ((label | 0) == 49) {
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       $$0$i$i180 = 0;
       while (1) {
        if (($$0$i$i180 | 0) == 3) break;
        HEAP32[$3 + ($$0$i$i180 << 2) >> 2] = 0;
        $$0$i$i180 = $$0$i$i180 + 1 | 0;
       }
       if ($$0157$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($3, 15121);
       if ($24) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15331) | 0; else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15081) | 0;
       if ($$0136$off0) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8, 15049, $6);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15335) | 0;
        HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
        $$0$i$i$i = 0;
        while (1) {
         if (($$0$i$i$i | 0) == 3) break;
         HEAP32[$8 + ($$0$i$i$i << 2) >> 2] = 0;
         $$0$i$i$i = $$0$i$i$i + 1 | 0;
        }
        $102 = HEAP8[$7 + 11 >> 0] | 0;
        $103 = $102 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $103 ? HEAP32[$7 >> 2] | 0 : $7, $103 ? HEAP32[$7 + 4 >> 2] | 0 : $102 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       }
       $111 = HEAP8[$5 + 11 >> 0] | 0;
       $112 = $111 << 24 >> 24 < 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $112 ? HEAP32[$5 >> 2] | 0 : $5, $112 ? HEAP32[$5 + 4 >> 2] | 0 : $111 & 255) | 0;
       if ($$0$off0216) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8, 15044, $4);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15047) | 0;
        HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
        $$0$i$i$i187 = 0;
        while (1) {
         if (($$0$i$i$i187 | 0) == 3) break;
         HEAP32[$8 + ($$0$i$i$i187 << 2) >> 2] = 0;
         $$0$i$i$i187 = $$0$i$i$i187 + 1 | 0;
        }
        $123 = HEAP8[$7 + 11 >> 0] | 0;
        $124 = $123 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $124 ? HEAP32[$7 >> 2] | 0 : $7, $124 ? HEAP32[$7 + 4 >> 2] | 0 : $123 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       };
       HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$9 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
       HEAP32[$9 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
       $$0$i$i193 = 0;
       while (1) {
        if (($$0$i$i193 | 0) == 3) break;
        HEAP32[$3 + ($$0$i$i193 << 2) >> 2] = 0;
        $$0$i$i193 = $$0$i$i193 + 1 | 0;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7, $9);
       $133 = HEAP32[$$pre$phi214Z2D >> 2] | 0;
       if ($133 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($133, $7);
        HEAP32[$$pre$phi214Z2D >> 2] = (HEAP32[$$pre$phi214Z2D >> 2] | 0) + 24;
       } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $7);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$0148 = $$4162215 + 1 | 0;
       $$3141 = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$1149 = $$0148;
      $$4142 = $$3141;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     if (!$$4142) {
      $$16 = $$1149;
      break L1;
     }
    }
   } while (0);
   $$16 = $0;
  } else $$16 = $0;
 } else $$16 = $0; while (0);
 STACKTOP = sp;
 return $$16 | 0;
}

function _arLabelingSubEWI3CA5551($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0379 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0386 = 0, $$0390 = 0, $$0394 = 0, $$0397 = 0, $$0402 = 0, $$1 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1387 = 0, $$1391 = 0, $$1395 = 0, $$1398 = 0, $$1403 = 0, $$2 = 0, $$2388 = 0, $$2392 = 0, $$2396 = 0, $$2399 = 0, $$2404 = 0, $$3 = 0, $$3389 = 0, $$3393 = 0, $$3400 = 0, $$3405 = 0, $$4 = 0, $$4401 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $112 = 0, $117 = 0, $120 = 0, $123 = 0, $138 = 0, $140 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $153 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $171 = 0, $172 = 0, $176 = 0, $180 = 0, $184 = 0, $189 = 0, $192 = 0, $194 = 0, $198 = 0, $202 = 0, $205 = 0, $209 = 0, $214 = 0, $22 = 0, $23 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $255 = 0, $256 = 0, $268 = 0, $269 = 0, $272 = 0, $279 = 0, $28 = 0, $280 = 0, $288 = 0, $291 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $306 = 0, $310 = 0, $313 = 0, $317 = 0, $32 = 0, $322 = 0, $325 = 0, $326 = 0, $332 = 0, $36 = 0, $42 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $72 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0380 = $7;
 $$0382 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0397 = 0;
 while (1) {
  if (($$0397 | 0) >= ($5 | 0)) break;
  HEAP16[$$0382 >> 1] = 0;
  HEAP16[$$0380 >> 1] = 0;
  $$0380 = $$0380 + 2 | 0;
  $$0382 = $$0382 + 2 | 0;
  $$0397 = $$0397 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1381 = $7;
 $$1383 = $7 + ($16 << 1) | 0;
 $$1398 = 0;
 while (1) {
  if (($$1398 | 0) >= ($6 | 0)) break;
  HEAP16[$$1383 >> 1] = 0;
  HEAP16[$$1381 >> 1] = 0;
  $$1381 = $$1381 + ($5 << 1) | 0;
  $$1383 = $$1383 + ($5 << 1) | 0;
  $$1398 = $$1398 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $28 = $1 << 1;
 $32 = 0 - $5 | 0;
 $$0379 = $0 + (($1 << 2) + 4) | 0;
 $$0384 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0394 = 1;
 $$0402 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0394 | 0) < ($8 | 0)) {
   $$1 = $$0379;
   $$1385 = $$0384;
   $$1403 = $$0402;
   $$2399 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2399 | 0) >= ($16 | 0)) break;
   $36 = HEAPU8[$$1 >> 0] | 0;
   $42 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($36 & 248) + 12 + ($36 << 5 & 224) + ($42 >>> 3 & 24) + ($42 << 2 & 248) | 0) > ($15 | 0)) {
    HEAP8[$$1385 >> 0] = -1;
    $52 = $$3 + ($32 << 1) | 0;
    $53 = HEAP16[$52 >> 1] | 0;
    if ($53 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $53;
     $56 = ($53 << 16 >> 16) * 7 | 0;
     $58 = $4 + 1310736 + ($56 + -7 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + 1;
     $62 = $4 + 1310736 + ($56 + -6 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$2399;
     $66 = $4 + 1310736 + ($56 + -5 << 2) | 0;
     HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $$0394;
     HEAP32[$4 + 1310736 + ($56 + -1 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $72 = HEAP16[$52 + 2 >> 1] | 0;
    $75 = HEAP16[$52 + -2 >> 1] | 0;
    $77 = $75 << 16 >> 16 > 0;
    $78 = ($75 << 16 >> 16) + -1 | 0;
    $79 = $$3 + -2 | 0;
    if ($72 << 16 >> 16 <= 0) {
     if ($77) {
      HEAP16[$$3 >> 1] = $75;
      $171 = $78 * 7 | 0;
      $172 = $4 + 1310736 + ($171 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $4 + 1310736 + ($171 + 1 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$2399;
      $180 = $4 + 1310736 + ($171 + 2 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$0394;
      $184 = $4 + 1310736 + ($171 + 4 << 2) | 0;
      if ((HEAP32[$184 >> 2] | 0) < ($$2399 | 0)) HEAP32[$184 >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($171 + 6 << 2) >> 2] = $$0394;
      $$3405 = $$1403;
      break;
     }
     $189 = HEAP16[$79 >> 1] | 0;
     if ($189 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $189;
      $192 = ($189 << 16 >> 16) * 7 | 0;
      $194 = $4 + 1310736 + ($192 + -7 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 1;
      $198 = $4 + 1310736 + ($192 + -6 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$2399;
      $202 = $4 + 1310736 + ($192 + -5 << 2) | 0;
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + $$0394;
      $205 = $192 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($205 << 2) >> 2] | 0) < ($$2399 | 0)) {
       $$2404 = $$1403;
       $$sink = $$2399;
       $$sink3 = $205;
      } else {
       $$3405 = $$1403;
       break;
      }
     } else {
      $209 = $$1403 + 1 | 0;
      if (($$1403 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $209;
      HEAP32[$4 + 1179664 + ($$1403 << 2) >> 2] = $209 << 16 >> 16;
      $214 = $$1403 * 7 | 0;
      HEAP32[$4 + 1310736 + ($214 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($214 + 1 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 2 << 2) >> 2] = $$0394;
      HEAP32[$4 + 1310736 + ($214 + 3 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 4 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 5 << 2) >> 2] = $$0394;
      $$2404 = $209;
      $$sink = $$0394;
      $$sink3 = $214 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3405 = $$2404;
     break;
    }
    $81 = ($72 << 16 >> 16) + -1 | 0;
    $82 = $4 + 1179664 + ($81 << 2) | 0;
    if ($77) {
     $83 = HEAP32[$82 >> 2] | 0;
     $85 = HEAP32[$4 + 1179664 + ($78 << 2) >> 2] | 0;
     L35 : do if (($83 | 0) > ($85 | 0)) {
      HEAP16[$$3 >> 1] = $85;
      $$0386 = $22;
      $$0390 = 0;
      while (1) {
       if (($$0390 | 0) >= ($$1403 | 0)) {
        $100 = $85;
        break L35;
       }
       if ((HEAP32[$$0386 >> 2] | 0) == ($83 | 0)) HEAP32[$$0386 >> 2] = $85;
       $$0386 = $$0386 + 4 | 0;
       $$0390 = $$0390 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $83;
      if (($83 | 0) < ($85 | 0)) {
       $$1387 = $22;
       $$1391 = 0;
       while (1) {
        if (($$1391 | 0) >= ($$1403 | 0)) {
         $100 = $83;
         break L35;
        }
        if ((HEAP32[$$1387 >> 2] | 0) == ($85 | 0)) HEAP32[$$1387 >> 2] = $83;
        $$1387 = $$1387 + 4 | 0;
        $$1391 = $$1391 + 1 | 0;
       }
      } else $100 = $83;
     } while (0);
     $102 = ($100 << 16 >> 16) * 7 | 0;
     $104 = $4 + 1310736 + ($102 + -7 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + 1;
     $108 = $4 + 1310736 + ($102 + -6 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$2399;
     $112 = $4 + 1310736 + ($102 + -5 << 2) | 0;
     HEAP32[$112 >> 2] = (HEAP32[$112 >> 2] | 0) + $$0394;
     HEAP32[$4 + 1310736 + ($102 + -1 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $117 = HEAP16[$79 >> 1] | 0;
    if ($117 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $72;
     $153 = $81 * 7 | 0;
     $154 = $4 + 1310736 + ($153 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
     $158 = $4 + 1310736 + ($153 + 1 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2399;
     $162 = $4 + 1310736 + ($153 + 2 << 2) | 0;
     HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0394;
     $166 = $4 + 1310736 + ($153 + 3 << 2) | 0;
     if ((HEAP32[$166 >> 2] | 0) > ($$2399 | 0)) HEAP32[$166 >> 2] = $$2399;
     HEAP32[$4 + 1310736 + ($153 + 6 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $120 = HEAP32[$82 >> 2] | 0;
    $123 = HEAP32[$4 + 1179664 + (($117 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($120 | 0) > ($123 | 0)) {
     HEAP16[$$3 >> 1] = $123;
     $$2388 = $22;
     $$2392 = 0;
     while (1) {
      if (($$2392 | 0) >= ($$1403 | 0)) {
       $138 = $123;
       break L58;
      }
      if ((HEAP32[$$2388 >> 2] | 0) == ($120 | 0)) HEAP32[$$2388 >> 2] = $123;
      $$2388 = $$2388 + 4 | 0;
      $$2392 = $$2392 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $120;
     if (($120 | 0) < ($123 | 0)) {
      $$3389 = $22;
      $$3393 = 0;
      while (1) {
       if (($$3393 | 0) >= ($$1403 | 0)) {
        $138 = $120;
        break L58;
       }
       if ((HEAP32[$$3389 >> 2] | 0) == ($123 | 0)) HEAP32[$$3389 >> 2] = $120;
       $$3389 = $$3389 + 4 | 0;
       $$3393 = $$3393 + 1 | 0;
      }
     } else $138 = $120;
    } while (0);
    $140 = ($138 << 16 >> 16) * 7 | 0;
    $142 = $4 + 1310736 + ($140 + -7 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
    $146 = $4 + 1310736 + ($140 + -6 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$2399;
    $150 = $4 + 1310736 + ($140 + -5 << 2) | 0;
    HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$0394;
    $$3405 = $$1403;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1385 >> 0] = 0;
    $$3405 = $$1403;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1385 = $$1385 + 1 | 0;
   $$1403 = $$3405;
   $$2399 = $$2399 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0379 = $$1 + $28 + 8 | 0;
  $$0384 = $$1385 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
  $$0402 = $$1403;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $237 = $4 + 12 | 0;
  $$1395 = 1;
  $$3400 = 1;
  $$4 = $22;
  while (1) {
   if (($$3400 | 0) > ($$0402 | 0)) break;
   $239 = HEAP32[$$4 >> 2] | 0;
   if (($239 | 0) == ($$3400 | 0)) {
    $$2396 = $$1395 + 1 | 0;
    $245 = $$1395;
   } else {
    $$2396 = $$1395;
    $245 = HEAP32[$4 + 1179664 + ($239 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $245;
   $$1395 = $$2396;
   $$3400 = $$3400 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $248 = $4 + 8 | 0;
  $249 = $$1395 + -1 | 0;
  HEAP32[$248 >> 2] = $249;
  if (!$249) $$0 = 0; else {
   _memset($237 | 0, 0, $249 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $249 << 4 | 0) | 0;
   $$4401 = 0;
   $255 = $249;
   while (1) {
    if (($$4401 | 0) >= ($255 | 0)) {
     $$5 = 0;
     break;
    }
    $256 = $$4401 << 2;
    HEAP32[$4 + 131084 + ($256 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($256 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($256 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($256 | 3) << 2) >> 2] = 0;
    $$4401 = $$4401 + 1 | 0;
    $255 = HEAP32[$248 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0402 | 0)) {
     $$6 = 0;
     break;
    }
    $268 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $269 = $$5 * 7 | 0;
    $272 = $4 + 12 + ($268 << 2) | 0;
    HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($269 << 2) >> 2] | 0);
    $279 = $268 << 1;
    $280 = $4 + 655376 + ($279 << 3) | 0;
    HEAPF64[$280 >> 3] = +HEAPF64[$280 >> 3] + +(HEAP32[$4 + 1310736 + ($269 + 1 << 2) >> 2] | 0);
    $288 = $4 + 655376 + (($279 | 1) << 3) | 0;
    HEAPF64[$288 >> 3] = +HEAPF64[$288 >> 3] + +(HEAP32[$4 + 1310736 + ($269 + 2 << 2) >> 2] | 0);
    $291 = $268 << 2;
    $292 = $4 + 131084 + ($291 << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($269 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($291 | 1) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($269 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $306 = $4 + 131084 + (($291 | 2) << 2) | 0;
    $310 = HEAP32[$4 + 1310736 + ($269 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$306 >> 2] | 0) > ($310 | 0)) HEAP32[$306 >> 2] = $310;
    $313 = $4 + 131084 + (($291 | 3) << 2) | 0;
    $317 = HEAP32[$4 + 1310736 + ($269 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$313 >> 2] | 0) < ($317 | 0)) HEAP32[$313 >> 2] = $317;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$248 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $322 = $4 + 12 + ($$6 << 2) | 0;
    $325 = $$6 << 1;
    $326 = $4 + 655376 + ($325 << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $332 = $4 + 655376 + (($325 | 1) << 3) | 0;
    HEAPF64[$332 >> 3] = +HEAPF64[$332 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3CA5551($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0379 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0386 = 0, $$0390 = 0, $$0394 = 0, $$0397 = 0, $$0402 = 0, $$1 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1387 = 0, $$1391 = 0, $$1395 = 0, $$1398 = 0, $$1403 = 0, $$2 = 0, $$2388 = 0, $$2392 = 0, $$2396 = 0, $$2399 = 0, $$2404 = 0, $$3 = 0, $$3389 = 0, $$3393 = 0, $$3400 = 0, $$3405 = 0, $$4 = 0, $$4401 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $112 = 0, $117 = 0, $120 = 0, $123 = 0, $138 = 0, $140 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $153 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $171 = 0, $172 = 0, $176 = 0, $180 = 0, $184 = 0, $189 = 0, $192 = 0, $194 = 0, $198 = 0, $202 = 0, $205 = 0, $209 = 0, $214 = 0, $22 = 0, $23 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $255 = 0, $256 = 0, $268 = 0, $269 = 0, $272 = 0, $279 = 0, $28 = 0, $280 = 0, $288 = 0, $291 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $306 = 0, $310 = 0, $313 = 0, $317 = 0, $32 = 0, $322 = 0, $325 = 0, $326 = 0, $332 = 0, $36 = 0, $42 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $72 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0380 = $7;
 $$0382 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0397 = 0;
 while (1) {
  if (($$0397 | 0) >= ($5 | 0)) break;
  HEAP16[$$0382 >> 1] = 0;
  HEAP16[$$0380 >> 1] = 0;
  $$0380 = $$0380 + 2 | 0;
  $$0382 = $$0382 + 2 | 0;
  $$0397 = $$0397 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1381 = $7;
 $$1383 = $7 + ($16 << 1) | 0;
 $$1398 = 0;
 while (1) {
  if (($$1398 | 0) >= ($6 | 0)) break;
  HEAP16[$$1383 >> 1] = 0;
  HEAP16[$$1381 >> 1] = 0;
  $$1381 = $$1381 + ($5 << 1) | 0;
  $$1383 = $$1383 + ($5 << 1) | 0;
  $$1398 = $$1398 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $28 = $1 << 1;
 $32 = 0 - $5 | 0;
 $$0379 = $0 + (($1 << 2) + 4) | 0;
 $$0384 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0394 = 1;
 $$0402 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0394 | 0) < ($8 | 0)) {
   $$1 = $$0379;
   $$1385 = $$0384;
   $$1403 = $$0402;
   $$2399 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2399 | 0) >= ($16 | 0)) break;
   $36 = HEAPU8[$$1 >> 0] | 0;
   $42 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($36 & 248) + 12 + ($36 << 5 & 224) + ($42 >>> 3 & 24) + ($42 << 2 & 248) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1385 >> 0] = 0;
    $$3405 = $$1403;
   } else {
    HEAP8[$$1385 >> 0] = -1;
    $52 = $$3 + ($32 << 1) | 0;
    $53 = HEAP16[$52 >> 1] | 0;
    if ($53 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $53;
     $56 = ($53 << 16 >> 16) * 7 | 0;
     $58 = $4 + 1310736 + ($56 + -7 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + 1;
     $62 = $4 + 1310736 + ($56 + -6 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$2399;
     $66 = $4 + 1310736 + ($56 + -5 << 2) | 0;
     HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $$0394;
     HEAP32[$4 + 1310736 + ($56 + -1 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $72 = HEAP16[$52 + 2 >> 1] | 0;
    $75 = HEAP16[$52 + -2 >> 1] | 0;
    $77 = $75 << 16 >> 16 > 0;
    $78 = ($75 << 16 >> 16) + -1 | 0;
    $79 = $$3 + -2 | 0;
    if ($72 << 16 >> 16 <= 0) {
     if ($77) {
      HEAP16[$$3 >> 1] = $75;
      $171 = $78 * 7 | 0;
      $172 = $4 + 1310736 + ($171 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $4 + 1310736 + ($171 + 1 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$2399;
      $180 = $4 + 1310736 + ($171 + 2 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$0394;
      $184 = $4 + 1310736 + ($171 + 4 << 2) | 0;
      if ((HEAP32[$184 >> 2] | 0) < ($$2399 | 0)) HEAP32[$184 >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($171 + 6 << 2) >> 2] = $$0394;
      $$3405 = $$1403;
      break;
     }
     $189 = HEAP16[$79 >> 1] | 0;
     if ($189 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $189;
      $192 = ($189 << 16 >> 16) * 7 | 0;
      $194 = $4 + 1310736 + ($192 + -7 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 1;
      $198 = $4 + 1310736 + ($192 + -6 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$2399;
      $202 = $4 + 1310736 + ($192 + -5 << 2) | 0;
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + $$0394;
      $205 = $192 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($205 << 2) >> 2] | 0) < ($$2399 | 0)) {
       $$2404 = $$1403;
       $$sink = $$2399;
       $$sink3 = $205;
      } else {
       $$3405 = $$1403;
       break;
      }
     } else {
      $209 = $$1403 + 1 | 0;
      if (($$1403 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $209;
      HEAP32[$4 + 1179664 + ($$1403 << 2) >> 2] = $209 << 16 >> 16;
      $214 = $$1403 * 7 | 0;
      HEAP32[$4 + 1310736 + ($214 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($214 + 1 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 2 << 2) >> 2] = $$0394;
      HEAP32[$4 + 1310736 + ($214 + 3 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 4 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 5 << 2) >> 2] = $$0394;
      $$2404 = $209;
      $$sink = $$0394;
      $$sink3 = $214 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3405 = $$2404;
     break;
    }
    $81 = ($72 << 16 >> 16) + -1 | 0;
    $82 = $4 + 1179664 + ($81 << 2) | 0;
    if ($77) {
     $83 = HEAP32[$82 >> 2] | 0;
     $85 = HEAP32[$4 + 1179664 + ($78 << 2) >> 2] | 0;
     L36 : do if (($83 | 0) > ($85 | 0)) {
      HEAP16[$$3 >> 1] = $85;
      $$0386 = $22;
      $$0390 = 0;
      while (1) {
       if (($$0390 | 0) >= ($$1403 | 0)) {
        $100 = $85;
        break L36;
       }
       if ((HEAP32[$$0386 >> 2] | 0) == ($83 | 0)) HEAP32[$$0386 >> 2] = $85;
       $$0386 = $$0386 + 4 | 0;
       $$0390 = $$0390 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $83;
      if (($83 | 0) < ($85 | 0)) {
       $$1387 = $22;
       $$1391 = 0;
       while (1) {
        if (($$1391 | 0) >= ($$1403 | 0)) {
         $100 = $83;
         break L36;
        }
        if ((HEAP32[$$1387 >> 2] | 0) == ($85 | 0)) HEAP32[$$1387 >> 2] = $83;
        $$1387 = $$1387 + 4 | 0;
        $$1391 = $$1391 + 1 | 0;
       }
      } else $100 = $83;
     } while (0);
     $102 = ($100 << 16 >> 16) * 7 | 0;
     $104 = $4 + 1310736 + ($102 + -7 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + 1;
     $108 = $4 + 1310736 + ($102 + -6 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$2399;
     $112 = $4 + 1310736 + ($102 + -5 << 2) | 0;
     HEAP32[$112 >> 2] = (HEAP32[$112 >> 2] | 0) + $$0394;
     HEAP32[$4 + 1310736 + ($102 + -1 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $117 = HEAP16[$79 >> 1] | 0;
    if ($117 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $72;
     $153 = $81 * 7 | 0;
     $154 = $4 + 1310736 + ($153 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
     $158 = $4 + 1310736 + ($153 + 1 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2399;
     $162 = $4 + 1310736 + ($153 + 2 << 2) | 0;
     HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0394;
     $166 = $4 + 1310736 + ($153 + 3 << 2) | 0;
     if ((HEAP32[$166 >> 2] | 0) > ($$2399 | 0)) HEAP32[$166 >> 2] = $$2399;
     HEAP32[$4 + 1310736 + ($153 + 6 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $120 = HEAP32[$82 >> 2] | 0;
    $123 = HEAP32[$4 + 1179664 + (($117 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($120 | 0) > ($123 | 0)) {
     HEAP16[$$3 >> 1] = $123;
     $$2388 = $22;
     $$2392 = 0;
     while (1) {
      if (($$2392 | 0) >= ($$1403 | 0)) {
       $138 = $123;
       break L59;
      }
      if ((HEAP32[$$2388 >> 2] | 0) == ($120 | 0)) HEAP32[$$2388 >> 2] = $123;
      $$2388 = $$2388 + 4 | 0;
      $$2392 = $$2392 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $120;
     if (($120 | 0) < ($123 | 0)) {
      $$3389 = $22;
      $$3393 = 0;
      while (1) {
       if (($$3393 | 0) >= ($$1403 | 0)) {
        $138 = $120;
        break L59;
       }
       if ((HEAP32[$$3389 >> 2] | 0) == ($123 | 0)) HEAP32[$$3389 >> 2] = $120;
       $$3389 = $$3389 + 4 | 0;
       $$3393 = $$3393 + 1 | 0;
      }
     } else $138 = $120;
    } while (0);
    $140 = ($138 << 16 >> 16) * 7 | 0;
    $142 = $4 + 1310736 + ($140 + -7 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
    $146 = $4 + 1310736 + ($140 + -6 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$2399;
    $150 = $4 + 1310736 + ($140 + -5 << 2) | 0;
    HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$0394;
    $$3405 = $$1403;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1385 = $$1385 + 1 | 0;
   $$1403 = $$3405;
   $$2399 = $$2399 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0379 = $$1 + $28 + 8 | 0;
  $$0384 = $$1385 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
  $$0402 = $$1403;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $237 = $4 + 12 | 0;
  $$1395 = 1;
  $$3400 = 1;
  $$4 = $22;
  while (1) {
   if (($$3400 | 0) > ($$0402 | 0)) break;
   $239 = HEAP32[$$4 >> 2] | 0;
   if (($239 | 0) == ($$3400 | 0)) {
    $$2396 = $$1395 + 1 | 0;
    $245 = $$1395;
   } else {
    $$2396 = $$1395;
    $245 = HEAP32[$4 + 1179664 + ($239 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $245;
   $$1395 = $$2396;
   $$3400 = $$3400 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $248 = $4 + 8 | 0;
  $249 = $$1395 + -1 | 0;
  HEAP32[$248 >> 2] = $249;
  if (!$249) $$0 = 0; else {
   _memset($237 | 0, 0, $249 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $249 << 4 | 0) | 0;
   $$4401 = 0;
   $255 = $249;
   while (1) {
    if (($$4401 | 0) >= ($255 | 0)) {
     $$5 = 0;
     break;
    }
    $256 = $$4401 << 2;
    HEAP32[$4 + 131084 + ($256 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($256 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($256 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($256 | 3) << 2) >> 2] = 0;
    $$4401 = $$4401 + 1 | 0;
    $255 = HEAP32[$248 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0402 | 0)) {
     $$6 = 0;
     break;
    }
    $268 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $269 = $$5 * 7 | 0;
    $272 = $4 + 12 + ($268 << 2) | 0;
    HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($269 << 2) >> 2] | 0);
    $279 = $268 << 1;
    $280 = $4 + 655376 + ($279 << 3) | 0;
    HEAPF64[$280 >> 3] = +HEAPF64[$280 >> 3] + +(HEAP32[$4 + 1310736 + ($269 + 1 << 2) >> 2] | 0);
    $288 = $4 + 655376 + (($279 | 1) << 3) | 0;
    HEAPF64[$288 >> 3] = +HEAPF64[$288 >> 3] + +(HEAP32[$4 + 1310736 + ($269 + 2 << 2) >> 2] | 0);
    $291 = $268 << 2;
    $292 = $4 + 131084 + ($291 << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($269 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($291 | 1) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($269 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $306 = $4 + 131084 + (($291 | 2) << 2) | 0;
    $310 = HEAP32[$4 + 1310736 + ($269 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$306 >> 2] | 0) > ($310 | 0)) HEAP32[$306 >> 2] = $310;
    $313 = $4 + 131084 + (($291 | 3) << 2) | 0;
    $317 = HEAP32[$4 + 1310736 + ($269 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$313 >> 2] | 0) < ($317 | 0)) HEAP32[$313 >> 2] = $317;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$248 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $322 = $4 + 12 + ($$6 << 2) | 0;
    $325 = $$6 << 1;
    $326 = $4 + 655376 + ($325 << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $332 = $4 + 655376 + (($325 | 1) << 3) | 0;
    HEAPF64[$332 >> 3] = +HEAPF64[$332 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWI3C565($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0379 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0386 = 0, $$0390 = 0, $$0394 = 0, $$0397 = 0, $$0402 = 0, $$1 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1387 = 0, $$1391 = 0, $$1395 = 0, $$1398 = 0, $$1403 = 0, $$2 = 0, $$2388 = 0, $$2392 = 0, $$2396 = 0, $$2399 = 0, $$2404 = 0, $$3 = 0, $$3389 = 0, $$3393 = 0, $$3400 = 0, $$3405 = 0, $$4 = 0, $$4401 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $112 = 0, $117 = 0, $120 = 0, $123 = 0, $138 = 0, $140 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $153 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $171 = 0, $172 = 0, $176 = 0, $180 = 0, $184 = 0, $189 = 0, $192 = 0, $194 = 0, $198 = 0, $202 = 0, $205 = 0, $209 = 0, $214 = 0, $22 = 0, $23 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $255 = 0, $256 = 0, $268 = 0, $269 = 0, $272 = 0, $279 = 0, $28 = 0, $280 = 0, $288 = 0, $291 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $306 = 0, $310 = 0, $313 = 0, $317 = 0, $32 = 0, $322 = 0, $325 = 0, $326 = 0, $332 = 0, $36 = 0, $42 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $72 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0380 = $7;
 $$0382 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0397 = 0;
 while (1) {
  if (($$0397 | 0) >= ($5 | 0)) break;
  HEAP16[$$0382 >> 1] = 0;
  HEAP16[$$0380 >> 1] = 0;
  $$0380 = $$0380 + 2 | 0;
  $$0382 = $$0382 + 2 | 0;
  $$0397 = $$0397 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1381 = $7;
 $$1383 = $7 + ($16 << 1) | 0;
 $$1398 = 0;
 while (1) {
  if (($$1398 | 0) >= ($6 | 0)) break;
  HEAP16[$$1383 >> 1] = 0;
  HEAP16[$$1381 >> 1] = 0;
  $$1381 = $$1381 + ($5 << 1) | 0;
  $$1383 = $$1383 + ($5 << 1) | 0;
  $$1398 = $$1398 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $28 = $1 << 1;
 $32 = 0 - $5 | 0;
 $$0379 = $0 + (($1 << 2) + 4) | 0;
 $$0384 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0394 = 1;
 $$0402 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0394 | 0) < ($8 | 0)) {
   $$1 = $$0379;
   $$1385 = $$0384;
   $$1403 = $$0402;
   $$2399 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2399 | 0) >= ($16 | 0)) break;
   $36 = HEAPU8[$$1 >> 0] | 0;
   $42 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($36 & 248) + 10 + ($36 << 5 & 224) + ($42 >>> 3 & 28) + ($42 << 3 & 248) | 0) > ($15 | 0)) {
    HEAP8[$$1385 >> 0] = -1;
    $52 = $$3 + ($32 << 1) | 0;
    $53 = HEAP16[$52 >> 1] | 0;
    if ($53 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $53;
     $56 = ($53 << 16 >> 16) * 7 | 0;
     $58 = $4 + 1310736 + ($56 + -7 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + 1;
     $62 = $4 + 1310736 + ($56 + -6 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$2399;
     $66 = $4 + 1310736 + ($56 + -5 << 2) | 0;
     HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $$0394;
     HEAP32[$4 + 1310736 + ($56 + -1 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $72 = HEAP16[$52 + 2 >> 1] | 0;
    $75 = HEAP16[$52 + -2 >> 1] | 0;
    $77 = $75 << 16 >> 16 > 0;
    $78 = ($75 << 16 >> 16) + -1 | 0;
    $79 = $$3 + -2 | 0;
    if ($72 << 16 >> 16 <= 0) {
     if ($77) {
      HEAP16[$$3 >> 1] = $75;
      $171 = $78 * 7 | 0;
      $172 = $4 + 1310736 + ($171 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $4 + 1310736 + ($171 + 1 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$2399;
      $180 = $4 + 1310736 + ($171 + 2 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$0394;
      $184 = $4 + 1310736 + ($171 + 4 << 2) | 0;
      if ((HEAP32[$184 >> 2] | 0) < ($$2399 | 0)) HEAP32[$184 >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($171 + 6 << 2) >> 2] = $$0394;
      $$3405 = $$1403;
      break;
     }
     $189 = HEAP16[$79 >> 1] | 0;
     if ($189 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $189;
      $192 = ($189 << 16 >> 16) * 7 | 0;
      $194 = $4 + 1310736 + ($192 + -7 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 1;
      $198 = $4 + 1310736 + ($192 + -6 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$2399;
      $202 = $4 + 1310736 + ($192 + -5 << 2) | 0;
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + $$0394;
      $205 = $192 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($205 << 2) >> 2] | 0) < ($$2399 | 0)) {
       $$2404 = $$1403;
       $$sink = $$2399;
       $$sink3 = $205;
      } else {
       $$3405 = $$1403;
       break;
      }
     } else {
      $209 = $$1403 + 1 | 0;
      if (($$1403 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $209;
      HEAP32[$4 + 1179664 + ($$1403 << 2) >> 2] = $209 << 16 >> 16;
      $214 = $$1403 * 7 | 0;
      HEAP32[$4 + 1310736 + ($214 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($214 + 1 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 2 << 2) >> 2] = $$0394;
      HEAP32[$4 + 1310736 + ($214 + 3 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 4 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 5 << 2) >> 2] = $$0394;
      $$2404 = $209;
      $$sink = $$0394;
      $$sink3 = $214 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3405 = $$2404;
     break;
    }
    $81 = ($72 << 16 >> 16) + -1 | 0;
    $82 = $4 + 1179664 + ($81 << 2) | 0;
    if ($77) {
     $83 = HEAP32[$82 >> 2] | 0;
     $85 = HEAP32[$4 + 1179664 + ($78 << 2) >> 2] | 0;
     L35 : do if (($83 | 0) > ($85 | 0)) {
      HEAP16[$$3 >> 1] = $85;
      $$0386 = $22;
      $$0390 = 0;
      while (1) {
       if (($$0390 | 0) >= ($$1403 | 0)) {
        $100 = $85;
        break L35;
       }
       if ((HEAP32[$$0386 >> 2] | 0) == ($83 | 0)) HEAP32[$$0386 >> 2] = $85;
       $$0386 = $$0386 + 4 | 0;
       $$0390 = $$0390 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $83;
      if (($83 | 0) < ($85 | 0)) {
       $$1387 = $22;
       $$1391 = 0;
       while (1) {
        if (($$1391 | 0) >= ($$1403 | 0)) {
         $100 = $83;
         break L35;
        }
        if ((HEAP32[$$1387 >> 2] | 0) == ($85 | 0)) HEAP32[$$1387 >> 2] = $83;
        $$1387 = $$1387 + 4 | 0;
        $$1391 = $$1391 + 1 | 0;
       }
      } else $100 = $83;
     } while (0);
     $102 = ($100 << 16 >> 16) * 7 | 0;
     $104 = $4 + 1310736 + ($102 + -7 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + 1;
     $108 = $4 + 1310736 + ($102 + -6 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$2399;
     $112 = $4 + 1310736 + ($102 + -5 << 2) | 0;
     HEAP32[$112 >> 2] = (HEAP32[$112 >> 2] | 0) + $$0394;
     HEAP32[$4 + 1310736 + ($102 + -1 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $117 = HEAP16[$79 >> 1] | 0;
    if ($117 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $72;
     $153 = $81 * 7 | 0;
     $154 = $4 + 1310736 + ($153 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
     $158 = $4 + 1310736 + ($153 + 1 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2399;
     $162 = $4 + 1310736 + ($153 + 2 << 2) | 0;
     HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0394;
     $166 = $4 + 1310736 + ($153 + 3 << 2) | 0;
     if ((HEAP32[$166 >> 2] | 0) > ($$2399 | 0)) HEAP32[$166 >> 2] = $$2399;
     HEAP32[$4 + 1310736 + ($153 + 6 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $120 = HEAP32[$82 >> 2] | 0;
    $123 = HEAP32[$4 + 1179664 + (($117 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($120 | 0) > ($123 | 0)) {
     HEAP16[$$3 >> 1] = $123;
     $$2388 = $22;
     $$2392 = 0;
     while (1) {
      if (($$2392 | 0) >= ($$1403 | 0)) {
       $138 = $123;
       break L58;
      }
      if ((HEAP32[$$2388 >> 2] | 0) == ($120 | 0)) HEAP32[$$2388 >> 2] = $123;
      $$2388 = $$2388 + 4 | 0;
      $$2392 = $$2392 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $120;
     if (($120 | 0) < ($123 | 0)) {
      $$3389 = $22;
      $$3393 = 0;
      while (1) {
       if (($$3393 | 0) >= ($$1403 | 0)) {
        $138 = $120;
        break L58;
       }
       if ((HEAP32[$$3389 >> 2] | 0) == ($123 | 0)) HEAP32[$$3389 >> 2] = $120;
       $$3389 = $$3389 + 4 | 0;
       $$3393 = $$3393 + 1 | 0;
      }
     } else $138 = $120;
    } while (0);
    $140 = ($138 << 16 >> 16) * 7 | 0;
    $142 = $4 + 1310736 + ($140 + -7 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
    $146 = $4 + 1310736 + ($140 + -6 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$2399;
    $150 = $4 + 1310736 + ($140 + -5 << 2) | 0;
    HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$0394;
    $$3405 = $$1403;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1385 >> 0] = 0;
    $$3405 = $$1403;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1385 = $$1385 + 1 | 0;
   $$1403 = $$3405;
   $$2399 = $$2399 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0379 = $$1 + $28 + 8 | 0;
  $$0384 = $$1385 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
  $$0402 = $$1403;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $237 = $4 + 12 | 0;
  $$1395 = 1;
  $$3400 = 1;
  $$4 = $22;
  while (1) {
   if (($$3400 | 0) > ($$0402 | 0)) break;
   $239 = HEAP32[$$4 >> 2] | 0;
   if (($239 | 0) == ($$3400 | 0)) {
    $$2396 = $$1395 + 1 | 0;
    $245 = $$1395;
   } else {
    $$2396 = $$1395;
    $245 = HEAP32[$4 + 1179664 + ($239 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $245;
   $$1395 = $$2396;
   $$3400 = $$3400 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $248 = $4 + 8 | 0;
  $249 = $$1395 + -1 | 0;
  HEAP32[$248 >> 2] = $249;
  if (!$249) $$0 = 0; else {
   _memset($237 | 0, 0, $249 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $249 << 4 | 0) | 0;
   $$4401 = 0;
   $255 = $249;
   while (1) {
    if (($$4401 | 0) >= ($255 | 0)) {
     $$5 = 0;
     break;
    }
    $256 = $$4401 << 2;
    HEAP32[$4 + 131084 + ($256 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($256 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($256 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($256 | 3) << 2) >> 2] = 0;
    $$4401 = $$4401 + 1 | 0;
    $255 = HEAP32[$248 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0402 | 0)) {
     $$6 = 0;
     break;
    }
    $268 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $269 = $$5 * 7 | 0;
    $272 = $4 + 12 + ($268 << 2) | 0;
    HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($269 << 2) >> 2] | 0);
    $279 = $268 << 1;
    $280 = $4 + 655376 + ($279 << 3) | 0;
    HEAPF64[$280 >> 3] = +HEAPF64[$280 >> 3] + +(HEAP32[$4 + 1310736 + ($269 + 1 << 2) >> 2] | 0);
    $288 = $4 + 655376 + (($279 | 1) << 3) | 0;
    HEAPF64[$288 >> 3] = +HEAPF64[$288 >> 3] + +(HEAP32[$4 + 1310736 + ($269 + 2 << 2) >> 2] | 0);
    $291 = $268 << 2;
    $292 = $4 + 131084 + ($291 << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($269 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($291 | 1) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($269 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $306 = $4 + 131084 + (($291 | 2) << 2) | 0;
    $310 = HEAP32[$4 + 1310736 + ($269 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$306 >> 2] | 0) > ($310 | 0)) HEAP32[$306 >> 2] = $310;
    $313 = $4 + 131084 + (($291 | 3) << 2) | 0;
    $317 = HEAP32[$4 + 1310736 + ($269 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$313 >> 2] | 0) < ($317 | 0)) HEAP32[$313 >> 2] = $317;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$248 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $322 = $4 + 12 + ($$6 << 2) | 0;
    $325 = $$6 << 1;
    $326 = $4 + 655376 + ($325 << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $332 = $4 + 655376 + (($325 | 1) << 3) | 0;
    HEAPF64[$332 >> 3] = +HEAPF64[$332 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3C565($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0379 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0386 = 0, $$0390 = 0, $$0394 = 0, $$0397 = 0, $$0402 = 0, $$1 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1387 = 0, $$1391 = 0, $$1395 = 0, $$1398 = 0, $$1403 = 0, $$2 = 0, $$2388 = 0, $$2392 = 0, $$2396 = 0, $$2399 = 0, $$2404 = 0, $$3 = 0, $$3389 = 0, $$3393 = 0, $$3400 = 0, $$3405 = 0, $$4 = 0, $$4401 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $112 = 0, $117 = 0, $120 = 0, $123 = 0, $138 = 0, $140 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $153 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $171 = 0, $172 = 0, $176 = 0, $180 = 0, $184 = 0, $189 = 0, $192 = 0, $194 = 0, $198 = 0, $202 = 0, $205 = 0, $209 = 0, $214 = 0, $22 = 0, $23 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $255 = 0, $256 = 0, $268 = 0, $269 = 0, $272 = 0, $279 = 0, $28 = 0, $280 = 0, $288 = 0, $291 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $306 = 0, $310 = 0, $313 = 0, $317 = 0, $32 = 0, $322 = 0, $325 = 0, $326 = 0, $332 = 0, $36 = 0, $42 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $72 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0380 = $7;
 $$0382 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0397 = 0;
 while (1) {
  if (($$0397 | 0) >= ($5 | 0)) break;
  HEAP16[$$0382 >> 1] = 0;
  HEAP16[$$0380 >> 1] = 0;
  $$0380 = $$0380 + 2 | 0;
  $$0382 = $$0382 + 2 | 0;
  $$0397 = $$0397 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1381 = $7;
 $$1383 = $7 + ($16 << 1) | 0;
 $$1398 = 0;
 while (1) {
  if (($$1398 | 0) >= ($6 | 0)) break;
  HEAP16[$$1383 >> 1] = 0;
  HEAP16[$$1381 >> 1] = 0;
  $$1381 = $$1381 + ($5 << 1) | 0;
  $$1383 = $$1383 + ($5 << 1) | 0;
  $$1398 = $$1398 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $28 = $1 << 1;
 $32 = 0 - $5 | 0;
 $$0379 = $0 + (($1 << 2) + 4) | 0;
 $$0384 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0394 = 1;
 $$0402 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0394 | 0) < ($8 | 0)) {
   $$1 = $$0379;
   $$1385 = $$0384;
   $$1403 = $$0402;
   $$2399 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2399 | 0) >= ($16 | 0)) break;
   $36 = HEAPU8[$$1 >> 0] | 0;
   $42 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($36 & 248) + 10 + ($36 << 5 & 224) + ($42 >>> 3 & 28) + ($42 << 3 & 248) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1385 >> 0] = 0;
    $$3405 = $$1403;
   } else {
    HEAP8[$$1385 >> 0] = -1;
    $52 = $$3 + ($32 << 1) | 0;
    $53 = HEAP16[$52 >> 1] | 0;
    if ($53 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $53;
     $56 = ($53 << 16 >> 16) * 7 | 0;
     $58 = $4 + 1310736 + ($56 + -7 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + 1;
     $62 = $4 + 1310736 + ($56 + -6 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$2399;
     $66 = $4 + 1310736 + ($56 + -5 << 2) | 0;
     HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $$0394;
     HEAP32[$4 + 1310736 + ($56 + -1 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $72 = HEAP16[$52 + 2 >> 1] | 0;
    $75 = HEAP16[$52 + -2 >> 1] | 0;
    $77 = $75 << 16 >> 16 > 0;
    $78 = ($75 << 16 >> 16) + -1 | 0;
    $79 = $$3 + -2 | 0;
    if ($72 << 16 >> 16 <= 0) {
     if ($77) {
      HEAP16[$$3 >> 1] = $75;
      $171 = $78 * 7 | 0;
      $172 = $4 + 1310736 + ($171 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $4 + 1310736 + ($171 + 1 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$2399;
      $180 = $4 + 1310736 + ($171 + 2 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$0394;
      $184 = $4 + 1310736 + ($171 + 4 << 2) | 0;
      if ((HEAP32[$184 >> 2] | 0) < ($$2399 | 0)) HEAP32[$184 >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($171 + 6 << 2) >> 2] = $$0394;
      $$3405 = $$1403;
      break;
     }
     $189 = HEAP16[$79 >> 1] | 0;
     if ($189 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $189;
      $192 = ($189 << 16 >> 16) * 7 | 0;
      $194 = $4 + 1310736 + ($192 + -7 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 1;
      $198 = $4 + 1310736 + ($192 + -6 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$2399;
      $202 = $4 + 1310736 + ($192 + -5 << 2) | 0;
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + $$0394;
      $205 = $192 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($205 << 2) >> 2] | 0) < ($$2399 | 0)) {
       $$2404 = $$1403;
       $$sink = $$2399;
       $$sink3 = $205;
      } else {
       $$3405 = $$1403;
       break;
      }
     } else {
      $209 = $$1403 + 1 | 0;
      if (($$1403 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $209;
      HEAP32[$4 + 1179664 + ($$1403 << 2) >> 2] = $209 << 16 >> 16;
      $214 = $$1403 * 7 | 0;
      HEAP32[$4 + 1310736 + ($214 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($214 + 1 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 2 << 2) >> 2] = $$0394;
      HEAP32[$4 + 1310736 + ($214 + 3 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 4 << 2) >> 2] = $$2399;
      HEAP32[$4 + 1310736 + ($214 + 5 << 2) >> 2] = $$0394;
      $$2404 = $209;
      $$sink = $$0394;
      $$sink3 = $214 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3405 = $$2404;
     break;
    }
    $81 = ($72 << 16 >> 16) + -1 | 0;
    $82 = $4 + 1179664 + ($81 << 2) | 0;
    if ($77) {
     $83 = HEAP32[$82 >> 2] | 0;
     $85 = HEAP32[$4 + 1179664 + ($78 << 2) >> 2] | 0;
     L36 : do if (($83 | 0) > ($85 | 0)) {
      HEAP16[$$3 >> 1] = $85;
      $$0386 = $22;
      $$0390 = 0;
      while (1) {
       if (($$0390 | 0) >= ($$1403 | 0)) {
        $100 = $85;
        break L36;
       }
       if ((HEAP32[$$0386 >> 2] | 0) == ($83 | 0)) HEAP32[$$0386 >> 2] = $85;
       $$0386 = $$0386 + 4 | 0;
       $$0390 = $$0390 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $83;
      if (($83 | 0) < ($85 | 0)) {
       $$1387 = $22;
       $$1391 = 0;
       while (1) {
        if (($$1391 | 0) >= ($$1403 | 0)) {
         $100 = $83;
         break L36;
        }
        if ((HEAP32[$$1387 >> 2] | 0) == ($85 | 0)) HEAP32[$$1387 >> 2] = $83;
        $$1387 = $$1387 + 4 | 0;
        $$1391 = $$1391 + 1 | 0;
       }
      } else $100 = $83;
     } while (0);
     $102 = ($100 << 16 >> 16) * 7 | 0;
     $104 = $4 + 1310736 + ($102 + -7 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + 1;
     $108 = $4 + 1310736 + ($102 + -6 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$2399;
     $112 = $4 + 1310736 + ($102 + -5 << 2) | 0;
     HEAP32[$112 >> 2] = (HEAP32[$112 >> 2] | 0) + $$0394;
     HEAP32[$4 + 1310736 + ($102 + -1 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $117 = HEAP16[$79 >> 1] | 0;
    if ($117 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $72;
     $153 = $81 * 7 | 0;
     $154 = $4 + 1310736 + ($153 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
     $158 = $4 + 1310736 + ($153 + 1 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2399;
     $162 = $4 + 1310736 + ($153 + 2 << 2) | 0;
     HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0394;
     $166 = $4 + 1310736 + ($153 + 3 << 2) | 0;
     if ((HEAP32[$166 >> 2] | 0) > ($$2399 | 0)) HEAP32[$166 >> 2] = $$2399;
     HEAP32[$4 + 1310736 + ($153 + 6 << 2) >> 2] = $$0394;
     $$3405 = $$1403;
     break;
    }
    $120 = HEAP32[$82 >> 2] | 0;
    $123 = HEAP32[$4 + 1179664 + (($117 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($120 | 0) > ($123 | 0)) {
     HEAP16[$$3 >> 1] = $123;
     $$2388 = $22;
     $$2392 = 0;
     while (1) {
      if (($$2392 | 0) >= ($$1403 | 0)) {
       $138 = $123;
       break L59;
      }
      if ((HEAP32[$$2388 >> 2] | 0) == ($120 | 0)) HEAP32[$$2388 >> 2] = $123;
      $$2388 = $$2388 + 4 | 0;
      $$2392 = $$2392 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $120;
     if (($120 | 0) < ($123 | 0)) {
      $$3389 = $22;
      $$3393 = 0;
      while (1) {
       if (($$3393 | 0) >= ($$1403 | 0)) {
        $138 = $120;
        break L59;
       }
       if ((HEAP32[$$3389 >> 2] | 0) == ($123 | 0)) HEAP32[$$3389 >> 2] = $120;
       $$3389 = $$3389 + 4 | 0;
       $$3393 = $$3393 + 1 | 0;
      }
     } else $138 = $120;
    } while (0);
    $140 = ($138 << 16 >> 16) * 7 | 0;
    $142 = $4 + 1310736 + ($140 + -7 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
    $146 = $4 + 1310736 + ($140 + -6 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$2399;
    $150 = $4 + 1310736 + ($140 + -5 << 2) | 0;
    HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$0394;
    $$3405 = $$1403;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1385 = $$1385 + 1 | 0;
   $$1403 = $$3405;
   $$2399 = $$2399 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0379 = $$1 + $28 + 8 | 0;
  $$0384 = $$1385 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
  $$0402 = $$1403;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $237 = $4 + 12 | 0;
  $$1395 = 1;
  $$3400 = 1;
  $$4 = $22;
  while (1) {
   if (($$3400 | 0) > ($$0402 | 0)) break;
   $239 = HEAP32[$$4 >> 2] | 0;
   if (($239 | 0) == ($$3400 | 0)) {
    $$2396 = $$1395 + 1 | 0;
    $245 = $$1395;
   } else {
    $$2396 = $$1395;
    $245 = HEAP32[$4 + 1179664 + ($239 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $245;
   $$1395 = $$2396;
   $$3400 = $$3400 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $248 = $4 + 8 | 0;
  $249 = $$1395 + -1 | 0;
  HEAP32[$248 >> 2] = $249;
  if (!$249) $$0 = 0; else {
   _memset($237 | 0, 0, $249 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $249 << 4 | 0) | 0;
   $$4401 = 0;
   $255 = $249;
   while (1) {
    if (($$4401 | 0) >= ($255 | 0)) {
     $$5 = 0;
     break;
    }
    $256 = $$4401 << 2;
    HEAP32[$4 + 131084 + ($256 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($256 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($256 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($256 | 3) << 2) >> 2] = 0;
    $$4401 = $$4401 + 1 | 0;
    $255 = HEAP32[$248 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0402 | 0)) {
     $$6 = 0;
     break;
    }
    $268 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $269 = $$5 * 7 | 0;
    $272 = $4 + 12 + ($268 << 2) | 0;
    HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($269 << 2) >> 2] | 0);
    $279 = $268 << 1;
    $280 = $4 + 655376 + ($279 << 3) | 0;
    HEAPF64[$280 >> 3] = +HEAPF64[$280 >> 3] + +(HEAP32[$4 + 1310736 + ($269 + 1 << 2) >> 2] | 0);
    $288 = $4 + 655376 + (($279 | 1) << 3) | 0;
    HEAPF64[$288 >> 3] = +HEAPF64[$288 >> 3] + +(HEAP32[$4 + 1310736 + ($269 + 2 << 2) >> 2] | 0);
    $291 = $268 << 2;
    $292 = $4 + 131084 + ($291 << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($269 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($291 | 1) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($269 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $306 = $4 + 131084 + (($291 | 2) << 2) | 0;
    $310 = HEAP32[$4 + 1310736 + ($269 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$306 >> 2] | 0) > ($310 | 0)) HEAP32[$306 >> 2] = $310;
    $313 = $4 + 131084 + (($291 | 3) << 2) | 0;
    $317 = HEAP32[$4 + 1310736 + ($269 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$313 >> 2] | 0) < ($317 | 0)) HEAP32[$313 >> 2] = $317;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$248 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $322 = $4 + 12 + ($$6 << 2) | 0;
    $325 = $$6 << 1;
    $326 = $4 + 655376 + ($325 << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $332 = $4 + 655376 + (($325 | 1) << 3) | 0;
    HEAPF64[$332 >> 3] = +HEAPF64[$332 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWI3CA4444($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0378 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0385 = 0, $$0389 = 0, $$0393 = 0, $$0396 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1386 = 0, $$1390 = 0, $$1394 = 0, $$1397 = 0, $$1402 = 0, $$2 = 0, $$2387 = 0, $$2391 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3 = 0, $$3388 = 0, $$3392 = 0, $$3399 = 0, $$3404 = 0, $$4 = 0, $$4400 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $108 = 0, $113 = 0, $116 = 0, $119 = 0, $134 = 0, $136 = 0, $138 = 0, $142 = 0, $146 = 0, $149 = 0, $15 = 0, $150 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $167 = 0, $168 = 0, $172 = 0, $176 = 0, $180 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $201 = 0, $205 = 0, $210 = 0, $22 = 0, $23 = 0, $233 = 0, $235 = 0, $241 = 0, $244 = 0, $245 = 0, $251 = 0, $252 = 0, $264 = 0, $265 = 0, $268 = 0, $275 = 0, $276 = 0, $28 = 0, $284 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $318 = 0, $32 = 0, $321 = 0, $322 = 0, $328 = 0, $36 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $68 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0379 = $7;
 $$0381 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0396 = 0;
 while (1) {
  if (($$0396 | 0) >= ($5 | 0)) break;
  HEAP16[$$0381 >> 1] = 0;
  HEAP16[$$0379 >> 1] = 0;
  $$0379 = $$0379 + 2 | 0;
  $$0381 = $$0381 + 2 | 0;
  $$0396 = $$0396 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1380 = $7;
 $$1382 = $7 + ($16 << 1) | 0;
 $$1397 = 0;
 while (1) {
  if (($$1397 | 0) >= ($6 | 0)) break;
  HEAP16[$$1382 >> 1] = 0;
  HEAP16[$$1380 >> 1] = 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1382 = $$1382 + ($5 << 1) | 0;
  $$1397 = $$1397 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $28 = $1 << 1;
 $32 = 0 - $5 | 0;
 $$0378 = $0 + (($1 << 2) + 4) | 0;
 $$0383 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0393 = 1;
 $$0401 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0393 | 0) < ($8 | 0)) {
   $$1 = $$0378;
   $$1384 = $$0383;
   $$1402 = $$0401;
   $$2398 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2398 | 0) >= ($16 | 0)) break;
   $36 = HEAPU8[$$1 >> 0] | 0;
   do if ((($36 & 240) + 24 + ($36 << 4 & 240) + (HEAP8[$$1 + 1 >> 0] & -16 & 255) | 0) > ($15 | 0)) {
    HEAP8[$$1384 >> 0] = -1;
    $48 = $$3 + ($32 << 1) | 0;
    $49 = HEAP16[$48 >> 1] | 0;
    if ($49 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $49;
     $52 = ($49 << 16 >> 16) * 7 | 0;
     $54 = $4 + 1310736 + ($52 + -7 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + 1;
     $58 = $4 + 1310736 + ($52 + -6 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$2398;
     $62 = $4 + 1310736 + ($52 + -5 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($52 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $68 = HEAP16[$48 + 2 >> 1] | 0;
    $71 = HEAP16[$48 + -2 >> 1] | 0;
    $73 = $71 << 16 >> 16 > 0;
    $74 = ($71 << 16 >> 16) + -1 | 0;
    $75 = $$3 + -2 | 0;
    if ($68 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$$3 >> 1] = $71;
      $167 = $74 * 7 | 0;
      $168 = $4 + 1310736 + ($167 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $4 + 1310736 + ($167 + 1 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$2398;
      $176 = $4 + 1310736 + ($167 + 2 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$0393;
      $180 = $4 + 1310736 + ($167 + 4 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($$2398 | 0)) HEAP32[$180 >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($167 + 6 << 2) >> 2] = $$0393;
      $$3404 = $$1402;
      break;
     }
     $185 = HEAP16[$75 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $4 + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $4 + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$2398;
      $198 = $4 + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$0393;
      $201 = $188 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($201 << 2) >> 2] | 0) < ($$2398 | 0)) {
       $$2403 = $$1402;
       $$sink = $$2398;
       $$sink3 = $201;
      } else {
       $$3404 = $$1402;
       break;
      }
     } else {
      $205 = $$1402 + 1 | 0;
      if (($$1402 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $205;
      HEAP32[$4 + 1179664 + ($$1402 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $$1402 * 7 | 0;
      HEAP32[$4 + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($210 + 1 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($210 + 2 << 2) >> 2] = $$0393;
      HEAP32[$4 + 1310736 + ($210 + 3 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($210 + 4 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($210 + 5 << 2) >> 2] = $$0393;
      $$2403 = $205;
      $$sink = $$0393;
      $$sink3 = $210 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3404 = $$2403;
     break;
    }
    $77 = ($68 << 16 >> 16) + -1 | 0;
    $78 = $4 + 1179664 + ($77 << 2) | 0;
    if ($73) {
     $79 = HEAP32[$78 >> 2] | 0;
     $81 = HEAP32[$4 + 1179664 + ($74 << 2) >> 2] | 0;
     L35 : do if (($79 | 0) > ($81 | 0)) {
      HEAP16[$$3 >> 1] = $81;
      $$0385 = $22;
      $$0389 = 0;
      while (1) {
       if (($$0389 | 0) >= ($$1402 | 0)) {
        $96 = $81;
        break L35;
       }
       if ((HEAP32[$$0385 >> 2] | 0) == ($79 | 0)) HEAP32[$$0385 >> 2] = $81;
       $$0385 = $$0385 + 4 | 0;
       $$0389 = $$0389 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $79;
      if (($79 | 0) < ($81 | 0)) {
       $$1386 = $22;
       $$1390 = 0;
       while (1) {
        if (($$1390 | 0) >= ($$1402 | 0)) {
         $96 = $79;
         break L35;
        }
        if ((HEAP32[$$1386 >> 2] | 0) == ($81 | 0)) HEAP32[$$1386 >> 2] = $79;
        $$1386 = $$1386 + 4 | 0;
        $$1390 = $$1390 + 1 | 0;
       }
      } else $96 = $79;
     } while (0);
     $98 = ($96 << 16 >> 16) * 7 | 0;
     $100 = $4 + 1310736 + ($98 + -7 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + 1;
     $104 = $4 + 1310736 + ($98 + -6 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$2398;
     $108 = $4 + 1310736 + ($98 + -5 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($98 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $113 = HEAP16[$75 >> 1] | 0;
    if ($113 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $68;
     $149 = $77 * 7 | 0;
     $150 = $4 + 1310736 + ($149 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
     $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2398;
     $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0393;
     $162 = $4 + 1310736 + ($149 + 3 << 2) | 0;
     if ((HEAP32[$162 >> 2] | 0) > ($$2398 | 0)) HEAP32[$162 >> 2] = $$2398;
     HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $116 = HEAP32[$78 >> 2] | 0;
    $119 = HEAP32[$4 + 1179664 + (($113 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($116 | 0) > ($119 | 0)) {
     HEAP16[$$3 >> 1] = $119;
     $$2387 = $22;
     $$2391 = 0;
     while (1) {
      if (($$2391 | 0) >= ($$1402 | 0)) {
       $134 = $119;
       break L58;
      }
      if ((HEAP32[$$2387 >> 2] | 0) == ($116 | 0)) HEAP32[$$2387 >> 2] = $119;
      $$2387 = $$2387 + 4 | 0;
      $$2391 = $$2391 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $116;
     if (($116 | 0) < ($119 | 0)) {
      $$3388 = $22;
      $$3392 = 0;
      while (1) {
       if (($$3392 | 0) >= ($$1402 | 0)) {
        $134 = $116;
        break L58;
       }
       if ((HEAP32[$$3388 >> 2] | 0) == ($119 | 0)) HEAP32[$$3388 >> 2] = $116;
       $$3388 = $$3388 + 4 | 0;
       $$3392 = $$3392 + 1 | 0;
      }
     } else $134 = $116;
    } while (0);
    $136 = ($134 << 16 >> 16) * 7 | 0;
    $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
    $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2398;
    $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0393;
    $$3404 = $$1402;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1384 >> 0] = 0;
    $$3404 = $$1402;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1384 = $$1384 + 1 | 0;
   $$1402 = $$3404;
   $$2398 = $$2398 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0378 = $$1 + $28 + 8 | 0;
  $$0383 = $$1384 + 2 | 0;
  $$0393 = $$0393 + 1 | 0;
  $$0401 = $$1402;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $233 = $4 + 12 | 0;
  $$1394 = 1;
  $$3399 = 1;
  $$4 = $22;
  while (1) {
   if (($$3399 | 0) > ($$0401 | 0)) break;
   $235 = HEAP32[$$4 >> 2] | 0;
   if (($235 | 0) == ($$3399 | 0)) {
    $$2395 = $$1394 + 1 | 0;
    $241 = $$1394;
   } else {
    $$2395 = $$1394;
    $241 = HEAP32[$4 + 1179664 + ($235 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $241;
   $$1394 = $$2395;
   $$3399 = $$3399 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $244 = $4 + 8 | 0;
  $245 = $$1394 + -1 | 0;
  HEAP32[$244 >> 2] = $245;
  if (!$245) $$0 = 0; else {
   _memset($233 | 0, 0, $245 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $245 << 4 | 0) | 0;
   $$4400 = 0;
   $251 = $245;
   while (1) {
    if (($$4400 | 0) >= ($251 | 0)) {
     $$5 = 0;
     break;
    }
    $252 = $$4400 << 2;
    HEAP32[$4 + 131084 + ($252 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($252 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($252 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($252 | 3) << 2) >> 2] = 0;
    $$4400 = $$4400 + 1 | 0;
    $251 = HEAP32[$244 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0401 | 0)) {
     $$6 = 0;
     break;
    }
    $264 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $265 = $$5 * 7 | 0;
    $268 = $4 + 12 + ($264 << 2) | 0;
    HEAP32[$268 >> 2] = (HEAP32[$268 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($265 << 2) >> 2] | 0);
    $275 = $264 << 1;
    $276 = $4 + 655376 + ($275 << 3) | 0;
    HEAPF64[$276 >> 3] = +HEAPF64[$276 >> 3] + +(HEAP32[$4 + 1310736 + ($265 + 1 << 2) >> 2] | 0);
    $284 = $4 + 655376 + (($275 | 1) << 3) | 0;
    HEAPF64[$284 >> 3] = +HEAPF64[$284 >> 3] + +(HEAP32[$4 + 1310736 + ($265 + 2 << 2) >> 2] | 0);
    $287 = $264 << 2;
    $288 = $4 + 131084 + ($287 << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($265 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) > ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($287 | 1) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($265 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) < ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($287 | 2) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($265 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) > ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $309 = $4 + 131084 + (($287 | 3) << 2) | 0;
    $313 = HEAP32[$4 + 1310736 + ($265 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$309 >> 2] | 0) < ($313 | 0)) HEAP32[$309 >> 2] = $313;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$244 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $318 = $4 + 12 + ($$6 << 2) | 0;
    $321 = $$6 << 1;
    $322 = $4 + 655376 + ($321 << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$318 >> 2] | 0);
    $328 = $4 + 655376 + (($321 | 1) << 3) | 0;
    HEAPF64[$328 >> 3] = +HEAPF64[$328 >> 3] / +(HEAP32[$318 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3CA4444($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0378 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0385 = 0, $$0389 = 0, $$0393 = 0, $$0396 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1386 = 0, $$1390 = 0, $$1394 = 0, $$1397 = 0, $$1402 = 0, $$2 = 0, $$2387 = 0, $$2391 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3 = 0, $$3388 = 0, $$3392 = 0, $$3399 = 0, $$3404 = 0, $$4 = 0, $$4400 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $108 = 0, $113 = 0, $116 = 0, $119 = 0, $134 = 0, $136 = 0, $138 = 0, $142 = 0, $146 = 0, $149 = 0, $15 = 0, $150 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $167 = 0, $168 = 0, $172 = 0, $176 = 0, $180 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $201 = 0, $205 = 0, $210 = 0, $22 = 0, $23 = 0, $233 = 0, $235 = 0, $241 = 0, $244 = 0, $245 = 0, $251 = 0, $252 = 0, $264 = 0, $265 = 0, $268 = 0, $275 = 0, $276 = 0, $28 = 0, $284 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $318 = 0, $32 = 0, $321 = 0, $322 = 0, $328 = 0, $36 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $68 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0379 = $7;
 $$0381 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0396 = 0;
 while (1) {
  if (($$0396 | 0) >= ($5 | 0)) break;
  HEAP16[$$0381 >> 1] = 0;
  HEAP16[$$0379 >> 1] = 0;
  $$0379 = $$0379 + 2 | 0;
  $$0381 = $$0381 + 2 | 0;
  $$0396 = $$0396 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1380 = $7;
 $$1382 = $7 + ($16 << 1) | 0;
 $$1397 = 0;
 while (1) {
  if (($$1397 | 0) >= ($6 | 0)) break;
  HEAP16[$$1382 >> 1] = 0;
  HEAP16[$$1380 >> 1] = 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1382 = $$1382 + ($5 << 1) | 0;
  $$1397 = $$1397 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $28 = $1 << 1;
 $32 = 0 - $5 | 0;
 $$0378 = $0 + (($1 << 2) + 4) | 0;
 $$0383 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0393 = 1;
 $$0401 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0393 | 0) < ($8 | 0)) {
   $$1 = $$0378;
   $$1384 = $$0383;
   $$1402 = $$0401;
   $$2398 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2398 | 0) >= ($16 | 0)) break;
   $36 = HEAPU8[$$1 >> 0] | 0;
   do if ((($36 & 240) + 24 + ($36 << 4 & 240) + (HEAP8[$$1 + 1 >> 0] & -16 & 255) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1384 >> 0] = 0;
    $$3404 = $$1402;
   } else {
    HEAP8[$$1384 >> 0] = -1;
    $48 = $$3 + ($32 << 1) | 0;
    $49 = HEAP16[$48 >> 1] | 0;
    if ($49 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $49;
     $52 = ($49 << 16 >> 16) * 7 | 0;
     $54 = $4 + 1310736 + ($52 + -7 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + 1;
     $58 = $4 + 1310736 + ($52 + -6 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$2398;
     $62 = $4 + 1310736 + ($52 + -5 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($52 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $68 = HEAP16[$48 + 2 >> 1] | 0;
    $71 = HEAP16[$48 + -2 >> 1] | 0;
    $73 = $71 << 16 >> 16 > 0;
    $74 = ($71 << 16 >> 16) + -1 | 0;
    $75 = $$3 + -2 | 0;
    if ($68 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$$3 >> 1] = $71;
      $167 = $74 * 7 | 0;
      $168 = $4 + 1310736 + ($167 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $4 + 1310736 + ($167 + 1 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$2398;
      $176 = $4 + 1310736 + ($167 + 2 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$0393;
      $180 = $4 + 1310736 + ($167 + 4 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($$2398 | 0)) HEAP32[$180 >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($167 + 6 << 2) >> 2] = $$0393;
      $$3404 = $$1402;
      break;
     }
     $185 = HEAP16[$75 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $4 + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $4 + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$2398;
      $198 = $4 + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$0393;
      $201 = $188 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($201 << 2) >> 2] | 0) < ($$2398 | 0)) {
       $$2403 = $$1402;
       $$sink = $$2398;
       $$sink3 = $201;
      } else {
       $$3404 = $$1402;
       break;
      }
     } else {
      $205 = $$1402 + 1 | 0;
      if (($$1402 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $205;
      HEAP32[$4 + 1179664 + ($$1402 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $$1402 * 7 | 0;
      HEAP32[$4 + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($210 + 1 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($210 + 2 << 2) >> 2] = $$0393;
      HEAP32[$4 + 1310736 + ($210 + 3 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($210 + 4 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($210 + 5 << 2) >> 2] = $$0393;
      $$2403 = $205;
      $$sink = $$0393;
      $$sink3 = $210 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3404 = $$2403;
     break;
    }
    $77 = ($68 << 16 >> 16) + -1 | 0;
    $78 = $4 + 1179664 + ($77 << 2) | 0;
    if ($73) {
     $79 = HEAP32[$78 >> 2] | 0;
     $81 = HEAP32[$4 + 1179664 + ($74 << 2) >> 2] | 0;
     L36 : do if (($79 | 0) > ($81 | 0)) {
      HEAP16[$$3 >> 1] = $81;
      $$0385 = $22;
      $$0389 = 0;
      while (1) {
       if (($$0389 | 0) >= ($$1402 | 0)) {
        $96 = $81;
        break L36;
       }
       if ((HEAP32[$$0385 >> 2] | 0) == ($79 | 0)) HEAP32[$$0385 >> 2] = $81;
       $$0385 = $$0385 + 4 | 0;
       $$0389 = $$0389 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $79;
      if (($79 | 0) < ($81 | 0)) {
       $$1386 = $22;
       $$1390 = 0;
       while (1) {
        if (($$1390 | 0) >= ($$1402 | 0)) {
         $96 = $79;
         break L36;
        }
        if ((HEAP32[$$1386 >> 2] | 0) == ($81 | 0)) HEAP32[$$1386 >> 2] = $79;
        $$1386 = $$1386 + 4 | 0;
        $$1390 = $$1390 + 1 | 0;
       }
      } else $96 = $79;
     } while (0);
     $98 = ($96 << 16 >> 16) * 7 | 0;
     $100 = $4 + 1310736 + ($98 + -7 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + 1;
     $104 = $4 + 1310736 + ($98 + -6 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$2398;
     $108 = $4 + 1310736 + ($98 + -5 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($98 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $113 = HEAP16[$75 >> 1] | 0;
    if ($113 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $68;
     $149 = $77 * 7 | 0;
     $150 = $4 + 1310736 + ($149 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
     $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2398;
     $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0393;
     $162 = $4 + 1310736 + ($149 + 3 << 2) | 0;
     if ((HEAP32[$162 >> 2] | 0) > ($$2398 | 0)) HEAP32[$162 >> 2] = $$2398;
     HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $116 = HEAP32[$78 >> 2] | 0;
    $119 = HEAP32[$4 + 1179664 + (($113 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($116 | 0) > ($119 | 0)) {
     HEAP16[$$3 >> 1] = $119;
     $$2387 = $22;
     $$2391 = 0;
     while (1) {
      if (($$2391 | 0) >= ($$1402 | 0)) {
       $134 = $119;
       break L59;
      }
      if ((HEAP32[$$2387 >> 2] | 0) == ($116 | 0)) HEAP32[$$2387 >> 2] = $119;
      $$2387 = $$2387 + 4 | 0;
      $$2391 = $$2391 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $116;
     if (($116 | 0) < ($119 | 0)) {
      $$3388 = $22;
      $$3392 = 0;
      while (1) {
       if (($$3392 | 0) >= ($$1402 | 0)) {
        $134 = $116;
        break L59;
       }
       if ((HEAP32[$$3388 >> 2] | 0) == ($119 | 0)) HEAP32[$$3388 >> 2] = $116;
       $$3388 = $$3388 + 4 | 0;
       $$3392 = $$3392 + 1 | 0;
      }
     } else $134 = $116;
    } while (0);
    $136 = ($134 << 16 >> 16) * 7 | 0;
    $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
    $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2398;
    $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0393;
    $$3404 = $$1402;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1384 = $$1384 + 1 | 0;
   $$1402 = $$3404;
   $$2398 = $$2398 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0378 = $$1 + $28 + 8 | 0;
  $$0383 = $$1384 + 2 | 0;
  $$0393 = $$0393 + 1 | 0;
  $$0401 = $$1402;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $233 = $4 + 12 | 0;
  $$1394 = 1;
  $$3399 = 1;
  $$4 = $22;
  while (1) {
   if (($$3399 | 0) > ($$0401 | 0)) break;
   $235 = HEAP32[$$4 >> 2] | 0;
   if (($235 | 0) == ($$3399 | 0)) {
    $$2395 = $$1394 + 1 | 0;
    $241 = $$1394;
   } else {
    $$2395 = $$1394;
    $241 = HEAP32[$4 + 1179664 + ($235 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $241;
   $$1394 = $$2395;
   $$3399 = $$3399 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $244 = $4 + 8 | 0;
  $245 = $$1394 + -1 | 0;
  HEAP32[$244 >> 2] = $245;
  if (!$245) $$0 = 0; else {
   _memset($233 | 0, 0, $245 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $245 << 4 | 0) | 0;
   $$4400 = 0;
   $251 = $245;
   while (1) {
    if (($$4400 | 0) >= ($251 | 0)) {
     $$5 = 0;
     break;
    }
    $252 = $$4400 << 2;
    HEAP32[$4 + 131084 + ($252 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($252 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($252 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($252 | 3) << 2) >> 2] = 0;
    $$4400 = $$4400 + 1 | 0;
    $251 = HEAP32[$244 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0401 | 0)) {
     $$6 = 0;
     break;
    }
    $264 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $265 = $$5 * 7 | 0;
    $268 = $4 + 12 + ($264 << 2) | 0;
    HEAP32[$268 >> 2] = (HEAP32[$268 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($265 << 2) >> 2] | 0);
    $275 = $264 << 1;
    $276 = $4 + 655376 + ($275 << 3) | 0;
    HEAPF64[$276 >> 3] = +HEAPF64[$276 >> 3] + +(HEAP32[$4 + 1310736 + ($265 + 1 << 2) >> 2] | 0);
    $284 = $4 + 655376 + (($275 | 1) << 3) | 0;
    HEAPF64[$284 >> 3] = +HEAPF64[$284 >> 3] + +(HEAP32[$4 + 1310736 + ($265 + 2 << 2) >> 2] | 0);
    $287 = $264 << 2;
    $288 = $4 + 131084 + ($287 << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($265 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) > ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($287 | 1) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($265 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) < ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($287 | 2) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($265 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) > ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $309 = $4 + 131084 + (($287 | 3) << 2) | 0;
    $313 = HEAP32[$4 + 1310736 + ($265 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$309 >> 2] | 0) < ($313 | 0)) HEAP32[$309 >> 2] = $313;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$244 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $318 = $4 + 12 + ($$6 << 2) | 0;
    $321 = $$6 << 1;
    $322 = $4 + 655376 + ($321 << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$318 >> 2] | 0);
    $328 = $4 + 655376 + (($321 | 1) << 3) | 0;
    HEAPF64[$328 >> 3] = +HEAPF64[$328 >> 3] / +(HEAP32[$318 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWI3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0378 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0385 = 0, $$0389 = 0, $$0393 = 0, $$0396 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1386 = 0, $$1390 = 0, $$1394 = 0, $$1397 = 0, $$1402 = 0, $$2 = 0, $$2387 = 0, $$2391 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3 = 0, $$3388 = 0, $$3392 = 0, $$3399 = 0, $$3404 = 0, $$4 = 0, $$4400 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $106 = 0, $111 = 0, $114 = 0, $117 = 0, $132 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $147 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $165 = 0, $166 = 0, $170 = 0, $174 = 0, $178 = 0, $183 = 0, $186 = 0, $188 = 0, $192 = 0, $196 = 0, $199 = 0, $203 = 0, $208 = 0, $22 = 0, $23 = 0, $231 = 0, $233 = 0, $239 = 0, $242 = 0, $243 = 0, $249 = 0, $250 = 0, $262 = 0, $263 = 0, $266 = 0, $273 = 0, $274 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $300 = 0, $304 = 0, $307 = 0, $31 = 0, $311 = 0, $316 = 0, $319 = 0, $32 = 0, $320 = 0, $326 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $6 = 0, $60 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $94 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0379 = $7;
 $$0381 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0396 = 0;
 while (1) {
  if (($$0396 | 0) >= ($5 | 0)) break;
  HEAP16[$$0381 >> 1] = 0;
  HEAP16[$$0379 >> 1] = 0;
  $$0379 = $$0379 + 2 | 0;
  $$0381 = $$0381 + 2 | 0;
  $$0396 = $$0396 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1380 = $7;
 $$1382 = $7 + ($16 << 1) | 0;
 $$1397 = 0;
 while (1) {
  if (($$1397 | 0) >= ($6 | 0)) break;
  HEAP16[$$1382 >> 1] = 0;
  HEAP16[$$1380 >> 1] = 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1382 = $$1382 + ($5 << 1) | 0;
  $$1397 = $$1397 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $31 = 0 - $5 | 0;
 $32 = $1 * 3 | 0;
 $$0378 = $0 + (($1 * 6 | 0) + 6) | 0;
 $$0383 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0393 = 1;
 $$0401 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0393 | 0) < ($8 | 0)) {
   $$1 = $$0378;
   $$1384 = $$0383;
   $$1402 = $$0401;
   $$2398 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2398 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($15 | 0)) {
    HEAP8[$$1384 >> 0] = -1;
    $46 = $$3 + ($31 << 1) | 0;
    $47 = HEAP16[$46 >> 1] | 0;
    if ($47 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $47;
     $50 = ($47 << 16 >> 16) * 7 | 0;
     $52 = $4 + 1310736 + ($50 + -7 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + 1;
     $56 = $4 + 1310736 + ($50 + -6 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $$2398;
     $60 = $4 + 1310736 + ($50 + -5 << 2) | 0;
     HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($50 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $66 = HEAP16[$46 + 2 >> 1] | 0;
    $69 = HEAP16[$46 + -2 >> 1] | 0;
    $71 = $69 << 16 >> 16 > 0;
    $72 = $$3 + -2 | 0;
    $73 = ($69 << 16 >> 16) + -1 | 0;
    if ($66 << 16 >> 16 <= 0) {
     if ($71) {
      HEAP16[$$3 >> 1] = $69;
      $165 = $73 * 7 | 0;
      $166 = $4 + 1310736 + ($165 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + 1;
      $170 = $4 + 1310736 + ($165 + 1 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $$2398;
      $174 = $4 + 1310736 + ($165 + 2 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + $$0393;
      $178 = $4 + 1310736 + ($165 + 4 << 2) | 0;
      if ((HEAP32[$178 >> 2] | 0) < ($$2398 | 0)) HEAP32[$178 >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($165 + 6 << 2) >> 2] = $$0393;
      $$3404 = $$1402;
      break;
     }
     $183 = HEAP16[$72 >> 1] | 0;
     if ($183 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $183;
      $186 = ($183 << 16 >> 16) * 7 | 0;
      $188 = $4 + 1310736 + ($186 + -7 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + 1;
      $192 = $4 + 1310736 + ($186 + -6 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $$2398;
      $196 = $4 + 1310736 + ($186 + -5 << 2) | 0;
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + $$0393;
      $199 = $186 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($199 << 2) >> 2] | 0) < ($$2398 | 0)) {
       $$2403 = $$1402;
       $$sink = $$2398;
       $$sink3 = $199;
      } else {
       $$3404 = $$1402;
       break;
      }
     } else {
      $203 = $$1402 + 1 | 0;
      if (($$1402 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $203;
      HEAP32[$4 + 1179664 + ($$1402 << 2) >> 2] = $203 << 16 >> 16;
      $208 = $$1402 * 7 | 0;
      HEAP32[$4 + 1310736 + ($208 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($208 + 1 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 2 << 2) >> 2] = $$0393;
      HEAP32[$4 + 1310736 + ($208 + 3 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 4 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 5 << 2) >> 2] = $$0393;
      $$2403 = $203;
      $$sink = $$0393;
      $$sink3 = $208 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3404 = $$2403;
     break;
    }
    $75 = ($66 << 16 >> 16) + -1 | 0;
    $76 = $4 + 1179664 + ($75 << 2) | 0;
    if ($71) {
     $77 = HEAP32[$76 >> 2] | 0;
     $79 = HEAP32[$4 + 1179664 + ($73 << 2) >> 2] | 0;
     L35 : do if (($77 | 0) > ($79 | 0)) {
      HEAP16[$$3 >> 1] = $79;
      $$0385 = $22;
      $$0389 = 0;
      while (1) {
       if (($$0389 | 0) >= ($$1402 | 0)) {
        $94 = $79;
        break L35;
       }
       if ((HEAP32[$$0385 >> 2] | 0) == ($77 | 0)) HEAP32[$$0385 >> 2] = $79;
       $$0385 = $$0385 + 4 | 0;
       $$0389 = $$0389 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $77;
      if (($77 | 0) < ($79 | 0)) {
       $$1386 = $22;
       $$1390 = 0;
       while (1) {
        if (($$1390 | 0) >= ($$1402 | 0)) {
         $94 = $77;
         break L35;
        }
        if ((HEAP32[$$1386 >> 2] | 0) == ($79 | 0)) HEAP32[$$1386 >> 2] = $77;
        $$1386 = $$1386 + 4 | 0;
        $$1390 = $$1390 + 1 | 0;
       }
      } else $94 = $77;
     } while (0);
     $96 = ($94 << 16 >> 16) * 7 | 0;
     $98 = $4 + 1310736 + ($96 + -7 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 1;
     $102 = $4 + 1310736 + ($96 + -6 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $$2398;
     $106 = $4 + 1310736 + ($96 + -5 << 2) | 0;
     HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($96 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $111 = HEAP16[$72 >> 1] | 0;
    if ($111 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $66;
     $147 = $75 * 7 | 0;
     $148 = $4 + 1310736 + ($147 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $4 + 1310736 + ($147 + 1 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $$2398;
     $156 = $4 + 1310736 + ($147 + 2 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $$0393;
     $160 = $4 + 1310736 + ($147 + 3 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($$2398 | 0)) HEAP32[$160 >> 2] = $$2398;
     HEAP32[$4 + 1310736 + ($147 + 6 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $114 = HEAP32[$76 >> 2] | 0;
    $117 = HEAP32[$4 + 1179664 + (($111 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($114 | 0) > ($117 | 0)) {
     HEAP16[$$3 >> 1] = $117;
     $$2387 = $22;
     $$2391 = 0;
     while (1) {
      if (($$2391 | 0) >= ($$1402 | 0)) {
       $132 = $117;
       break L58;
      }
      if ((HEAP32[$$2387 >> 2] | 0) == ($114 | 0)) HEAP32[$$2387 >> 2] = $117;
      $$2387 = $$2387 + 4 | 0;
      $$2391 = $$2391 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $114;
     if (($114 | 0) < ($117 | 0)) {
      $$3388 = $22;
      $$3392 = 0;
      while (1) {
       if (($$3392 | 0) >= ($$1402 | 0)) {
        $132 = $114;
        break L58;
       }
       if ((HEAP32[$$3388 >> 2] | 0) == ($117 | 0)) HEAP32[$$3388 >> 2] = $114;
       $$3388 = $$3388 + 4 | 0;
       $$3392 = $$3392 + 1 | 0;
      }
     } else $132 = $114;
    } while (0);
    $134 = ($132 << 16 >> 16) * 7 | 0;
    $136 = $4 + 1310736 + ($134 + -7 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
    $140 = $4 + 1310736 + ($134 + -6 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$2398;
    $144 = $4 + 1310736 + ($134 + -5 << 2) | 0;
    HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$0393;
    $$3404 = $$1402;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1384 >> 0] = 0;
    $$3404 = $$1402;
   } while (0);
   $$1 = $$1 + 6 | 0;
   $$1384 = $$1384 + 1 | 0;
   $$1402 = $$3404;
   $$2398 = $$2398 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0378 = $$1 + $32 + 12 | 0;
  $$0383 = $$1384 + 2 | 0;
  $$0393 = $$0393 + 1 | 0;
  $$0401 = $$1402;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $231 = $4 + 12 | 0;
  $$1394 = 1;
  $$3399 = 1;
  $$4 = $22;
  while (1) {
   if (($$3399 | 0) > ($$0401 | 0)) break;
   $233 = HEAP32[$$4 >> 2] | 0;
   if (($233 | 0) == ($$3399 | 0)) {
    $$2395 = $$1394 + 1 | 0;
    $239 = $$1394;
   } else {
    $$2395 = $$1394;
    $239 = HEAP32[$4 + 1179664 + ($233 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $239;
   $$1394 = $$2395;
   $$3399 = $$3399 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $242 = $4 + 8 | 0;
  $243 = $$1394 + -1 | 0;
  HEAP32[$242 >> 2] = $243;
  if (!$243) $$0 = 0; else {
   _memset($231 | 0, 0, $243 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $243 << 4 | 0) | 0;
   $$4400 = 0;
   $249 = $243;
   while (1) {
    if (($$4400 | 0) >= ($249 | 0)) {
     $$5 = 0;
     break;
    }
    $250 = $$4400 << 2;
    HEAP32[$4 + 131084 + ($250 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($250 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($250 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($250 | 3) << 2) >> 2] = 0;
    $$4400 = $$4400 + 1 | 0;
    $249 = HEAP32[$242 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0401 | 0)) {
     $$6 = 0;
     break;
    }
    $262 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $263 = $$5 * 7 | 0;
    $266 = $4 + 12 + ($262 << 2) | 0;
    HEAP32[$266 >> 2] = (HEAP32[$266 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($263 << 2) >> 2] | 0);
    $273 = $262 << 1;
    $274 = $4 + 655376 + ($273 << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($263 + 1 << 2) >> 2] | 0);
    $282 = $4 + 655376 + (($273 | 1) << 3) | 0;
    HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + +(HEAP32[$4 + 1310736 + ($263 + 2 << 2) >> 2] | 0);
    $285 = $262 << 2;
    $286 = $4 + 131084 + ($285 << 2) | 0;
    $290 = HEAP32[$4 + 1310736 + ($263 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $4 + 131084 + (($285 | 1) << 2) | 0;
    $297 = HEAP32[$4 + 1310736 + ($263 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $300 = $4 + 131084 + (($285 | 2) << 2) | 0;
    $304 = HEAP32[$4 + 1310736 + ($263 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$300 >> 2] | 0) > ($304 | 0)) HEAP32[$300 >> 2] = $304;
    $307 = $4 + 131084 + (($285 | 3) << 2) | 0;
    $311 = HEAP32[$4 + 1310736 + ($263 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$307 >> 2] | 0) < ($311 | 0)) HEAP32[$307 >> 2] = $311;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$242 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $316 = $4 + 12 + ($$6 << 2) | 0;
    $319 = $$6 << 1;
    $320 = $4 + 655376 + ($319 << 3) | 0;
    HEAPF64[$320 >> 3] = +HEAPF64[$320 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $326 = $4 + 655376 + (($319 | 1) << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0378 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0385 = 0, $$0389 = 0, $$0393 = 0, $$0396 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1386 = 0, $$1390 = 0, $$1394 = 0, $$1397 = 0, $$1402 = 0, $$2 = 0, $$2387 = 0, $$2391 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3 = 0, $$3388 = 0, $$3392 = 0, $$3399 = 0, $$3404 = 0, $$4 = 0, $$4400 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $106 = 0, $111 = 0, $114 = 0, $117 = 0, $132 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $147 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $165 = 0, $166 = 0, $170 = 0, $174 = 0, $178 = 0, $183 = 0, $186 = 0, $188 = 0, $192 = 0, $196 = 0, $199 = 0, $203 = 0, $208 = 0, $22 = 0, $23 = 0, $231 = 0, $233 = 0, $239 = 0, $242 = 0, $243 = 0, $249 = 0, $250 = 0, $262 = 0, $263 = 0, $266 = 0, $273 = 0, $274 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $300 = 0, $304 = 0, $307 = 0, $31 = 0, $311 = 0, $316 = 0, $319 = 0, $32 = 0, $320 = 0, $326 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $6 = 0, $60 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $94 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0379 = $7;
 $$0381 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0396 = 0;
 while (1) {
  if (($$0396 | 0) >= ($5 | 0)) break;
  HEAP16[$$0381 >> 1] = 0;
  HEAP16[$$0379 >> 1] = 0;
  $$0379 = $$0379 + 2 | 0;
  $$0381 = $$0381 + 2 | 0;
  $$0396 = $$0396 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1380 = $7;
 $$1382 = $7 + ($16 << 1) | 0;
 $$1397 = 0;
 while (1) {
  if (($$1397 | 0) >= ($6 | 0)) break;
  HEAP16[$$1382 >> 1] = 0;
  HEAP16[$$1380 >> 1] = 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1382 = $$1382 + ($5 << 1) | 0;
  $$1397 = $$1397 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $31 = 0 - $5 | 0;
 $32 = $1 * 3 | 0;
 $$0378 = $0 + (($1 * 6 | 0) + 6) | 0;
 $$0383 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0393 = 1;
 $$0401 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0393 | 0) < ($8 | 0)) {
   $$1 = $$0378;
   $$1384 = $$0383;
   $$1402 = $$0401;
   $$2398 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2398 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1384 >> 0] = 0;
    $$3404 = $$1402;
   } else {
    HEAP8[$$1384 >> 0] = -1;
    $46 = $$3 + ($31 << 1) | 0;
    $47 = HEAP16[$46 >> 1] | 0;
    if ($47 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $47;
     $50 = ($47 << 16 >> 16) * 7 | 0;
     $52 = $4 + 1310736 + ($50 + -7 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + 1;
     $56 = $4 + 1310736 + ($50 + -6 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $$2398;
     $60 = $4 + 1310736 + ($50 + -5 << 2) | 0;
     HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($50 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $66 = HEAP16[$46 + 2 >> 1] | 0;
    $69 = HEAP16[$46 + -2 >> 1] | 0;
    $71 = $69 << 16 >> 16 > 0;
    $72 = $$3 + -2 | 0;
    $73 = ($69 << 16 >> 16) + -1 | 0;
    if ($66 << 16 >> 16 <= 0) {
     if ($71) {
      HEAP16[$$3 >> 1] = $69;
      $165 = $73 * 7 | 0;
      $166 = $4 + 1310736 + ($165 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + 1;
      $170 = $4 + 1310736 + ($165 + 1 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $$2398;
      $174 = $4 + 1310736 + ($165 + 2 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + $$0393;
      $178 = $4 + 1310736 + ($165 + 4 << 2) | 0;
      if ((HEAP32[$178 >> 2] | 0) < ($$2398 | 0)) HEAP32[$178 >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($165 + 6 << 2) >> 2] = $$0393;
      $$3404 = $$1402;
      break;
     }
     $183 = HEAP16[$72 >> 1] | 0;
     if ($183 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $183;
      $186 = ($183 << 16 >> 16) * 7 | 0;
      $188 = $4 + 1310736 + ($186 + -7 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + 1;
      $192 = $4 + 1310736 + ($186 + -6 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $$2398;
      $196 = $4 + 1310736 + ($186 + -5 << 2) | 0;
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + $$0393;
      $199 = $186 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($199 << 2) >> 2] | 0) < ($$2398 | 0)) {
       $$2403 = $$1402;
       $$sink = $$2398;
       $$sink3 = $199;
      } else {
       $$3404 = $$1402;
       break;
      }
     } else {
      $203 = $$1402 + 1 | 0;
      if (($$1402 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $203;
      HEAP32[$4 + 1179664 + ($$1402 << 2) >> 2] = $203 << 16 >> 16;
      $208 = $$1402 * 7 | 0;
      HEAP32[$4 + 1310736 + ($208 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($208 + 1 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 2 << 2) >> 2] = $$0393;
      HEAP32[$4 + 1310736 + ($208 + 3 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 4 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 5 << 2) >> 2] = $$0393;
      $$2403 = $203;
      $$sink = $$0393;
      $$sink3 = $208 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3404 = $$2403;
     break;
    }
    $75 = ($66 << 16 >> 16) + -1 | 0;
    $76 = $4 + 1179664 + ($75 << 2) | 0;
    if ($71) {
     $77 = HEAP32[$76 >> 2] | 0;
     $79 = HEAP32[$4 + 1179664 + ($73 << 2) >> 2] | 0;
     L36 : do if (($77 | 0) > ($79 | 0)) {
      HEAP16[$$3 >> 1] = $79;
      $$0385 = $22;
      $$0389 = 0;
      while (1) {
       if (($$0389 | 0) >= ($$1402 | 0)) {
        $94 = $79;
        break L36;
       }
       if ((HEAP32[$$0385 >> 2] | 0) == ($77 | 0)) HEAP32[$$0385 >> 2] = $79;
       $$0385 = $$0385 + 4 | 0;
       $$0389 = $$0389 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $77;
      if (($77 | 0) < ($79 | 0)) {
       $$1386 = $22;
       $$1390 = 0;
       while (1) {
        if (($$1390 | 0) >= ($$1402 | 0)) {
         $94 = $77;
         break L36;
        }
        if ((HEAP32[$$1386 >> 2] | 0) == ($79 | 0)) HEAP32[$$1386 >> 2] = $77;
        $$1386 = $$1386 + 4 | 0;
        $$1390 = $$1390 + 1 | 0;
       }
      } else $94 = $77;
     } while (0);
     $96 = ($94 << 16 >> 16) * 7 | 0;
     $98 = $4 + 1310736 + ($96 + -7 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 1;
     $102 = $4 + 1310736 + ($96 + -6 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $$2398;
     $106 = $4 + 1310736 + ($96 + -5 << 2) | 0;
     HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($96 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $111 = HEAP16[$72 >> 1] | 0;
    if ($111 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $66;
     $147 = $75 * 7 | 0;
     $148 = $4 + 1310736 + ($147 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $4 + 1310736 + ($147 + 1 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $$2398;
     $156 = $4 + 1310736 + ($147 + 2 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $$0393;
     $160 = $4 + 1310736 + ($147 + 3 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($$2398 | 0)) HEAP32[$160 >> 2] = $$2398;
     HEAP32[$4 + 1310736 + ($147 + 6 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $114 = HEAP32[$76 >> 2] | 0;
    $117 = HEAP32[$4 + 1179664 + (($111 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($114 | 0) > ($117 | 0)) {
     HEAP16[$$3 >> 1] = $117;
     $$2387 = $22;
     $$2391 = 0;
     while (1) {
      if (($$2391 | 0) >= ($$1402 | 0)) {
       $132 = $117;
       break L59;
      }
      if ((HEAP32[$$2387 >> 2] | 0) == ($114 | 0)) HEAP32[$$2387 >> 2] = $117;
      $$2387 = $$2387 + 4 | 0;
      $$2391 = $$2391 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $114;
     if (($114 | 0) < ($117 | 0)) {
      $$3388 = $22;
      $$3392 = 0;
      while (1) {
       if (($$3392 | 0) >= ($$1402 | 0)) {
        $132 = $114;
        break L59;
       }
       if ((HEAP32[$$3388 >> 2] | 0) == ($117 | 0)) HEAP32[$$3388 >> 2] = $114;
       $$3388 = $$3388 + 4 | 0;
       $$3392 = $$3392 + 1 | 0;
      }
     } else $132 = $114;
    } while (0);
    $134 = ($132 << 16 >> 16) * 7 | 0;
    $136 = $4 + 1310736 + ($134 + -7 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
    $140 = $4 + 1310736 + ($134 + -6 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$2398;
    $144 = $4 + 1310736 + ($134 + -5 << 2) | 0;
    HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$0393;
    $$3404 = $$1402;
   } while (0);
   $$1 = $$1 + 6 | 0;
   $$1384 = $$1384 + 1 | 0;
   $$1402 = $$3404;
   $$2398 = $$2398 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0378 = $$1 + $32 + 12 | 0;
  $$0383 = $$1384 + 2 | 0;
  $$0393 = $$0393 + 1 | 0;
  $$0401 = $$1402;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $231 = $4 + 12 | 0;
  $$1394 = 1;
  $$3399 = 1;
  $$4 = $22;
  while (1) {
   if (($$3399 | 0) > ($$0401 | 0)) break;
   $233 = HEAP32[$$4 >> 2] | 0;
   if (($233 | 0) == ($$3399 | 0)) {
    $$2395 = $$1394 + 1 | 0;
    $239 = $$1394;
   } else {
    $$2395 = $$1394;
    $239 = HEAP32[$4 + 1179664 + ($233 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $239;
   $$1394 = $$2395;
   $$3399 = $$3399 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $242 = $4 + 8 | 0;
  $243 = $$1394 + -1 | 0;
  HEAP32[$242 >> 2] = $243;
  if (!$243) $$0 = 0; else {
   _memset($231 | 0, 0, $243 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $243 << 4 | 0) | 0;
   $$4400 = 0;
   $249 = $243;
   while (1) {
    if (($$4400 | 0) >= ($249 | 0)) {
     $$5 = 0;
     break;
    }
    $250 = $$4400 << 2;
    HEAP32[$4 + 131084 + ($250 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($250 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($250 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($250 | 3) << 2) >> 2] = 0;
    $$4400 = $$4400 + 1 | 0;
    $249 = HEAP32[$242 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0401 | 0)) {
     $$6 = 0;
     break;
    }
    $262 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $263 = $$5 * 7 | 0;
    $266 = $4 + 12 + ($262 << 2) | 0;
    HEAP32[$266 >> 2] = (HEAP32[$266 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($263 << 2) >> 2] | 0);
    $273 = $262 << 1;
    $274 = $4 + 655376 + ($273 << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($263 + 1 << 2) >> 2] | 0);
    $282 = $4 + 655376 + (($273 | 1) << 3) | 0;
    HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + +(HEAP32[$4 + 1310736 + ($263 + 2 << 2) >> 2] | 0);
    $285 = $262 << 2;
    $286 = $4 + 131084 + ($285 << 2) | 0;
    $290 = HEAP32[$4 + 1310736 + ($263 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $4 + 131084 + (($285 | 1) << 2) | 0;
    $297 = HEAP32[$4 + 1310736 + ($263 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $300 = $4 + 131084 + (($285 | 2) << 2) | 0;
    $304 = HEAP32[$4 + 1310736 + ($263 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$300 >> 2] | 0) > ($304 | 0)) HEAP32[$300 >> 2] = $304;
    $307 = $4 + 131084 + (($285 | 3) << 2) | 0;
    $311 = HEAP32[$4 + 1310736 + ($263 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$307 >> 2] | 0) < ($311 | 0)) HEAP32[$307 >> 2] = $311;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$242 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $316 = $4 + 12 + ($$6 << 2) | 0;
    $319 = $$6 << 1;
    $320 = $4 + 655376 + ($319 << 3) | 0;
    HEAPF64[$320 >> 3] = +HEAPF64[$320 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $326 = $4 + 655376 + (($319 | 1) << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWIA3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0378 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0385 = 0, $$0389 = 0, $$0393 = 0, $$0396 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1386 = 0, $$1390 = 0, $$1394 = 0, $$1397 = 0, $$1402 = 0, $$2 = 0, $$2387 = 0, $$2391 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3 = 0, $$3388 = 0, $$3392 = 0, $$3399 = 0, $$3404 = 0, $$4 = 0, $$4400 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $133 = 0, $135 = 0, $137 = 0, $141 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $161 = 0, $166 = 0, $167 = 0, $171 = 0, $175 = 0, $179 = 0, $184 = 0, $187 = 0, $189 = 0, $193 = 0, $197 = 0, $200 = 0, $204 = 0, $209 = 0, $22 = 0, $23 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $31 = 0, $312 = 0, $317 = 0, $32 = 0, $320 = 0, $321 = 0, $327 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $53 = 0, $57 = 0, $6 = 0, $61 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $95 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0379 = $7;
 $$0381 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0396 = 0;
 while (1) {
  if (($$0396 | 0) >= ($5 | 0)) break;
  HEAP16[$$0381 >> 1] = 0;
  HEAP16[$$0379 >> 1] = 0;
  $$0379 = $$0379 + 2 | 0;
  $$0381 = $$0381 + 2 | 0;
  $$0396 = $$0396 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1380 = $7;
 $$1382 = $7 + ($16 << 1) | 0;
 $$1397 = 0;
 while (1) {
  if (($$1397 | 0) >= ($6 | 0)) break;
  HEAP16[$$1382 >> 1] = 0;
  HEAP16[$$1380 >> 1] = 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1382 = $$1382 + ($5 << 1) | 0;
  $$1397 = $$1397 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $31 = 0 - $5 | 0;
 $32 = $1 << 2;
 $$0378 = $0 + (($1 << 3) + 8) | 0;
 $$0383 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0393 = 1;
 $$0401 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0393 | 0) < ($8 | 0)) {
   $$1 = $$0378;
   $$1384 = $$0383;
   $$1402 = $$0401;
   $$2398 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2398 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 2 >> 0] | 0) + (HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 + 3 >> 0] | 0) | 0) > ($15 | 0)) {
    HEAP8[$$1384 >> 0] = -1;
    $47 = $$3 + ($31 << 1) | 0;
    $48 = HEAP16[$47 >> 1] | 0;
    if ($48 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $48;
     $51 = ($48 << 16 >> 16) * 7 | 0;
     $53 = $4 + 1310736 + ($51 + -7 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 1;
     $57 = $4 + 1310736 + ($51 + -6 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $$2398;
     $61 = $4 + 1310736 + ($51 + -5 << 2) | 0;
     HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($51 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $67 = HEAP16[$47 + 2 >> 1] | 0;
    $70 = HEAP16[$47 + -2 >> 1] | 0;
    $72 = $70 << 16 >> 16 > 0;
    $73 = $$3 + -2 | 0;
    $74 = ($70 << 16 >> 16) + -1 | 0;
    if ($67 << 16 >> 16 <= 0) {
     if ($72) {
      HEAP16[$$3 >> 1] = $70;
      $166 = $74 * 7 | 0;
      $167 = $4 + 1310736 + ($166 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 1;
      $171 = $4 + 1310736 + ($166 + 1 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $$2398;
      $175 = $4 + 1310736 + ($166 + 2 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $$0393;
      $179 = $4 + 1310736 + ($166 + 4 << 2) | 0;
      if ((HEAP32[$179 >> 2] | 0) < ($$2398 | 0)) HEAP32[$179 >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($166 + 6 << 2) >> 2] = $$0393;
      $$3404 = $$1402;
      break;
     }
     $184 = HEAP16[$73 >> 1] | 0;
     if ($184 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $184;
      $187 = ($184 << 16 >> 16) * 7 | 0;
      $189 = $4 + 1310736 + ($187 + -7 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + 1;
      $193 = $4 + 1310736 + ($187 + -6 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $$2398;
      $197 = $4 + 1310736 + ($187 + -5 << 2) | 0;
      HEAP32[$197 >> 2] = (HEAP32[$197 >> 2] | 0) + $$0393;
      $200 = $187 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($200 << 2) >> 2] | 0) < ($$2398 | 0)) {
       $$2403 = $$1402;
       $$sink = $$2398;
       $$sink3 = $200;
      } else {
       $$3404 = $$1402;
       break;
      }
     } else {
      $204 = $$1402 + 1 | 0;
      if (($$1402 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $204;
      HEAP32[$4 + 1179664 + ($$1402 << 2) >> 2] = $204 << 16 >> 16;
      $209 = $$1402 * 7 | 0;
      HEAP32[$4 + 1310736 + ($209 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($209 + 1 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($209 + 2 << 2) >> 2] = $$0393;
      HEAP32[$4 + 1310736 + ($209 + 3 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($209 + 4 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($209 + 5 << 2) >> 2] = $$0393;
      $$2403 = $204;
      $$sink = $$0393;
      $$sink3 = $209 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3404 = $$2403;
     break;
    }
    $76 = ($67 << 16 >> 16) + -1 | 0;
    $77 = $4 + 1179664 + ($76 << 2) | 0;
    if ($72) {
     $78 = HEAP32[$77 >> 2] | 0;
     $80 = HEAP32[$4 + 1179664 + ($74 << 2) >> 2] | 0;
     L35 : do if (($78 | 0) > ($80 | 0)) {
      HEAP16[$$3 >> 1] = $80;
      $$0385 = $22;
      $$0389 = 0;
      while (1) {
       if (($$0389 | 0) >= ($$1402 | 0)) {
        $95 = $80;
        break L35;
       }
       if ((HEAP32[$$0385 >> 2] | 0) == ($78 | 0)) HEAP32[$$0385 >> 2] = $80;
       $$0385 = $$0385 + 4 | 0;
       $$0389 = $$0389 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $78;
      if (($78 | 0) < ($80 | 0)) {
       $$1386 = $22;
       $$1390 = 0;
       while (1) {
        if (($$1390 | 0) >= ($$1402 | 0)) {
         $95 = $78;
         break L35;
        }
        if ((HEAP32[$$1386 >> 2] | 0) == ($80 | 0)) HEAP32[$$1386 >> 2] = $78;
        $$1386 = $$1386 + 4 | 0;
        $$1390 = $$1390 + 1 | 0;
       }
      } else $95 = $78;
     } while (0);
     $97 = ($95 << 16 >> 16) * 7 | 0;
     $99 = $4 + 1310736 + ($97 + -7 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + 1;
     $103 = $4 + 1310736 + ($97 + -6 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $$2398;
     $107 = $4 + 1310736 + ($97 + -5 << 2) | 0;
     HEAP32[$107 >> 2] = (HEAP32[$107 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($97 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $112 = HEAP16[$73 >> 1] | 0;
    if ($112 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $67;
     $148 = $76 * 7 | 0;
     $149 = $4 + 1310736 + ($148 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
     $153 = $4 + 1310736 + ($148 + 1 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$2398;
     $157 = $4 + 1310736 + ($148 + 2 << 2) | 0;
     HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$0393;
     $161 = $4 + 1310736 + ($148 + 3 << 2) | 0;
     if ((HEAP32[$161 >> 2] | 0) > ($$2398 | 0)) HEAP32[$161 >> 2] = $$2398;
     HEAP32[$4 + 1310736 + ($148 + 6 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $115 = HEAP32[$77 >> 2] | 0;
    $118 = HEAP32[$4 + 1179664 + (($112 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($115 | 0) > ($118 | 0)) {
     HEAP16[$$3 >> 1] = $118;
     $$2387 = $22;
     $$2391 = 0;
     while (1) {
      if (($$2391 | 0) >= ($$1402 | 0)) {
       $133 = $118;
       break L58;
      }
      if ((HEAP32[$$2387 >> 2] | 0) == ($115 | 0)) HEAP32[$$2387 >> 2] = $118;
      $$2387 = $$2387 + 4 | 0;
      $$2391 = $$2391 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $115;
     if (($115 | 0) < ($118 | 0)) {
      $$3388 = $22;
      $$3392 = 0;
      while (1) {
       if (($$3392 | 0) >= ($$1402 | 0)) {
        $133 = $115;
        break L58;
       }
       if ((HEAP32[$$3388 >> 2] | 0) == ($118 | 0)) HEAP32[$$3388 >> 2] = $115;
       $$3388 = $$3388 + 4 | 0;
       $$3392 = $$3392 + 1 | 0;
      }
     } else $133 = $115;
    } while (0);
    $135 = ($133 << 16 >> 16) * 7 | 0;
    $137 = $4 + 1310736 + ($135 + -7 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 1;
    $141 = $4 + 1310736 + ($135 + -6 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$2398;
    $145 = $4 + 1310736 + ($135 + -5 << 2) | 0;
    HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$0393;
    $$3404 = $$1402;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1384 >> 0] = 0;
    $$3404 = $$1402;
   } while (0);
   $$1 = $$1 + 8 | 0;
   $$1384 = $$1384 + 1 | 0;
   $$1402 = $$3404;
   $$2398 = $$2398 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0378 = $$1 + $32 + 16 | 0;
  $$0383 = $$1384 + 2 | 0;
  $$0393 = $$0393 + 1 | 0;
  $$0401 = $$1402;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1394 = 1;
  $$3399 = 1;
  $$4 = $22;
  while (1) {
   if (($$3399 | 0) > ($$0401 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3399 | 0)) {
    $$2395 = $$1394 + 1 | 0;
    $240 = $$1394;
   } else {
    $$2395 = $$1394;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1394 = $$2395;
   $$3399 = $$3399 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1394 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4400 = 0;
   $250 = $244;
   while (1) {
    if (($$4400 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4400 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4400 = $$4400 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0401 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBIA3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0378 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0385 = 0, $$0389 = 0, $$0393 = 0, $$0396 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1386 = 0, $$1390 = 0, $$1394 = 0, $$1397 = 0, $$1402 = 0, $$2 = 0, $$2387 = 0, $$2391 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3 = 0, $$3388 = 0, $$3392 = 0, $$3399 = 0, $$3404 = 0, $$4 = 0, $$4400 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $133 = 0, $135 = 0, $137 = 0, $141 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $161 = 0, $166 = 0, $167 = 0, $171 = 0, $175 = 0, $179 = 0, $184 = 0, $187 = 0, $189 = 0, $193 = 0, $197 = 0, $200 = 0, $204 = 0, $209 = 0, $22 = 0, $23 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $31 = 0, $312 = 0, $317 = 0, $32 = 0, $320 = 0, $321 = 0, $327 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $53 = 0, $57 = 0, $6 = 0, $61 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $95 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0379 = $7;
 $$0381 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0396 = 0;
 while (1) {
  if (($$0396 | 0) >= ($5 | 0)) break;
  HEAP16[$$0381 >> 1] = 0;
  HEAP16[$$0379 >> 1] = 0;
  $$0379 = $$0379 + 2 | 0;
  $$0381 = $$0381 + 2 | 0;
  $$0396 = $$0396 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1380 = $7;
 $$1382 = $7 + ($16 << 1) | 0;
 $$1397 = 0;
 while (1) {
  if (($$1397 | 0) >= ($6 | 0)) break;
  HEAP16[$$1382 >> 1] = 0;
  HEAP16[$$1380 >> 1] = 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1382 = $$1382 + ($5 << 1) | 0;
  $$1397 = $$1397 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $31 = 0 - $5 | 0;
 $32 = $1 << 2;
 $$0378 = $0 + (($1 << 3) + 8) | 0;
 $$0383 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0393 = 1;
 $$0401 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0393 | 0) < ($8 | 0)) {
   $$1 = $$0378;
   $$1384 = $$0383;
   $$1402 = $$0401;
   $$2398 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2398 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 2 >> 0] | 0) + (HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 + 3 >> 0] | 0) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1384 >> 0] = 0;
    $$3404 = $$1402;
   } else {
    HEAP8[$$1384 >> 0] = -1;
    $47 = $$3 + ($31 << 1) | 0;
    $48 = HEAP16[$47 >> 1] | 0;
    if ($48 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $48;
     $51 = ($48 << 16 >> 16) * 7 | 0;
     $53 = $4 + 1310736 + ($51 + -7 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 1;
     $57 = $4 + 1310736 + ($51 + -6 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $$2398;
     $61 = $4 + 1310736 + ($51 + -5 << 2) | 0;
     HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($51 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $67 = HEAP16[$47 + 2 >> 1] | 0;
    $70 = HEAP16[$47 + -2 >> 1] | 0;
    $72 = $70 << 16 >> 16 > 0;
    $73 = $$3 + -2 | 0;
    $74 = ($70 << 16 >> 16) + -1 | 0;
    if ($67 << 16 >> 16 <= 0) {
     if ($72) {
      HEAP16[$$3 >> 1] = $70;
      $166 = $74 * 7 | 0;
      $167 = $4 + 1310736 + ($166 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 1;
      $171 = $4 + 1310736 + ($166 + 1 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $$2398;
      $175 = $4 + 1310736 + ($166 + 2 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $$0393;
      $179 = $4 + 1310736 + ($166 + 4 << 2) | 0;
      if ((HEAP32[$179 >> 2] | 0) < ($$2398 | 0)) HEAP32[$179 >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($166 + 6 << 2) >> 2] = $$0393;
      $$3404 = $$1402;
      break;
     }
     $184 = HEAP16[$73 >> 1] | 0;
     if ($184 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $184;
      $187 = ($184 << 16 >> 16) * 7 | 0;
      $189 = $4 + 1310736 + ($187 + -7 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + 1;
      $193 = $4 + 1310736 + ($187 + -6 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $$2398;
      $197 = $4 + 1310736 + ($187 + -5 << 2) | 0;
      HEAP32[$197 >> 2] = (HEAP32[$197 >> 2] | 0) + $$0393;
      $200 = $187 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($200 << 2) >> 2] | 0) < ($$2398 | 0)) {
       $$2403 = $$1402;
       $$sink = $$2398;
       $$sink3 = $200;
      } else {
       $$3404 = $$1402;
       break;
      }
     } else {
      $204 = $$1402 + 1 | 0;
      if (($$1402 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $204;
      HEAP32[$4 + 1179664 + ($$1402 << 2) >> 2] = $204 << 16 >> 16;
      $209 = $$1402 * 7 | 0;
      HEAP32[$4 + 1310736 + ($209 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($209 + 1 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($209 + 2 << 2) >> 2] = $$0393;
      HEAP32[$4 + 1310736 + ($209 + 3 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($209 + 4 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($209 + 5 << 2) >> 2] = $$0393;
      $$2403 = $204;
      $$sink = $$0393;
      $$sink3 = $209 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3404 = $$2403;
     break;
    }
    $76 = ($67 << 16 >> 16) + -1 | 0;
    $77 = $4 + 1179664 + ($76 << 2) | 0;
    if ($72) {
     $78 = HEAP32[$77 >> 2] | 0;
     $80 = HEAP32[$4 + 1179664 + ($74 << 2) >> 2] | 0;
     L36 : do if (($78 | 0) > ($80 | 0)) {
      HEAP16[$$3 >> 1] = $80;
      $$0385 = $22;
      $$0389 = 0;
      while (1) {
       if (($$0389 | 0) >= ($$1402 | 0)) {
        $95 = $80;
        break L36;
       }
       if ((HEAP32[$$0385 >> 2] | 0) == ($78 | 0)) HEAP32[$$0385 >> 2] = $80;
       $$0385 = $$0385 + 4 | 0;
       $$0389 = $$0389 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $78;
      if (($78 | 0) < ($80 | 0)) {
       $$1386 = $22;
       $$1390 = 0;
       while (1) {
        if (($$1390 | 0) >= ($$1402 | 0)) {
         $95 = $78;
         break L36;
        }
        if ((HEAP32[$$1386 >> 2] | 0) == ($80 | 0)) HEAP32[$$1386 >> 2] = $78;
        $$1386 = $$1386 + 4 | 0;
        $$1390 = $$1390 + 1 | 0;
       }
      } else $95 = $78;
     } while (0);
     $97 = ($95 << 16 >> 16) * 7 | 0;
     $99 = $4 + 1310736 + ($97 + -7 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + 1;
     $103 = $4 + 1310736 + ($97 + -6 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $$2398;
     $107 = $4 + 1310736 + ($97 + -5 << 2) | 0;
     HEAP32[$107 >> 2] = (HEAP32[$107 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($97 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $112 = HEAP16[$73 >> 1] | 0;
    if ($112 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $67;
     $148 = $76 * 7 | 0;
     $149 = $4 + 1310736 + ($148 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
     $153 = $4 + 1310736 + ($148 + 1 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$2398;
     $157 = $4 + 1310736 + ($148 + 2 << 2) | 0;
     HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$0393;
     $161 = $4 + 1310736 + ($148 + 3 << 2) | 0;
     if ((HEAP32[$161 >> 2] | 0) > ($$2398 | 0)) HEAP32[$161 >> 2] = $$2398;
     HEAP32[$4 + 1310736 + ($148 + 6 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $115 = HEAP32[$77 >> 2] | 0;
    $118 = HEAP32[$4 + 1179664 + (($112 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($115 | 0) > ($118 | 0)) {
     HEAP16[$$3 >> 1] = $118;
     $$2387 = $22;
     $$2391 = 0;
     while (1) {
      if (($$2391 | 0) >= ($$1402 | 0)) {
       $133 = $118;
       break L59;
      }
      if ((HEAP32[$$2387 >> 2] | 0) == ($115 | 0)) HEAP32[$$2387 >> 2] = $118;
      $$2387 = $$2387 + 4 | 0;
      $$2391 = $$2391 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $115;
     if (($115 | 0) < ($118 | 0)) {
      $$3388 = $22;
      $$3392 = 0;
      while (1) {
       if (($$3392 | 0) >= ($$1402 | 0)) {
        $133 = $115;
        break L59;
       }
       if ((HEAP32[$$3388 >> 2] | 0) == ($118 | 0)) HEAP32[$$3388 >> 2] = $115;
       $$3388 = $$3388 + 4 | 0;
       $$3392 = $$3392 + 1 | 0;
      }
     } else $133 = $115;
    } while (0);
    $135 = ($133 << 16 >> 16) * 7 | 0;
    $137 = $4 + 1310736 + ($135 + -7 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 1;
    $141 = $4 + 1310736 + ($135 + -6 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$2398;
    $145 = $4 + 1310736 + ($135 + -5 << 2) | 0;
    HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$0393;
    $$3404 = $$1402;
   } while (0);
   $$1 = $$1 + 8 | 0;
   $$1384 = $$1384 + 1 | 0;
   $$1402 = $$3404;
   $$2398 = $$2398 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0378 = $$1 + $32 + 16 | 0;
  $$0383 = $$1384 + 2 | 0;
  $$0393 = $$0393 + 1 | 0;
  $$0401 = $$1402;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1394 = 1;
  $$3399 = 1;
  $$4 = $22;
  while (1) {
   if (($$3399 | 0) > ($$0401 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3399 | 0)) {
    $$2395 = $$1394 + 1 | 0;
    $240 = $$1394;
   } else {
    $$2395 = $$1394;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1394 = $$2395;
   $$3399 = $$3399 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1394 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4400 = 0;
   $250 = $244;
   while (1) {
    if (($$4400 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4400 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4400 = $$4400 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0401 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWI3CA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0378 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0385 = 0, $$0389 = 0, $$0393 = 0, $$0396 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1386 = 0, $$1390 = 0, $$1394 = 0, $$1397 = 0, $$1402 = 0, $$2 = 0, $$2387 = 0, $$2391 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3 = 0, $$3388 = 0, $$3392 = 0, $$3399 = 0, $$3404 = 0, $$4 = 0, $$4400 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $106 = 0, $111 = 0, $114 = 0, $117 = 0, $132 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $147 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $165 = 0, $166 = 0, $170 = 0, $174 = 0, $178 = 0, $183 = 0, $186 = 0, $188 = 0, $192 = 0, $196 = 0, $199 = 0, $203 = 0, $208 = 0, $22 = 0, $23 = 0, $231 = 0, $233 = 0, $239 = 0, $242 = 0, $243 = 0, $249 = 0, $250 = 0, $262 = 0, $263 = 0, $266 = 0, $273 = 0, $274 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $300 = 0, $304 = 0, $307 = 0, $31 = 0, $311 = 0, $316 = 0, $319 = 0, $32 = 0, $320 = 0, $326 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $6 = 0, $60 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $94 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0379 = $7;
 $$0381 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0396 = 0;
 while (1) {
  if (($$0396 | 0) >= ($5 | 0)) break;
  HEAP16[$$0381 >> 1] = 0;
  HEAP16[$$0379 >> 1] = 0;
  $$0379 = $$0379 + 2 | 0;
  $$0381 = $$0381 + 2 | 0;
  $$0396 = $$0396 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1380 = $7;
 $$1382 = $7 + ($16 << 1) | 0;
 $$1397 = 0;
 while (1) {
  if (($$1397 | 0) >= ($6 | 0)) break;
  HEAP16[$$1382 >> 1] = 0;
  HEAP16[$$1380 >> 1] = 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1382 = $$1382 + ($5 << 1) | 0;
  $$1397 = $$1397 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $31 = 0 - $5 | 0;
 $32 = $1 << 2;
 $$0378 = $0 + (($1 << 3) + 8) | 0;
 $$0383 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0393 = 1;
 $$0401 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0393 | 0) < ($8 | 0)) {
   $$1 = $$0378;
   $$1384 = $$0383;
   $$1402 = $$0401;
   $$2398 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2398 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($15 | 0)) {
    HEAP8[$$1384 >> 0] = -1;
    $46 = $$3 + ($31 << 1) | 0;
    $47 = HEAP16[$46 >> 1] | 0;
    if ($47 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $47;
     $50 = ($47 << 16 >> 16) * 7 | 0;
     $52 = $4 + 1310736 + ($50 + -7 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + 1;
     $56 = $4 + 1310736 + ($50 + -6 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $$2398;
     $60 = $4 + 1310736 + ($50 + -5 << 2) | 0;
     HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($50 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $66 = HEAP16[$46 + 2 >> 1] | 0;
    $69 = HEAP16[$46 + -2 >> 1] | 0;
    $71 = $69 << 16 >> 16 > 0;
    $72 = $$3 + -2 | 0;
    $73 = ($69 << 16 >> 16) + -1 | 0;
    if ($66 << 16 >> 16 <= 0) {
     if ($71) {
      HEAP16[$$3 >> 1] = $69;
      $165 = $73 * 7 | 0;
      $166 = $4 + 1310736 + ($165 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + 1;
      $170 = $4 + 1310736 + ($165 + 1 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $$2398;
      $174 = $4 + 1310736 + ($165 + 2 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + $$0393;
      $178 = $4 + 1310736 + ($165 + 4 << 2) | 0;
      if ((HEAP32[$178 >> 2] | 0) < ($$2398 | 0)) HEAP32[$178 >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($165 + 6 << 2) >> 2] = $$0393;
      $$3404 = $$1402;
      break;
     }
     $183 = HEAP16[$72 >> 1] | 0;
     if ($183 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $183;
      $186 = ($183 << 16 >> 16) * 7 | 0;
      $188 = $4 + 1310736 + ($186 + -7 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + 1;
      $192 = $4 + 1310736 + ($186 + -6 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $$2398;
      $196 = $4 + 1310736 + ($186 + -5 << 2) | 0;
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + $$0393;
      $199 = $186 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($199 << 2) >> 2] | 0) < ($$2398 | 0)) {
       $$2403 = $$1402;
       $$sink = $$2398;
       $$sink3 = $199;
      } else {
       $$3404 = $$1402;
       break;
      }
     } else {
      $203 = $$1402 + 1 | 0;
      if (($$1402 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $203;
      HEAP32[$4 + 1179664 + ($$1402 << 2) >> 2] = $203 << 16 >> 16;
      $208 = $$1402 * 7 | 0;
      HEAP32[$4 + 1310736 + ($208 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($208 + 1 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 2 << 2) >> 2] = $$0393;
      HEAP32[$4 + 1310736 + ($208 + 3 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 4 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 5 << 2) >> 2] = $$0393;
      $$2403 = $203;
      $$sink = $$0393;
      $$sink3 = $208 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3404 = $$2403;
     break;
    }
    $75 = ($66 << 16 >> 16) + -1 | 0;
    $76 = $4 + 1179664 + ($75 << 2) | 0;
    if ($71) {
     $77 = HEAP32[$76 >> 2] | 0;
     $79 = HEAP32[$4 + 1179664 + ($73 << 2) >> 2] | 0;
     L35 : do if (($77 | 0) > ($79 | 0)) {
      HEAP16[$$3 >> 1] = $79;
      $$0385 = $22;
      $$0389 = 0;
      while (1) {
       if (($$0389 | 0) >= ($$1402 | 0)) {
        $94 = $79;
        break L35;
       }
       if ((HEAP32[$$0385 >> 2] | 0) == ($77 | 0)) HEAP32[$$0385 >> 2] = $79;
       $$0385 = $$0385 + 4 | 0;
       $$0389 = $$0389 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $77;
      if (($77 | 0) < ($79 | 0)) {
       $$1386 = $22;
       $$1390 = 0;
       while (1) {
        if (($$1390 | 0) >= ($$1402 | 0)) {
         $94 = $77;
         break L35;
        }
        if ((HEAP32[$$1386 >> 2] | 0) == ($79 | 0)) HEAP32[$$1386 >> 2] = $77;
        $$1386 = $$1386 + 4 | 0;
        $$1390 = $$1390 + 1 | 0;
       }
      } else $94 = $77;
     } while (0);
     $96 = ($94 << 16 >> 16) * 7 | 0;
     $98 = $4 + 1310736 + ($96 + -7 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 1;
     $102 = $4 + 1310736 + ($96 + -6 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $$2398;
     $106 = $4 + 1310736 + ($96 + -5 << 2) | 0;
     HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($96 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $111 = HEAP16[$72 >> 1] | 0;
    if ($111 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $66;
     $147 = $75 * 7 | 0;
     $148 = $4 + 1310736 + ($147 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $4 + 1310736 + ($147 + 1 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $$2398;
     $156 = $4 + 1310736 + ($147 + 2 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $$0393;
     $160 = $4 + 1310736 + ($147 + 3 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($$2398 | 0)) HEAP32[$160 >> 2] = $$2398;
     HEAP32[$4 + 1310736 + ($147 + 6 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $114 = HEAP32[$76 >> 2] | 0;
    $117 = HEAP32[$4 + 1179664 + (($111 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($114 | 0) > ($117 | 0)) {
     HEAP16[$$3 >> 1] = $117;
     $$2387 = $22;
     $$2391 = 0;
     while (1) {
      if (($$2391 | 0) >= ($$1402 | 0)) {
       $132 = $117;
       break L58;
      }
      if ((HEAP32[$$2387 >> 2] | 0) == ($114 | 0)) HEAP32[$$2387 >> 2] = $117;
      $$2387 = $$2387 + 4 | 0;
      $$2391 = $$2391 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $114;
     if (($114 | 0) < ($117 | 0)) {
      $$3388 = $22;
      $$3392 = 0;
      while (1) {
       if (($$3392 | 0) >= ($$1402 | 0)) {
        $132 = $114;
        break L58;
       }
       if ((HEAP32[$$3388 >> 2] | 0) == ($117 | 0)) HEAP32[$$3388 >> 2] = $114;
       $$3388 = $$3388 + 4 | 0;
       $$3392 = $$3392 + 1 | 0;
      }
     } else $132 = $114;
    } while (0);
    $134 = ($132 << 16 >> 16) * 7 | 0;
    $136 = $4 + 1310736 + ($134 + -7 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
    $140 = $4 + 1310736 + ($134 + -6 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$2398;
    $144 = $4 + 1310736 + ($134 + -5 << 2) | 0;
    HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$0393;
    $$3404 = $$1402;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1384 >> 0] = 0;
    $$3404 = $$1402;
   } while (0);
   $$1 = $$1 + 8 | 0;
   $$1384 = $$1384 + 1 | 0;
   $$1402 = $$3404;
   $$2398 = $$2398 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0378 = $$1 + $32 + 16 | 0;
  $$0383 = $$1384 + 2 | 0;
  $$0393 = $$0393 + 1 | 0;
  $$0401 = $$1402;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $231 = $4 + 12 | 0;
  $$1394 = 1;
  $$3399 = 1;
  $$4 = $22;
  while (1) {
   if (($$3399 | 0) > ($$0401 | 0)) break;
   $233 = HEAP32[$$4 >> 2] | 0;
   if (($233 | 0) == ($$3399 | 0)) {
    $$2395 = $$1394 + 1 | 0;
    $239 = $$1394;
   } else {
    $$2395 = $$1394;
    $239 = HEAP32[$4 + 1179664 + ($233 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $239;
   $$1394 = $$2395;
   $$3399 = $$3399 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $242 = $4 + 8 | 0;
  $243 = $$1394 + -1 | 0;
  HEAP32[$242 >> 2] = $243;
  if (!$243) $$0 = 0; else {
   _memset($231 | 0, 0, $243 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $243 << 4 | 0) | 0;
   $$4400 = 0;
   $249 = $243;
   while (1) {
    if (($$4400 | 0) >= ($249 | 0)) {
     $$5 = 0;
     break;
    }
    $250 = $$4400 << 2;
    HEAP32[$4 + 131084 + ($250 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($250 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($250 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($250 | 3) << 2) >> 2] = 0;
    $$4400 = $$4400 + 1 | 0;
    $249 = HEAP32[$242 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0401 | 0)) {
     $$6 = 0;
     break;
    }
    $262 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $263 = $$5 * 7 | 0;
    $266 = $4 + 12 + ($262 << 2) | 0;
    HEAP32[$266 >> 2] = (HEAP32[$266 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($263 << 2) >> 2] | 0);
    $273 = $262 << 1;
    $274 = $4 + 655376 + ($273 << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($263 + 1 << 2) >> 2] | 0);
    $282 = $4 + 655376 + (($273 | 1) << 3) | 0;
    HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + +(HEAP32[$4 + 1310736 + ($263 + 2 << 2) >> 2] | 0);
    $285 = $262 << 2;
    $286 = $4 + 131084 + ($285 << 2) | 0;
    $290 = HEAP32[$4 + 1310736 + ($263 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $4 + 131084 + (($285 | 1) << 2) | 0;
    $297 = HEAP32[$4 + 1310736 + ($263 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $300 = $4 + 131084 + (($285 | 2) << 2) | 0;
    $304 = HEAP32[$4 + 1310736 + ($263 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$300 >> 2] | 0) > ($304 | 0)) HEAP32[$300 >> 2] = $304;
    $307 = $4 + 131084 + (($285 | 3) << 2) | 0;
    $311 = HEAP32[$4 + 1310736 + ($263 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$307 >> 2] | 0) < ($311 | 0)) HEAP32[$307 >> 2] = $311;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$242 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $316 = $4 + 12 + ($$6 << 2) | 0;
    $319 = $$6 << 1;
    $320 = $4 + 655376 + ($319 << 3) | 0;
    HEAPF64[$320 >> 3] = +HEAPF64[$320 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $326 = $4 + 655376 + (($319 | 1) << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3CA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0378 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0385 = 0, $$0389 = 0, $$0393 = 0, $$0396 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1386 = 0, $$1390 = 0, $$1394 = 0, $$1397 = 0, $$1402 = 0, $$2 = 0, $$2387 = 0, $$2391 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3 = 0, $$3388 = 0, $$3392 = 0, $$3399 = 0, $$3404 = 0, $$4 = 0, $$4400 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $106 = 0, $111 = 0, $114 = 0, $117 = 0, $132 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $147 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $165 = 0, $166 = 0, $170 = 0, $174 = 0, $178 = 0, $183 = 0, $186 = 0, $188 = 0, $192 = 0, $196 = 0, $199 = 0, $203 = 0, $208 = 0, $22 = 0, $23 = 0, $231 = 0, $233 = 0, $239 = 0, $242 = 0, $243 = 0, $249 = 0, $250 = 0, $262 = 0, $263 = 0, $266 = 0, $273 = 0, $274 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $300 = 0, $304 = 0, $307 = 0, $31 = 0, $311 = 0, $316 = 0, $319 = 0, $32 = 0, $320 = 0, $326 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $6 = 0, $60 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $94 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0379 = $7;
 $$0381 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0396 = 0;
 while (1) {
  if (($$0396 | 0) >= ($5 | 0)) break;
  HEAP16[$$0381 >> 1] = 0;
  HEAP16[$$0379 >> 1] = 0;
  $$0379 = $$0379 + 2 | 0;
  $$0381 = $$0381 + 2 | 0;
  $$0396 = $$0396 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1380 = $7;
 $$1382 = $7 + ($16 << 1) | 0;
 $$1397 = 0;
 while (1) {
  if (($$1397 | 0) >= ($6 | 0)) break;
  HEAP16[$$1382 >> 1] = 0;
  HEAP16[$$1380 >> 1] = 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1382 = $$1382 + ($5 << 1) | 0;
  $$1397 = $$1397 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $23 = $5 + 1 | 0;
 $31 = 0 - $5 | 0;
 $32 = $1 << 2;
 $$0378 = $0 + (($1 << 3) + 8) | 0;
 $$0383 = (HEAP32[$4 + 4 >> 2] | 0) + $23 | 0;
 $$0393 = 1;
 $$0401 = 0;
 $$2 = $7 + ($23 << 1) | 0;
 L9 : while (1) {
  if (($$0393 | 0) < ($8 | 0)) {
   $$1 = $$0378;
   $$1384 = $$0383;
   $$1402 = $$0401;
   $$2398 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2398 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1384 >> 0] = 0;
    $$3404 = $$1402;
   } else {
    HEAP8[$$1384 >> 0] = -1;
    $46 = $$3 + ($31 << 1) | 0;
    $47 = HEAP16[$46 >> 1] | 0;
    if ($47 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $47;
     $50 = ($47 << 16 >> 16) * 7 | 0;
     $52 = $4 + 1310736 + ($50 + -7 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + 1;
     $56 = $4 + 1310736 + ($50 + -6 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $$2398;
     $60 = $4 + 1310736 + ($50 + -5 << 2) | 0;
     HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($50 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $66 = HEAP16[$46 + 2 >> 1] | 0;
    $69 = HEAP16[$46 + -2 >> 1] | 0;
    $71 = $69 << 16 >> 16 > 0;
    $72 = $$3 + -2 | 0;
    $73 = ($69 << 16 >> 16) + -1 | 0;
    if ($66 << 16 >> 16 <= 0) {
     if ($71) {
      HEAP16[$$3 >> 1] = $69;
      $165 = $73 * 7 | 0;
      $166 = $4 + 1310736 + ($165 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + 1;
      $170 = $4 + 1310736 + ($165 + 1 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $$2398;
      $174 = $4 + 1310736 + ($165 + 2 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + $$0393;
      $178 = $4 + 1310736 + ($165 + 4 << 2) | 0;
      if ((HEAP32[$178 >> 2] | 0) < ($$2398 | 0)) HEAP32[$178 >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($165 + 6 << 2) >> 2] = $$0393;
      $$3404 = $$1402;
      break;
     }
     $183 = HEAP16[$72 >> 1] | 0;
     if ($183 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $183;
      $186 = ($183 << 16 >> 16) * 7 | 0;
      $188 = $4 + 1310736 + ($186 + -7 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + 1;
      $192 = $4 + 1310736 + ($186 + -6 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $$2398;
      $196 = $4 + 1310736 + ($186 + -5 << 2) | 0;
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + $$0393;
      $199 = $186 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($199 << 2) >> 2] | 0) < ($$2398 | 0)) {
       $$2403 = $$1402;
       $$sink = $$2398;
       $$sink3 = $199;
      } else {
       $$3404 = $$1402;
       break;
      }
     } else {
      $203 = $$1402 + 1 | 0;
      if (($$1402 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $203;
      HEAP32[$4 + 1179664 + ($$1402 << 2) >> 2] = $203 << 16 >> 16;
      $208 = $$1402 * 7 | 0;
      HEAP32[$4 + 1310736 + ($208 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($208 + 1 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 2 << 2) >> 2] = $$0393;
      HEAP32[$4 + 1310736 + ($208 + 3 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 4 << 2) >> 2] = $$2398;
      HEAP32[$4 + 1310736 + ($208 + 5 << 2) >> 2] = $$0393;
      $$2403 = $203;
      $$sink = $$0393;
      $$sink3 = $208 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3404 = $$2403;
     break;
    }
    $75 = ($66 << 16 >> 16) + -1 | 0;
    $76 = $4 + 1179664 + ($75 << 2) | 0;
    if ($71) {
     $77 = HEAP32[$76 >> 2] | 0;
     $79 = HEAP32[$4 + 1179664 + ($73 << 2) >> 2] | 0;
     L36 : do if (($77 | 0) > ($79 | 0)) {
      HEAP16[$$3 >> 1] = $79;
      $$0385 = $22;
      $$0389 = 0;
      while (1) {
       if (($$0389 | 0) >= ($$1402 | 0)) {
        $94 = $79;
        break L36;
       }
       if ((HEAP32[$$0385 >> 2] | 0) == ($77 | 0)) HEAP32[$$0385 >> 2] = $79;
       $$0385 = $$0385 + 4 | 0;
       $$0389 = $$0389 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $77;
      if (($77 | 0) < ($79 | 0)) {
       $$1386 = $22;
       $$1390 = 0;
       while (1) {
        if (($$1390 | 0) >= ($$1402 | 0)) {
         $94 = $77;
         break L36;
        }
        if ((HEAP32[$$1386 >> 2] | 0) == ($79 | 0)) HEAP32[$$1386 >> 2] = $77;
        $$1386 = $$1386 + 4 | 0;
        $$1390 = $$1390 + 1 | 0;
       }
      } else $94 = $77;
     } while (0);
     $96 = ($94 << 16 >> 16) * 7 | 0;
     $98 = $4 + 1310736 + ($96 + -7 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 1;
     $102 = $4 + 1310736 + ($96 + -6 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $$2398;
     $106 = $4 + 1310736 + ($96 + -5 << 2) | 0;
     HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + $$0393;
     HEAP32[$4 + 1310736 + ($96 + -1 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $111 = HEAP16[$72 >> 1] | 0;
    if ($111 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $66;
     $147 = $75 * 7 | 0;
     $148 = $4 + 1310736 + ($147 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $4 + 1310736 + ($147 + 1 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $$2398;
     $156 = $4 + 1310736 + ($147 + 2 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $$0393;
     $160 = $4 + 1310736 + ($147 + 3 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($$2398 | 0)) HEAP32[$160 >> 2] = $$2398;
     HEAP32[$4 + 1310736 + ($147 + 6 << 2) >> 2] = $$0393;
     $$3404 = $$1402;
     break;
    }
    $114 = HEAP32[$76 >> 2] | 0;
    $117 = HEAP32[$4 + 1179664 + (($111 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($114 | 0) > ($117 | 0)) {
     HEAP16[$$3 >> 1] = $117;
     $$2387 = $22;
     $$2391 = 0;
     while (1) {
      if (($$2391 | 0) >= ($$1402 | 0)) {
       $132 = $117;
       break L59;
      }
      if ((HEAP32[$$2387 >> 2] | 0) == ($114 | 0)) HEAP32[$$2387 >> 2] = $117;
      $$2387 = $$2387 + 4 | 0;
      $$2391 = $$2391 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $114;
     if (($114 | 0) < ($117 | 0)) {
      $$3388 = $22;
      $$3392 = 0;
      while (1) {
       if (($$3392 | 0) >= ($$1402 | 0)) {
        $132 = $114;
        break L59;
       }
       if ((HEAP32[$$3388 >> 2] | 0) == ($117 | 0)) HEAP32[$$3388 >> 2] = $114;
       $$3388 = $$3388 + 4 | 0;
       $$3392 = $$3392 + 1 | 0;
      }
     } else $132 = $114;
    } while (0);
    $134 = ($132 << 16 >> 16) * 7 | 0;
    $136 = $4 + 1310736 + ($134 + -7 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
    $140 = $4 + 1310736 + ($134 + -6 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$2398;
    $144 = $4 + 1310736 + ($134 + -5 << 2) | 0;
    HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$0393;
    $$3404 = $$1402;
   } while (0);
   $$1 = $$1 + 8 | 0;
   $$1384 = $$1384 + 1 | 0;
   $$1402 = $$3404;
   $$2398 = $$2398 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0378 = $$1 + $32 + 16 | 0;
  $$0383 = $$1384 + 2 | 0;
  $$0393 = $$0393 + 1 | 0;
  $$0401 = $$1402;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $231 = $4 + 12 | 0;
  $$1394 = 1;
  $$3399 = 1;
  $$4 = $22;
  while (1) {
   if (($$3399 | 0) > ($$0401 | 0)) break;
   $233 = HEAP32[$$4 >> 2] | 0;
   if (($233 | 0) == ($$3399 | 0)) {
    $$2395 = $$1394 + 1 | 0;
    $239 = $$1394;
   } else {
    $$2395 = $$1394;
    $239 = HEAP32[$4 + 1179664 + ($233 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $239;
   $$1394 = $$2395;
   $$3399 = $$3399 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $242 = $4 + 8 | 0;
  $243 = $$1394 + -1 | 0;
  HEAP32[$242 >> 2] = $243;
  if (!$243) $$0 = 0; else {
   _memset($231 | 0, 0, $243 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $243 << 4 | 0) | 0;
   $$4400 = 0;
   $249 = $243;
   while (1) {
    if (($$4400 | 0) >= ($249 | 0)) {
     $$5 = 0;
     break;
    }
    $250 = $$4400 << 2;
    HEAP32[$4 + 131084 + ($250 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($250 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($250 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($250 | 3) << 2) >> 2] = 0;
    $$4400 = $$4400 + 1 | 0;
    $249 = HEAP32[$242 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0401 | 0)) {
     $$6 = 0;
     break;
    }
    $262 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $263 = $$5 * 7 | 0;
    $266 = $4 + 12 + ($262 << 2) | 0;
    HEAP32[$266 >> 2] = (HEAP32[$266 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($263 << 2) >> 2] | 0);
    $273 = $262 << 1;
    $274 = $4 + 655376 + ($273 << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($263 + 1 << 2) >> 2] | 0);
    $282 = $4 + 655376 + (($273 | 1) << 3) | 0;
    HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + +(HEAP32[$4 + 1310736 + ($263 + 2 << 2) >> 2] | 0);
    $285 = $262 << 2;
    $286 = $4 + 131084 + ($285 << 2) | 0;
    $290 = HEAP32[$4 + 1310736 + ($263 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $4 + 131084 + (($285 | 1) << 2) | 0;
    $297 = HEAP32[$4 + 1310736 + ($263 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $300 = $4 + 131084 + (($285 | 2) << 2) | 0;
    $304 = HEAP32[$4 + 1310736 + ($263 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$300 >> 2] | 0) > ($304 | 0)) HEAP32[$300 >> 2] = $304;
    $307 = $4 + 131084 + (($285 | 3) << 2) | 0;
    $311 = HEAP32[$4 + 1310736 + ($263 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$307 >> 2] | 0) < ($311 | 0)) HEAP32[$307 >> 2] = $311;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$242 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $316 = $4 + 12 + ($$6 << 2) | 0;
    $319 = $$6 << 1;
    $320 = $4 + 655376 + ($319 << 3) | 0;
    HEAPF64[$320 >> 3] = +HEAPF64[$320 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $326 = $4 + 655376 + (($319 | 1) << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3CA5551($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0377 = 0, $$0378 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0388 = 0, $$0392 = 0, $$0395 = 0, $$0400 = 0, $$1 = 0, $$1379 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1389 = 0, $$1393 = 0, $$1396 = 0, $$1401 = 0, $$2 = 0, $$2386 = 0, $$2390 = 0, $$2394 = 0, $$2397 = 0, $$2402 = 0, $$3 = 0, $$3387 = 0, $$3391 = 0, $$3398 = 0, $$3403 = 0, $$4 = 0, $$4399 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $108 = 0, $113 = 0, $116 = 0, $119 = 0, $13 = 0, $134 = 0, $136 = 0, $138 = 0, $14 = 0, $142 = 0, $146 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $167 = 0, $168 = 0, $172 = 0, $176 = 0, $180 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $20 = 0, $201 = 0, $205 = 0, $21 = 0, $210 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $32 = 0, $320 = 0, $321 = 0, $327 = 0, $38 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0378 = $5;
 $$0380 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0395 = 0;
 while (1) {
  if (($$0395 | 0) >= ($1 | 0)) break;
  HEAP16[$$0380 >> 1] = 0;
  HEAP16[$$0378 >> 1] = 0;
  $$0378 = $$0378 + 2 | 0;
  $$0380 = $$0380 + 2 | 0;
  $$0395 = $$0395 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1379 = $5;
 $$1381 = $5 + ($14 << 1) | 0;
 $$1396 = 0;
 while (1) {
  if (($$1396 | 0) >= ($2 | 0)) break;
  HEAP16[$$1381 >> 1] = 0;
  HEAP16[$$1379 >> 1] = 0;
  $$1379 = $$1379 + ($1 << 1) | 0;
  $$1381 = $$1381 + ($1 << 1) | 0;
  $$1396 = $$1396 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0377 = $0 + ($21 << 1) | 0;
 $$0382 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0392 = 1;
 $$0400 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0392 | 0) < ($6 | 0)) {
   $$1 = $$0377;
   $$1383 = $$0382;
   $$1401 = $$0400;
   $$2397 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2397 | 0) >= ($14 | 0)) break;
   $32 = HEAPU8[$$1 >> 0] | 0;
   $38 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($32 & 248) + 12 + ($32 << 5 & 224) + ($38 >>> 3 & 24) + ($38 << 2 & 248) | 0) > ($13 | 0)) {
    HEAP8[$$1383 >> 0] = -1;
    $48 = $$3 + ($28 << 1) | 0;
    $49 = HEAP16[$48 >> 1] | 0;
    if ($49 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $49;
     $52 = ($49 << 16 >> 16) * 7 | 0;
     $54 = $4 + 1310736 + ($52 + -7 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + 1;
     $58 = $4 + 1310736 + ($52 + -6 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$2397;
     $62 = $4 + 1310736 + ($52 + -5 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$0392;
     HEAP32[$4 + 1310736 + ($52 + -1 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $68 = HEAP16[$48 + 2 >> 1] | 0;
    $71 = HEAP16[$48 + -2 >> 1] | 0;
    $73 = $71 << 16 >> 16 > 0;
    $74 = $$3 + -2 | 0;
    $75 = ($71 << 16 >> 16) + -1 | 0;
    if ($68 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$$3 >> 1] = $71;
      $167 = $75 * 7 | 0;
      $168 = $4 + 1310736 + ($167 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $4 + 1310736 + ($167 + 1 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$2397;
      $176 = $4 + 1310736 + ($167 + 2 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$0392;
      $180 = $4 + 1310736 + ($167 + 4 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($$2397 | 0)) HEAP32[$180 >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($167 + 6 << 2) >> 2] = $$0392;
      $$3403 = $$1401;
      break;
     }
     $185 = HEAP16[$74 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $4 + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $4 + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$2397;
      $198 = $4 + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$0392;
      $201 = $188 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($201 << 2) >> 2] | 0) < ($$2397 | 0)) {
       $$2402 = $$1401;
       $$sink = $$2397;
       $$sink3 = $201;
      } else {
       $$3403 = $$1401;
       break;
      }
     } else {
      $205 = $$1401 + 1 | 0;
      if (($$1401 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $205;
      HEAP32[$4 + 1179664 + ($$1401 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $$1401 * 7 | 0;
      HEAP32[$4 + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($210 + 1 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 2 << 2) >> 2] = $$0392;
      HEAP32[$4 + 1310736 + ($210 + 3 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 4 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 5 << 2) >> 2] = $$0392;
      $$2402 = $205;
      $$sink = $$0392;
      $$sink3 = $210 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3403 = $$2402;
     break;
    }
    $77 = ($68 << 16 >> 16) + -1 | 0;
    $78 = $4 + 1179664 + ($77 << 2) | 0;
    if ($73) {
     $79 = HEAP32[$78 >> 2] | 0;
     $81 = HEAP32[$4 + 1179664 + ($75 << 2) >> 2] | 0;
     L35 : do if (($79 | 0) > ($81 | 0)) {
      HEAP16[$$3 >> 1] = $81;
      $$0384 = $20;
      $$0388 = 0;
      while (1) {
       if (($$0388 | 0) >= ($$1401 | 0)) {
        $96 = $81;
        break L35;
       }
       if ((HEAP32[$$0384 >> 2] | 0) == ($79 | 0)) HEAP32[$$0384 >> 2] = $81;
       $$0384 = $$0384 + 4 | 0;
       $$0388 = $$0388 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $79;
      if (($79 | 0) < ($81 | 0)) {
       $$1385 = $20;
       $$1389 = 0;
       while (1) {
        if (($$1389 | 0) >= ($$1401 | 0)) {
         $96 = $79;
         break L35;
        }
        if ((HEAP32[$$1385 >> 2] | 0) == ($81 | 0)) HEAP32[$$1385 >> 2] = $79;
        $$1385 = $$1385 + 4 | 0;
        $$1389 = $$1389 + 1 | 0;
       }
      } else $96 = $79;
     } while (0);
     $98 = ($96 << 16 >> 16) * 7 | 0;
     $100 = $4 + 1310736 + ($98 + -7 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + 1;
     $104 = $4 + 1310736 + ($98 + -6 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$2397;
     $108 = $4 + 1310736 + ($98 + -5 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$0392;
     HEAP32[$4 + 1310736 + ($98 + -1 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $113 = HEAP16[$74 >> 1] | 0;
    if ($113 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $68;
     $149 = $77 * 7 | 0;
     $150 = $4 + 1310736 + ($149 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
     $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2397;
     $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0392;
     $162 = $4 + 1310736 + ($149 + 3 << 2) | 0;
     if ((HEAP32[$162 >> 2] | 0) > ($$2397 | 0)) HEAP32[$162 >> 2] = $$2397;
     HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $116 = HEAP32[$78 >> 2] | 0;
    $119 = HEAP32[$4 + 1179664 + (($113 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($116 | 0) > ($119 | 0)) {
     HEAP16[$$3 >> 1] = $119;
     $$2386 = $20;
     $$2390 = 0;
     while (1) {
      if (($$2390 | 0) >= ($$1401 | 0)) {
       $134 = $119;
       break L58;
      }
      if ((HEAP32[$$2386 >> 2] | 0) == ($116 | 0)) HEAP32[$$2386 >> 2] = $119;
      $$2386 = $$2386 + 4 | 0;
      $$2390 = $$2390 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $116;
     if (($116 | 0) < ($119 | 0)) {
      $$3387 = $20;
      $$3391 = 0;
      while (1) {
       if (($$3391 | 0) >= ($$1401 | 0)) {
        $134 = $116;
        break L58;
       }
       if ((HEAP32[$$3387 >> 2] | 0) == ($119 | 0)) HEAP32[$$3387 >> 2] = $116;
       $$3387 = $$3387 + 4 | 0;
       $$3391 = $$3391 + 1 | 0;
      }
     } else $134 = $116;
    } while (0);
    $136 = ($134 << 16 >> 16) * 7 | 0;
    $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
    $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2397;
    $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0392;
    $$3403 = $$1401;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1383 >> 0] = 0;
    $$3403 = $$1401;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1383 = $$1383 + 1 | 0;
   $$1401 = $$3403;
   $$2397 = $$2397 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0377 = $$1 + 4 | 0;
  $$0382 = $$1383 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
  $$0400 = $$1401;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1393 = 1;
  $$3398 = 1;
  $$4 = $20;
  while (1) {
   if (($$3398 | 0) > ($$0400 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3398 | 0)) {
    $$2394 = $$1393 + 1 | 0;
    $240 = $$1393;
   } else {
    $$2394 = $$1393;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1393 = $$2394;
   $$3398 = $$3398 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1393 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4399 = 0;
   $250 = $244;
   while (1) {
    if (($$4399 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4399 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4399 = $$4399 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0400 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBR3CA5551($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0377 = 0, $$0378 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0388 = 0, $$0392 = 0, $$0395 = 0, $$0400 = 0, $$1 = 0, $$1379 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1389 = 0, $$1393 = 0, $$1396 = 0, $$1401 = 0, $$2 = 0, $$2386 = 0, $$2390 = 0, $$2394 = 0, $$2397 = 0, $$2402 = 0, $$3 = 0, $$3387 = 0, $$3391 = 0, $$3398 = 0, $$3403 = 0, $$4 = 0, $$4399 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $108 = 0, $113 = 0, $116 = 0, $119 = 0, $13 = 0, $134 = 0, $136 = 0, $138 = 0, $14 = 0, $142 = 0, $146 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $167 = 0, $168 = 0, $172 = 0, $176 = 0, $180 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $20 = 0, $201 = 0, $205 = 0, $21 = 0, $210 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $32 = 0, $320 = 0, $321 = 0, $327 = 0, $38 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0378 = $5;
 $$0380 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0395 = 0;
 while (1) {
  if (($$0395 | 0) >= ($1 | 0)) break;
  HEAP16[$$0380 >> 1] = 0;
  HEAP16[$$0378 >> 1] = 0;
  $$0378 = $$0378 + 2 | 0;
  $$0380 = $$0380 + 2 | 0;
  $$0395 = $$0395 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1379 = $5;
 $$1381 = $5 + ($14 << 1) | 0;
 $$1396 = 0;
 while (1) {
  if (($$1396 | 0) >= ($2 | 0)) break;
  HEAP16[$$1381 >> 1] = 0;
  HEAP16[$$1379 >> 1] = 0;
  $$1379 = $$1379 + ($1 << 1) | 0;
  $$1381 = $$1381 + ($1 << 1) | 0;
  $$1396 = $$1396 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0377 = $0 + ($21 << 1) | 0;
 $$0382 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0392 = 1;
 $$0400 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0392 | 0) < ($6 | 0)) {
   $$1 = $$0377;
   $$1383 = $$0382;
   $$1401 = $$0400;
   $$2397 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2397 | 0) >= ($14 | 0)) break;
   $32 = HEAPU8[$$1 >> 0] | 0;
   $38 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($32 & 248) + 12 + ($32 << 5 & 224) + ($38 >>> 3 & 24) + ($38 << 2 & 248) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1383 >> 0] = 0;
    $$3403 = $$1401;
   } else {
    HEAP8[$$1383 >> 0] = -1;
    $48 = $$3 + ($28 << 1) | 0;
    $49 = HEAP16[$48 >> 1] | 0;
    if ($49 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $49;
     $52 = ($49 << 16 >> 16) * 7 | 0;
     $54 = $4 + 1310736 + ($52 + -7 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + 1;
     $58 = $4 + 1310736 + ($52 + -6 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$2397;
     $62 = $4 + 1310736 + ($52 + -5 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$0392;
     HEAP32[$4 + 1310736 + ($52 + -1 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $68 = HEAP16[$48 + 2 >> 1] | 0;
    $71 = HEAP16[$48 + -2 >> 1] | 0;
    $73 = $71 << 16 >> 16 > 0;
    $74 = $$3 + -2 | 0;
    $75 = ($71 << 16 >> 16) + -1 | 0;
    if ($68 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$$3 >> 1] = $71;
      $167 = $75 * 7 | 0;
      $168 = $4 + 1310736 + ($167 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $4 + 1310736 + ($167 + 1 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$2397;
      $176 = $4 + 1310736 + ($167 + 2 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$0392;
      $180 = $4 + 1310736 + ($167 + 4 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($$2397 | 0)) HEAP32[$180 >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($167 + 6 << 2) >> 2] = $$0392;
      $$3403 = $$1401;
      break;
     }
     $185 = HEAP16[$74 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $4 + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $4 + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$2397;
      $198 = $4 + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$0392;
      $201 = $188 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($201 << 2) >> 2] | 0) < ($$2397 | 0)) {
       $$2402 = $$1401;
       $$sink = $$2397;
       $$sink3 = $201;
      } else {
       $$3403 = $$1401;
       break;
      }
     } else {
      $205 = $$1401 + 1 | 0;
      if (($$1401 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $205;
      HEAP32[$4 + 1179664 + ($$1401 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $$1401 * 7 | 0;
      HEAP32[$4 + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($210 + 1 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 2 << 2) >> 2] = $$0392;
      HEAP32[$4 + 1310736 + ($210 + 3 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 4 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 5 << 2) >> 2] = $$0392;
      $$2402 = $205;
      $$sink = $$0392;
      $$sink3 = $210 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3403 = $$2402;
     break;
    }
    $77 = ($68 << 16 >> 16) + -1 | 0;
    $78 = $4 + 1179664 + ($77 << 2) | 0;
    if ($73) {
     $79 = HEAP32[$78 >> 2] | 0;
     $81 = HEAP32[$4 + 1179664 + ($75 << 2) >> 2] | 0;
     L36 : do if (($79 | 0) > ($81 | 0)) {
      HEAP16[$$3 >> 1] = $81;
      $$0384 = $20;
      $$0388 = 0;
      while (1) {
       if (($$0388 | 0) >= ($$1401 | 0)) {
        $96 = $81;
        break L36;
       }
       if ((HEAP32[$$0384 >> 2] | 0) == ($79 | 0)) HEAP32[$$0384 >> 2] = $81;
       $$0384 = $$0384 + 4 | 0;
       $$0388 = $$0388 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $79;
      if (($79 | 0) < ($81 | 0)) {
       $$1385 = $20;
       $$1389 = 0;
       while (1) {
        if (($$1389 | 0) >= ($$1401 | 0)) {
         $96 = $79;
         break L36;
        }
        if ((HEAP32[$$1385 >> 2] | 0) == ($81 | 0)) HEAP32[$$1385 >> 2] = $79;
        $$1385 = $$1385 + 4 | 0;
        $$1389 = $$1389 + 1 | 0;
       }
      } else $96 = $79;
     } while (0);
     $98 = ($96 << 16 >> 16) * 7 | 0;
     $100 = $4 + 1310736 + ($98 + -7 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + 1;
     $104 = $4 + 1310736 + ($98 + -6 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$2397;
     $108 = $4 + 1310736 + ($98 + -5 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$0392;
     HEAP32[$4 + 1310736 + ($98 + -1 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $113 = HEAP16[$74 >> 1] | 0;
    if ($113 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $68;
     $149 = $77 * 7 | 0;
     $150 = $4 + 1310736 + ($149 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
     $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2397;
     $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0392;
     $162 = $4 + 1310736 + ($149 + 3 << 2) | 0;
     if ((HEAP32[$162 >> 2] | 0) > ($$2397 | 0)) HEAP32[$162 >> 2] = $$2397;
     HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $116 = HEAP32[$78 >> 2] | 0;
    $119 = HEAP32[$4 + 1179664 + (($113 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($116 | 0) > ($119 | 0)) {
     HEAP16[$$3 >> 1] = $119;
     $$2386 = $20;
     $$2390 = 0;
     while (1) {
      if (($$2390 | 0) >= ($$1401 | 0)) {
       $134 = $119;
       break L59;
      }
      if ((HEAP32[$$2386 >> 2] | 0) == ($116 | 0)) HEAP32[$$2386 >> 2] = $119;
      $$2386 = $$2386 + 4 | 0;
      $$2390 = $$2390 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $116;
     if (($116 | 0) < ($119 | 0)) {
      $$3387 = $20;
      $$3391 = 0;
      while (1) {
       if (($$3391 | 0) >= ($$1401 | 0)) {
        $134 = $116;
        break L59;
       }
       if ((HEAP32[$$3387 >> 2] | 0) == ($119 | 0)) HEAP32[$$3387 >> 2] = $116;
       $$3387 = $$3387 + 4 | 0;
       $$3391 = $$3391 + 1 | 0;
      }
     } else $134 = $116;
    } while (0);
    $136 = ($134 << 16 >> 16) * 7 | 0;
    $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
    $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2397;
    $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0392;
    $$3403 = $$1401;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1383 = $$1383 + 1 | 0;
   $$1401 = $$3403;
   $$2397 = $$2397 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0377 = $$1 + 4 | 0;
  $$0382 = $$1383 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
  $$0400 = $$1401;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1393 = 1;
  $$3398 = 1;
  $$4 = $20;
  while (1) {
   if (($$3398 | 0) > ($$0400 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3398 | 0)) {
    $$2394 = $$1393 + 1 | 0;
    $240 = $$1393;
   } else {
    $$2394 = $$1393;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1393 = $$2394;
   $$3398 = $$3398 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1393 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4399 = 0;
   $250 = $244;
   while (1) {
    if (($$4399 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4399 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4399 = $$4399 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0400 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3C565($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0377 = 0, $$0378 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0388 = 0, $$0392 = 0, $$0395 = 0, $$0400 = 0, $$1 = 0, $$1379 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1389 = 0, $$1393 = 0, $$1396 = 0, $$1401 = 0, $$2 = 0, $$2386 = 0, $$2390 = 0, $$2394 = 0, $$2397 = 0, $$2402 = 0, $$3 = 0, $$3387 = 0, $$3391 = 0, $$3398 = 0, $$3403 = 0, $$4 = 0, $$4399 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $108 = 0, $113 = 0, $116 = 0, $119 = 0, $13 = 0, $134 = 0, $136 = 0, $138 = 0, $14 = 0, $142 = 0, $146 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $167 = 0, $168 = 0, $172 = 0, $176 = 0, $180 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $20 = 0, $201 = 0, $205 = 0, $21 = 0, $210 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $32 = 0, $320 = 0, $321 = 0, $327 = 0, $38 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0378 = $5;
 $$0380 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0395 = 0;
 while (1) {
  if (($$0395 | 0) >= ($1 | 0)) break;
  HEAP16[$$0380 >> 1] = 0;
  HEAP16[$$0378 >> 1] = 0;
  $$0378 = $$0378 + 2 | 0;
  $$0380 = $$0380 + 2 | 0;
  $$0395 = $$0395 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1379 = $5;
 $$1381 = $5 + ($14 << 1) | 0;
 $$1396 = 0;
 while (1) {
  if (($$1396 | 0) >= ($2 | 0)) break;
  HEAP16[$$1381 >> 1] = 0;
  HEAP16[$$1379 >> 1] = 0;
  $$1379 = $$1379 + ($1 << 1) | 0;
  $$1381 = $$1381 + ($1 << 1) | 0;
  $$1396 = $$1396 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0377 = $0 + ($21 << 1) | 0;
 $$0382 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0392 = 1;
 $$0400 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0392 | 0) < ($6 | 0)) {
   $$1 = $$0377;
   $$1383 = $$0382;
   $$1401 = $$0400;
   $$2397 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2397 | 0) >= ($14 | 0)) break;
   $32 = HEAPU8[$$1 >> 0] | 0;
   $38 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($32 & 248) + 10 + ($32 << 5 & 224) + ($38 >>> 3 & 28) + ($38 << 3 & 248) | 0) > ($13 | 0)) {
    HEAP8[$$1383 >> 0] = -1;
    $48 = $$3 + ($28 << 1) | 0;
    $49 = HEAP16[$48 >> 1] | 0;
    if ($49 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $49;
     $52 = ($49 << 16 >> 16) * 7 | 0;
     $54 = $4 + 1310736 + ($52 + -7 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + 1;
     $58 = $4 + 1310736 + ($52 + -6 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$2397;
     $62 = $4 + 1310736 + ($52 + -5 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$0392;
     HEAP32[$4 + 1310736 + ($52 + -1 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $68 = HEAP16[$48 + 2 >> 1] | 0;
    $71 = HEAP16[$48 + -2 >> 1] | 0;
    $73 = $71 << 16 >> 16 > 0;
    $74 = $$3 + -2 | 0;
    $75 = ($71 << 16 >> 16) + -1 | 0;
    if ($68 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$$3 >> 1] = $71;
      $167 = $75 * 7 | 0;
      $168 = $4 + 1310736 + ($167 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $4 + 1310736 + ($167 + 1 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$2397;
      $176 = $4 + 1310736 + ($167 + 2 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$0392;
      $180 = $4 + 1310736 + ($167 + 4 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($$2397 | 0)) HEAP32[$180 >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($167 + 6 << 2) >> 2] = $$0392;
      $$3403 = $$1401;
      break;
     }
     $185 = HEAP16[$74 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $4 + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $4 + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$2397;
      $198 = $4 + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$0392;
      $201 = $188 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($201 << 2) >> 2] | 0) < ($$2397 | 0)) {
       $$2402 = $$1401;
       $$sink = $$2397;
       $$sink3 = $201;
      } else {
       $$3403 = $$1401;
       break;
      }
     } else {
      $205 = $$1401 + 1 | 0;
      if (($$1401 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $205;
      HEAP32[$4 + 1179664 + ($$1401 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $$1401 * 7 | 0;
      HEAP32[$4 + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($210 + 1 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 2 << 2) >> 2] = $$0392;
      HEAP32[$4 + 1310736 + ($210 + 3 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 4 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 5 << 2) >> 2] = $$0392;
      $$2402 = $205;
      $$sink = $$0392;
      $$sink3 = $210 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3403 = $$2402;
     break;
    }
    $77 = ($68 << 16 >> 16) + -1 | 0;
    $78 = $4 + 1179664 + ($77 << 2) | 0;
    if ($73) {
     $79 = HEAP32[$78 >> 2] | 0;
     $81 = HEAP32[$4 + 1179664 + ($75 << 2) >> 2] | 0;
     L35 : do if (($79 | 0) > ($81 | 0)) {
      HEAP16[$$3 >> 1] = $81;
      $$0384 = $20;
      $$0388 = 0;
      while (1) {
       if (($$0388 | 0) >= ($$1401 | 0)) {
        $96 = $81;
        break L35;
       }
       if ((HEAP32[$$0384 >> 2] | 0) == ($79 | 0)) HEAP32[$$0384 >> 2] = $81;
       $$0384 = $$0384 + 4 | 0;
       $$0388 = $$0388 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $79;
      if (($79 | 0) < ($81 | 0)) {
       $$1385 = $20;
       $$1389 = 0;
       while (1) {
        if (($$1389 | 0) >= ($$1401 | 0)) {
         $96 = $79;
         break L35;
        }
        if ((HEAP32[$$1385 >> 2] | 0) == ($81 | 0)) HEAP32[$$1385 >> 2] = $79;
        $$1385 = $$1385 + 4 | 0;
        $$1389 = $$1389 + 1 | 0;
       }
      } else $96 = $79;
     } while (0);
     $98 = ($96 << 16 >> 16) * 7 | 0;
     $100 = $4 + 1310736 + ($98 + -7 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + 1;
     $104 = $4 + 1310736 + ($98 + -6 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$2397;
     $108 = $4 + 1310736 + ($98 + -5 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$0392;
     HEAP32[$4 + 1310736 + ($98 + -1 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $113 = HEAP16[$74 >> 1] | 0;
    if ($113 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $68;
     $149 = $77 * 7 | 0;
     $150 = $4 + 1310736 + ($149 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
     $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2397;
     $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0392;
     $162 = $4 + 1310736 + ($149 + 3 << 2) | 0;
     if ((HEAP32[$162 >> 2] | 0) > ($$2397 | 0)) HEAP32[$162 >> 2] = $$2397;
     HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $116 = HEAP32[$78 >> 2] | 0;
    $119 = HEAP32[$4 + 1179664 + (($113 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($116 | 0) > ($119 | 0)) {
     HEAP16[$$3 >> 1] = $119;
     $$2386 = $20;
     $$2390 = 0;
     while (1) {
      if (($$2390 | 0) >= ($$1401 | 0)) {
       $134 = $119;
       break L58;
      }
      if ((HEAP32[$$2386 >> 2] | 0) == ($116 | 0)) HEAP32[$$2386 >> 2] = $119;
      $$2386 = $$2386 + 4 | 0;
      $$2390 = $$2390 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $116;
     if (($116 | 0) < ($119 | 0)) {
      $$3387 = $20;
      $$3391 = 0;
      while (1) {
       if (($$3391 | 0) >= ($$1401 | 0)) {
        $134 = $116;
        break L58;
       }
       if ((HEAP32[$$3387 >> 2] | 0) == ($119 | 0)) HEAP32[$$3387 >> 2] = $116;
       $$3387 = $$3387 + 4 | 0;
       $$3391 = $$3391 + 1 | 0;
      }
     } else $134 = $116;
    } while (0);
    $136 = ($134 << 16 >> 16) * 7 | 0;
    $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
    $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2397;
    $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0392;
    $$3403 = $$1401;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1383 >> 0] = 0;
    $$3403 = $$1401;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1383 = $$1383 + 1 | 0;
   $$1401 = $$3403;
   $$2397 = $$2397 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0377 = $$1 + 4 | 0;
  $$0382 = $$1383 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
  $$0400 = $$1401;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1393 = 1;
  $$3398 = 1;
  $$4 = $20;
  while (1) {
   if (($$3398 | 0) > ($$0400 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3398 | 0)) {
    $$2394 = $$1393 + 1 | 0;
    $240 = $$1393;
   } else {
    $$2394 = $$1393;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1393 = $$2394;
   $$3398 = $$3398 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1393 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4399 = 0;
   $250 = $244;
   while (1) {
    if (($$4399 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4399 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4399 = $$4399 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0400 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBR3C565($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0377 = 0, $$0378 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0388 = 0, $$0392 = 0, $$0395 = 0, $$0400 = 0, $$1 = 0, $$1379 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1389 = 0, $$1393 = 0, $$1396 = 0, $$1401 = 0, $$2 = 0, $$2386 = 0, $$2390 = 0, $$2394 = 0, $$2397 = 0, $$2402 = 0, $$3 = 0, $$3387 = 0, $$3391 = 0, $$3398 = 0, $$3403 = 0, $$4 = 0, $$4399 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $108 = 0, $113 = 0, $116 = 0, $119 = 0, $13 = 0, $134 = 0, $136 = 0, $138 = 0, $14 = 0, $142 = 0, $146 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $167 = 0, $168 = 0, $172 = 0, $176 = 0, $180 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $20 = 0, $201 = 0, $205 = 0, $21 = 0, $210 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $32 = 0, $320 = 0, $321 = 0, $327 = 0, $38 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0378 = $5;
 $$0380 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0395 = 0;
 while (1) {
  if (($$0395 | 0) >= ($1 | 0)) break;
  HEAP16[$$0380 >> 1] = 0;
  HEAP16[$$0378 >> 1] = 0;
  $$0378 = $$0378 + 2 | 0;
  $$0380 = $$0380 + 2 | 0;
  $$0395 = $$0395 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1379 = $5;
 $$1381 = $5 + ($14 << 1) | 0;
 $$1396 = 0;
 while (1) {
  if (($$1396 | 0) >= ($2 | 0)) break;
  HEAP16[$$1381 >> 1] = 0;
  HEAP16[$$1379 >> 1] = 0;
  $$1379 = $$1379 + ($1 << 1) | 0;
  $$1381 = $$1381 + ($1 << 1) | 0;
  $$1396 = $$1396 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0377 = $0 + ($21 << 1) | 0;
 $$0382 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0392 = 1;
 $$0400 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0392 | 0) < ($6 | 0)) {
   $$1 = $$0377;
   $$1383 = $$0382;
   $$1401 = $$0400;
   $$2397 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2397 | 0) >= ($14 | 0)) break;
   $32 = HEAPU8[$$1 >> 0] | 0;
   $38 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($32 & 248) + 10 + ($32 << 5 & 224) + ($38 >>> 3 & 28) + ($38 << 3 & 248) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1383 >> 0] = 0;
    $$3403 = $$1401;
   } else {
    HEAP8[$$1383 >> 0] = -1;
    $48 = $$3 + ($28 << 1) | 0;
    $49 = HEAP16[$48 >> 1] | 0;
    if ($49 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $49;
     $52 = ($49 << 16 >> 16) * 7 | 0;
     $54 = $4 + 1310736 + ($52 + -7 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + 1;
     $58 = $4 + 1310736 + ($52 + -6 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$2397;
     $62 = $4 + 1310736 + ($52 + -5 << 2) | 0;
     HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + $$0392;
     HEAP32[$4 + 1310736 + ($52 + -1 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $68 = HEAP16[$48 + 2 >> 1] | 0;
    $71 = HEAP16[$48 + -2 >> 1] | 0;
    $73 = $71 << 16 >> 16 > 0;
    $74 = $$3 + -2 | 0;
    $75 = ($71 << 16 >> 16) + -1 | 0;
    if ($68 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$$3 >> 1] = $71;
      $167 = $75 * 7 | 0;
      $168 = $4 + 1310736 + ($167 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $4 + 1310736 + ($167 + 1 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$2397;
      $176 = $4 + 1310736 + ($167 + 2 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$0392;
      $180 = $4 + 1310736 + ($167 + 4 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($$2397 | 0)) HEAP32[$180 >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($167 + 6 << 2) >> 2] = $$0392;
      $$3403 = $$1401;
      break;
     }
     $185 = HEAP16[$74 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $4 + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $4 + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$2397;
      $198 = $4 + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $$0392;
      $201 = $188 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($201 << 2) >> 2] | 0) < ($$2397 | 0)) {
       $$2402 = $$1401;
       $$sink = $$2397;
       $$sink3 = $201;
      } else {
       $$3403 = $$1401;
       break;
      }
     } else {
      $205 = $$1401 + 1 | 0;
      if (($$1401 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $205;
      HEAP32[$4 + 1179664 + ($$1401 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $$1401 * 7 | 0;
      HEAP32[$4 + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($210 + 1 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 2 << 2) >> 2] = $$0392;
      HEAP32[$4 + 1310736 + ($210 + 3 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 4 << 2) >> 2] = $$2397;
      HEAP32[$4 + 1310736 + ($210 + 5 << 2) >> 2] = $$0392;
      $$2402 = $205;
      $$sink = $$0392;
      $$sink3 = $210 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3403 = $$2402;
     break;
    }
    $77 = ($68 << 16 >> 16) + -1 | 0;
    $78 = $4 + 1179664 + ($77 << 2) | 0;
    if ($73) {
     $79 = HEAP32[$78 >> 2] | 0;
     $81 = HEAP32[$4 + 1179664 + ($75 << 2) >> 2] | 0;
     L36 : do if (($79 | 0) > ($81 | 0)) {
      HEAP16[$$3 >> 1] = $81;
      $$0384 = $20;
      $$0388 = 0;
      while (1) {
       if (($$0388 | 0) >= ($$1401 | 0)) {
        $96 = $81;
        break L36;
       }
       if ((HEAP32[$$0384 >> 2] | 0) == ($79 | 0)) HEAP32[$$0384 >> 2] = $81;
       $$0384 = $$0384 + 4 | 0;
       $$0388 = $$0388 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $79;
      if (($79 | 0) < ($81 | 0)) {
       $$1385 = $20;
       $$1389 = 0;
       while (1) {
        if (($$1389 | 0) >= ($$1401 | 0)) {
         $96 = $79;
         break L36;
        }
        if ((HEAP32[$$1385 >> 2] | 0) == ($81 | 0)) HEAP32[$$1385 >> 2] = $79;
        $$1385 = $$1385 + 4 | 0;
        $$1389 = $$1389 + 1 | 0;
       }
      } else $96 = $79;
     } while (0);
     $98 = ($96 << 16 >> 16) * 7 | 0;
     $100 = $4 + 1310736 + ($98 + -7 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + 1;
     $104 = $4 + 1310736 + ($98 + -6 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$2397;
     $108 = $4 + 1310736 + ($98 + -5 << 2) | 0;
     HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + $$0392;
     HEAP32[$4 + 1310736 + ($98 + -1 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $113 = HEAP16[$74 >> 1] | 0;
    if ($113 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $68;
     $149 = $77 * 7 | 0;
     $150 = $4 + 1310736 + ($149 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
     $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2397;
     $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0392;
     $162 = $4 + 1310736 + ($149 + 3 << 2) | 0;
     if ((HEAP32[$162 >> 2] | 0) > ($$2397 | 0)) HEAP32[$162 >> 2] = $$2397;
     HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0392;
     $$3403 = $$1401;
     break;
    }
    $116 = HEAP32[$78 >> 2] | 0;
    $119 = HEAP32[$4 + 1179664 + (($113 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($116 | 0) > ($119 | 0)) {
     HEAP16[$$3 >> 1] = $119;
     $$2386 = $20;
     $$2390 = 0;
     while (1) {
      if (($$2390 | 0) >= ($$1401 | 0)) {
       $134 = $119;
       break L59;
      }
      if ((HEAP32[$$2386 >> 2] | 0) == ($116 | 0)) HEAP32[$$2386 >> 2] = $119;
      $$2386 = $$2386 + 4 | 0;
      $$2390 = $$2390 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $116;
     if (($116 | 0) < ($119 | 0)) {
      $$3387 = $20;
      $$3391 = 0;
      while (1) {
       if (($$3391 | 0) >= ($$1401 | 0)) {
        $134 = $116;
        break L59;
       }
       if ((HEAP32[$$3387 >> 2] | 0) == ($119 | 0)) HEAP32[$$3387 >> 2] = $116;
       $$3387 = $$3387 + 4 | 0;
       $$3391 = $$3391 + 1 | 0;
      }
     } else $134 = $116;
    } while (0);
    $136 = ($134 << 16 >> 16) * 7 | 0;
    $138 = $4 + 1310736 + ($136 + -7 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
    $142 = $4 + 1310736 + ($136 + -6 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2397;
    $146 = $4 + 1310736 + ($136 + -5 << 2) | 0;
    HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0392;
    $$3403 = $$1401;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1383 = $$1383 + 1 | 0;
   $$1401 = $$3403;
   $$2397 = $$2397 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0377 = $$1 + 4 | 0;
  $$0382 = $$1383 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
  $$0400 = $$1401;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1393 = 1;
  $$3398 = 1;
  $$4 = $20;
  while (1) {
   if (($$3398 | 0) > ($$0400 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3398 | 0)) {
    $$2394 = $$1393 + 1 | 0;
    $240 = $$1393;
   } else {
    $$2394 = $$1393;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1393 = $$2394;
   $$3398 = $$3398 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1393 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4399 = 0;
   $250 = $244;
   while (1) {
    if (($$4399 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4399 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4399 = $$4399 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0400 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWZ($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0377 = 0, $$0378 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0388 = 0, $$0391 = 0, $$0396 = 0, $$0400 = 0, $$0404 = 0, $$1 = 0, $$1379 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1389 = 0, $$1392 = 0, $$1397 = 0, $$1401 = 0, $$1405 = 0, $$2 = 0, $$2386 = 0, $$2390 = 0, $$2393 = 0, $$2398 = 0, $$2402 = 0, $$3 = 0, $$3387 = 0, $$3394 = 0, $$3399 = 0, $$3403 = 0, $$4 = 0, $$4395 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $104 = 0, $119 = 0, $121 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $152 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $186 = 0, $19 = 0, $190 = 0, $195 = 0, $20 = 0, $219 = 0, $221 = 0, $227 = 0, $230 = 0, $231 = 0, $237 = 0, $238 = 0, $250 = 0, $251 = 0, $254 = 0, $261 = 0, $262 = 0, $27 = 0, $270 = 0, $273 = 0, $274 = 0, $278 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $304 = 0, $307 = 0, $308 = 0, $314 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $93 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0380 = $5;
 $$0391 = 0;
 $$0400 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 while (1) {
  if (($$0391 | 0) >= ($1 | 0)) break;
  HEAP16[$$0400 >> 1] = 0;
  HEAP16[$$0380 >> 1] = 0;
  $$0380 = $$0380 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0400 = $$0400 + 2 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1381 = $5;
 $$1392 = 0;
 $$1401 = $5 + ($13 << 1) | 0;
 while (1) {
  if (($$1392 | 0) >= ($2 | 0)) break;
  HEAP16[$$1401 >> 1] = 0;
  HEAP16[$$1381 >> 1] = 0;
  $$1381 = $$1381 + ($1 << 1) | 0;
  $$1392 = $$1392 + 1 | 0;
  $$1401 = $$1401 + ($1 << 1) | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $27 = 0 - $1 | 0;
 $$0377 = $0 + $20 | 0;
 $$0378 = $3 + $20 | 0;
 $$0388 = 1;
 $$0396 = 0;
 $$0404 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$2402 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0388 | 0) < ($6 | 0)) {
   $$1 = $$0377;
   $$1379 = $$0378;
   $$1397 = $$0396;
   $$1405 = $$0404;
   $$2393 = 1;
   $$3403 = $$2402;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2393 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0) > (HEAPU8[$$1379 >> 0] | 0)) {
    HEAP8[$$1405 >> 0] = -1;
    $33 = $$3403 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3403 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2393;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0388;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0388;
     $$3399 = $$1397;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $56 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $56 << 16 >> 16 > 0;
    $59 = ($56 << 16 >> 16) + -1 | 0;
    $60 = $$3403 + -2 | 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$$3403 >> 1] = $56;
      $152 = $59 * 7 | 0;
      $153 = $4 + 1310736 + ($152 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $4 + 1310736 + ($152 + 1 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$2393;
      $161 = $4 + 1310736 + ($152 + 2 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$0388;
      $165 = $4 + 1310736 + ($152 + 4 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($$2393 | 0)) HEAP32[$165 >> 2] = $$2393;
      HEAP32[$4 + 1310736 + ($152 + 6 << 2) >> 2] = $$0388;
      $$3399 = $$1397;
      break;
     }
     $170 = HEAP16[$60 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$$3403 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $4 + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $4 + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $$2393;
      $183 = $4 + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$0388;
      $186 = $173 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($186 << 2) >> 2] | 0) < ($$2393 | 0)) {
       $$2398 = $$1397;
       $$sink = $$2393;
       $$sink3 = $186;
      } else {
       $$3399 = $$1397;
       break;
      }
     } else {
      $190 = $$1397 + 1 | 0;
      if (($$1397 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3403 >> 1] = $190;
      HEAP32[$4 + 1179664 + ($$1397 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $$1397 * 7 | 0;
      HEAP32[$4 + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($195 + 1 << 2) >> 2] = $$2393;
      HEAP32[$4 + 1310736 + ($195 + 2 << 2) >> 2] = $$0388;
      HEAP32[$4 + 1310736 + ($195 + 3 << 2) >> 2] = $$2393;
      HEAP32[$4 + 1310736 + ($195 + 4 << 2) >> 2] = $$2393;
      HEAP32[$4 + 1310736 + ($195 + 5 << 2) >> 2] = $$0388;
      $$2398 = $190;
      $$sink = $$0388;
      $$sink3 = $195 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3399 = $$2398;
     break;
    }
    $62 = ($53 << 16 >> 16) + -1 | 0;
    $63 = $4 + 1179664 + ($62 << 2) | 0;
    if ($58) {
     $64 = HEAP32[$63 >> 2] | 0;
     $66 = HEAP32[$4 + 1179664 + ($59 << 2) >> 2] | 0;
     L35 : do if (($64 | 0) > ($66 | 0)) {
      HEAP16[$$3403 >> 1] = $66;
      $$0382 = $19;
      $$0384 = 0;
      while (1) {
       if (($$0384 | 0) >= ($$1397 | 0)) {
        $81 = $66;
        break L35;
       }
       if ((HEAP32[$$0382 >> 2] | 0) == ($64 | 0)) HEAP32[$$0382 >> 2] = $66;
       $$0382 = $$0382 + 4 | 0;
       $$0384 = $$0384 + 1 | 0;
      }
     } else {
      HEAP16[$$3403 >> 1] = $64;
      if (($64 | 0) < ($66 | 0)) {
       $$1383 = $19;
       $$1385 = 0;
       while (1) {
        if (($$1385 | 0) >= ($$1397 | 0)) {
         $81 = $64;
         break L35;
        }
        if ((HEAP32[$$1383 >> 2] | 0) == ($66 | 0)) HEAP32[$$1383 >> 2] = $64;
        $$1383 = $$1383 + 4 | 0;
        $$1385 = $$1385 + 1 | 0;
       }
      } else $81 = $64;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $4 + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $4 + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$2393;
     $93 = $4 + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $$0388;
     HEAP32[$4 + 1310736 + ($83 + -1 << 2) >> 2] = $$0388;
     $$3399 = $$1397;
     break;
    }
    $98 = HEAP16[$60 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3403 >> 1] = $53;
     $134 = $62 * 7 | 0;
     $135 = $4 + 1310736 + ($134 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $4 + 1310736 + ($134 + 1 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2393;
     $143 = $4 + 1310736 + ($134 + 2 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0388;
     $147 = $4 + 1310736 + ($134 + 3 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($$2393 | 0)) HEAP32[$147 >> 2] = $$2393;
     HEAP32[$4 + 1310736 + ($134 + 6 << 2) >> 2] = $$0388;
     $$3399 = $$1397;
     break;
    }
    $101 = HEAP32[$63 >> 2] | 0;
    $104 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($101 | 0) > ($104 | 0)) {
     HEAP16[$$3403 >> 1] = $104;
     $$2 = $19;
     $$2386 = 0;
     while (1) {
      if (($$2386 | 0) >= ($$1397 | 0)) {
       $119 = $104;
       break L58;
      }
      if ((HEAP32[$$2 >> 2] | 0) == ($101 | 0)) HEAP32[$$2 >> 2] = $104;
      $$2 = $$2 + 4 | 0;
      $$2386 = $$2386 + 1 | 0;
     }
    } else {
     HEAP16[$$3403 >> 1] = $101;
     if (($101 | 0) < ($104 | 0)) {
      $$3 = $19;
      $$3387 = 0;
      while (1) {
       if (($$3387 | 0) >= ($$1397 | 0)) {
        $119 = $101;
        break L58;
       }
       if ((HEAP32[$$3 >> 2] | 0) == ($104 | 0)) HEAP32[$$3 >> 2] = $101;
       $$3 = $$3 + 4 | 0;
       $$3387 = $$3387 + 1 | 0;
      }
     } else $119 = $101;
    } while (0);
    $121 = ($119 << 16 >> 16) * 7 | 0;
    $123 = $4 + 1310736 + ($121 + -7 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + 1;
    $127 = $4 + 1310736 + ($121 + -6 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $$2393;
    $131 = $4 + 1310736 + ($121 + -5 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $$0388;
    $$3399 = $$1397;
   } else {
    HEAP16[$$3403 >> 1] = 0;
    HEAP8[$$1405 >> 0] = 0;
    $$3399 = $$1397;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1379 = $$1379 + 1 | 0;
   $$1397 = $$3399;
   $$1405 = $$1405 + 1 | 0;
   $$2393 = $$2393 + 1 | 0;
   $$3403 = $$3403 + 2 | 0;
  }
  $$0377 = $$1 + 2 | 0;
  $$0378 = $$1379 + 2 | 0;
  $$0388 = $$0388 + 1 | 0;
  $$0396 = $$1397;
  $$0404 = $$1405 + 2 | 0;
  $$2402 = $$3403 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $219 = $4 + 12 | 0;
  $$1389 = 1;
  $$3394 = 1;
  $$4 = $19;
  while (1) {
   if (($$3394 | 0) > ($$0396 | 0)) break;
   $221 = HEAP32[$$4 >> 2] | 0;
   if (($221 | 0) == ($$3394 | 0)) {
    $$2390 = $$1389 + 1 | 0;
    $227 = $$1389;
   } else {
    $$2390 = $$1389;
    $227 = HEAP32[$4 + 1179664 + ($221 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $227;
   $$1389 = $$2390;
   $$3394 = $$3394 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $230 = $4 + 8 | 0;
  $231 = $$1389 + -1 | 0;
  HEAP32[$230 >> 2] = $231;
  if (!$231) $$0 = 0; else {
   _memset($219 | 0, 0, $231 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $231 << 4 | 0) | 0;
   $$4395 = 0;
   $237 = $231;
   while (1) {
    if (($$4395 | 0) >= ($237 | 0)) {
     $$5 = 0;
     break;
    }
    $238 = $$4395 << 2;
    HEAP32[$4 + 131084 + ($238 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($238 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($238 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($238 | 3) << 2) >> 2] = 0;
    $$4395 = $$4395 + 1 | 0;
    $237 = HEAP32[$230 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0396 | 0)) {
     $$6 = 0;
     break;
    }
    $250 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $251 = $$5 * 7 | 0;
    $254 = $4 + 12 + ($250 << 2) | 0;
    HEAP32[$254 >> 2] = (HEAP32[$254 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($251 << 2) >> 2] | 0);
    $261 = $250 << 1;
    $262 = $4 + 655376 + ($261 << 3) | 0;
    HEAPF64[$262 >> 3] = +HEAPF64[$262 >> 3] + +(HEAP32[$4 + 1310736 + ($251 + 1 << 2) >> 2] | 0);
    $270 = $4 + 655376 + (($261 | 1) << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($251 + 2 << 2) >> 2] | 0);
    $273 = $250 << 2;
    $274 = $4 + 131084 + ($273 << 2) | 0;
    $278 = HEAP32[$4 + 1310736 + ($251 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$274 >> 2] | 0) > ($278 | 0)) HEAP32[$274 >> 2] = $278;
    $281 = $4 + 131084 + (($273 | 1) << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($251 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) < ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($273 | 2) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($251 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) > ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($273 | 3) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($251 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) < ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$230 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $304 = $4 + 12 + ($$6 << 2) | 0;
    $307 = $$6 << 1;
    $308 = $4 + 655376 + ($307 << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / +(HEAP32[$304 >> 2] | 0);
    $314 = $4 + 655376 + (($307 | 1) << 3) | 0;
    HEAPF64[$314 >> 3] = +HEAPF64[$314 >> 3] / +(HEAP32[$304 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBZ($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0377 = 0, $$0378 = 0, $$0380 = 0, $$0382 = 0, $$0384 = 0, $$0388 = 0, $$0391 = 0, $$0396 = 0, $$0400 = 0, $$0404 = 0, $$1 = 0, $$1379 = 0, $$1381 = 0, $$1383 = 0, $$1385 = 0, $$1389 = 0, $$1392 = 0, $$1397 = 0, $$1401 = 0, $$1405 = 0, $$2 = 0, $$2386 = 0, $$2390 = 0, $$2393 = 0, $$2398 = 0, $$2402 = 0, $$3 = 0, $$3387 = 0, $$3394 = 0, $$3399 = 0, $$3403 = 0, $$4 = 0, $$4395 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $104 = 0, $119 = 0, $121 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $152 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $186 = 0, $19 = 0, $190 = 0, $195 = 0, $20 = 0, $219 = 0, $221 = 0, $227 = 0, $230 = 0, $231 = 0, $237 = 0, $238 = 0, $250 = 0, $251 = 0, $254 = 0, $261 = 0, $262 = 0, $27 = 0, $270 = 0, $273 = 0, $274 = 0, $278 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $304 = 0, $307 = 0, $308 = 0, $314 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $93 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0380 = $5;
 $$0391 = 0;
 $$0400 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 while (1) {
  if (($$0391 | 0) >= ($1 | 0)) break;
  HEAP16[$$0400 >> 1] = 0;
  HEAP16[$$0380 >> 1] = 0;
  $$0380 = $$0380 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0400 = $$0400 + 2 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1381 = $5;
 $$1392 = 0;
 $$1401 = $5 + ($13 << 1) | 0;
 while (1) {
  if (($$1392 | 0) >= ($2 | 0)) break;
  HEAP16[$$1401 >> 1] = 0;
  HEAP16[$$1381 >> 1] = 0;
  $$1381 = $$1381 + ($1 << 1) | 0;
  $$1392 = $$1392 + 1 | 0;
  $$1401 = $$1401 + ($1 << 1) | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $27 = 0 - $1 | 0;
 $$0377 = $0 + $20 | 0;
 $$0378 = $3 + $20 | 0;
 $$0388 = 1;
 $$0396 = 0;
 $$0404 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$2402 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0388 | 0) < ($6 | 0)) {
   $$1 = $$0377;
   $$1379 = $$0378;
   $$1397 = $$0396;
   $$1405 = $$0404;
   $$2393 = 1;
   $$3403 = $$2402;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2393 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0) > (HEAPU8[$$1379 >> 0] | 0)) {
    HEAP16[$$3403 >> 1] = 0;
    HEAP8[$$1405 >> 0] = 0;
    $$3399 = $$1397;
   } else {
    HEAP8[$$1405 >> 0] = -1;
    $33 = $$3403 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3403 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2393;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0388;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0388;
     $$3399 = $$1397;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $56 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $56 << 16 >> 16 > 0;
    $59 = ($56 << 16 >> 16) + -1 | 0;
    $60 = $$3403 + -2 | 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$$3403 >> 1] = $56;
      $152 = $59 * 7 | 0;
      $153 = $4 + 1310736 + ($152 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $4 + 1310736 + ($152 + 1 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$2393;
      $161 = $4 + 1310736 + ($152 + 2 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$0388;
      $165 = $4 + 1310736 + ($152 + 4 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($$2393 | 0)) HEAP32[$165 >> 2] = $$2393;
      HEAP32[$4 + 1310736 + ($152 + 6 << 2) >> 2] = $$0388;
      $$3399 = $$1397;
      break;
     }
     $170 = HEAP16[$60 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$$3403 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $4 + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $4 + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $$2393;
      $183 = $4 + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$0388;
      $186 = $173 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($186 << 2) >> 2] | 0) < ($$2393 | 0)) {
       $$2398 = $$1397;
       $$sink = $$2393;
       $$sink3 = $186;
      } else {
       $$3399 = $$1397;
       break;
      }
     } else {
      $190 = $$1397 + 1 | 0;
      if (($$1397 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3403 >> 1] = $190;
      HEAP32[$4 + 1179664 + ($$1397 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $$1397 * 7 | 0;
      HEAP32[$4 + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($195 + 1 << 2) >> 2] = $$2393;
      HEAP32[$4 + 1310736 + ($195 + 2 << 2) >> 2] = $$0388;
      HEAP32[$4 + 1310736 + ($195 + 3 << 2) >> 2] = $$2393;
      HEAP32[$4 + 1310736 + ($195 + 4 << 2) >> 2] = $$2393;
      HEAP32[$4 + 1310736 + ($195 + 5 << 2) >> 2] = $$0388;
      $$2398 = $190;
      $$sink = $$0388;
      $$sink3 = $195 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3399 = $$2398;
     break;
    }
    $62 = ($53 << 16 >> 16) + -1 | 0;
    $63 = $4 + 1179664 + ($62 << 2) | 0;
    if ($58) {
     $64 = HEAP32[$63 >> 2] | 0;
     $66 = HEAP32[$4 + 1179664 + ($59 << 2) >> 2] | 0;
     L36 : do if (($64 | 0) > ($66 | 0)) {
      HEAP16[$$3403 >> 1] = $66;
      $$0382 = $19;
      $$0384 = 0;
      while (1) {
       if (($$0384 | 0) >= ($$1397 | 0)) {
        $81 = $66;
        break L36;
       }
       if ((HEAP32[$$0382 >> 2] | 0) == ($64 | 0)) HEAP32[$$0382 >> 2] = $66;
       $$0382 = $$0382 + 4 | 0;
       $$0384 = $$0384 + 1 | 0;
      }
     } else {
      HEAP16[$$3403 >> 1] = $64;
      if (($64 | 0) < ($66 | 0)) {
       $$1383 = $19;
       $$1385 = 0;
       while (1) {
        if (($$1385 | 0) >= ($$1397 | 0)) {
         $81 = $64;
         break L36;
        }
        if ((HEAP32[$$1383 >> 2] | 0) == ($66 | 0)) HEAP32[$$1383 >> 2] = $64;
        $$1383 = $$1383 + 4 | 0;
        $$1385 = $$1385 + 1 | 0;
       }
      } else $81 = $64;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $4 + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $4 + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$2393;
     $93 = $4 + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $$0388;
     HEAP32[$4 + 1310736 + ($83 + -1 << 2) >> 2] = $$0388;
     $$3399 = $$1397;
     break;
    }
    $98 = HEAP16[$60 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3403 >> 1] = $53;
     $134 = $62 * 7 | 0;
     $135 = $4 + 1310736 + ($134 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $4 + 1310736 + ($134 + 1 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2393;
     $143 = $4 + 1310736 + ($134 + 2 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0388;
     $147 = $4 + 1310736 + ($134 + 3 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($$2393 | 0)) HEAP32[$147 >> 2] = $$2393;
     HEAP32[$4 + 1310736 + ($134 + 6 << 2) >> 2] = $$0388;
     $$3399 = $$1397;
     break;
    }
    $101 = HEAP32[$63 >> 2] | 0;
    $104 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($101 | 0) > ($104 | 0)) {
     HEAP16[$$3403 >> 1] = $104;
     $$2 = $19;
     $$2386 = 0;
     while (1) {
      if (($$2386 | 0) >= ($$1397 | 0)) {
       $119 = $104;
       break L59;
      }
      if ((HEAP32[$$2 >> 2] | 0) == ($101 | 0)) HEAP32[$$2 >> 2] = $104;
      $$2 = $$2 + 4 | 0;
      $$2386 = $$2386 + 1 | 0;
     }
    } else {
     HEAP16[$$3403 >> 1] = $101;
     if (($101 | 0) < ($104 | 0)) {
      $$3 = $19;
      $$3387 = 0;
      while (1) {
       if (($$3387 | 0) >= ($$1397 | 0)) {
        $119 = $101;
        break L59;
       }
       if ((HEAP32[$$3 >> 2] | 0) == ($104 | 0)) HEAP32[$$3 >> 2] = $101;
       $$3 = $$3 + 4 | 0;
       $$3387 = $$3387 + 1 | 0;
      }
     } else $119 = $101;
    } while (0);
    $121 = ($119 << 16 >> 16) * 7 | 0;
    $123 = $4 + 1310736 + ($121 + -7 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + 1;
    $127 = $4 + 1310736 + ($121 + -6 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $$2393;
    $131 = $4 + 1310736 + ($121 + -5 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $$0388;
    $$3399 = $$1397;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1379 = $$1379 + 1 | 0;
   $$1397 = $$3399;
   $$1405 = $$1405 + 1 | 0;
   $$2393 = $$2393 + 1 | 0;
   $$3403 = $$3403 + 2 | 0;
  }
  $$0377 = $$1 + 2 | 0;
  $$0378 = $$1379 + 2 | 0;
  $$0388 = $$0388 + 1 | 0;
  $$0396 = $$1397;
  $$0404 = $$1405 + 2 | 0;
  $$2402 = $$3403 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $219 = $4 + 12 | 0;
  $$1389 = 1;
  $$3394 = 1;
  $$4 = $19;
  while (1) {
   if (($$3394 | 0) > ($$0396 | 0)) break;
   $221 = HEAP32[$$4 >> 2] | 0;
   if (($221 | 0) == ($$3394 | 0)) {
    $$2390 = $$1389 + 1 | 0;
    $227 = $$1389;
   } else {
    $$2390 = $$1389;
    $227 = HEAP32[$4 + 1179664 + ($221 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $227;
   $$1389 = $$2390;
   $$3394 = $$3394 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $230 = $4 + 8 | 0;
  $231 = $$1389 + -1 | 0;
  HEAP32[$230 >> 2] = $231;
  if (!$231) $$0 = 0; else {
   _memset($219 | 0, 0, $231 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $231 << 4 | 0) | 0;
   $$4395 = 0;
   $237 = $231;
   while (1) {
    if (($$4395 | 0) >= ($237 | 0)) {
     $$5 = 0;
     break;
    }
    $238 = $$4395 << 2;
    HEAP32[$4 + 131084 + ($238 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($238 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($238 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($238 | 3) << 2) >> 2] = 0;
    $$4395 = $$4395 + 1 | 0;
    $237 = HEAP32[$230 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0396 | 0)) {
     $$6 = 0;
     break;
    }
    $250 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $251 = $$5 * 7 | 0;
    $254 = $4 + 12 + ($250 << 2) | 0;
    HEAP32[$254 >> 2] = (HEAP32[$254 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($251 << 2) >> 2] | 0);
    $261 = $250 << 1;
    $262 = $4 + 655376 + ($261 << 3) | 0;
    HEAPF64[$262 >> 3] = +HEAPF64[$262 >> 3] + +(HEAP32[$4 + 1310736 + ($251 + 1 << 2) >> 2] | 0);
    $270 = $4 + 655376 + (($261 | 1) << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($251 + 2 << 2) >> 2] | 0);
    $273 = $250 << 2;
    $274 = $4 + 131084 + ($273 << 2) | 0;
    $278 = HEAP32[$4 + 1310736 + ($251 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$274 >> 2] | 0) > ($278 | 0)) HEAP32[$274 >> 2] = $278;
    $281 = $4 + 131084 + (($273 | 1) << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($251 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) < ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($273 | 2) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($251 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) > ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($273 | 3) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($251 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) < ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$230 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $304 = $4 + 12 + ($$6 << 2) | 0;
    $307 = $$6 << 1;
    $308 = $4 + 655376 + ($307 << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / +(HEAP32[$304 >> 2] | 0);
    $314 = $4 + 655376 + (($307 | 1) << 3) | 0;
    HEAPF64[$314 >> 3] = +HEAPF64[$314 >> 3] / +(HEAP32[$304 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3CA4444($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $109 = 0, $112 = 0, $115 = 0, $13 = 0, $130 = 0, $132 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $145 = 0, $146 = 0, $150 = 0, $154 = 0, $158 = 0, $163 = 0, $164 = 0, $168 = 0, $172 = 0, $176 = 0, $181 = 0, $184 = 0, $186 = 0, $190 = 0, $194 = 0, $197 = 0, $20 = 0, $201 = 0, $206 = 0, $21 = 0, $228 = 0, $230 = 0, $236 = 0, $239 = 0, $240 = 0, $246 = 0, $247 = 0, $259 = 0, $260 = 0, $263 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $282 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $304 = 0, $308 = 0, $313 = 0, $316 = 0, $317 = 0, $32 = 0, $323 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $64 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $92 = 0, $94 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0377 = $5;
 $$0379 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($1 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1378 = $5;
 $$1380 = $5 + ($14 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($2 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1380 = $$1380 + ($1 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0376 = $0 + ($21 << 1) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($6 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($14 | 0)) break;
   $32 = HEAPU8[$$1 >> 0] | 0;
   do if ((($32 & 240) + 24 + ($32 << 4 & 240) + (HEAP8[$$1 + 1 >> 0] & -16 & 255) | 0) > ($13 | 0)) {
    HEAP8[$$1382 >> 0] = -1;
    $44 = $$3 + ($28 << 1) | 0;
    $45 = HEAP16[$44 >> 1] | 0;
    if ($45 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $45;
     $48 = ($45 << 16 >> 16) * 7 | 0;
     $50 = $4 + 1310736 + ($48 + -7 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
     $54 = $4 + 1310736 + ($48 + -6 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $$2396;
     $58 = $4 + 1310736 + ($48 + -5 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($48 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $64 = HEAP16[$44 + 2 >> 1] | 0;
    $67 = HEAP16[$44 + -2 >> 1] | 0;
    $69 = $67 << 16 >> 16 > 0;
    $70 = $$3 + -2 | 0;
    $71 = ($67 << 16 >> 16) + -1 | 0;
    if ($64 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$$3 >> 1] = $67;
      $163 = $71 * 7 | 0;
      $164 = $4 + 1310736 + ($163 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $4 + 1310736 + ($163 + 1 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $$2396;
      $172 = $4 + 1310736 + ($163 + 2 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$0391;
      $176 = $4 + 1310736 + ($163 + 4 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($$2396 | 0)) HEAP32[$176 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($163 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $181 = HEAP16[$70 >> 1] | 0;
     if ($181 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $181;
      $184 = ($181 << 16 >> 16) * 7 | 0;
      $186 = $4 + 1310736 + ($184 + -7 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 1;
      $190 = $4 + 1310736 + ($184 + -6 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $$2396;
      $194 = $4 + 1310736 + ($184 + -5 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$0391;
      $197 = $184 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($197 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $197;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $201 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $201;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $201 << 16 >> 16;
      $206 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($206 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($206 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($206 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($206 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($206 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($206 + 5 << 2) >> 2] = $$0391;
      $$2401 = $201;
      $$sink = $$0391;
      $$sink3 = $206 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $73 = ($64 << 16 >> 16) + -1 | 0;
    $74 = $4 + 1179664 + ($73 << 2) | 0;
    if ($69) {
     $75 = HEAP32[$74 >> 2] | 0;
     $77 = HEAP32[$4 + 1179664 + ($71 << 2) >> 2] | 0;
     L35 : do if (($75 | 0) > ($77 | 0)) {
      HEAP16[$$3 >> 1] = $77;
      $$0383 = $20;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $92 = $77;
        break L35;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($75 | 0)) HEAP32[$$0383 >> 2] = $77;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $75;
      if (($75 | 0) < ($77 | 0)) {
       $$1384 = $20;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $92 = $75;
         break L35;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($77 | 0)) HEAP32[$$1384 >> 2] = $75;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $92 = $75;
     } while (0);
     $94 = ($92 << 16 >> 16) * 7 | 0;
     $96 = $4 + 1310736 + ($94 + -7 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + 1;
     $100 = $4 + 1310736 + ($94 + -6 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $$2396;
     $104 = $4 + 1310736 + ($94 + -5 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($94 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $109 = HEAP16[$70 >> 1] | 0;
    if ($109 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $64;
     $145 = $73 * 7 | 0;
     $146 = $4 + 1310736 + ($145 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + 1;
     $150 = $4 + 1310736 + ($145 + 1 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$2396;
     $154 = $4 + 1310736 + ($145 + 2 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$0391;
     $158 = $4 + 1310736 + ($145 + 3 << 2) | 0;
     if ((HEAP32[$158 >> 2] | 0) > ($$2396 | 0)) HEAP32[$158 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($145 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $112 = HEAP32[$74 >> 2] | 0;
    $115 = HEAP32[$4 + 1179664 + (($109 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($112 | 0) > ($115 | 0)) {
     HEAP16[$$3 >> 1] = $115;
     $$2385 = $20;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $130 = $115;
       break L58;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($112 | 0)) HEAP32[$$2385 >> 2] = $115;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $112;
     if (($112 | 0) < ($115 | 0)) {
      $$3386 = $20;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $130 = $112;
        break L58;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($115 | 0)) HEAP32[$$3386 >> 2] = $112;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $130 = $112;
    } while (0);
    $132 = ($130 << 16 >> 16) * 7 | 0;
    $134 = $4 + 1310736 + ($132 + -7 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
    $138 = $4 + 1310736 + ($132 + -6 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$2396;
    $142 = $4 + 1310736 + ($132 + -5 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + 4 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $228 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $20;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $230 = HEAP32[$$4 >> 2] | 0;
   if (($230 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $236 = $$1392;
   } else {
    $$2393 = $$1392;
    $236 = HEAP32[$4 + 1179664 + ($230 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $236;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $239 = $4 + 8 | 0;
  $240 = $$1392 + -1 | 0;
  HEAP32[$239 >> 2] = $240;
  if (!$240) $$0 = 0; else {
   _memset($228 | 0, 0, $240 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $240 << 4 | 0) | 0;
   $$4398 = 0;
   $246 = $240;
   while (1) {
    if (($$4398 | 0) >= ($246 | 0)) {
     $$5 = 0;
     break;
    }
    $247 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($247 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($247 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($247 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($247 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $246 = HEAP32[$239 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $259 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $260 = $$5 * 7 | 0;
    $263 = $4 + 12 + ($259 << 2) | 0;
    HEAP32[$263 >> 2] = (HEAP32[$263 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($260 << 2) >> 2] | 0);
    $270 = $259 << 1;
    $271 = $4 + 655376 + ($270 << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$4 + 1310736 + ($260 + 1 << 2) >> 2] | 0);
    $279 = $4 + 655376 + (($270 | 1) << 3) | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + +(HEAP32[$4 + 1310736 + ($260 + 2 << 2) >> 2] | 0);
    $282 = $259 << 2;
    $283 = $4 + 131084 + ($282 << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($260 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($282 | 1) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($260 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($282 | 2) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($260 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) > ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $304 = $4 + 131084 + (($282 | 3) << 2) | 0;
    $308 = HEAP32[$4 + 1310736 + ($260 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$304 >> 2] | 0) < ($308 | 0)) HEAP32[$304 >> 2] = $308;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$239 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $313 = $4 + 12 + ($$6 << 2) | 0;
    $316 = $$6 << 1;
    $317 = $4 + 655376 + ($316 << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $323 = $4 + 655376 + (($316 | 1) << 3) | 0;
    HEAPF64[$323 >> 3] = +HEAPF64[$323 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBR3CA4444($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $109 = 0, $112 = 0, $115 = 0, $13 = 0, $130 = 0, $132 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $145 = 0, $146 = 0, $150 = 0, $154 = 0, $158 = 0, $163 = 0, $164 = 0, $168 = 0, $172 = 0, $176 = 0, $181 = 0, $184 = 0, $186 = 0, $190 = 0, $194 = 0, $197 = 0, $20 = 0, $201 = 0, $206 = 0, $21 = 0, $228 = 0, $230 = 0, $236 = 0, $239 = 0, $240 = 0, $246 = 0, $247 = 0, $259 = 0, $260 = 0, $263 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $282 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $304 = 0, $308 = 0, $313 = 0, $316 = 0, $317 = 0, $32 = 0, $323 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $64 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $92 = 0, $94 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0377 = $5;
 $$0379 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($1 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1378 = $5;
 $$1380 = $5 + ($14 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($2 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1380 = $$1380 + ($1 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0376 = $0 + ($21 << 1) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($6 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($14 | 0)) break;
   $32 = HEAPU8[$$1 >> 0] | 0;
   do if ((($32 & 240) + 24 + ($32 << 4 & 240) + (HEAP8[$$1 + 1 >> 0] & -16 & 255) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } else {
    HEAP8[$$1382 >> 0] = -1;
    $44 = $$3 + ($28 << 1) | 0;
    $45 = HEAP16[$44 >> 1] | 0;
    if ($45 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $45;
     $48 = ($45 << 16 >> 16) * 7 | 0;
     $50 = $4 + 1310736 + ($48 + -7 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
     $54 = $4 + 1310736 + ($48 + -6 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $$2396;
     $58 = $4 + 1310736 + ($48 + -5 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($48 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $64 = HEAP16[$44 + 2 >> 1] | 0;
    $67 = HEAP16[$44 + -2 >> 1] | 0;
    $69 = $67 << 16 >> 16 > 0;
    $70 = $$3 + -2 | 0;
    $71 = ($67 << 16 >> 16) + -1 | 0;
    if ($64 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$$3 >> 1] = $67;
      $163 = $71 * 7 | 0;
      $164 = $4 + 1310736 + ($163 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $4 + 1310736 + ($163 + 1 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $$2396;
      $172 = $4 + 1310736 + ($163 + 2 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$0391;
      $176 = $4 + 1310736 + ($163 + 4 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($$2396 | 0)) HEAP32[$176 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($163 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $181 = HEAP16[$70 >> 1] | 0;
     if ($181 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $181;
      $184 = ($181 << 16 >> 16) * 7 | 0;
      $186 = $4 + 1310736 + ($184 + -7 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 1;
      $190 = $4 + 1310736 + ($184 + -6 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $$2396;
      $194 = $4 + 1310736 + ($184 + -5 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$0391;
      $197 = $184 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($197 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $197;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $201 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $201;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $201 << 16 >> 16;
      $206 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($206 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($206 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($206 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($206 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($206 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($206 + 5 << 2) >> 2] = $$0391;
      $$2401 = $201;
      $$sink = $$0391;
      $$sink3 = $206 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $73 = ($64 << 16 >> 16) + -1 | 0;
    $74 = $4 + 1179664 + ($73 << 2) | 0;
    if ($69) {
     $75 = HEAP32[$74 >> 2] | 0;
     $77 = HEAP32[$4 + 1179664 + ($71 << 2) >> 2] | 0;
     L36 : do if (($75 | 0) > ($77 | 0)) {
      HEAP16[$$3 >> 1] = $77;
      $$0383 = $20;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $92 = $77;
        break L36;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($75 | 0)) HEAP32[$$0383 >> 2] = $77;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $75;
      if (($75 | 0) < ($77 | 0)) {
       $$1384 = $20;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $92 = $75;
         break L36;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($77 | 0)) HEAP32[$$1384 >> 2] = $75;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $92 = $75;
     } while (0);
     $94 = ($92 << 16 >> 16) * 7 | 0;
     $96 = $4 + 1310736 + ($94 + -7 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + 1;
     $100 = $4 + 1310736 + ($94 + -6 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $$2396;
     $104 = $4 + 1310736 + ($94 + -5 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($94 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $109 = HEAP16[$70 >> 1] | 0;
    if ($109 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $64;
     $145 = $73 * 7 | 0;
     $146 = $4 + 1310736 + ($145 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + 1;
     $150 = $4 + 1310736 + ($145 + 1 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$2396;
     $154 = $4 + 1310736 + ($145 + 2 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$0391;
     $158 = $4 + 1310736 + ($145 + 3 << 2) | 0;
     if ((HEAP32[$158 >> 2] | 0) > ($$2396 | 0)) HEAP32[$158 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($145 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $112 = HEAP32[$74 >> 2] | 0;
    $115 = HEAP32[$4 + 1179664 + (($109 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($112 | 0) > ($115 | 0)) {
     HEAP16[$$3 >> 1] = $115;
     $$2385 = $20;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $130 = $115;
       break L59;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($112 | 0)) HEAP32[$$2385 >> 2] = $115;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $112;
     if (($112 | 0) < ($115 | 0)) {
      $$3386 = $20;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $130 = $112;
        break L59;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($115 | 0)) HEAP32[$$3386 >> 2] = $112;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $130 = $112;
    } while (0);
    $132 = ($130 << 16 >> 16) * 7 | 0;
    $134 = $4 + 1310736 + ($132 + -7 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
    $138 = $4 + 1310736 + ($132 + -6 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$2396;
    $142 = $4 + 1310736 + ($132 + -5 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + 4 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $228 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $20;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $230 = HEAP32[$$4 >> 2] | 0;
   if (($230 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $236 = $$1392;
   } else {
    $$2393 = $$1392;
    $236 = HEAP32[$4 + 1179664 + ($230 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $236;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $239 = $4 + 8 | 0;
  $240 = $$1392 + -1 | 0;
  HEAP32[$239 >> 2] = $240;
  if (!$240) $$0 = 0; else {
   _memset($228 | 0, 0, $240 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $240 << 4 | 0) | 0;
   $$4398 = 0;
   $246 = $240;
   while (1) {
    if (($$4398 | 0) >= ($246 | 0)) {
     $$5 = 0;
     break;
    }
    $247 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($247 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($247 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($247 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($247 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $246 = HEAP32[$239 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $259 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $260 = $$5 * 7 | 0;
    $263 = $4 + 12 + ($259 << 2) | 0;
    HEAP32[$263 >> 2] = (HEAP32[$263 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($260 << 2) >> 2] | 0);
    $270 = $259 << 1;
    $271 = $4 + 655376 + ($270 << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$4 + 1310736 + ($260 + 1 << 2) >> 2] | 0);
    $279 = $4 + 655376 + (($270 | 1) << 3) | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + +(HEAP32[$4 + 1310736 + ($260 + 2 << 2) >> 2] | 0);
    $282 = $259 << 2;
    $283 = $4 + 131084 + ($282 << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($260 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($282 | 1) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($260 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($282 | 2) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($260 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) > ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $304 = $4 + 131084 + (($282 | 3) << 2) | 0;
    $308 = HEAP32[$4 + 1310736 + ($260 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$304 >> 2] | 0) < ($308 | 0)) HEAP32[$304 >> 2] = $308;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$239 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $313 = $4 + 12 + ($$6 << 2) | 0;
    $316 = $$6 << 1;
    $317 = $4 + 655376 + ($316 << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $323 = $4 + 655376 + (($316 | 1) << 3) | 0;
    HEAPF64[$323 >> 3] = +HEAPF64[$323 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWICY($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $106 = 0, $109 = 0, $124 = 0, $126 = 0, $128 = 0, $132 = 0, $136 = 0, $139 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $152 = 0, $157 = 0, $158 = 0, $162 = 0, $166 = 0, $170 = 0, $175 = 0, $178 = 0, $180 = 0, $184 = 0, $188 = 0, $191 = 0, $195 = 0, $200 = 0, $21 = 0, $22 = 0, $223 = 0, $225 = 0, $231 = 0, $234 = 0, $235 = 0, $241 = 0, $242 = 0, $254 = 0, $255 = 0, $258 = 0, $265 = 0, $266 = 0, $27 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $308 = 0, $31 = 0, $311 = 0, $312 = 0, $318 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $48 = 0, $5 = 0, $52 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $8 = 0, $86 = 0, $88 = 0, $90 = 0, $94 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0377 = $7;
 $$0379 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($5 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1378 = $7;
 $$1380 = $7 + ($15 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($6 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($5 << 1) | 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $22 = $5 + 1 | 0;
 $27 = $1 << 1;
 $31 = 0 - $5 | 0;
 $$0376 = $0 + (($1 << 2) + 4) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $22 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $7 + ($22 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($8 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 + 1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP8[$$1382 >> 0] = -1;
    $38 = $$3 + ($31 << 1) | 0;
    $39 = HEAP16[$38 >> 1] | 0;
    if ($39 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $39;
     $42 = ($39 << 16 >> 16) * 7 | 0;
     $44 = $4 + 1310736 + ($42 + -7 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1;
     $48 = $4 + 1310736 + ($42 + -6 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $$2396;
     $52 = $4 + 1310736 + ($42 + -5 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($42 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $58 = HEAP16[$38 + 2 >> 1] | 0;
    $61 = HEAP16[$38 + -2 >> 1] | 0;
    $63 = $61 << 16 >> 16 > 0;
    $64 = ($61 << 16 >> 16) + -1 | 0;
    $65 = $$3 + -2 | 0;
    if ($58 << 16 >> 16 <= 0) {
     if ($63) {
      HEAP16[$$3 >> 1] = $61;
      $157 = $64 * 7 | 0;
      $158 = $4 + 1310736 + ($157 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + 1;
      $162 = $4 + 1310736 + ($157 + 1 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$2396;
      $166 = $4 + 1310736 + ($157 + 2 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $$0391;
      $170 = $4 + 1310736 + ($157 + 4 << 2) | 0;
      if ((HEAP32[$170 >> 2] | 0) < ($$2396 | 0)) HEAP32[$170 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($157 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $175 = HEAP16[$65 >> 1] | 0;
     if ($175 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $175;
      $178 = ($175 << 16 >> 16) * 7 | 0;
      $180 = $4 + 1310736 + ($178 + -7 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + 1;
      $184 = $4 + 1310736 + ($178 + -6 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$2396;
      $188 = $4 + 1310736 + ($178 + -5 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$0391;
      $191 = $178 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($191 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $191;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $195 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $195;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $195 << 16 >> 16;
      $200 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($200 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($200 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($200 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($200 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($200 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($200 + 5 << 2) >> 2] = $$0391;
      $$2401 = $195;
      $$sink = $$0391;
      $$sink3 = $200 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $67 = ($58 << 16 >> 16) + -1 | 0;
    $68 = $4 + 1179664 + ($67 << 2) | 0;
    if ($63) {
     $69 = HEAP32[$68 >> 2] | 0;
     $71 = HEAP32[$4 + 1179664 + ($64 << 2) >> 2] | 0;
     L35 : do if (($69 | 0) > ($71 | 0)) {
      HEAP16[$$3 >> 1] = $71;
      $$0383 = $21;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $86 = $71;
        break L35;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($69 | 0)) HEAP32[$$0383 >> 2] = $71;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $69;
      if (($69 | 0) < ($71 | 0)) {
       $$1384 = $21;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $86 = $69;
         break L35;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($71 | 0)) HEAP32[$$1384 >> 2] = $69;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $86 = $69;
     } while (0);
     $88 = ($86 << 16 >> 16) * 7 | 0;
     $90 = $4 + 1310736 + ($88 + -7 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 1;
     $94 = $4 + 1310736 + ($88 + -6 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $$2396;
     $98 = $4 + 1310736 + ($88 + -5 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($88 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $103 = HEAP16[$65 >> 1] | 0;
    if ($103 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $58;
     $139 = $67 * 7 | 0;
     $140 = $4 + 1310736 + ($139 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + 1;
     $144 = $4 + 1310736 + ($139 + 1 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$2396;
     $148 = $4 + 1310736 + ($139 + 2 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $$0391;
     $152 = $4 + 1310736 + ($139 + 3 << 2) | 0;
     if ((HEAP32[$152 >> 2] | 0) > ($$2396 | 0)) HEAP32[$152 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($139 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $106 = HEAP32[$68 >> 2] | 0;
    $109 = HEAP32[$4 + 1179664 + (($103 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($106 | 0) > ($109 | 0)) {
     HEAP16[$$3 >> 1] = $109;
     $$2385 = $21;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $124 = $109;
       break L58;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($106 | 0)) HEAP32[$$2385 >> 2] = $109;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $106;
     if (($106 | 0) < ($109 | 0)) {
      $$3386 = $21;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $124 = $106;
        break L58;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($109 | 0)) HEAP32[$$3386 >> 2] = $106;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $124 = $106;
    } while (0);
    $126 = ($124 << 16 >> 16) * 7 | 0;
    $128 = $4 + 1310736 + ($126 + -7 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + 1;
    $132 = $4 + 1310736 + ($126 + -6 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$2396;
    $136 = $4 + 1310736 + ($126 + -5 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + $27 + 8 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $223 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $21;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $225 = HEAP32[$$4 >> 2] | 0;
   if (($225 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $231 = $$1392;
   } else {
    $$2393 = $$1392;
    $231 = HEAP32[$4 + 1179664 + ($225 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $231;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $234 = $4 + 8 | 0;
  $235 = $$1392 + -1 | 0;
  HEAP32[$234 >> 2] = $235;
  if (!$235) $$0 = 0; else {
   _memset($223 | 0, 0, $235 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $235 << 4 | 0) | 0;
   $$4398 = 0;
   $241 = $235;
   while (1) {
    if (($$4398 | 0) >= ($241 | 0)) {
     $$5 = 0;
     break;
    }
    $242 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($242 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($242 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $241 = HEAP32[$234 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $254 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $$5 * 7 | 0;
    $258 = $4 + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $4 + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $4 + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $4 + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$234 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $308 = $4 + 12 + ($$6 << 2) | 0;
    $311 = $$6 << 1;
    $312 = $4 + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $318 = $4 + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBICY($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $106 = 0, $109 = 0, $124 = 0, $126 = 0, $128 = 0, $132 = 0, $136 = 0, $139 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $152 = 0, $157 = 0, $158 = 0, $162 = 0, $166 = 0, $170 = 0, $175 = 0, $178 = 0, $180 = 0, $184 = 0, $188 = 0, $191 = 0, $195 = 0, $200 = 0, $21 = 0, $22 = 0, $223 = 0, $225 = 0, $231 = 0, $234 = 0, $235 = 0, $241 = 0, $242 = 0, $254 = 0, $255 = 0, $258 = 0, $265 = 0, $266 = 0, $27 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $308 = 0, $31 = 0, $311 = 0, $312 = 0, $318 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $48 = 0, $5 = 0, $52 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $8 = 0, $86 = 0, $88 = 0, $90 = 0, $94 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0377 = $7;
 $$0379 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($5 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1378 = $7;
 $$1380 = $7 + ($15 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($6 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($5 << 1) | 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $22 = $5 + 1 | 0;
 $27 = $1 << 1;
 $31 = 0 - $5 | 0;
 $$0376 = $0 + (($1 << 2) + 4) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $22 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $7 + ($22 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($8 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 + 1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } else {
    HEAP8[$$1382 >> 0] = -1;
    $38 = $$3 + ($31 << 1) | 0;
    $39 = HEAP16[$38 >> 1] | 0;
    if ($39 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $39;
     $42 = ($39 << 16 >> 16) * 7 | 0;
     $44 = $4 + 1310736 + ($42 + -7 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1;
     $48 = $4 + 1310736 + ($42 + -6 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $$2396;
     $52 = $4 + 1310736 + ($42 + -5 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($42 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $58 = HEAP16[$38 + 2 >> 1] | 0;
    $61 = HEAP16[$38 + -2 >> 1] | 0;
    $63 = $61 << 16 >> 16 > 0;
    $64 = ($61 << 16 >> 16) + -1 | 0;
    $65 = $$3 + -2 | 0;
    if ($58 << 16 >> 16 <= 0) {
     if ($63) {
      HEAP16[$$3 >> 1] = $61;
      $157 = $64 * 7 | 0;
      $158 = $4 + 1310736 + ($157 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + 1;
      $162 = $4 + 1310736 + ($157 + 1 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$2396;
      $166 = $4 + 1310736 + ($157 + 2 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $$0391;
      $170 = $4 + 1310736 + ($157 + 4 << 2) | 0;
      if ((HEAP32[$170 >> 2] | 0) < ($$2396 | 0)) HEAP32[$170 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($157 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $175 = HEAP16[$65 >> 1] | 0;
     if ($175 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $175;
      $178 = ($175 << 16 >> 16) * 7 | 0;
      $180 = $4 + 1310736 + ($178 + -7 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + 1;
      $184 = $4 + 1310736 + ($178 + -6 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$2396;
      $188 = $4 + 1310736 + ($178 + -5 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$0391;
      $191 = $178 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($191 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $191;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $195 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $195;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $195 << 16 >> 16;
      $200 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($200 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($200 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($200 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($200 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($200 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($200 + 5 << 2) >> 2] = $$0391;
      $$2401 = $195;
      $$sink = $$0391;
      $$sink3 = $200 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $67 = ($58 << 16 >> 16) + -1 | 0;
    $68 = $4 + 1179664 + ($67 << 2) | 0;
    if ($63) {
     $69 = HEAP32[$68 >> 2] | 0;
     $71 = HEAP32[$4 + 1179664 + ($64 << 2) >> 2] | 0;
     L36 : do if (($69 | 0) > ($71 | 0)) {
      HEAP16[$$3 >> 1] = $71;
      $$0383 = $21;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $86 = $71;
        break L36;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($69 | 0)) HEAP32[$$0383 >> 2] = $71;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $69;
      if (($69 | 0) < ($71 | 0)) {
       $$1384 = $21;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $86 = $69;
         break L36;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($71 | 0)) HEAP32[$$1384 >> 2] = $69;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $86 = $69;
     } while (0);
     $88 = ($86 << 16 >> 16) * 7 | 0;
     $90 = $4 + 1310736 + ($88 + -7 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 1;
     $94 = $4 + 1310736 + ($88 + -6 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $$2396;
     $98 = $4 + 1310736 + ($88 + -5 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($88 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $103 = HEAP16[$65 >> 1] | 0;
    if ($103 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $58;
     $139 = $67 * 7 | 0;
     $140 = $4 + 1310736 + ($139 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + 1;
     $144 = $4 + 1310736 + ($139 + 1 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$2396;
     $148 = $4 + 1310736 + ($139 + 2 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $$0391;
     $152 = $4 + 1310736 + ($139 + 3 << 2) | 0;
     if ((HEAP32[$152 >> 2] | 0) > ($$2396 | 0)) HEAP32[$152 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($139 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $106 = HEAP32[$68 >> 2] | 0;
    $109 = HEAP32[$4 + 1179664 + (($103 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($106 | 0) > ($109 | 0)) {
     HEAP16[$$3 >> 1] = $109;
     $$2385 = $21;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $124 = $109;
       break L59;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($106 | 0)) HEAP32[$$2385 >> 2] = $109;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $106;
     if (($106 | 0) < ($109 | 0)) {
      $$3386 = $21;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $124 = $106;
        break L59;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($109 | 0)) HEAP32[$$3386 >> 2] = $106;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $124 = $106;
    } while (0);
    $126 = ($124 << 16 >> 16) * 7 | 0;
    $128 = $4 + 1310736 + ($126 + -7 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + 1;
    $132 = $4 + 1310736 + ($126 + -6 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$2396;
    $136 = $4 + 1310736 + ($126 + -5 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + $27 + 8 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $223 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $21;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $225 = HEAP32[$$4 >> 2] | 0;
   if (($225 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $231 = $$1392;
   } else {
    $$2393 = $$1392;
    $231 = HEAP32[$4 + 1179664 + ($225 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $231;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $234 = $4 + 8 | 0;
  $235 = $$1392 + -1 | 0;
  HEAP32[$234 >> 2] = $235;
  if (!$235) $$0 = 0; else {
   _memset($223 | 0, 0, $235 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $235 << 4 | 0) | 0;
   $$4398 = 0;
   $241 = $235;
   while (1) {
    if (($$4398 | 0) >= ($241 | 0)) {
     $$5 = 0;
     break;
    }
    $242 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($242 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($242 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $241 = HEAP32[$234 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $254 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $$5 * 7 | 0;
    $258 = $4 + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $4 + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $4 + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $4 + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$234 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $308 = $4 + 12 + ($$6 << 2) | 0;
    $311 = $$6 << 1;
    $312 = $4 + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $318 = $4 + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWIYC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $105 = 0, $108 = 0, $123 = 0, $125 = 0, $127 = 0, $131 = 0, $135 = 0, $138 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $157 = 0, $161 = 0, $165 = 0, $169 = 0, $174 = 0, $177 = 0, $179 = 0, $183 = 0, $187 = 0, $190 = 0, $194 = 0, $199 = 0, $21 = 0, $22 = 0, $222 = 0, $224 = 0, $230 = 0, $233 = 0, $234 = 0, $240 = 0, $241 = 0, $253 = 0, $254 = 0, $257 = 0, $264 = 0, $265 = 0, $27 = 0, $273 = 0, $276 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $295 = 0, $298 = 0, $302 = 0, $307 = 0, $31 = 0, $310 = 0, $311 = 0, $317 = 0, $37 = 0, $38 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $8 = 0, $85 = 0, $87 = 0, $89 = 0, $93 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0377 = $7;
 $$0379 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($5 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1378 = $7;
 $$1380 = $7 + ($15 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($6 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($5 << 1) | 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $22 = $5 + 1 | 0;
 $27 = $1 << 1;
 $31 = 0 - $5 | 0;
 $$0376 = $0 + (($1 << 2) + 4) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $22 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $7 + ($22 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($8 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP8[$$1382 >> 0] = -1;
    $37 = $$3 + ($31 << 1) | 0;
    $38 = HEAP16[$37 >> 1] | 0;
    if ($38 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $38;
     $41 = ($38 << 16 >> 16) * 7 | 0;
     $43 = $4 + 1310736 + ($41 + -7 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 1;
     $47 = $4 + 1310736 + ($41 + -6 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$2396;
     $51 = $4 + 1310736 + ($41 + -5 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($41 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $57 = HEAP16[$37 + 2 >> 1] | 0;
    $60 = HEAP16[$37 + -2 >> 1] | 0;
    $62 = $60 << 16 >> 16 > 0;
    $63 = ($60 << 16 >> 16) + -1 | 0;
    $64 = $$3 + -2 | 0;
    if ($57 << 16 >> 16 <= 0) {
     if ($62) {
      HEAP16[$$3 >> 1] = $60;
      $156 = $63 * 7 | 0;
      $157 = $4 + 1310736 + ($156 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 1;
      $161 = $4 + 1310736 + ($156 + 1 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$2396;
      $165 = $4 + 1310736 + ($156 + 2 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $$0391;
      $169 = $4 + 1310736 + ($156 + 4 << 2) | 0;
      if ((HEAP32[$169 >> 2] | 0) < ($$2396 | 0)) HEAP32[$169 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($156 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $174 = HEAP16[$64 >> 1] | 0;
     if ($174 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $174;
      $177 = ($174 << 16 >> 16) * 7 | 0;
      $179 = $4 + 1310736 + ($177 + -7 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + 1;
      $183 = $4 + 1310736 + ($177 + -6 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$2396;
      $187 = $4 + 1310736 + ($177 + -5 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $$0391;
      $190 = $177 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($190 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $190;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $194 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $194;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $194 << 16 >> 16;
      $199 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($199 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($199 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($199 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($199 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($199 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($199 + 5 << 2) >> 2] = $$0391;
      $$2401 = $194;
      $$sink = $$0391;
      $$sink3 = $199 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $66 = ($57 << 16 >> 16) + -1 | 0;
    $67 = $4 + 1179664 + ($66 << 2) | 0;
    if ($62) {
     $68 = HEAP32[$67 >> 2] | 0;
     $70 = HEAP32[$4 + 1179664 + ($63 << 2) >> 2] | 0;
     L35 : do if (($68 | 0) > ($70 | 0)) {
      HEAP16[$$3 >> 1] = $70;
      $$0383 = $21;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $85 = $70;
        break L35;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($68 | 0)) HEAP32[$$0383 >> 2] = $70;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $68;
      if (($68 | 0) < ($70 | 0)) {
       $$1384 = $21;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $85 = $68;
         break L35;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($70 | 0)) HEAP32[$$1384 >> 2] = $68;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $85 = $68;
     } while (0);
     $87 = ($85 << 16 >> 16) * 7 | 0;
     $89 = $4 + 1310736 + ($87 + -7 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + 1;
     $93 = $4 + 1310736 + ($87 + -6 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $$2396;
     $97 = $4 + 1310736 + ($87 + -5 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($87 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $102 = HEAP16[$64 >> 1] | 0;
    if ($102 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $57;
     $138 = $66 * 7 | 0;
     $139 = $4 + 1310736 + ($138 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
     $143 = $4 + 1310736 + ($138 + 1 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$2396;
     $147 = $4 + 1310736 + ($138 + 2 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $$0391;
     $151 = $4 + 1310736 + ($138 + 3 << 2) | 0;
     if ((HEAP32[$151 >> 2] | 0) > ($$2396 | 0)) HEAP32[$151 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($138 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $105 = HEAP32[$67 >> 2] | 0;
    $108 = HEAP32[$4 + 1179664 + (($102 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($105 | 0) > ($108 | 0)) {
     HEAP16[$$3 >> 1] = $108;
     $$2385 = $21;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $123 = $108;
       break L58;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($105 | 0)) HEAP32[$$2385 >> 2] = $108;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $105;
     if (($105 | 0) < ($108 | 0)) {
      $$3386 = $21;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $123 = $105;
        break L58;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($108 | 0)) HEAP32[$$3386 >> 2] = $105;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $123 = $105;
    } while (0);
    $125 = ($123 << 16 >> 16) * 7 | 0;
    $127 = $4 + 1310736 + ($125 + -7 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + 1;
    $131 = $4 + 1310736 + ($125 + -6 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $$2396;
    $135 = $4 + 1310736 + ($125 + -5 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + $27 + 8 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $222 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $21;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $224 = HEAP32[$$4 >> 2] | 0;
   if (($224 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $230 = $$1392;
   } else {
    $$2393 = $$1392;
    $230 = HEAP32[$4 + 1179664 + ($224 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $230;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $233 = $4 + 8 | 0;
  $234 = $$1392 + -1 | 0;
  HEAP32[$233 >> 2] = $234;
  if (!$234) $$0 = 0; else {
   _memset($222 | 0, 0, $234 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $234 << 4 | 0) | 0;
   $$4398 = 0;
   $240 = $234;
   while (1) {
    if (($$4398 | 0) >= ($240 | 0)) {
     $$5 = 0;
     break;
    }
    $241 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($241 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($241 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($241 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($241 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $240 = HEAP32[$233 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $253 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $254 = $$5 * 7 | 0;
    $257 = $4 + 12 + ($253 << 2) | 0;
    HEAP32[$257 >> 2] = (HEAP32[$257 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($254 << 2) >> 2] | 0);
    $264 = $253 << 1;
    $265 = $4 + 655376 + ($264 << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$4 + 1310736 + ($254 + 1 << 2) >> 2] | 0);
    $273 = $4 + 655376 + (($264 | 1) << 3) | 0;
    HEAPF64[$273 >> 3] = +HEAPF64[$273 >> 3] + +(HEAP32[$4 + 1310736 + ($254 + 2 << 2) >> 2] | 0);
    $276 = $253 << 2;
    $277 = $4 + 131084 + ($276 << 2) | 0;
    $281 = HEAP32[$4 + 1310736 + ($254 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) > ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $4 + 131084 + (($276 | 1) << 2) | 0;
    $288 = HEAP32[$4 + 1310736 + ($254 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) < ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $4 + 131084 + (($276 | 2) << 2) | 0;
    $295 = HEAP32[$4 + 1310736 + ($254 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) > ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $298 = $4 + 131084 + (($276 | 3) << 2) | 0;
    $302 = HEAP32[$4 + 1310736 + ($254 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$298 >> 2] | 0) < ($302 | 0)) HEAP32[$298 >> 2] = $302;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$233 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $307 = $4 + 12 + ($$6 << 2) | 0;
    $310 = $$6 << 1;
    $311 = $4 + 655376 + ($310 << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $317 = $4 + 655376 + (($310 | 1) << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBIYC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $105 = 0, $108 = 0, $123 = 0, $125 = 0, $127 = 0, $131 = 0, $135 = 0, $138 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $157 = 0, $161 = 0, $165 = 0, $169 = 0, $174 = 0, $177 = 0, $179 = 0, $183 = 0, $187 = 0, $190 = 0, $194 = 0, $199 = 0, $21 = 0, $22 = 0, $222 = 0, $224 = 0, $230 = 0, $233 = 0, $234 = 0, $240 = 0, $241 = 0, $253 = 0, $254 = 0, $257 = 0, $264 = 0, $265 = 0, $27 = 0, $273 = 0, $276 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $295 = 0, $298 = 0, $302 = 0, $307 = 0, $31 = 0, $310 = 0, $311 = 0, $317 = 0, $37 = 0, $38 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $8 = 0, $85 = 0, $87 = 0, $89 = 0, $93 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0377 = $7;
 $$0379 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($5 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1378 = $7;
 $$1380 = $7 + ($15 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($6 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($5 << 1) | 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $22 = $5 + 1 | 0;
 $27 = $1 << 1;
 $31 = 0 - $5 | 0;
 $$0376 = $0 + (($1 << 2) + 4) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $22 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $7 + ($22 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($8 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } else {
    HEAP8[$$1382 >> 0] = -1;
    $37 = $$3 + ($31 << 1) | 0;
    $38 = HEAP16[$37 >> 1] | 0;
    if ($38 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $38;
     $41 = ($38 << 16 >> 16) * 7 | 0;
     $43 = $4 + 1310736 + ($41 + -7 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 1;
     $47 = $4 + 1310736 + ($41 + -6 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$2396;
     $51 = $4 + 1310736 + ($41 + -5 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($41 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $57 = HEAP16[$37 + 2 >> 1] | 0;
    $60 = HEAP16[$37 + -2 >> 1] | 0;
    $62 = $60 << 16 >> 16 > 0;
    $63 = ($60 << 16 >> 16) + -1 | 0;
    $64 = $$3 + -2 | 0;
    if ($57 << 16 >> 16 <= 0) {
     if ($62) {
      HEAP16[$$3 >> 1] = $60;
      $156 = $63 * 7 | 0;
      $157 = $4 + 1310736 + ($156 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 1;
      $161 = $4 + 1310736 + ($156 + 1 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$2396;
      $165 = $4 + 1310736 + ($156 + 2 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $$0391;
      $169 = $4 + 1310736 + ($156 + 4 << 2) | 0;
      if ((HEAP32[$169 >> 2] | 0) < ($$2396 | 0)) HEAP32[$169 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($156 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $174 = HEAP16[$64 >> 1] | 0;
     if ($174 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $174;
      $177 = ($174 << 16 >> 16) * 7 | 0;
      $179 = $4 + 1310736 + ($177 + -7 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + 1;
      $183 = $4 + 1310736 + ($177 + -6 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$2396;
      $187 = $4 + 1310736 + ($177 + -5 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $$0391;
      $190 = $177 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($190 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $190;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $194 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $194;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $194 << 16 >> 16;
      $199 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($199 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($199 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($199 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($199 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($199 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($199 + 5 << 2) >> 2] = $$0391;
      $$2401 = $194;
      $$sink = $$0391;
      $$sink3 = $199 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $66 = ($57 << 16 >> 16) + -1 | 0;
    $67 = $4 + 1179664 + ($66 << 2) | 0;
    if ($62) {
     $68 = HEAP32[$67 >> 2] | 0;
     $70 = HEAP32[$4 + 1179664 + ($63 << 2) >> 2] | 0;
     L36 : do if (($68 | 0) > ($70 | 0)) {
      HEAP16[$$3 >> 1] = $70;
      $$0383 = $21;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $85 = $70;
        break L36;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($68 | 0)) HEAP32[$$0383 >> 2] = $70;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $68;
      if (($68 | 0) < ($70 | 0)) {
       $$1384 = $21;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $85 = $68;
         break L36;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($70 | 0)) HEAP32[$$1384 >> 2] = $68;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $85 = $68;
     } while (0);
     $87 = ($85 << 16 >> 16) * 7 | 0;
     $89 = $4 + 1310736 + ($87 + -7 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + 1;
     $93 = $4 + 1310736 + ($87 + -6 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $$2396;
     $97 = $4 + 1310736 + ($87 + -5 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($87 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $102 = HEAP16[$64 >> 1] | 0;
    if ($102 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $57;
     $138 = $66 * 7 | 0;
     $139 = $4 + 1310736 + ($138 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
     $143 = $4 + 1310736 + ($138 + 1 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$2396;
     $147 = $4 + 1310736 + ($138 + 2 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $$0391;
     $151 = $4 + 1310736 + ($138 + 3 << 2) | 0;
     if ((HEAP32[$151 >> 2] | 0) > ($$2396 | 0)) HEAP32[$151 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($138 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $105 = HEAP32[$67 >> 2] | 0;
    $108 = HEAP32[$4 + 1179664 + (($102 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($105 | 0) > ($108 | 0)) {
     HEAP16[$$3 >> 1] = $108;
     $$2385 = $21;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $123 = $108;
       break L59;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($105 | 0)) HEAP32[$$2385 >> 2] = $108;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $105;
     if (($105 | 0) < ($108 | 0)) {
      $$3386 = $21;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $123 = $105;
        break L59;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($108 | 0)) HEAP32[$$3386 >> 2] = $105;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $123 = $105;
    } while (0);
    $125 = ($123 << 16 >> 16) * 7 | 0;
    $127 = $4 + 1310736 + ($125 + -7 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + 1;
    $131 = $4 + 1310736 + ($125 + -6 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $$2396;
    $135 = $4 + 1310736 + ($125 + -5 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + $27 + 8 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $222 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $21;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $224 = HEAP32[$$4 >> 2] | 0;
   if (($224 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $230 = $$1392;
   } else {
    $$2393 = $$1392;
    $230 = HEAP32[$4 + 1179664 + ($224 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $230;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $233 = $4 + 8 | 0;
  $234 = $$1392 + -1 | 0;
  HEAP32[$233 >> 2] = $234;
  if (!$234) $$0 = 0; else {
   _memset($222 | 0, 0, $234 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $234 << 4 | 0) | 0;
   $$4398 = 0;
   $240 = $234;
   while (1) {
    if (($$4398 | 0) >= ($240 | 0)) {
     $$5 = 0;
     break;
    }
    $241 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($241 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($241 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($241 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($241 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $240 = HEAP32[$233 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $253 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $254 = $$5 * 7 | 0;
    $257 = $4 + 12 + ($253 << 2) | 0;
    HEAP32[$257 >> 2] = (HEAP32[$257 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($254 << 2) >> 2] | 0);
    $264 = $253 << 1;
    $265 = $4 + 655376 + ($264 << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$4 + 1310736 + ($254 + 1 << 2) >> 2] | 0);
    $273 = $4 + 655376 + (($264 | 1) << 3) | 0;
    HEAPF64[$273 >> 3] = +HEAPF64[$273 >> 3] + +(HEAP32[$4 + 1310736 + ($254 + 2 << 2) >> 2] | 0);
    $276 = $253 << 2;
    $277 = $4 + 131084 + ($276 << 2) | 0;
    $281 = HEAP32[$4 + 1310736 + ($254 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) > ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $4 + 131084 + (($276 | 1) << 2) | 0;
    $288 = HEAP32[$4 + 1310736 + ($254 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) < ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $4 + 131084 + (($276 | 2) << 2) | 0;
    $295 = HEAP32[$4 + 1310736 + ($254 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) > ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $298 = $4 + 131084 + (($276 | 3) << 2) | 0;
    $302 = HEAP32[$4 + 1310736 + ($254 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$298 >> 2] | 0) < ($302 | 0)) HEAP32[$298 >> 2] = $302;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$233 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $307 = $4 + 12 + ($$6 << 2) | 0;
    $310 = $$6 << 1;
    $311 = $4 + 655376 + ($310 << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $317 = $4 + 655376 + (($310 | 1) << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWRA3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $108 = 0, $111 = 0, $114 = 0, $129 = 0, $13 = 0, $131 = 0, $133 = 0, $137 = 0, $14 = 0, $141 = 0, $144 = 0, $145 = 0, $149 = 0, $153 = 0, $157 = 0, $162 = 0, $163 = 0, $167 = 0, $171 = 0, $175 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $20 = 0, $200 = 0, $205 = 0, $21 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $28 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0377 = $5;
 $$0379 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($1 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1378 = $5;
 $$1380 = $5 + ($14 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($2 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1380 = $$1380 + ($1 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0376 = $0 + ($21 << 2) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($6 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 2 >> 0] | 0) + (HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 + 3 >> 0] | 0) | 0) > ($13 | 0)) {
    HEAP8[$$1382 >> 0] = -1;
    $43 = $$3 + ($28 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $4 + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $4 + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$2396;
     $57 = $4 + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($47 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $66 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $66 << 16 >> 16 > 0;
    $69 = ($66 << 16 >> 16) + -1 | 0;
    $70 = $$3 + -2 | 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($68) {
      HEAP16[$$3 >> 1] = $66;
      $162 = $69 * 7 | 0;
      $163 = $4 + 1310736 + ($162 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $4 + 1310736 + ($162 + 1 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$2396;
      $171 = $4 + 1310736 + ($162 + 2 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $$0391;
      $175 = $4 + 1310736 + ($162 + 4 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($$2396 | 0)) HEAP32[$175 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($162 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $180 = HEAP16[$70 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $4 + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $4 + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$2396;
      $193 = $4 + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $$0391;
      $196 = $183 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($196 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $196;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $200 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $200;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($205 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($205 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($205 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($205 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($205 + 5 << 2) >> 2] = $$0391;
      $$2401 = $200;
      $$sink = $$0391;
      $$sink3 = $205 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $72 = ($63 << 16 >> 16) + -1 | 0;
    $73 = $4 + 1179664 + ($72 << 2) | 0;
    if ($68) {
     $74 = HEAP32[$73 >> 2] | 0;
     $76 = HEAP32[$4 + 1179664 + ($69 << 2) >> 2] | 0;
     L35 : do if (($74 | 0) > ($76 | 0)) {
      HEAP16[$$3 >> 1] = $76;
      $$0383 = $20;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $91 = $76;
        break L35;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($74 | 0)) HEAP32[$$0383 >> 2] = $76;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $74;
      if (($74 | 0) < ($76 | 0)) {
       $$1384 = $20;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $91 = $74;
         break L35;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($76 | 0)) HEAP32[$$1384 >> 2] = $74;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $91 = $74;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $4 + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $4 + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$2396;
     $103 = $4 + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($93 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $108 = HEAP16[$70 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $63;
     $144 = $72 * 7 | 0;
     $145 = $4 + 1310736 + ($144 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $4 + 1310736 + ($144 + 1 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$2396;
     $153 = $4 + 1310736 + ($144 + 2 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$0391;
     $157 = $4 + 1310736 + ($144 + 3 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($$2396 | 0)) HEAP32[$157 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($144 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $111 = HEAP32[$73 >> 2] | 0;
    $114 = HEAP32[$4 + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$$3 >> 1] = $114;
     $$2385 = $20;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $129 = $114;
       break L58;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($111 | 0)) HEAP32[$$2385 >> 2] = $114;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $$3386 = $20;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $129 = $111;
        break L58;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($114 | 0)) HEAP32[$$3386 >> 2] = $111;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $4 + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $4 + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$2396;
    $141 = $4 + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + 8 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $20;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $229 = HEAP32[$$4 >> 2] | 0;
   if (($229 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $235 = $$1392;
   } else {
    $$2393 = $$1392;
    $235 = HEAP32[$4 + 1179664 + ($229 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $235;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $238 = $4 + 8 | 0;
  $239 = $$1392 + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $$4398 = 0;
   $245 = $239;
   while (1) {
    if (($$4398 | 0) >= ($245 | 0)) {
     $$5 = 0;
     break;
    }
    $246 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($246 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($246 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $245 = HEAP32[$238 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $258 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $$5 * 7 | 0;
    $262 = $4 + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $4 + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $4 + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $4 + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $4 + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$4 + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $4 + 12 + ($$6 << 2) | 0;
    $315 = $$6 << 1;
    $316 = $4 + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $4 + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function _arLabelingSubEBRA3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $108 = 0, $111 = 0, $114 = 0, $129 = 0, $13 = 0, $131 = 0, $133 = 0, $137 = 0, $14 = 0, $141 = 0, $144 = 0, $145 = 0, $149 = 0, $153 = 0, $157 = 0, $162 = 0, $163 = 0, $167 = 0, $171 = 0, $175 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $20 = 0, $200 = 0, $205 = 0, $21 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $28 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0377 = $5;
 $$0379 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($1 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1378 = $5;
 $$1380 = $5 + ($14 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($2 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1380 = $$1380 + ($1 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0376 = $0 + ($21 << 2) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($6 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 2 >> 0] | 0) + (HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 + 3 >> 0] | 0) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } else {
    HEAP8[$$1382 >> 0] = -1;
    $43 = $$3 + ($28 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $4 + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $4 + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$2396;
     $57 = $4 + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($47 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $66 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $66 << 16 >> 16 > 0;
    $69 = ($66 << 16 >> 16) + -1 | 0;
    $70 = $$3 + -2 | 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($68) {
      HEAP16[$$3 >> 1] = $66;
      $162 = $69 * 7 | 0;
      $163 = $4 + 1310736 + ($162 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $4 + 1310736 + ($162 + 1 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$2396;
      $171 = $4 + 1310736 + ($162 + 2 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $$0391;
      $175 = $4 + 1310736 + ($162 + 4 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($$2396 | 0)) HEAP32[$175 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($162 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $180 = HEAP16[$70 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $4 + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $4 + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$2396;
      $193 = $4 + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $$0391;
      $196 = $183 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($196 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $196;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $200 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $200;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($205 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($205 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($205 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($205 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($205 + 5 << 2) >> 2] = $$0391;
      $$2401 = $200;
      $$sink = $$0391;
      $$sink3 = $205 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $72 = ($63 << 16 >> 16) + -1 | 0;
    $73 = $4 + 1179664 + ($72 << 2) | 0;
    if ($68) {
     $74 = HEAP32[$73 >> 2] | 0;
     $76 = HEAP32[$4 + 1179664 + ($69 << 2) >> 2] | 0;
     L36 : do if (($74 | 0) > ($76 | 0)) {
      HEAP16[$$3 >> 1] = $76;
      $$0383 = $20;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $91 = $76;
        break L36;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($74 | 0)) HEAP32[$$0383 >> 2] = $76;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $74;
      if (($74 | 0) < ($76 | 0)) {
       $$1384 = $20;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $91 = $74;
         break L36;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($76 | 0)) HEAP32[$$1384 >> 2] = $74;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $91 = $74;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $4 + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $4 + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$2396;
     $103 = $4 + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($93 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $108 = HEAP16[$70 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $63;
     $144 = $72 * 7 | 0;
     $145 = $4 + 1310736 + ($144 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $4 + 1310736 + ($144 + 1 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$2396;
     $153 = $4 + 1310736 + ($144 + 2 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$0391;
     $157 = $4 + 1310736 + ($144 + 3 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($$2396 | 0)) HEAP32[$157 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($144 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $111 = HEAP32[$73 >> 2] | 0;
    $114 = HEAP32[$4 + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$$3 >> 1] = $114;
     $$2385 = $20;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $129 = $114;
       break L59;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($111 | 0)) HEAP32[$$2385 >> 2] = $114;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $$3386 = $20;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $129 = $111;
        break L59;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($114 | 0)) HEAP32[$$3386 >> 2] = $111;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $4 + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $4 + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$2396;
    $141 = $4 + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + 8 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $20;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $229 = HEAP32[$$4 >> 2] | 0;
   if (($229 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $235 = $$1392;
   } else {
    $$2393 = $$1392;
    $235 = HEAP32[$4 + 1179664 + ($229 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $235;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $238 = $4 + 8 | 0;
  $239 = $$1392 + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $$4398 = 0;
   $245 = $239;
   while (1) {
    if (($$4398 | 0) >= ($245 | 0)) {
     $$5 = 0;
     break;
    }
    $246 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($246 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($246 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $245 = HEAP32[$238 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $258 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $$5 * 7 | 0;
    $262 = $4 + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $4 + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $4 + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $4 + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $4 + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$4 + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $4 + 12 + ($$6 << 2) | 0;
    $315 = $$6 << 1;
    $316 = $4 + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $4 + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $107 = 0, $110 = 0, $113 = 0, $128 = 0, $13 = 0, $130 = 0, $132 = 0, $136 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $148 = 0, $152 = 0, $156 = 0, $161 = 0, $162 = 0, $166 = 0, $170 = 0, $174 = 0, $179 = 0, $182 = 0, $184 = 0, $188 = 0, $192 = 0, $195 = 0, $199 = 0, $20 = 0, $204 = 0, $21 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $28 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $42 = 0, $43 = 0, $46 = 0, $48 = 0, $5 = 0, $52 = 0, $56 = 0, $6 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0377 = $5;
 $$0379 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($1 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1378 = $5;
 $$1380 = $5 + ($14 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($2 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1380 = $$1380 + ($1 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0376 = $0 + ($21 * 3 | 0) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($6 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($13 | 0)) {
    HEAP8[$$1382 >> 0] = -1;
    $42 = $$3 + ($28 << 1) | 0;
    $43 = HEAP16[$42 >> 1] | 0;
    if ($43 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $43;
     $46 = ($43 << 16 >> 16) * 7 | 0;
     $48 = $4 + 1310736 + ($46 + -7 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
     $52 = $4 + 1310736 + ($46 + -6 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $$2396;
     $56 = $4 + 1310736 + ($46 + -5 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($46 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $62 = HEAP16[$42 + 2 >> 1] | 0;
    $65 = HEAP16[$42 + -2 >> 1] | 0;
    $67 = $65 << 16 >> 16 > 0;
    $68 = ($65 << 16 >> 16) + -1 | 0;
    $69 = $$3 + -2 | 0;
    if ($62 << 16 >> 16 <= 0) {
     if ($67) {
      HEAP16[$$3 >> 1] = $65;
      $161 = $68 * 7 | 0;
      $162 = $4 + 1310736 + ($161 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $4 + 1310736 + ($161 + 1 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $$2396;
      $170 = $4 + 1310736 + ($161 + 2 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $$0391;
      $174 = $4 + 1310736 + ($161 + 4 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($$2396 | 0)) HEAP32[$174 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($161 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $179 = HEAP16[$69 >> 1] | 0;
     if ($179 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $179;
      $182 = ($179 << 16 >> 16) * 7 | 0;
      $184 = $4 + 1310736 + ($182 + -7 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + 1;
      $188 = $4 + 1310736 + ($182 + -6 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$2396;
      $192 = $4 + 1310736 + ($182 + -5 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $$0391;
      $195 = $182 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($195 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $195;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $199 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $199;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $199 << 16 >> 16;
      $204 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($204 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($204 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($204 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 5 << 2) >> 2] = $$0391;
      $$2401 = $199;
      $$sink = $$0391;
      $$sink3 = $204 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $71 = ($62 << 16 >> 16) + -1 | 0;
    $72 = $4 + 1179664 + ($71 << 2) | 0;
    if ($67) {
     $73 = HEAP32[$72 >> 2] | 0;
     $75 = HEAP32[$4 + 1179664 + ($68 << 2) >> 2] | 0;
     L35 : do if (($73 | 0) > ($75 | 0)) {
      HEAP16[$$3 >> 1] = $75;
      $$0383 = $20;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $90 = $75;
        break L35;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($73 | 0)) HEAP32[$$0383 >> 2] = $75;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $73;
      if (($73 | 0) < ($75 | 0)) {
       $$1384 = $20;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $90 = $73;
         break L35;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($75 | 0)) HEAP32[$$1384 >> 2] = $73;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $90 = $73;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $4 + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $4 + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $$2396;
     $102 = $4 + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($92 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $107 = HEAP16[$69 >> 1] | 0;
    if ($107 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $62;
     $143 = $71 * 7 | 0;
     $144 = $4 + 1310736 + ($143 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 1;
     $148 = $4 + 1310736 + ($143 + 1 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $$2396;
     $152 = $4 + 1310736 + ($143 + 2 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $$0391;
     $156 = $4 + 1310736 + ($143 + 3 << 2) | 0;
     if ((HEAP32[$156 >> 2] | 0) > ($$2396 | 0)) HEAP32[$156 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($143 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $110 = HEAP32[$72 >> 2] | 0;
    $113 = HEAP32[$4 + 1179664 + (($107 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$$3 >> 1] = $113;
     $$2385 = $20;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $128 = $113;
       break L58;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($110 | 0)) HEAP32[$$2385 >> 2] = $113;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $$3386 = $20;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $128 = $110;
        break L58;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($113 | 0)) HEAP32[$$3386 >> 2] = $110;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $4 + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $4 + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$2396;
    $140 = $4 + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 3 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + 6 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $20;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $234 = $$1392;
   } else {
    $$2393 = $$1392;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1392 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4398 = 0;
   $244 = $238;
   while (1) {
    if (($$4398 | 0) >= ($244 | 0)) {
     $$5 = 0;
     break;
    }
    $245 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($245 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($245 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $244 = HEAP32[$237 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $257 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $$5 * 7 | 0;
    $261 = $4 + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $4 + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $4 + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $4 + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $4 + 12 + ($$6 << 2) | 0;
    $314 = $$6 << 1;
    $315 = $4 + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $4 + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBR3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $107 = 0, $110 = 0, $113 = 0, $128 = 0, $13 = 0, $130 = 0, $132 = 0, $136 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $148 = 0, $152 = 0, $156 = 0, $161 = 0, $162 = 0, $166 = 0, $170 = 0, $174 = 0, $179 = 0, $182 = 0, $184 = 0, $188 = 0, $192 = 0, $195 = 0, $199 = 0, $20 = 0, $204 = 0, $21 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $28 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $42 = 0, $43 = 0, $46 = 0, $48 = 0, $5 = 0, $52 = 0, $56 = 0, $6 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0377 = $5;
 $$0379 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($1 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1378 = $5;
 $$1380 = $5 + ($14 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($2 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1380 = $$1380 + ($1 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0376 = $0 + ($21 * 3 | 0) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($6 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } else {
    HEAP8[$$1382 >> 0] = -1;
    $42 = $$3 + ($28 << 1) | 0;
    $43 = HEAP16[$42 >> 1] | 0;
    if ($43 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $43;
     $46 = ($43 << 16 >> 16) * 7 | 0;
     $48 = $4 + 1310736 + ($46 + -7 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
     $52 = $4 + 1310736 + ($46 + -6 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $$2396;
     $56 = $4 + 1310736 + ($46 + -5 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($46 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $62 = HEAP16[$42 + 2 >> 1] | 0;
    $65 = HEAP16[$42 + -2 >> 1] | 0;
    $67 = $65 << 16 >> 16 > 0;
    $68 = ($65 << 16 >> 16) + -1 | 0;
    $69 = $$3 + -2 | 0;
    if ($62 << 16 >> 16 <= 0) {
     if ($67) {
      HEAP16[$$3 >> 1] = $65;
      $161 = $68 * 7 | 0;
      $162 = $4 + 1310736 + ($161 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $4 + 1310736 + ($161 + 1 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $$2396;
      $170 = $4 + 1310736 + ($161 + 2 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $$0391;
      $174 = $4 + 1310736 + ($161 + 4 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($$2396 | 0)) HEAP32[$174 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($161 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $179 = HEAP16[$69 >> 1] | 0;
     if ($179 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $179;
      $182 = ($179 << 16 >> 16) * 7 | 0;
      $184 = $4 + 1310736 + ($182 + -7 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + 1;
      $188 = $4 + 1310736 + ($182 + -6 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$2396;
      $192 = $4 + 1310736 + ($182 + -5 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $$0391;
      $195 = $182 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($195 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $195;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $199 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $199;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $199 << 16 >> 16;
      $204 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($204 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($204 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($204 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 5 << 2) >> 2] = $$0391;
      $$2401 = $199;
      $$sink = $$0391;
      $$sink3 = $204 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $71 = ($62 << 16 >> 16) + -1 | 0;
    $72 = $4 + 1179664 + ($71 << 2) | 0;
    if ($67) {
     $73 = HEAP32[$72 >> 2] | 0;
     $75 = HEAP32[$4 + 1179664 + ($68 << 2) >> 2] | 0;
     L36 : do if (($73 | 0) > ($75 | 0)) {
      HEAP16[$$3 >> 1] = $75;
      $$0383 = $20;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $90 = $75;
        break L36;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($73 | 0)) HEAP32[$$0383 >> 2] = $75;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $73;
      if (($73 | 0) < ($75 | 0)) {
       $$1384 = $20;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $90 = $73;
         break L36;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($75 | 0)) HEAP32[$$1384 >> 2] = $73;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $90 = $73;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $4 + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $4 + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $$2396;
     $102 = $4 + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($92 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $107 = HEAP16[$69 >> 1] | 0;
    if ($107 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $62;
     $143 = $71 * 7 | 0;
     $144 = $4 + 1310736 + ($143 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 1;
     $148 = $4 + 1310736 + ($143 + 1 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $$2396;
     $152 = $4 + 1310736 + ($143 + 2 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $$0391;
     $156 = $4 + 1310736 + ($143 + 3 << 2) | 0;
     if ((HEAP32[$156 >> 2] | 0) > ($$2396 | 0)) HEAP32[$156 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($143 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $110 = HEAP32[$72 >> 2] | 0;
    $113 = HEAP32[$4 + 1179664 + (($107 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$$3 >> 1] = $113;
     $$2385 = $20;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $128 = $113;
       break L59;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($110 | 0)) HEAP32[$$2385 >> 2] = $113;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $$3386 = $20;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $128 = $110;
        break L59;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($113 | 0)) HEAP32[$$3386 >> 2] = $110;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $4 + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $4 + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$2396;
    $140 = $4 + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 3 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + 6 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $20;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $234 = $$1392;
   } else {
    $$2393 = $$1392;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1392 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4398 = 0;
   $244 = $238;
   while (1) {
    if (($$4398 | 0) >= ($244 | 0)) {
     $$5 = 0;
     break;
    }
    $245 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($245 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($245 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $244 = HEAP32[$237 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $257 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $$5 * 7 | 0;
    $261 = $4 + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $4 + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $4 + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $4 + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $4 + 12 + ($$6 << 2) | 0;
    $314 = $$6 << 1;
    $315 = $4 + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $4 + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3CA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $107 = 0, $110 = 0, $113 = 0, $128 = 0, $13 = 0, $130 = 0, $132 = 0, $136 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $148 = 0, $152 = 0, $156 = 0, $161 = 0, $162 = 0, $166 = 0, $170 = 0, $174 = 0, $179 = 0, $182 = 0, $184 = 0, $188 = 0, $192 = 0, $195 = 0, $199 = 0, $20 = 0, $204 = 0, $21 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $28 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $42 = 0, $43 = 0, $46 = 0, $48 = 0, $5 = 0, $52 = 0, $56 = 0, $6 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0377 = $5;
 $$0379 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($1 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1378 = $5;
 $$1380 = $5 + ($14 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($2 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1380 = $$1380 + ($1 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0376 = $0 + ($21 << 2) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($6 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($13 | 0)) {
    HEAP8[$$1382 >> 0] = -1;
    $42 = $$3 + ($28 << 1) | 0;
    $43 = HEAP16[$42 >> 1] | 0;
    if ($43 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $43;
     $46 = ($43 << 16 >> 16) * 7 | 0;
     $48 = $4 + 1310736 + ($46 + -7 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
     $52 = $4 + 1310736 + ($46 + -6 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $$2396;
     $56 = $4 + 1310736 + ($46 + -5 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($46 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $62 = HEAP16[$42 + 2 >> 1] | 0;
    $65 = HEAP16[$42 + -2 >> 1] | 0;
    $67 = $65 << 16 >> 16 > 0;
    $68 = ($65 << 16 >> 16) + -1 | 0;
    $69 = $$3 + -2 | 0;
    if ($62 << 16 >> 16 <= 0) {
     if ($67) {
      HEAP16[$$3 >> 1] = $65;
      $161 = $68 * 7 | 0;
      $162 = $4 + 1310736 + ($161 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $4 + 1310736 + ($161 + 1 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $$2396;
      $170 = $4 + 1310736 + ($161 + 2 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $$0391;
      $174 = $4 + 1310736 + ($161 + 4 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($$2396 | 0)) HEAP32[$174 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($161 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $179 = HEAP16[$69 >> 1] | 0;
     if ($179 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $179;
      $182 = ($179 << 16 >> 16) * 7 | 0;
      $184 = $4 + 1310736 + ($182 + -7 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + 1;
      $188 = $4 + 1310736 + ($182 + -6 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$2396;
      $192 = $4 + 1310736 + ($182 + -5 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $$0391;
      $195 = $182 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($195 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $195;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $199 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $199;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $199 << 16 >> 16;
      $204 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($204 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($204 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($204 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 5 << 2) >> 2] = $$0391;
      $$2401 = $199;
      $$sink = $$0391;
      $$sink3 = $204 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $71 = ($62 << 16 >> 16) + -1 | 0;
    $72 = $4 + 1179664 + ($71 << 2) | 0;
    if ($67) {
     $73 = HEAP32[$72 >> 2] | 0;
     $75 = HEAP32[$4 + 1179664 + ($68 << 2) >> 2] | 0;
     L35 : do if (($73 | 0) > ($75 | 0)) {
      HEAP16[$$3 >> 1] = $75;
      $$0383 = $20;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $90 = $75;
        break L35;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($73 | 0)) HEAP32[$$0383 >> 2] = $75;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $73;
      if (($73 | 0) < ($75 | 0)) {
       $$1384 = $20;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $90 = $73;
         break L35;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($75 | 0)) HEAP32[$$1384 >> 2] = $73;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $90 = $73;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $4 + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $4 + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $$2396;
     $102 = $4 + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($92 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $107 = HEAP16[$69 >> 1] | 0;
    if ($107 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $62;
     $143 = $71 * 7 | 0;
     $144 = $4 + 1310736 + ($143 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 1;
     $148 = $4 + 1310736 + ($143 + 1 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $$2396;
     $152 = $4 + 1310736 + ($143 + 2 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $$0391;
     $156 = $4 + 1310736 + ($143 + 3 << 2) | 0;
     if ((HEAP32[$156 >> 2] | 0) > ($$2396 | 0)) HEAP32[$156 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($143 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $110 = HEAP32[$72 >> 2] | 0;
    $113 = HEAP32[$4 + 1179664 + (($107 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$$3 >> 1] = $113;
     $$2385 = $20;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $128 = $113;
       break L58;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($110 | 0)) HEAP32[$$2385 >> 2] = $113;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $$3386 = $20;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $128 = $110;
        break L58;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($113 | 0)) HEAP32[$$3386 >> 2] = $110;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $4 + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $4 + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$2396;
    $140 = $4 + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + 8 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $20;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $234 = $$1392;
   } else {
    $$2393 = $$1392;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1392 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4398 = 0;
   $244 = $238;
   while (1) {
    if (($$4398 | 0) >= ($244 | 0)) {
     $$5 = 0;
     break;
    }
    $245 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($245 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($245 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $244 = HEAP32[$237 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $257 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $$5 * 7 | 0;
    $261 = $4 + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $4 + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $4 + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $4 + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $4 + 12 + ($$6 << 2) | 0;
    $314 = $$6 << 1;
    $315 = $4 + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $4 + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBR3CA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $107 = 0, $110 = 0, $113 = 0, $128 = 0, $13 = 0, $130 = 0, $132 = 0, $136 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $148 = 0, $152 = 0, $156 = 0, $161 = 0, $162 = 0, $166 = 0, $170 = 0, $174 = 0, $179 = 0, $182 = 0, $184 = 0, $188 = 0, $192 = 0, $195 = 0, $199 = 0, $20 = 0, $204 = 0, $21 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $28 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $42 = 0, $43 = 0, $46 = 0, $48 = 0, $5 = 0, $52 = 0, $56 = 0, $6 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0377 = $5;
 $$0379 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($1 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1378 = $5;
 $$1380 = $5 + ($14 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($2 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1380 = $$1380 + ($1 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $28 = 0 - $1 | 0;
 $$0376 = $0 + ($21 << 2) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $21 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($6 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } else {
    HEAP8[$$1382 >> 0] = -1;
    $42 = $$3 + ($28 << 1) | 0;
    $43 = HEAP16[$42 >> 1] | 0;
    if ($43 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $43;
     $46 = ($43 << 16 >> 16) * 7 | 0;
     $48 = $4 + 1310736 + ($46 + -7 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
     $52 = $4 + 1310736 + ($46 + -6 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $$2396;
     $56 = $4 + 1310736 + ($46 + -5 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($46 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $62 = HEAP16[$42 + 2 >> 1] | 0;
    $65 = HEAP16[$42 + -2 >> 1] | 0;
    $67 = $65 << 16 >> 16 > 0;
    $68 = ($65 << 16 >> 16) + -1 | 0;
    $69 = $$3 + -2 | 0;
    if ($62 << 16 >> 16 <= 0) {
     if ($67) {
      HEAP16[$$3 >> 1] = $65;
      $161 = $68 * 7 | 0;
      $162 = $4 + 1310736 + ($161 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $4 + 1310736 + ($161 + 1 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $$2396;
      $170 = $4 + 1310736 + ($161 + 2 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $$0391;
      $174 = $4 + 1310736 + ($161 + 4 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($$2396 | 0)) HEAP32[$174 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($161 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $179 = HEAP16[$69 >> 1] | 0;
     if ($179 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $179;
      $182 = ($179 << 16 >> 16) * 7 | 0;
      $184 = $4 + 1310736 + ($182 + -7 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + 1;
      $188 = $4 + 1310736 + ($182 + -6 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $$2396;
      $192 = $4 + 1310736 + ($182 + -5 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $$0391;
      $195 = $182 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($195 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $195;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $199 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $199;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $199 << 16 >> 16;
      $204 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($204 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($204 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($204 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($204 + 5 << 2) >> 2] = $$0391;
      $$2401 = $199;
      $$sink = $$0391;
      $$sink3 = $204 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $71 = ($62 << 16 >> 16) + -1 | 0;
    $72 = $4 + 1179664 + ($71 << 2) | 0;
    if ($67) {
     $73 = HEAP32[$72 >> 2] | 0;
     $75 = HEAP32[$4 + 1179664 + ($68 << 2) >> 2] | 0;
     L36 : do if (($73 | 0) > ($75 | 0)) {
      HEAP16[$$3 >> 1] = $75;
      $$0383 = $20;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $90 = $75;
        break L36;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($73 | 0)) HEAP32[$$0383 >> 2] = $75;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $73;
      if (($73 | 0) < ($75 | 0)) {
       $$1384 = $20;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $90 = $73;
         break L36;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($75 | 0)) HEAP32[$$1384 >> 2] = $73;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $90 = $73;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $4 + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $4 + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $$2396;
     $102 = $4 + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($92 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $107 = HEAP16[$69 >> 1] | 0;
    if ($107 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $62;
     $143 = $71 * 7 | 0;
     $144 = $4 + 1310736 + ($143 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 1;
     $148 = $4 + 1310736 + ($143 + 1 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $$2396;
     $152 = $4 + 1310736 + ($143 + 2 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $$0391;
     $156 = $4 + 1310736 + ($143 + 3 << 2) | 0;
     if ((HEAP32[$156 >> 2] | 0) > ($$2396 | 0)) HEAP32[$156 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($143 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $110 = HEAP32[$72 >> 2] | 0;
    $113 = HEAP32[$4 + 1179664 + (($107 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$$3 >> 1] = $113;
     $$2385 = $20;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $128 = $113;
       break L59;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($110 | 0)) HEAP32[$$2385 >> 2] = $113;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $$3386 = $20;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $128 = $110;
        break L59;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($113 | 0)) HEAP32[$$3386 >> 2] = $110;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $4 + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $4 + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$2396;
    $140 = $4 + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + 8 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $20;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $234 = $$1392;
   } else {
    $$2393 = $$1392;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1392 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4398 = 0;
   $244 = $238;
   while (1) {
    if (($$4398 | 0) >= ($244 | 0)) {
     $$5 = 0;
     break;
    }
    $245 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($245 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($245 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $244 = HEAP32[$237 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $257 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $$5 * 7 | 0;
    $261 = $4 + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $4 + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $4 + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $4 + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $4 + 12 + ($$6 << 2) | 0;
    $314 = $$6 << 1;
    $315 = $4 + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $4 + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWIC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $104 = 0, $107 = 0, $122 = 0, $124 = 0, $126 = 0, $130 = 0, $134 = 0, $137 = 0, $138 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $155 = 0, $156 = 0, $160 = 0, $164 = 0, $168 = 0, $173 = 0, $176 = 0, $178 = 0, $182 = 0, $186 = 0, $189 = 0, $193 = 0, $198 = 0, $21 = 0, $22 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $30 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $46 = 0, $5 = 0, $50 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $92 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0377 = $7;
 $$0379 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($5 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1378 = $7;
 $$1380 = $7 + ($15 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($6 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($5 << 1) | 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $22 = $5 + 1 | 0;
 $30 = 0 - $5 | 0;
 $$0376 = $0 + (($1 << 1) + 2) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $22 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $7 + ($22 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($8 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP8[$$1382 >> 0] = -1;
    $36 = $$3 + ($30 << 1) | 0;
    $37 = HEAP16[$36 >> 1] | 0;
    if ($37 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $37;
     $40 = ($37 << 16 >> 16) * 7 | 0;
     $42 = $4 + 1310736 + ($40 + -7 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
     $46 = $4 + 1310736 + ($40 + -6 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $$2396;
     $50 = $4 + 1310736 + ($40 + -5 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($40 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $56 = HEAP16[$36 + 2 >> 1] | 0;
    $59 = HEAP16[$36 + -2 >> 1] | 0;
    $61 = $59 << 16 >> 16 > 0;
    $62 = $$3 + -2 | 0;
    $63 = ($59 << 16 >> 16) + -1 | 0;
    if ($56 << 16 >> 16 <= 0) {
     if ($61) {
      HEAP16[$$3 >> 1] = $59;
      $155 = $63 * 7 | 0;
      $156 = $4 + 1310736 + ($155 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1;
      $160 = $4 + 1310736 + ($155 + 1 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $$2396;
      $164 = $4 + 1310736 + ($155 + 2 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $$0391;
      $168 = $4 + 1310736 + ($155 + 4 << 2) | 0;
      if ((HEAP32[$168 >> 2] | 0) < ($$2396 | 0)) HEAP32[$168 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($155 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $173 = HEAP16[$62 >> 1] | 0;
     if ($173 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $173;
      $176 = ($173 << 16 >> 16) * 7 | 0;
      $178 = $4 + 1310736 + ($176 + -7 << 2) | 0;
      HEAP32[$178 >> 2] = (HEAP32[$178 >> 2] | 0) + 1;
      $182 = $4 + 1310736 + ($176 + -6 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + $$2396;
      $186 = $4 + 1310736 + ($176 + -5 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + $$0391;
      $189 = $176 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($189 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $189;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $193 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $193;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $193 << 16 >> 16;
      $198 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($198 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($198 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($198 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($198 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($198 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($198 + 5 << 2) >> 2] = $$0391;
      $$2401 = $193;
      $$sink = $$0391;
      $$sink3 = $198 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $65 = ($56 << 16 >> 16) + -1 | 0;
    $66 = $4 + 1179664 + ($65 << 2) | 0;
    if ($61) {
     $67 = HEAP32[$66 >> 2] | 0;
     $69 = HEAP32[$4 + 1179664 + ($63 << 2) >> 2] | 0;
     L35 : do if (($67 | 0) > ($69 | 0)) {
      HEAP16[$$3 >> 1] = $69;
      $$0383 = $21;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $84 = $69;
        break L35;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($67 | 0)) HEAP32[$$0383 >> 2] = $69;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $67;
      if (($67 | 0) < ($69 | 0)) {
       $$1384 = $21;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $84 = $67;
         break L35;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($69 | 0)) HEAP32[$$1384 >> 2] = $67;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $84 = $67;
     } while (0);
     $86 = ($84 << 16 >> 16) * 7 | 0;
     $88 = $4 + 1310736 + ($86 + -7 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + 1;
     $92 = $4 + 1310736 + ($86 + -6 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $$2396;
     $96 = $4 + 1310736 + ($86 + -5 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($86 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $101 = HEAP16[$62 >> 1] | 0;
    if ($101 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $56;
     $137 = $65 * 7 | 0;
     $138 = $4 + 1310736 + ($137 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
     $142 = $4 + 1310736 + ($137 + 1 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2396;
     $146 = $4 + 1310736 + ($137 + 2 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0391;
     $150 = $4 + 1310736 + ($137 + 3 << 2) | 0;
     if ((HEAP32[$150 >> 2] | 0) > ($$2396 | 0)) HEAP32[$150 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($137 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $104 = HEAP32[$66 >> 2] | 0;
    $107 = HEAP32[$4 + 1179664 + (($101 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($104 | 0) > ($107 | 0)) {
     HEAP16[$$3 >> 1] = $107;
     $$2385 = $21;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $122 = $107;
       break L58;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($104 | 0)) HEAP32[$$2385 >> 2] = $107;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $104;
     if (($104 | 0) < ($107 | 0)) {
      $$3386 = $21;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $122 = $104;
        break L58;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($107 | 0)) HEAP32[$$3386 >> 2] = $104;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $122 = $104;
    } while (0);
    $124 = ($122 << 16 >> 16) * 7 | 0;
    $126 = $4 + 1310736 + ($124 + -7 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + 1;
    $130 = $4 + 1310736 + ($124 + -6 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $$2396;
    $134 = $4 + 1310736 + ($124 + -5 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + $1 + 4 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $21;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $229 = $$1392;
   } else {
    $$2393 = $$1392;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1392 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4398 = 0;
   $239 = $233;
   while (1) {
    if (($$4398 | 0) >= ($239 | 0)) {
     $$5 = 0;
     break;
    }
    $240 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($240 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($240 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $239 = HEAP32[$232 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $252 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $$5 * 7 | 0;
    $256 = $4 + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $4 + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $4 + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $4 + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$4 + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $4 + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $4 + 12 + ($$6 << 2) | 0;
    $309 = $$6 << 1;
    $310 = $4 + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $4 + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBIC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0376 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0383 = 0, $$0387 = 0, $$0391 = 0, $$0394 = 0, $$0399 = 0, $$1 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1384 = 0, $$1388 = 0, $$1392 = 0, $$1395 = 0, $$1400 = 0, $$2 = 0, $$2385 = 0, $$2389 = 0, $$2393 = 0, $$2396 = 0, $$2401 = 0, $$3 = 0, $$3386 = 0, $$3390 = 0, $$3397 = 0, $$3402 = 0, $$4 = 0, $$4398 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $104 = 0, $107 = 0, $122 = 0, $124 = 0, $126 = 0, $130 = 0, $134 = 0, $137 = 0, $138 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $155 = 0, $156 = 0, $160 = 0, $164 = 0, $168 = 0, $173 = 0, $176 = 0, $178 = 0, $182 = 0, $186 = 0, $189 = 0, $193 = 0, $198 = 0, $21 = 0, $22 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $30 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $46 = 0, $5 = 0, $50 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $92 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0377 = $7;
 $$0379 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0394 = 0;
 while (1) {
  if (($$0394 | 0) >= ($5 | 0)) break;
  HEAP16[$$0379 >> 1] = 0;
  HEAP16[$$0377 >> 1] = 0;
  $$0377 = $$0377 + 2 | 0;
  $$0379 = $$0379 + 2 | 0;
  $$0394 = $$0394 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1378 = $7;
 $$1380 = $7 + ($15 << 1) | 0;
 $$1395 = 0;
 while (1) {
  if (($$1395 | 0) >= ($6 | 0)) break;
  HEAP16[$$1380 >> 1] = 0;
  HEAP16[$$1378 >> 1] = 0;
  $$1378 = $$1378 + ($5 << 1) | 0;
  $$1380 = $$1380 + ($5 << 1) | 0;
  $$1395 = $$1395 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $22 = $5 + 1 | 0;
 $30 = 0 - $5 | 0;
 $$0376 = $0 + (($1 << 1) + 2) | 0;
 $$0381 = (HEAP32[$4 + 4 >> 2] | 0) + $22 | 0;
 $$0391 = 1;
 $$0399 = 0;
 $$2 = $7 + ($22 << 1) | 0;
 L9 : while (1) {
  if (($$0391 | 0) < ($8 | 0)) {
   $$1 = $$0376;
   $$1382 = $$0381;
   $$1400 = $$0399;
   $$2396 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2396 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1382 >> 0] = 0;
    $$3402 = $$1400;
   } else {
    HEAP8[$$1382 >> 0] = -1;
    $36 = $$3 + ($30 << 1) | 0;
    $37 = HEAP16[$36 >> 1] | 0;
    if ($37 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $37;
     $40 = ($37 << 16 >> 16) * 7 | 0;
     $42 = $4 + 1310736 + ($40 + -7 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
     $46 = $4 + 1310736 + ($40 + -6 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $$2396;
     $50 = $4 + 1310736 + ($40 + -5 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($40 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $56 = HEAP16[$36 + 2 >> 1] | 0;
    $59 = HEAP16[$36 + -2 >> 1] | 0;
    $61 = $59 << 16 >> 16 > 0;
    $62 = $$3 + -2 | 0;
    $63 = ($59 << 16 >> 16) + -1 | 0;
    if ($56 << 16 >> 16 <= 0) {
     if ($61) {
      HEAP16[$$3 >> 1] = $59;
      $155 = $63 * 7 | 0;
      $156 = $4 + 1310736 + ($155 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1;
      $160 = $4 + 1310736 + ($155 + 1 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $$2396;
      $164 = $4 + 1310736 + ($155 + 2 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $$0391;
      $168 = $4 + 1310736 + ($155 + 4 << 2) | 0;
      if ((HEAP32[$168 >> 2] | 0) < ($$2396 | 0)) HEAP32[$168 >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($155 + 6 << 2) >> 2] = $$0391;
      $$3402 = $$1400;
      break;
     }
     $173 = HEAP16[$62 >> 1] | 0;
     if ($173 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $173;
      $176 = ($173 << 16 >> 16) * 7 | 0;
      $178 = $4 + 1310736 + ($176 + -7 << 2) | 0;
      HEAP32[$178 >> 2] = (HEAP32[$178 >> 2] | 0) + 1;
      $182 = $4 + 1310736 + ($176 + -6 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + $$2396;
      $186 = $4 + 1310736 + ($176 + -5 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + $$0391;
      $189 = $176 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($189 << 2) >> 2] | 0) < ($$2396 | 0)) {
       $$2401 = $$1400;
       $$sink = $$2396;
       $$sink3 = $189;
      } else {
       $$3402 = $$1400;
       break;
      }
     } else {
      $193 = $$1400 + 1 | 0;
      if (($$1400 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $193;
      HEAP32[$4 + 1179664 + ($$1400 << 2) >> 2] = $193 << 16 >> 16;
      $198 = $$1400 * 7 | 0;
      HEAP32[$4 + 1310736 + ($198 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($198 + 1 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($198 + 2 << 2) >> 2] = $$0391;
      HEAP32[$4 + 1310736 + ($198 + 3 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($198 + 4 << 2) >> 2] = $$2396;
      HEAP32[$4 + 1310736 + ($198 + 5 << 2) >> 2] = $$0391;
      $$2401 = $193;
      $$sink = $$0391;
      $$sink3 = $198 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3402 = $$2401;
     break;
    }
    $65 = ($56 << 16 >> 16) + -1 | 0;
    $66 = $4 + 1179664 + ($65 << 2) | 0;
    if ($61) {
     $67 = HEAP32[$66 >> 2] | 0;
     $69 = HEAP32[$4 + 1179664 + ($63 << 2) >> 2] | 0;
     L36 : do if (($67 | 0) > ($69 | 0)) {
      HEAP16[$$3 >> 1] = $69;
      $$0383 = $21;
      $$0387 = 0;
      while (1) {
       if (($$0387 | 0) >= ($$1400 | 0)) {
        $84 = $69;
        break L36;
       }
       if ((HEAP32[$$0383 >> 2] | 0) == ($67 | 0)) HEAP32[$$0383 >> 2] = $69;
       $$0383 = $$0383 + 4 | 0;
       $$0387 = $$0387 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $67;
      if (($67 | 0) < ($69 | 0)) {
       $$1384 = $21;
       $$1388 = 0;
       while (1) {
        if (($$1388 | 0) >= ($$1400 | 0)) {
         $84 = $67;
         break L36;
        }
        if ((HEAP32[$$1384 >> 2] | 0) == ($69 | 0)) HEAP32[$$1384 >> 2] = $67;
        $$1384 = $$1384 + 4 | 0;
        $$1388 = $$1388 + 1 | 0;
       }
      } else $84 = $67;
     } while (0);
     $86 = ($84 << 16 >> 16) * 7 | 0;
     $88 = $4 + 1310736 + ($86 + -7 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + 1;
     $92 = $4 + 1310736 + ($86 + -6 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $$2396;
     $96 = $4 + 1310736 + ($86 + -5 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $$0391;
     HEAP32[$4 + 1310736 + ($86 + -1 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $101 = HEAP16[$62 >> 1] | 0;
    if ($101 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $56;
     $137 = $65 * 7 | 0;
     $138 = $4 + 1310736 + ($137 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
     $142 = $4 + 1310736 + ($137 + 1 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$2396;
     $146 = $4 + 1310736 + ($137 + 2 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$0391;
     $150 = $4 + 1310736 + ($137 + 3 << 2) | 0;
     if ((HEAP32[$150 >> 2] | 0) > ($$2396 | 0)) HEAP32[$150 >> 2] = $$2396;
     HEAP32[$4 + 1310736 + ($137 + 6 << 2) >> 2] = $$0391;
     $$3402 = $$1400;
     break;
    }
    $104 = HEAP32[$66 >> 2] | 0;
    $107 = HEAP32[$4 + 1179664 + (($101 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($104 | 0) > ($107 | 0)) {
     HEAP16[$$3 >> 1] = $107;
     $$2385 = $21;
     $$2389 = 0;
     while (1) {
      if (($$2389 | 0) >= ($$1400 | 0)) {
       $122 = $107;
       break L59;
      }
      if ((HEAP32[$$2385 >> 2] | 0) == ($104 | 0)) HEAP32[$$2385 >> 2] = $107;
      $$2385 = $$2385 + 4 | 0;
      $$2389 = $$2389 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $104;
     if (($104 | 0) < ($107 | 0)) {
      $$3386 = $21;
      $$3390 = 0;
      while (1) {
       if (($$3390 | 0) >= ($$1400 | 0)) {
        $122 = $104;
        break L59;
       }
       if ((HEAP32[$$3386 >> 2] | 0) == ($107 | 0)) HEAP32[$$3386 >> 2] = $104;
       $$3386 = $$3386 + 4 | 0;
       $$3390 = $$3390 + 1 | 0;
      }
     } else $122 = $104;
    } while (0);
    $124 = ($122 << 16 >> 16) * 7 | 0;
    $126 = $4 + 1310736 + ($124 + -7 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + 1;
    $130 = $4 + 1310736 + ($124 + -6 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $$2396;
    $134 = $4 + 1310736 + ($124 + -5 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $$0391;
    $$3402 = $$1400;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1382 = $$1382 + 1 | 0;
   $$1400 = $$3402;
   $$2396 = $$2396 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0376 = $$1 + $1 + 4 | 0;
  $$0381 = $$1382 + 2 | 0;
  $$0391 = $$0391 + 1 | 0;
  $$0399 = $$1400;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $4 + 12 | 0;
  $$1392 = 1;
  $$3397 = 1;
  $$4 = $21;
  while (1) {
   if (($$3397 | 0) > ($$0399 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3397 | 0)) {
    $$2393 = $$1392 + 1 | 0;
    $229 = $$1392;
   } else {
    $$2393 = $$1392;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1392 = $$2393;
   $$3397 = $$3397 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1392 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4398 = 0;
   $239 = $233;
   while (1) {
    if (($$4398 | 0) >= ($239 | 0)) {
     $$5 = 0;
     break;
    }
    $240 = $$4398 << 2;
    HEAP32[$4 + 131084 + ($240 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($240 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $$4398 = $$4398 + 1 | 0;
    $239 = HEAP32[$232 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0399 | 0)) {
     $$6 = 0;
     break;
    }
    $252 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $$5 * 7 | 0;
    $256 = $4 + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $4 + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $4 + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $4 + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$4 + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $4 + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $4 + 12 + ($$6 << 2) | 0;
    $309 = $$6 << 1;
    $310 = $4 + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $4 + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3CA5551($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0370 = 0, $$0371 = 0, $$0373 = 0, $$0375 = 0, $$0379 = 0, $$0383 = 0, $$0387 = 0, $$0390 = 0, $$1 = 0, $$1372 = 0, $$1374 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$1388 = 0, $$1391 = 0, $$2 = 0, $$2377 = 0, $$2381 = 0, $$2385 = 0, $$2389 = 0, $$2392 = 0, $$3 = 0, $$3378 = 0, $$3382 = 0, $$3386 = 0, $$3393 = 0, $$4 = 0, $$4394 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $109 = 0, $114 = 0, $117 = 0, $120 = 0, $135 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $150 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $168 = 0, $169 = 0, $173 = 0, $177 = 0, $181 = 0, $186 = 0, $189 = 0, $191 = 0, $195 = 0, $199 = 0, $202 = 0, $206 = 0, $211 = 0, $22 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $25 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $29 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $33 = 0, $39 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $63 = 0, $69 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0371 = $7;
 $$0373 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0390 = 0;
 while (1) {
  if (($$0390 | 0) >= ($5 | 0)) break;
  HEAP16[$$0373 >> 1] = 0;
  HEAP16[$$0371 >> 1] = 0;
  $$0371 = $$0371 + 2 | 0;
  $$0373 = $$0373 + 2 | 0;
  $$0390 = $$0390 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1372 = $7;
 $$1374 = $7 + ($16 << 1) | 0;
 $$1391 = 0;
 while (1) {
  if (($$1391 | 0) >= ($6 | 0)) break;
  HEAP16[$$1374 >> 1] = 0;
  HEAP16[$$1372 >> 1] = 0;
  $$1372 = $$1372 + ($5 << 1) | 0;
  $$1374 = $$1374 + ($5 << 1) | 0;
  $$1391 = $$1391 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $25 = $1 << 1;
 $29 = 0 - $5 | 0;
 $$0370 = $0 + (($1 << 2) + 4) | 0;
 $$0375 = 0;
 $$0387 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0387 | 0) < ($8 | 0)) {
   $$1 = $$0370;
   $$1376 = $$0375;
   $$2392 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2392 | 0) >= ($16 | 0)) break;
   $33 = HEAPU8[$$1 >> 0] | 0;
   $39 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($33 & 248) + 12 + ($33 << 5 & 224) + ($39 >>> 3 & 24) + ($39 << 2 & 248) | 0) > ($15 | 0)) {
    $49 = $$3 + ($29 << 1) | 0;
    $50 = HEAP16[$49 >> 1] | 0;
    if ($50 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $50;
     $53 = ($50 << 16 >> 16) * 7 | 0;
     $55 = $4 + 1310736 + ($53 + -7 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 1;
     $59 = $4 + 1310736 + ($53 + -6 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$2392;
     $63 = $4 + 1310736 + ($53 + -5 << 2) | 0;
     HEAP32[$63 >> 2] = (HEAP32[$63 >> 2] | 0) + $$0387;
     HEAP32[$4 + 1310736 + ($53 + -1 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $69 = HEAP16[$49 + 2 >> 1] | 0;
    $72 = HEAP16[$49 + -2 >> 1] | 0;
    $74 = $72 << 16 >> 16 > 0;
    $75 = $$3 + -2 | 0;
    $76 = ($72 << 16 >> 16) + -1 | 0;
    if ($69 << 16 >> 16 <= 0) {
     if ($74) {
      HEAP16[$$3 >> 1] = $72;
      $168 = $76 * 7 | 0;
      $169 = $4 + 1310736 + ($168 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + 1;
      $173 = $4 + 1310736 + ($168 + 1 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$2392;
      $177 = $4 + 1310736 + ($168 + 2 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + $$0387;
      $181 = $4 + 1310736 + ($168 + 4 << 2) | 0;
      if ((HEAP32[$181 >> 2] | 0) < ($$2392 | 0)) HEAP32[$181 >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($168 + 6 << 2) >> 2] = $$0387;
      $$3378 = $$1376;
      break;
     }
     $186 = HEAP16[$75 >> 1] | 0;
     if ($186 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $186;
      $189 = ($186 << 16 >> 16) * 7 | 0;
      $191 = $4 + 1310736 + ($189 + -7 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + 1;
      $195 = $4 + 1310736 + ($189 + -6 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$2392;
      $199 = $4 + 1310736 + ($189 + -5 << 2) | 0;
      HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + $$0387;
      $202 = $189 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($202 << 2) >> 2] | 0) < ($$2392 | 0)) {
       $$2377 = $$1376;
       $$sink = $$2392;
       $$sink3 = $202;
      } else {
       $$3378 = $$1376;
       break;
      }
     } else {
      $206 = $$1376 + 1 | 0;
      if (($$1376 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $206;
      HEAP32[$4 + 1179664 + ($$1376 << 2) >> 2] = $206 << 16 >> 16;
      $211 = $$1376 * 7 | 0;
      HEAP32[$4 + 1310736 + ($211 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($211 + 1 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 2 << 2) >> 2] = $$0387;
      HEAP32[$4 + 1310736 + ($211 + 3 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 4 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 5 << 2) >> 2] = $$0387;
      $$2377 = $206;
      $$sink = $$0387;
      $$sink3 = $211 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3378 = $$2377;
     break;
    }
    $78 = ($69 << 16 >> 16) + -1 | 0;
    $79 = $4 + 1179664 + ($78 << 2) | 0;
    if ($74) {
     $80 = HEAP32[$79 >> 2] | 0;
     $82 = HEAP32[$4 + 1179664 + ($76 << 2) >> 2] | 0;
     L35 : do if (($80 | 0) > ($82 | 0)) {
      HEAP16[$$3 >> 1] = $82;
      $$0379 = $22;
      $$0383 = 0;
      while (1) {
       if (($$0383 | 0) >= ($$1376 | 0)) {
        $97 = $82;
        break L35;
       }
       if ((HEAP32[$$0379 >> 2] | 0) == ($80 | 0)) HEAP32[$$0379 >> 2] = $82;
       $$0379 = $$0379 + 4 | 0;
       $$0383 = $$0383 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $80;
      if (($80 | 0) < ($82 | 0)) {
       $$1380 = $22;
       $$1384 = 0;
       while (1) {
        if (($$1384 | 0) >= ($$1376 | 0)) {
         $97 = $80;
         break L35;
        }
        if ((HEAP32[$$1380 >> 2] | 0) == ($82 | 0)) HEAP32[$$1380 >> 2] = $80;
        $$1380 = $$1380 + 4 | 0;
        $$1384 = $$1384 + 1 | 0;
       }
      } else $97 = $80;
     } while (0);
     $99 = ($97 << 16 >> 16) * 7 | 0;
     $101 = $4 + 1310736 + ($99 + -7 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + 1;
     $105 = $4 + 1310736 + ($99 + -6 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$2392;
     $109 = $4 + 1310736 + ($99 + -5 << 2) | 0;
     HEAP32[$109 >> 2] = (HEAP32[$109 >> 2] | 0) + $$0387;
     HEAP32[$4 + 1310736 + ($99 + -1 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $114 = HEAP16[$75 >> 1] | 0;
    if ($114 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $69;
     $150 = $78 * 7 | 0;
     $151 = $4 + 1310736 + ($150 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 1;
     $155 = $4 + 1310736 + ($150 + 1 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$2392;
     $159 = $4 + 1310736 + ($150 + 2 << 2) | 0;
     HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $$0387;
     $163 = $4 + 1310736 + ($150 + 3 << 2) | 0;
     if ((HEAP32[$163 >> 2] | 0) > ($$2392 | 0)) HEAP32[$163 >> 2] = $$2392;
     HEAP32[$4 + 1310736 + ($150 + 6 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $117 = HEAP32[$79 >> 2] | 0;
    $120 = HEAP32[$4 + 1179664 + (($114 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($117 | 0) > ($120 | 0)) {
     HEAP16[$$3 >> 1] = $120;
     $$2381 = $22;
     $$2385 = 0;
     while (1) {
      if (($$2385 | 0) >= ($$1376 | 0)) {
       $135 = $120;
       break L58;
      }
      if ((HEAP32[$$2381 >> 2] | 0) == ($117 | 0)) HEAP32[$$2381 >> 2] = $120;
      $$2381 = $$2381 + 4 | 0;
      $$2385 = $$2385 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $117;
     if (($117 | 0) < ($120 | 0)) {
      $$3382 = $22;
      $$3386 = 0;
      while (1) {
       if (($$3386 | 0) >= ($$1376 | 0)) {
        $135 = $117;
        break L58;
       }
       if ((HEAP32[$$3382 >> 2] | 0) == ($120 | 0)) HEAP32[$$3382 >> 2] = $117;
       $$3382 = $$3382 + 4 | 0;
       $$3386 = $$3386 + 1 | 0;
      }
     } else $135 = $117;
    } while (0);
    $137 = ($135 << 16 >> 16) * 7 | 0;
    $139 = $4 + 1310736 + ($137 + -7 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
    $143 = $4 + 1310736 + ($137 + -6 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$2392;
    $147 = $4 + 1310736 + ($137 + -5 << 2) | 0;
    HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $$0387;
    $$3378 = $$1376;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3378 = $$1376;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1376 = $$3378;
   $$2392 = $$2392 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0370 = $$1 + $25 + 8 | 0;
  $$0375 = $$1376;
  $$0387 = $$0387 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1388 = 1;
  $$3393 = 1;
  $$4 = $22;
  while (1) {
   if (($$3393 | 0) > ($$0375 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3393 | 0)) {
    $$2389 = $$1388 + 1 | 0;
    $240 = $$1388;
   } else {
    $$2389 = $$1388;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1388 = $$2389;
   $$3393 = $$3393 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1388 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4394 = 0;
   $250 = $244;
   while (1) {
    if (($$4394 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4394 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4394 = $$4394 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0375 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3CA5551($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0370 = 0, $$0371 = 0, $$0373 = 0, $$0375 = 0, $$0379 = 0, $$0383 = 0, $$0387 = 0, $$0390 = 0, $$1 = 0, $$1372 = 0, $$1374 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$1388 = 0, $$1391 = 0, $$2 = 0, $$2377 = 0, $$2381 = 0, $$2385 = 0, $$2389 = 0, $$2392 = 0, $$3 = 0, $$3378 = 0, $$3382 = 0, $$3386 = 0, $$3393 = 0, $$4 = 0, $$4394 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $109 = 0, $114 = 0, $117 = 0, $120 = 0, $135 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $150 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $168 = 0, $169 = 0, $173 = 0, $177 = 0, $181 = 0, $186 = 0, $189 = 0, $191 = 0, $195 = 0, $199 = 0, $202 = 0, $206 = 0, $211 = 0, $22 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $25 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $29 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $33 = 0, $39 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $63 = 0, $69 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0371 = $7;
 $$0373 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0390 = 0;
 while (1) {
  if (($$0390 | 0) >= ($5 | 0)) break;
  HEAP16[$$0373 >> 1] = 0;
  HEAP16[$$0371 >> 1] = 0;
  $$0371 = $$0371 + 2 | 0;
  $$0373 = $$0373 + 2 | 0;
  $$0390 = $$0390 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1372 = $7;
 $$1374 = $7 + ($16 << 1) | 0;
 $$1391 = 0;
 while (1) {
  if (($$1391 | 0) >= ($6 | 0)) break;
  HEAP16[$$1374 >> 1] = 0;
  HEAP16[$$1372 >> 1] = 0;
  $$1372 = $$1372 + ($5 << 1) | 0;
  $$1374 = $$1374 + ($5 << 1) | 0;
  $$1391 = $$1391 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $25 = $1 << 1;
 $29 = 0 - $5 | 0;
 $$0370 = $0 + (($1 << 2) + 4) | 0;
 $$0375 = 0;
 $$0387 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0387 | 0) < ($8 | 0)) {
   $$1 = $$0370;
   $$1376 = $$0375;
   $$2392 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2392 | 0) >= ($16 | 0)) break;
   $33 = HEAPU8[$$1 >> 0] | 0;
   $39 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($33 & 248) + 12 + ($33 << 5 & 224) + ($39 >>> 3 & 24) + ($39 << 2 & 248) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3378 = $$1376;
   } else {
    $49 = $$3 + ($29 << 1) | 0;
    $50 = HEAP16[$49 >> 1] | 0;
    if ($50 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $50;
     $53 = ($50 << 16 >> 16) * 7 | 0;
     $55 = $4 + 1310736 + ($53 + -7 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 1;
     $59 = $4 + 1310736 + ($53 + -6 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$2392;
     $63 = $4 + 1310736 + ($53 + -5 << 2) | 0;
     HEAP32[$63 >> 2] = (HEAP32[$63 >> 2] | 0) + $$0387;
     HEAP32[$4 + 1310736 + ($53 + -1 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $69 = HEAP16[$49 + 2 >> 1] | 0;
    $72 = HEAP16[$49 + -2 >> 1] | 0;
    $74 = $72 << 16 >> 16 > 0;
    $75 = $$3 + -2 | 0;
    $76 = ($72 << 16 >> 16) + -1 | 0;
    if ($69 << 16 >> 16 <= 0) {
     if ($74) {
      HEAP16[$$3 >> 1] = $72;
      $168 = $76 * 7 | 0;
      $169 = $4 + 1310736 + ($168 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + 1;
      $173 = $4 + 1310736 + ($168 + 1 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$2392;
      $177 = $4 + 1310736 + ($168 + 2 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + $$0387;
      $181 = $4 + 1310736 + ($168 + 4 << 2) | 0;
      if ((HEAP32[$181 >> 2] | 0) < ($$2392 | 0)) HEAP32[$181 >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($168 + 6 << 2) >> 2] = $$0387;
      $$3378 = $$1376;
      break;
     }
     $186 = HEAP16[$75 >> 1] | 0;
     if ($186 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $186;
      $189 = ($186 << 16 >> 16) * 7 | 0;
      $191 = $4 + 1310736 + ($189 + -7 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + 1;
      $195 = $4 + 1310736 + ($189 + -6 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$2392;
      $199 = $4 + 1310736 + ($189 + -5 << 2) | 0;
      HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + $$0387;
      $202 = $189 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($202 << 2) >> 2] | 0) < ($$2392 | 0)) {
       $$2377 = $$1376;
       $$sink = $$2392;
       $$sink3 = $202;
      } else {
       $$3378 = $$1376;
       break;
      }
     } else {
      $206 = $$1376 + 1 | 0;
      if (($$1376 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $206;
      HEAP32[$4 + 1179664 + ($$1376 << 2) >> 2] = $206 << 16 >> 16;
      $211 = $$1376 * 7 | 0;
      HEAP32[$4 + 1310736 + ($211 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($211 + 1 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 2 << 2) >> 2] = $$0387;
      HEAP32[$4 + 1310736 + ($211 + 3 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 4 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 5 << 2) >> 2] = $$0387;
      $$2377 = $206;
      $$sink = $$0387;
      $$sink3 = $211 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3378 = $$2377;
     break;
    }
    $78 = ($69 << 16 >> 16) + -1 | 0;
    $79 = $4 + 1179664 + ($78 << 2) | 0;
    if ($74) {
     $80 = HEAP32[$79 >> 2] | 0;
     $82 = HEAP32[$4 + 1179664 + ($76 << 2) >> 2] | 0;
     L36 : do if (($80 | 0) > ($82 | 0)) {
      HEAP16[$$3 >> 1] = $82;
      $$0379 = $22;
      $$0383 = 0;
      while (1) {
       if (($$0383 | 0) >= ($$1376 | 0)) {
        $97 = $82;
        break L36;
       }
       if ((HEAP32[$$0379 >> 2] | 0) == ($80 | 0)) HEAP32[$$0379 >> 2] = $82;
       $$0379 = $$0379 + 4 | 0;
       $$0383 = $$0383 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $80;
      if (($80 | 0) < ($82 | 0)) {
       $$1380 = $22;
       $$1384 = 0;
       while (1) {
        if (($$1384 | 0) >= ($$1376 | 0)) {
         $97 = $80;
         break L36;
        }
        if ((HEAP32[$$1380 >> 2] | 0) == ($82 | 0)) HEAP32[$$1380 >> 2] = $80;
        $$1380 = $$1380 + 4 | 0;
        $$1384 = $$1384 + 1 | 0;
       }
      } else $97 = $80;
     } while (0);
     $99 = ($97 << 16 >> 16) * 7 | 0;
     $101 = $4 + 1310736 + ($99 + -7 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + 1;
     $105 = $4 + 1310736 + ($99 + -6 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$2392;
     $109 = $4 + 1310736 + ($99 + -5 << 2) | 0;
     HEAP32[$109 >> 2] = (HEAP32[$109 >> 2] | 0) + $$0387;
     HEAP32[$4 + 1310736 + ($99 + -1 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $114 = HEAP16[$75 >> 1] | 0;
    if ($114 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $69;
     $150 = $78 * 7 | 0;
     $151 = $4 + 1310736 + ($150 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 1;
     $155 = $4 + 1310736 + ($150 + 1 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$2392;
     $159 = $4 + 1310736 + ($150 + 2 << 2) | 0;
     HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $$0387;
     $163 = $4 + 1310736 + ($150 + 3 << 2) | 0;
     if ((HEAP32[$163 >> 2] | 0) > ($$2392 | 0)) HEAP32[$163 >> 2] = $$2392;
     HEAP32[$4 + 1310736 + ($150 + 6 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $117 = HEAP32[$79 >> 2] | 0;
    $120 = HEAP32[$4 + 1179664 + (($114 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($117 | 0) > ($120 | 0)) {
     HEAP16[$$3 >> 1] = $120;
     $$2381 = $22;
     $$2385 = 0;
     while (1) {
      if (($$2385 | 0) >= ($$1376 | 0)) {
       $135 = $120;
       break L59;
      }
      if ((HEAP32[$$2381 >> 2] | 0) == ($117 | 0)) HEAP32[$$2381 >> 2] = $120;
      $$2381 = $$2381 + 4 | 0;
      $$2385 = $$2385 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $117;
     if (($117 | 0) < ($120 | 0)) {
      $$3382 = $22;
      $$3386 = 0;
      while (1) {
       if (($$3386 | 0) >= ($$1376 | 0)) {
        $135 = $117;
        break L59;
       }
       if ((HEAP32[$$3382 >> 2] | 0) == ($120 | 0)) HEAP32[$$3382 >> 2] = $117;
       $$3382 = $$3382 + 4 | 0;
       $$3386 = $$3386 + 1 | 0;
      }
     } else $135 = $117;
    } while (0);
    $137 = ($135 << 16 >> 16) * 7 | 0;
    $139 = $4 + 1310736 + ($137 + -7 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
    $143 = $4 + 1310736 + ($137 + -6 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$2392;
    $147 = $4 + 1310736 + ($137 + -5 << 2) | 0;
    HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $$0387;
    $$3378 = $$1376;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1376 = $$3378;
   $$2392 = $$2392 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0370 = $$1 + $25 + 8 | 0;
  $$0375 = $$1376;
  $$0387 = $$0387 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1388 = 1;
  $$3393 = 1;
  $$4 = $22;
  while (1) {
   if (($$3393 | 0) > ($$0375 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3393 | 0)) {
    $$2389 = $$1388 + 1 | 0;
    $240 = $$1388;
   } else {
    $$2389 = $$1388;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1388 = $$2389;
   $$3393 = $$3393 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1388 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4394 = 0;
   $250 = $244;
   while (1) {
    if (($$4394 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4394 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4394 = $$4394 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0375 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3C565($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0370 = 0, $$0371 = 0, $$0373 = 0, $$0375 = 0, $$0379 = 0, $$0383 = 0, $$0387 = 0, $$0390 = 0, $$1 = 0, $$1372 = 0, $$1374 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$1388 = 0, $$1391 = 0, $$2 = 0, $$2377 = 0, $$2381 = 0, $$2385 = 0, $$2389 = 0, $$2392 = 0, $$3 = 0, $$3378 = 0, $$3382 = 0, $$3386 = 0, $$3393 = 0, $$4 = 0, $$4394 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $109 = 0, $114 = 0, $117 = 0, $120 = 0, $135 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $150 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $168 = 0, $169 = 0, $173 = 0, $177 = 0, $181 = 0, $186 = 0, $189 = 0, $191 = 0, $195 = 0, $199 = 0, $202 = 0, $206 = 0, $211 = 0, $22 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $25 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $29 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $33 = 0, $39 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $63 = 0, $69 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0371 = $7;
 $$0373 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0390 = 0;
 while (1) {
  if (($$0390 | 0) >= ($5 | 0)) break;
  HEAP16[$$0373 >> 1] = 0;
  HEAP16[$$0371 >> 1] = 0;
  $$0371 = $$0371 + 2 | 0;
  $$0373 = $$0373 + 2 | 0;
  $$0390 = $$0390 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1372 = $7;
 $$1374 = $7 + ($16 << 1) | 0;
 $$1391 = 0;
 while (1) {
  if (($$1391 | 0) >= ($6 | 0)) break;
  HEAP16[$$1374 >> 1] = 0;
  HEAP16[$$1372 >> 1] = 0;
  $$1372 = $$1372 + ($5 << 1) | 0;
  $$1374 = $$1374 + ($5 << 1) | 0;
  $$1391 = $$1391 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $25 = $1 << 1;
 $29 = 0 - $5 | 0;
 $$0370 = $0 + (($1 << 2) + 4) | 0;
 $$0375 = 0;
 $$0387 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0387 | 0) < ($8 | 0)) {
   $$1 = $$0370;
   $$1376 = $$0375;
   $$2392 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2392 | 0) >= ($16 | 0)) break;
   $33 = HEAPU8[$$1 >> 0] | 0;
   $39 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($33 & 248) + 10 + ($33 << 5 & 224) + ($39 >>> 3 & 28) + ($39 << 3 & 248) | 0) > ($15 | 0)) {
    $49 = $$3 + ($29 << 1) | 0;
    $50 = HEAP16[$49 >> 1] | 0;
    if ($50 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $50;
     $53 = ($50 << 16 >> 16) * 7 | 0;
     $55 = $4 + 1310736 + ($53 + -7 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 1;
     $59 = $4 + 1310736 + ($53 + -6 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$2392;
     $63 = $4 + 1310736 + ($53 + -5 << 2) | 0;
     HEAP32[$63 >> 2] = (HEAP32[$63 >> 2] | 0) + $$0387;
     HEAP32[$4 + 1310736 + ($53 + -1 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $69 = HEAP16[$49 + 2 >> 1] | 0;
    $72 = HEAP16[$49 + -2 >> 1] | 0;
    $74 = $72 << 16 >> 16 > 0;
    $75 = $$3 + -2 | 0;
    $76 = ($72 << 16 >> 16) + -1 | 0;
    if ($69 << 16 >> 16 <= 0) {
     if ($74) {
      HEAP16[$$3 >> 1] = $72;
      $168 = $76 * 7 | 0;
      $169 = $4 + 1310736 + ($168 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + 1;
      $173 = $4 + 1310736 + ($168 + 1 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$2392;
      $177 = $4 + 1310736 + ($168 + 2 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + $$0387;
      $181 = $4 + 1310736 + ($168 + 4 << 2) | 0;
      if ((HEAP32[$181 >> 2] | 0) < ($$2392 | 0)) HEAP32[$181 >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($168 + 6 << 2) >> 2] = $$0387;
      $$3378 = $$1376;
      break;
     }
     $186 = HEAP16[$75 >> 1] | 0;
     if ($186 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $186;
      $189 = ($186 << 16 >> 16) * 7 | 0;
      $191 = $4 + 1310736 + ($189 + -7 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + 1;
      $195 = $4 + 1310736 + ($189 + -6 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$2392;
      $199 = $4 + 1310736 + ($189 + -5 << 2) | 0;
      HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + $$0387;
      $202 = $189 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($202 << 2) >> 2] | 0) < ($$2392 | 0)) {
       $$2377 = $$1376;
       $$sink = $$2392;
       $$sink3 = $202;
      } else {
       $$3378 = $$1376;
       break;
      }
     } else {
      $206 = $$1376 + 1 | 0;
      if (($$1376 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $206;
      HEAP32[$4 + 1179664 + ($$1376 << 2) >> 2] = $206 << 16 >> 16;
      $211 = $$1376 * 7 | 0;
      HEAP32[$4 + 1310736 + ($211 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($211 + 1 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 2 << 2) >> 2] = $$0387;
      HEAP32[$4 + 1310736 + ($211 + 3 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 4 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 5 << 2) >> 2] = $$0387;
      $$2377 = $206;
      $$sink = $$0387;
      $$sink3 = $211 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3378 = $$2377;
     break;
    }
    $78 = ($69 << 16 >> 16) + -1 | 0;
    $79 = $4 + 1179664 + ($78 << 2) | 0;
    if ($74) {
     $80 = HEAP32[$79 >> 2] | 0;
     $82 = HEAP32[$4 + 1179664 + ($76 << 2) >> 2] | 0;
     L35 : do if (($80 | 0) > ($82 | 0)) {
      HEAP16[$$3 >> 1] = $82;
      $$0379 = $22;
      $$0383 = 0;
      while (1) {
       if (($$0383 | 0) >= ($$1376 | 0)) {
        $97 = $82;
        break L35;
       }
       if ((HEAP32[$$0379 >> 2] | 0) == ($80 | 0)) HEAP32[$$0379 >> 2] = $82;
       $$0379 = $$0379 + 4 | 0;
       $$0383 = $$0383 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $80;
      if (($80 | 0) < ($82 | 0)) {
       $$1380 = $22;
       $$1384 = 0;
       while (1) {
        if (($$1384 | 0) >= ($$1376 | 0)) {
         $97 = $80;
         break L35;
        }
        if ((HEAP32[$$1380 >> 2] | 0) == ($82 | 0)) HEAP32[$$1380 >> 2] = $80;
        $$1380 = $$1380 + 4 | 0;
        $$1384 = $$1384 + 1 | 0;
       }
      } else $97 = $80;
     } while (0);
     $99 = ($97 << 16 >> 16) * 7 | 0;
     $101 = $4 + 1310736 + ($99 + -7 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + 1;
     $105 = $4 + 1310736 + ($99 + -6 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$2392;
     $109 = $4 + 1310736 + ($99 + -5 << 2) | 0;
     HEAP32[$109 >> 2] = (HEAP32[$109 >> 2] | 0) + $$0387;
     HEAP32[$4 + 1310736 + ($99 + -1 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $114 = HEAP16[$75 >> 1] | 0;
    if ($114 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $69;
     $150 = $78 * 7 | 0;
     $151 = $4 + 1310736 + ($150 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 1;
     $155 = $4 + 1310736 + ($150 + 1 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$2392;
     $159 = $4 + 1310736 + ($150 + 2 << 2) | 0;
     HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $$0387;
     $163 = $4 + 1310736 + ($150 + 3 << 2) | 0;
     if ((HEAP32[$163 >> 2] | 0) > ($$2392 | 0)) HEAP32[$163 >> 2] = $$2392;
     HEAP32[$4 + 1310736 + ($150 + 6 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $117 = HEAP32[$79 >> 2] | 0;
    $120 = HEAP32[$4 + 1179664 + (($114 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($117 | 0) > ($120 | 0)) {
     HEAP16[$$3 >> 1] = $120;
     $$2381 = $22;
     $$2385 = 0;
     while (1) {
      if (($$2385 | 0) >= ($$1376 | 0)) {
       $135 = $120;
       break L58;
      }
      if ((HEAP32[$$2381 >> 2] | 0) == ($117 | 0)) HEAP32[$$2381 >> 2] = $120;
      $$2381 = $$2381 + 4 | 0;
      $$2385 = $$2385 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $117;
     if (($117 | 0) < ($120 | 0)) {
      $$3382 = $22;
      $$3386 = 0;
      while (1) {
       if (($$3386 | 0) >= ($$1376 | 0)) {
        $135 = $117;
        break L58;
       }
       if ((HEAP32[$$3382 >> 2] | 0) == ($120 | 0)) HEAP32[$$3382 >> 2] = $117;
       $$3382 = $$3382 + 4 | 0;
       $$3386 = $$3386 + 1 | 0;
      }
     } else $135 = $117;
    } while (0);
    $137 = ($135 << 16 >> 16) * 7 | 0;
    $139 = $4 + 1310736 + ($137 + -7 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
    $143 = $4 + 1310736 + ($137 + -6 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$2392;
    $147 = $4 + 1310736 + ($137 + -5 << 2) | 0;
    HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $$0387;
    $$3378 = $$1376;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3378 = $$1376;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1376 = $$3378;
   $$2392 = $$2392 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0370 = $$1 + $25 + 8 | 0;
  $$0375 = $$1376;
  $$0387 = $$0387 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1388 = 1;
  $$3393 = 1;
  $$4 = $22;
  while (1) {
   if (($$3393 | 0) > ($$0375 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3393 | 0)) {
    $$2389 = $$1388 + 1 | 0;
    $240 = $$1388;
   } else {
    $$2389 = $$1388;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1388 = $$2389;
   $$3393 = $$3393 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1388 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4394 = 0;
   $250 = $244;
   while (1) {
    if (($$4394 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4394 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4394 = $$4394 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0375 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3C565($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0370 = 0, $$0371 = 0, $$0373 = 0, $$0375 = 0, $$0379 = 0, $$0383 = 0, $$0387 = 0, $$0390 = 0, $$1 = 0, $$1372 = 0, $$1374 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$1388 = 0, $$1391 = 0, $$2 = 0, $$2377 = 0, $$2381 = 0, $$2385 = 0, $$2389 = 0, $$2392 = 0, $$3 = 0, $$3378 = 0, $$3382 = 0, $$3386 = 0, $$3393 = 0, $$4 = 0, $$4394 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $109 = 0, $114 = 0, $117 = 0, $120 = 0, $135 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $150 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $168 = 0, $169 = 0, $173 = 0, $177 = 0, $181 = 0, $186 = 0, $189 = 0, $191 = 0, $195 = 0, $199 = 0, $202 = 0, $206 = 0, $211 = 0, $22 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $25 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $29 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $33 = 0, $39 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $63 = 0, $69 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0371 = $7;
 $$0373 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0390 = 0;
 while (1) {
  if (($$0390 | 0) >= ($5 | 0)) break;
  HEAP16[$$0373 >> 1] = 0;
  HEAP16[$$0371 >> 1] = 0;
  $$0371 = $$0371 + 2 | 0;
  $$0373 = $$0373 + 2 | 0;
  $$0390 = $$0390 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1372 = $7;
 $$1374 = $7 + ($16 << 1) | 0;
 $$1391 = 0;
 while (1) {
  if (($$1391 | 0) >= ($6 | 0)) break;
  HEAP16[$$1374 >> 1] = 0;
  HEAP16[$$1372 >> 1] = 0;
  $$1372 = $$1372 + ($5 << 1) | 0;
  $$1374 = $$1374 + ($5 << 1) | 0;
  $$1391 = $$1391 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $25 = $1 << 1;
 $29 = 0 - $5 | 0;
 $$0370 = $0 + (($1 << 2) + 4) | 0;
 $$0375 = 0;
 $$0387 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0387 | 0) < ($8 | 0)) {
   $$1 = $$0370;
   $$1376 = $$0375;
   $$2392 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2392 | 0) >= ($16 | 0)) break;
   $33 = HEAPU8[$$1 >> 0] | 0;
   $39 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($33 & 248) + 10 + ($33 << 5 & 224) + ($39 >>> 3 & 28) + ($39 << 3 & 248) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3378 = $$1376;
   } else {
    $49 = $$3 + ($29 << 1) | 0;
    $50 = HEAP16[$49 >> 1] | 0;
    if ($50 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $50;
     $53 = ($50 << 16 >> 16) * 7 | 0;
     $55 = $4 + 1310736 + ($53 + -7 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 1;
     $59 = $4 + 1310736 + ($53 + -6 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$2392;
     $63 = $4 + 1310736 + ($53 + -5 << 2) | 0;
     HEAP32[$63 >> 2] = (HEAP32[$63 >> 2] | 0) + $$0387;
     HEAP32[$4 + 1310736 + ($53 + -1 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $69 = HEAP16[$49 + 2 >> 1] | 0;
    $72 = HEAP16[$49 + -2 >> 1] | 0;
    $74 = $72 << 16 >> 16 > 0;
    $75 = $$3 + -2 | 0;
    $76 = ($72 << 16 >> 16) + -1 | 0;
    if ($69 << 16 >> 16 <= 0) {
     if ($74) {
      HEAP16[$$3 >> 1] = $72;
      $168 = $76 * 7 | 0;
      $169 = $4 + 1310736 + ($168 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + 1;
      $173 = $4 + 1310736 + ($168 + 1 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$2392;
      $177 = $4 + 1310736 + ($168 + 2 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + $$0387;
      $181 = $4 + 1310736 + ($168 + 4 << 2) | 0;
      if ((HEAP32[$181 >> 2] | 0) < ($$2392 | 0)) HEAP32[$181 >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($168 + 6 << 2) >> 2] = $$0387;
      $$3378 = $$1376;
      break;
     }
     $186 = HEAP16[$75 >> 1] | 0;
     if ($186 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $186;
      $189 = ($186 << 16 >> 16) * 7 | 0;
      $191 = $4 + 1310736 + ($189 + -7 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + 1;
      $195 = $4 + 1310736 + ($189 + -6 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$2392;
      $199 = $4 + 1310736 + ($189 + -5 << 2) | 0;
      HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + $$0387;
      $202 = $189 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($202 << 2) >> 2] | 0) < ($$2392 | 0)) {
       $$2377 = $$1376;
       $$sink = $$2392;
       $$sink3 = $202;
      } else {
       $$3378 = $$1376;
       break;
      }
     } else {
      $206 = $$1376 + 1 | 0;
      if (($$1376 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $206;
      HEAP32[$4 + 1179664 + ($$1376 << 2) >> 2] = $206 << 16 >> 16;
      $211 = $$1376 * 7 | 0;
      HEAP32[$4 + 1310736 + ($211 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($211 + 1 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 2 << 2) >> 2] = $$0387;
      HEAP32[$4 + 1310736 + ($211 + 3 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 4 << 2) >> 2] = $$2392;
      HEAP32[$4 + 1310736 + ($211 + 5 << 2) >> 2] = $$0387;
      $$2377 = $206;
      $$sink = $$0387;
      $$sink3 = $211 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3378 = $$2377;
     break;
    }
    $78 = ($69 << 16 >> 16) + -1 | 0;
    $79 = $4 + 1179664 + ($78 << 2) | 0;
    if ($74) {
     $80 = HEAP32[$79 >> 2] | 0;
     $82 = HEAP32[$4 + 1179664 + ($76 << 2) >> 2] | 0;
     L36 : do if (($80 | 0) > ($82 | 0)) {
      HEAP16[$$3 >> 1] = $82;
      $$0379 = $22;
      $$0383 = 0;
      while (1) {
       if (($$0383 | 0) >= ($$1376 | 0)) {
        $97 = $82;
        break L36;
       }
       if ((HEAP32[$$0379 >> 2] | 0) == ($80 | 0)) HEAP32[$$0379 >> 2] = $82;
       $$0379 = $$0379 + 4 | 0;
       $$0383 = $$0383 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $80;
      if (($80 | 0) < ($82 | 0)) {
       $$1380 = $22;
       $$1384 = 0;
       while (1) {
        if (($$1384 | 0) >= ($$1376 | 0)) {
         $97 = $80;
         break L36;
        }
        if ((HEAP32[$$1380 >> 2] | 0) == ($82 | 0)) HEAP32[$$1380 >> 2] = $80;
        $$1380 = $$1380 + 4 | 0;
        $$1384 = $$1384 + 1 | 0;
       }
      } else $97 = $80;
     } while (0);
     $99 = ($97 << 16 >> 16) * 7 | 0;
     $101 = $4 + 1310736 + ($99 + -7 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + 1;
     $105 = $4 + 1310736 + ($99 + -6 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$2392;
     $109 = $4 + 1310736 + ($99 + -5 << 2) | 0;
     HEAP32[$109 >> 2] = (HEAP32[$109 >> 2] | 0) + $$0387;
     HEAP32[$4 + 1310736 + ($99 + -1 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $114 = HEAP16[$75 >> 1] | 0;
    if ($114 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $69;
     $150 = $78 * 7 | 0;
     $151 = $4 + 1310736 + ($150 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 1;
     $155 = $4 + 1310736 + ($150 + 1 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$2392;
     $159 = $4 + 1310736 + ($150 + 2 << 2) | 0;
     HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $$0387;
     $163 = $4 + 1310736 + ($150 + 3 << 2) | 0;
     if ((HEAP32[$163 >> 2] | 0) > ($$2392 | 0)) HEAP32[$163 >> 2] = $$2392;
     HEAP32[$4 + 1310736 + ($150 + 6 << 2) >> 2] = $$0387;
     $$3378 = $$1376;
     break;
    }
    $117 = HEAP32[$79 >> 2] | 0;
    $120 = HEAP32[$4 + 1179664 + (($114 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($117 | 0) > ($120 | 0)) {
     HEAP16[$$3 >> 1] = $120;
     $$2381 = $22;
     $$2385 = 0;
     while (1) {
      if (($$2385 | 0) >= ($$1376 | 0)) {
       $135 = $120;
       break L59;
      }
      if ((HEAP32[$$2381 >> 2] | 0) == ($117 | 0)) HEAP32[$$2381 >> 2] = $120;
      $$2381 = $$2381 + 4 | 0;
      $$2385 = $$2385 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $117;
     if (($117 | 0) < ($120 | 0)) {
      $$3382 = $22;
      $$3386 = 0;
      while (1) {
       if (($$3386 | 0) >= ($$1376 | 0)) {
        $135 = $117;
        break L59;
       }
       if ((HEAP32[$$3382 >> 2] | 0) == ($120 | 0)) HEAP32[$$3382 >> 2] = $117;
       $$3382 = $$3382 + 4 | 0;
       $$3386 = $$3386 + 1 | 0;
      }
     } else $135 = $117;
    } while (0);
    $137 = ($135 << 16 >> 16) * 7 | 0;
    $139 = $4 + 1310736 + ($137 + -7 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
    $143 = $4 + 1310736 + ($137 + -6 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$2392;
    $147 = $4 + 1310736 + ($137 + -5 << 2) | 0;
    HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $$0387;
    $$3378 = $$1376;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1376 = $$3378;
   $$2392 = $$2392 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0370 = $$1 + $25 + 8 | 0;
  $$0375 = $$1376;
  $$0387 = $$0387 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $4 + 12 | 0;
  $$1388 = 1;
  $$3393 = 1;
  $$4 = $22;
  while (1) {
   if (($$3393 | 0) > ($$0375 | 0)) break;
   $234 = HEAP32[$$4 >> 2] | 0;
   if (($234 | 0) == ($$3393 | 0)) {
    $$2389 = $$1388 + 1 | 0;
    $240 = $$1388;
   } else {
    $$2389 = $$1388;
    $240 = HEAP32[$4 + 1179664 + ($234 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $240;
   $$1388 = $$2389;
   $$3393 = $$3393 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $243 = $4 + 8 | 0;
  $244 = $$1388 + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $$4394 = 0;
   $250 = $244;
   while (1) {
    if (($$4394 | 0) >= ($250 | 0)) {
     $$5 = 0;
     break;
    }
    $251 = $$4394 << 2;
    HEAP32[$4 + 131084 + ($251 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($251 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $$4394 = $$4394 + 1 | 0;
    $250 = HEAP32[$243 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0375 | 0)) {
     $$6 = 0;
     break;
    }
    $263 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $$5 * 7 | 0;
    $267 = $4 + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $4 + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $4 + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$4 + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $4 + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $4 + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$4 + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $4 + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$4 + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $4 + 12 + ($$6 << 2) | 0;
    $320 = $$6 << 1;
    $321 = $4 + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $4 + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3CA4444($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0386 = 0, $$0389 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1387 = 0, $$1390 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2388 = 0, $$2391 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3385 = 0, $$3392 = 0, $$4 = 0, $$4393 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $110 = 0, $113 = 0, $116 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $146 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $164 = 0, $165 = 0, $169 = 0, $173 = 0, $177 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $202 = 0, $207 = 0, $22 = 0, $228 = 0, $230 = 0, $236 = 0, $239 = 0, $240 = 0, $246 = 0, $247 = 0, $25 = 0, $259 = 0, $260 = 0, $263 = 0, $270 = 0, $271 = 0, $279 = 0, $282 = 0, $283 = 0, $287 = 0, $29 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $304 = 0, $308 = 0, $313 = 0, $316 = 0, $317 = 0, $323 = 0, $33 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $59 = 0, $6 = 0, $65 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $93 = 0, $95 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0389 = 0;
 while (1) {
  if (($$0389 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($16 << 1) | 0;
 $$1390 = 0;
 while (1) {
  if (($$1390 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1390 = $$1390 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $25 = $1 << 1;
 $29 = 0 - $5 | 0;
 $$0369 = $0 + (($1 << 2) + 4) | 0;
 $$0374 = 0;
 $$0386 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0386 | 0) < ($8 | 0)) {
   $$1 = $$0369;
   $$1375 = $$0374;
   $$2391 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2391 | 0) >= ($16 | 0)) break;
   $33 = HEAPU8[$$1 >> 0] | 0;
   do if ((($33 & 240) + 24 + ($33 << 4 & 240) + (HEAP8[$$1 + 1 >> 0] & -16 & 255) | 0) > ($15 | 0)) {
    $45 = $$3 + ($29 << 1) | 0;
    $46 = HEAP16[$45 >> 1] | 0;
    if ($46 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $46;
     $49 = ($46 << 16 >> 16) * 7 | 0;
     $51 = $4 + 1310736 + ($49 + -7 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + 1;
     $55 = $4 + 1310736 + ($49 + -6 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $$2391;
     $59 = $4 + 1310736 + ($49 + -5 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($49 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $65 = HEAP16[$45 + 2 >> 1] | 0;
    $68 = HEAP16[$45 + -2 >> 1] | 0;
    $70 = $68 << 16 >> 16 > 0;
    $71 = $$3 + -2 | 0;
    $72 = ($68 << 16 >> 16) + -1 | 0;
    if ($65 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$$3 >> 1] = $68;
      $164 = $72 * 7 | 0;
      $165 = $4 + 1310736 + ($164 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $4 + 1310736 + ($164 + 1 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $$2391;
      $173 = $4 + 1310736 + ($164 + 2 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$0386;
      $177 = $4 + 1310736 + ($164 + 4 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($$2391 | 0)) HEAP32[$177 >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($164 + 6 << 2) >> 2] = $$0386;
      $$3377 = $$1375;
      break;
     }
     $182 = HEAP16[$71 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $4 + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $4 + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$2391;
      $195 = $4 + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$0386;
      $198 = $185 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($198 << 2) >> 2] | 0) < ($$2391 | 0)) {
       $$2376 = $$1375;
       $$sink = $$2391;
       $$sink3 = $198;
      } else {
       $$3377 = $$1375;
       break;
      }
     } else {
      $202 = $$1375 + 1 | 0;
      if (($$1375 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $202;
      HEAP32[$4 + 1179664 + ($$1375 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $$1375 * 7 | 0;
      HEAP32[$4 + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($207 + 1 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($207 + 2 << 2) >> 2] = $$0386;
      HEAP32[$4 + 1310736 + ($207 + 3 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($207 + 4 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($207 + 5 << 2) >> 2] = $$0386;
      $$2376 = $202;
      $$sink = $$0386;
      $$sink3 = $207 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3377 = $$2376;
     break;
    }
    $74 = ($65 << 16 >> 16) + -1 | 0;
    $75 = $4 + 1179664 + ($74 << 2) | 0;
    if ($70) {
     $76 = HEAP32[$75 >> 2] | 0;
     $78 = HEAP32[$4 + 1179664 + ($72 << 2) >> 2] | 0;
     L35 : do if (($76 | 0) > ($78 | 0)) {
      HEAP16[$$3 >> 1] = $78;
      $$0378 = $22;
      $$0382 = 0;
      while (1) {
       if (($$0382 | 0) >= ($$1375 | 0)) {
        $93 = $78;
        break L35;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($76 | 0)) HEAP32[$$0378 >> 2] = $78;
       $$0378 = $$0378 + 4 | 0;
       $$0382 = $$0382 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $76;
      if (($76 | 0) < ($78 | 0)) {
       $$1379 = $22;
       $$1383 = 0;
       while (1) {
        if (($$1383 | 0) >= ($$1375 | 0)) {
         $93 = $76;
         break L35;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($78 | 0)) HEAP32[$$1379 >> 2] = $76;
        $$1379 = $$1379 + 4 | 0;
        $$1383 = $$1383 + 1 | 0;
       }
      } else $93 = $76;
     } while (0);
     $95 = ($93 << 16 >> 16) * 7 | 0;
     $97 = $4 + 1310736 + ($95 + -7 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + 1;
     $101 = $4 + 1310736 + ($95 + -6 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $$2391;
     $105 = $4 + 1310736 + ($95 + -5 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($95 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $110 = HEAP16[$71 >> 1] | 0;
    if ($110 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $65;
     $146 = $74 * 7 | 0;
     $147 = $4 + 1310736 + ($146 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + 1;
     $151 = $4 + 1310736 + ($146 + 1 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $$2391;
     $155 = $4 + 1310736 + ($146 + 2 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$0386;
     $159 = $4 + 1310736 + ($146 + 3 << 2) | 0;
     if ((HEAP32[$159 >> 2] | 0) > ($$2391 | 0)) HEAP32[$159 >> 2] = $$2391;
     HEAP32[$4 + 1310736 + ($146 + 6 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $113 = HEAP32[$75 >> 2] | 0;
    $116 = HEAP32[$4 + 1179664 + (($110 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$$3 >> 1] = $116;
     $$2380 = $22;
     $$2384 = 0;
     while (1) {
      if (($$2384 | 0) >= ($$1375 | 0)) {
       $131 = $116;
       break L58;
      }
      if ((HEAP32[$$2380 >> 2] | 0) == ($113 | 0)) HEAP32[$$2380 >> 2] = $116;
      $$2380 = $$2380 + 4 | 0;
      $$2384 = $$2384 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $$3381 = $22;
      $$3385 = 0;
      while (1) {
       if (($$3385 | 0) >= ($$1375 | 0)) {
        $131 = $113;
        break L58;
       }
       if ((HEAP32[$$3381 >> 2] | 0) == ($116 | 0)) HEAP32[$$3381 >> 2] = $113;
       $$3381 = $$3381 + 4 | 0;
       $$3385 = $$3385 + 1 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $4 + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $4 + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2391;
    $143 = $4 + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0386;
    $$3377 = $$1375;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3377 = $$1375;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1375 = $$3377;
   $$2391 = $$2391 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $25 + 8 | 0;
  $$0374 = $$1375;
  $$0386 = $$0386 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $228 = $4 + 12 | 0;
  $$1387 = 1;
  $$3392 = 1;
  $$4 = $22;
  while (1) {
   if (($$3392 | 0) > ($$0374 | 0)) break;
   $230 = HEAP32[$$4 >> 2] | 0;
   if (($230 | 0) == ($$3392 | 0)) {
    $$2388 = $$1387 + 1 | 0;
    $236 = $$1387;
   } else {
    $$2388 = $$1387;
    $236 = HEAP32[$4 + 1179664 + ($230 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $236;
   $$1387 = $$2388;
   $$3392 = $$3392 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $239 = $4 + 8 | 0;
  $240 = $$1387 + -1 | 0;
  HEAP32[$239 >> 2] = $240;
  if (!$240) $$0 = 0; else {
   _memset($228 | 0, 0, $240 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $240 << 4 | 0) | 0;
   $$4393 = 0;
   $246 = $240;
   while (1) {
    if (($$4393 | 0) >= ($246 | 0)) {
     $$5 = 0;
     break;
    }
    $247 = $$4393 << 2;
    HEAP32[$4 + 131084 + ($247 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($247 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($247 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($247 | 3) << 2) >> 2] = 0;
    $$4393 = $$4393 + 1 | 0;
    $246 = HEAP32[$239 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0374 | 0)) {
     $$6 = 0;
     break;
    }
    $259 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $260 = $$5 * 7 | 0;
    $263 = $4 + 12 + ($259 << 2) | 0;
    HEAP32[$263 >> 2] = (HEAP32[$263 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($260 << 2) >> 2] | 0);
    $270 = $259 << 1;
    $271 = $4 + 655376 + ($270 << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$4 + 1310736 + ($260 + 1 << 2) >> 2] | 0);
    $279 = $4 + 655376 + (($270 | 1) << 3) | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + +(HEAP32[$4 + 1310736 + ($260 + 2 << 2) >> 2] | 0);
    $282 = $259 << 2;
    $283 = $4 + 131084 + ($282 << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($260 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($282 | 1) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($260 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($282 | 2) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($260 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) > ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $304 = $4 + 131084 + (($282 | 3) << 2) | 0;
    $308 = HEAP32[$4 + 1310736 + ($260 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$304 >> 2] | 0) < ($308 | 0)) HEAP32[$304 >> 2] = $308;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$239 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $313 = $4 + 12 + ($$6 << 2) | 0;
    $316 = $$6 << 1;
    $317 = $4 + 655376 + ($316 << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $323 = $4 + 655376 + (($316 | 1) << 3) | 0;
    HEAPF64[$323 >> 3] = +HEAPF64[$323 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3CA4444($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0386 = 0, $$0389 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1387 = 0, $$1390 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2388 = 0, $$2391 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3385 = 0, $$3392 = 0, $$4 = 0, $$4393 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $110 = 0, $113 = 0, $116 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $146 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $164 = 0, $165 = 0, $169 = 0, $173 = 0, $177 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $202 = 0, $207 = 0, $22 = 0, $228 = 0, $230 = 0, $236 = 0, $239 = 0, $240 = 0, $246 = 0, $247 = 0, $25 = 0, $259 = 0, $260 = 0, $263 = 0, $270 = 0, $271 = 0, $279 = 0, $282 = 0, $283 = 0, $287 = 0, $29 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $304 = 0, $308 = 0, $313 = 0, $316 = 0, $317 = 0, $323 = 0, $33 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $59 = 0, $6 = 0, $65 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $93 = 0, $95 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0389 = 0;
 while (1) {
  if (($$0389 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($16 << 1) | 0;
 $$1390 = 0;
 while (1) {
  if (($$1390 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1390 = $$1390 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $25 = $1 << 1;
 $29 = 0 - $5 | 0;
 $$0369 = $0 + (($1 << 2) + 4) | 0;
 $$0374 = 0;
 $$0386 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0386 | 0) < ($8 | 0)) {
   $$1 = $$0369;
   $$1375 = $$0374;
   $$2391 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2391 | 0) >= ($16 | 0)) break;
   $33 = HEAPU8[$$1 >> 0] | 0;
   do if ((($33 & 240) + 24 + ($33 << 4 & 240) + (HEAP8[$$1 + 1 >> 0] & -16 & 255) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3377 = $$1375;
   } else {
    $45 = $$3 + ($29 << 1) | 0;
    $46 = HEAP16[$45 >> 1] | 0;
    if ($46 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $46;
     $49 = ($46 << 16 >> 16) * 7 | 0;
     $51 = $4 + 1310736 + ($49 + -7 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + 1;
     $55 = $4 + 1310736 + ($49 + -6 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $$2391;
     $59 = $4 + 1310736 + ($49 + -5 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($49 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $65 = HEAP16[$45 + 2 >> 1] | 0;
    $68 = HEAP16[$45 + -2 >> 1] | 0;
    $70 = $68 << 16 >> 16 > 0;
    $71 = $$3 + -2 | 0;
    $72 = ($68 << 16 >> 16) + -1 | 0;
    if ($65 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$$3 >> 1] = $68;
      $164 = $72 * 7 | 0;
      $165 = $4 + 1310736 + ($164 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $4 + 1310736 + ($164 + 1 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $$2391;
      $173 = $4 + 1310736 + ($164 + 2 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$0386;
      $177 = $4 + 1310736 + ($164 + 4 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($$2391 | 0)) HEAP32[$177 >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($164 + 6 << 2) >> 2] = $$0386;
      $$3377 = $$1375;
      break;
     }
     $182 = HEAP16[$71 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $4 + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $4 + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$2391;
      $195 = $4 + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$0386;
      $198 = $185 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($198 << 2) >> 2] | 0) < ($$2391 | 0)) {
       $$2376 = $$1375;
       $$sink = $$2391;
       $$sink3 = $198;
      } else {
       $$3377 = $$1375;
       break;
      }
     } else {
      $202 = $$1375 + 1 | 0;
      if (($$1375 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $202;
      HEAP32[$4 + 1179664 + ($$1375 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $$1375 * 7 | 0;
      HEAP32[$4 + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($207 + 1 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($207 + 2 << 2) >> 2] = $$0386;
      HEAP32[$4 + 1310736 + ($207 + 3 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($207 + 4 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($207 + 5 << 2) >> 2] = $$0386;
      $$2376 = $202;
      $$sink = $$0386;
      $$sink3 = $207 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3377 = $$2376;
     break;
    }
    $74 = ($65 << 16 >> 16) + -1 | 0;
    $75 = $4 + 1179664 + ($74 << 2) | 0;
    if ($70) {
     $76 = HEAP32[$75 >> 2] | 0;
     $78 = HEAP32[$4 + 1179664 + ($72 << 2) >> 2] | 0;
     L36 : do if (($76 | 0) > ($78 | 0)) {
      HEAP16[$$3 >> 1] = $78;
      $$0378 = $22;
      $$0382 = 0;
      while (1) {
       if (($$0382 | 0) >= ($$1375 | 0)) {
        $93 = $78;
        break L36;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($76 | 0)) HEAP32[$$0378 >> 2] = $78;
       $$0378 = $$0378 + 4 | 0;
       $$0382 = $$0382 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $76;
      if (($76 | 0) < ($78 | 0)) {
       $$1379 = $22;
       $$1383 = 0;
       while (1) {
        if (($$1383 | 0) >= ($$1375 | 0)) {
         $93 = $76;
         break L36;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($78 | 0)) HEAP32[$$1379 >> 2] = $76;
        $$1379 = $$1379 + 4 | 0;
        $$1383 = $$1383 + 1 | 0;
       }
      } else $93 = $76;
     } while (0);
     $95 = ($93 << 16 >> 16) * 7 | 0;
     $97 = $4 + 1310736 + ($95 + -7 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + 1;
     $101 = $4 + 1310736 + ($95 + -6 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $$2391;
     $105 = $4 + 1310736 + ($95 + -5 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($95 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $110 = HEAP16[$71 >> 1] | 0;
    if ($110 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $65;
     $146 = $74 * 7 | 0;
     $147 = $4 + 1310736 + ($146 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + 1;
     $151 = $4 + 1310736 + ($146 + 1 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $$2391;
     $155 = $4 + 1310736 + ($146 + 2 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$0386;
     $159 = $4 + 1310736 + ($146 + 3 << 2) | 0;
     if ((HEAP32[$159 >> 2] | 0) > ($$2391 | 0)) HEAP32[$159 >> 2] = $$2391;
     HEAP32[$4 + 1310736 + ($146 + 6 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $113 = HEAP32[$75 >> 2] | 0;
    $116 = HEAP32[$4 + 1179664 + (($110 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$$3 >> 1] = $116;
     $$2380 = $22;
     $$2384 = 0;
     while (1) {
      if (($$2384 | 0) >= ($$1375 | 0)) {
       $131 = $116;
       break L59;
      }
      if ((HEAP32[$$2380 >> 2] | 0) == ($113 | 0)) HEAP32[$$2380 >> 2] = $116;
      $$2380 = $$2380 + 4 | 0;
      $$2384 = $$2384 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $$3381 = $22;
      $$3385 = 0;
      while (1) {
       if (($$3385 | 0) >= ($$1375 | 0)) {
        $131 = $113;
        break L59;
       }
       if ((HEAP32[$$3381 >> 2] | 0) == ($116 | 0)) HEAP32[$$3381 >> 2] = $113;
       $$3381 = $$3381 + 4 | 0;
       $$3385 = $$3385 + 1 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $4 + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $4 + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2391;
    $143 = $4 + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0386;
    $$3377 = $$1375;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1375 = $$3377;
   $$2391 = $$2391 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $25 + 8 | 0;
  $$0374 = $$1375;
  $$0386 = $$0386 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $228 = $4 + 12 | 0;
  $$1387 = 1;
  $$3392 = 1;
  $$4 = $22;
  while (1) {
   if (($$3392 | 0) > ($$0374 | 0)) break;
   $230 = HEAP32[$$4 >> 2] | 0;
   if (($230 | 0) == ($$3392 | 0)) {
    $$2388 = $$1387 + 1 | 0;
    $236 = $$1387;
   } else {
    $$2388 = $$1387;
    $236 = HEAP32[$4 + 1179664 + ($230 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $236;
   $$1387 = $$2388;
   $$3392 = $$3392 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $239 = $4 + 8 | 0;
  $240 = $$1387 + -1 | 0;
  HEAP32[$239 >> 2] = $240;
  if (!$240) $$0 = 0; else {
   _memset($228 | 0, 0, $240 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $240 << 4 | 0) | 0;
   $$4393 = 0;
   $246 = $240;
   while (1) {
    if (($$4393 | 0) >= ($246 | 0)) {
     $$5 = 0;
     break;
    }
    $247 = $$4393 << 2;
    HEAP32[$4 + 131084 + ($247 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($247 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($247 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($247 | 3) << 2) >> 2] = 0;
    $$4393 = $$4393 + 1 | 0;
    $246 = HEAP32[$239 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0374 | 0)) {
     $$6 = 0;
     break;
    }
    $259 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $260 = $$5 * 7 | 0;
    $263 = $4 + 12 + ($259 << 2) | 0;
    HEAP32[$263 >> 2] = (HEAP32[$263 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($260 << 2) >> 2] | 0);
    $270 = $259 << 1;
    $271 = $4 + 655376 + ($270 << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$4 + 1310736 + ($260 + 1 << 2) >> 2] | 0);
    $279 = $4 + 655376 + (($270 | 1) << 3) | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + +(HEAP32[$4 + 1310736 + ($260 + 2 << 2) >> 2] | 0);
    $282 = $259 << 2;
    $283 = $4 + 131084 + ($282 << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($260 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($282 | 1) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($260 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($282 | 2) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($260 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) > ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $304 = $4 + 131084 + (($282 | 3) << 2) | 0;
    $308 = HEAP32[$4 + 1310736 + ($260 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$304 >> 2] | 0) < ($308 | 0)) HEAP32[$304 >> 2] = $308;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$239 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $313 = $4 + 12 + ($$6 << 2) | 0;
    $316 = $$6 << 1;
    $317 = $4 + 655376 + ($316 << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $323 = $4 + 655376 + (($316 | 1) << 3) | 0;
    HEAPF64[$323 >> 3] = +HEAPF64[$323 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWRCY($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0374 = 0, $$0375 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0385 = 0, $$0389 = 0, $$0392 = 0, $$0397 = 0, $$1 = 0, $$1376 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1386 = 0, $$1390 = 0, $$1393 = 0, $$1398 = 0, $$2 = 0, $$2383 = 0, $$2387 = 0, $$2391 = 0, $$2394 = 0, $$2399 = 0, $$3 = 0, $$3384 = 0, $$3388 = 0, $$3395 = 0, $$3400 = 0, $$4 = 0, $$4396 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $105 = 0, $120 = 0, $122 = 0, $124 = 0, $128 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $140 = 0, $144 = 0, $148 = 0, $153 = 0, $154 = 0, $158 = 0, $162 = 0, $166 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $187 = 0, $19 = 0, $191 = 0, $196 = 0, $20 = 0, $218 = 0, $220 = 0, $226 = 0, $229 = 0, $230 = 0, $236 = 0, $237 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $27 = 0, $272 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $303 = 0, $306 = 0, $307 = 0, $313 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $44 = 0, $48 = 0, $5 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $82 = 0, $84 = 0, $86 = 0, $90 = 0, $94 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0375 = $5;
 $$0377 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0392 = 0;
 while (1) {
  if (($$0392 | 0) >= ($1 | 0)) break;
  HEAP16[$$0377 >> 1] = 0;
  HEAP16[$$0375 >> 1] = 0;
  $$0375 = $$0375 + 2 | 0;
  $$0377 = $$0377 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1376 = $5;
 $$1378 = $5 + ($13 << 1) | 0;
 $$1393 = 0;
 while (1) {
  if (($$1393 | 0) >= ($2 | 0)) break;
  HEAP16[$$1378 >> 1] = 0;
  HEAP16[$$1376 >> 1] = 0;
  $$1376 = $$1376 + ($1 << 1) | 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1393 = $$1393 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $27 = 0 - $1 | 0;
 $$0374 = $0 + ($20 << 1) | 0;
 $$0379 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$0389 = 1;
 $$0397 = 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0389 | 0) < ($6 | 0)) {
   $$1 = $$0374;
   $$1380 = $$0379;
   $$1398 = $$0397;
   $$2394 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2394 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 + 1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP8[$$1380 >> 0] = -1;
    $34 = $$3 + ($27 << 1) | 0;
    $35 = HEAP16[$34 >> 1] | 0;
    if ($35 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $35;
     $38 = ($35 << 16 >> 16) * 7 | 0;
     $40 = $4 + 1310736 + ($38 + -7 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
     $44 = $4 + 1310736 + ($38 + -6 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$2394;
     $48 = $4 + 1310736 + ($38 + -5 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($38 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $54 = HEAP16[$34 + 2 >> 1] | 0;
    $57 = HEAP16[$34 + -2 >> 1] | 0;
    $59 = $57 << 16 >> 16 > 0;
    $60 = $$3 + -2 | 0;
    $61 = ($57 << 16 >> 16) + -1 | 0;
    if ($54 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$$3 >> 1] = $57;
      $153 = $61 * 7 | 0;
      $154 = $4 + 1310736 + ($153 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
      $158 = $4 + 1310736 + ($153 + 1 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2394;
      $162 = $4 + 1310736 + ($153 + 2 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0389;
      $166 = $4 + 1310736 + ($153 + 4 << 2) | 0;
      if ((HEAP32[$166 >> 2] | 0) < ($$2394 | 0)) HEAP32[$166 >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($153 + 6 << 2) >> 2] = $$0389;
      $$3400 = $$1398;
      break;
     }
     $171 = HEAP16[$60 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $4 + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $4 + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$2394;
      $184 = $4 + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$0389;
      $187 = $174 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($187 << 2) >> 2] | 0) < ($$2394 | 0)) {
       $$2399 = $$1398;
       $$sink = $$2394;
       $$sink3 = $187;
      } else {
       $$3400 = $$1398;
       break;
      }
     } else {
      $191 = $$1398 + 1 | 0;
      if (($$1398 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $191;
      HEAP32[$4 + 1179664 + ($$1398 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $$1398 * 7 | 0;
      HEAP32[$4 + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($196 + 1 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($196 + 2 << 2) >> 2] = $$0389;
      HEAP32[$4 + 1310736 + ($196 + 3 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($196 + 4 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($196 + 5 << 2) >> 2] = $$0389;
      $$2399 = $191;
      $$sink = $$0389;
      $$sink3 = $196 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3400 = $$2399;
     break;
    }
    $63 = ($54 << 16 >> 16) + -1 | 0;
    $64 = $4 + 1179664 + ($63 << 2) | 0;
    if ($59) {
     $65 = HEAP32[$64 >> 2] | 0;
     $67 = HEAP32[$4 + 1179664 + ($61 << 2) >> 2] | 0;
     L35 : do if (($65 | 0) > ($67 | 0)) {
      HEAP16[$$3 >> 1] = $67;
      $$0381 = $19;
      $$0385 = 0;
      while (1) {
       if (($$0385 | 0) >= ($$1398 | 0)) {
        $82 = $67;
        break L35;
       }
       if ((HEAP32[$$0381 >> 2] | 0) == ($65 | 0)) HEAP32[$$0381 >> 2] = $67;
       $$0381 = $$0381 + 4 | 0;
       $$0385 = $$0385 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $65;
      if (($65 | 0) < ($67 | 0)) {
       $$1382 = $19;
       $$1386 = 0;
       while (1) {
        if (($$1386 | 0) >= ($$1398 | 0)) {
         $82 = $65;
         break L35;
        }
        if ((HEAP32[$$1382 >> 2] | 0) == ($67 | 0)) HEAP32[$$1382 >> 2] = $65;
        $$1382 = $$1382 + 4 | 0;
        $$1386 = $$1386 + 1 | 0;
       }
      } else $82 = $65;
     } while (0);
     $84 = ($82 << 16 >> 16) * 7 | 0;
     $86 = $4 + 1310736 + ($84 + -7 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 1;
     $90 = $4 + 1310736 + ($84 + -6 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $$2394;
     $94 = $4 + 1310736 + ($84 + -5 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($84 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $99 = HEAP16[$60 >> 1] | 0;
    if ($99 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $54;
     $135 = $63 * 7 | 0;
     $136 = $4 + 1310736 + ($135 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
     $140 = $4 + 1310736 + ($135 + 1 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$2394;
     $144 = $4 + 1310736 + ($135 + 2 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$0389;
     $148 = $4 + 1310736 + ($135 + 3 << 2) | 0;
     if ((HEAP32[$148 >> 2] | 0) > ($$2394 | 0)) HEAP32[$148 >> 2] = $$2394;
     HEAP32[$4 + 1310736 + ($135 + 6 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $102 = HEAP32[$64 >> 2] | 0;
    $105 = HEAP32[$4 + 1179664 + (($99 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($102 | 0) > ($105 | 0)) {
     HEAP16[$$3 >> 1] = $105;
     $$2383 = $19;
     $$2387 = 0;
     while (1) {
      if (($$2387 | 0) >= ($$1398 | 0)) {
       $120 = $105;
       break L58;
      }
      if ((HEAP32[$$2383 >> 2] | 0) == ($102 | 0)) HEAP32[$$2383 >> 2] = $105;
      $$2383 = $$2383 + 4 | 0;
      $$2387 = $$2387 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $102;
     if (($102 | 0) < ($105 | 0)) {
      $$3384 = $19;
      $$3388 = 0;
      while (1) {
       if (($$3388 | 0) >= ($$1398 | 0)) {
        $120 = $102;
        break L58;
       }
       if ((HEAP32[$$3384 >> 2] | 0) == ($105 | 0)) HEAP32[$$3384 >> 2] = $102;
       $$3384 = $$3384 + 4 | 0;
       $$3388 = $$3388 + 1 | 0;
      }
     } else $120 = $102;
    } while (0);
    $122 = ($120 << 16 >> 16) * 7 | 0;
    $124 = $4 + 1310736 + ($122 + -7 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1;
    $128 = $4 + 1310736 + ($122 + -6 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$2394;
    $132 = $4 + 1310736 + ($122 + -5 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$0389;
    $$3400 = $$1398;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1380 >> 0] = 0;
    $$3400 = $$1398;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1380 = $$1380 + 1 | 0;
   $$1398 = $$3400;
   $$2394 = $$2394 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0374 = $$1 + 4 | 0;
  $$0379 = $$1380 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
  $$0397 = $$1398;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $218 = $4 + 12 | 0;
  $$1390 = 1;
  $$3395 = 1;
  $$4 = $19;
  while (1) {
   if (($$3395 | 0) > ($$0397 | 0)) break;
   $220 = HEAP32[$$4 >> 2] | 0;
   if (($220 | 0) == ($$3395 | 0)) {
    $$2391 = $$1390 + 1 | 0;
    $226 = $$1390;
   } else {
    $$2391 = $$1390;
    $226 = HEAP32[$4 + 1179664 + ($220 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $226;
   $$1390 = $$2391;
   $$3395 = $$3395 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $229 = $4 + 8 | 0;
  $230 = $$1390 + -1 | 0;
  HEAP32[$229 >> 2] = $230;
  if (!$230) $$0 = 0; else {
   _memset($218 | 0, 0, $230 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $230 << 4 | 0) | 0;
   $$4396 = 0;
   $236 = $230;
   while (1) {
    if (($$4396 | 0) >= ($236 | 0)) {
     $$5 = 0;
     break;
    }
    $237 = $$4396 << 2;
    HEAP32[$4 + 131084 + ($237 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($237 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $$4396 = $$4396 + 1 | 0;
    $236 = HEAP32[$229 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0397 | 0)) {
     $$6 = 0;
     break;
    }
    $249 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $$5 * 7 | 0;
    $253 = $4 + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $4 + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $4 + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $4 + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$4 + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $4 + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$229 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $303 = $4 + 12 + ($$6 << 2) | 0;
    $306 = $$6 << 1;
    $307 = $4 + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $313 = $4 + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBRCY($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0374 = 0, $$0375 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0385 = 0, $$0389 = 0, $$0392 = 0, $$0397 = 0, $$1 = 0, $$1376 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1386 = 0, $$1390 = 0, $$1393 = 0, $$1398 = 0, $$2 = 0, $$2383 = 0, $$2387 = 0, $$2391 = 0, $$2394 = 0, $$2399 = 0, $$3 = 0, $$3384 = 0, $$3388 = 0, $$3395 = 0, $$3400 = 0, $$4 = 0, $$4396 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $105 = 0, $120 = 0, $122 = 0, $124 = 0, $128 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $140 = 0, $144 = 0, $148 = 0, $153 = 0, $154 = 0, $158 = 0, $162 = 0, $166 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $187 = 0, $19 = 0, $191 = 0, $196 = 0, $20 = 0, $218 = 0, $220 = 0, $226 = 0, $229 = 0, $230 = 0, $236 = 0, $237 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $27 = 0, $272 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $303 = 0, $306 = 0, $307 = 0, $313 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $44 = 0, $48 = 0, $5 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $82 = 0, $84 = 0, $86 = 0, $90 = 0, $94 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0375 = $5;
 $$0377 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0392 = 0;
 while (1) {
  if (($$0392 | 0) >= ($1 | 0)) break;
  HEAP16[$$0377 >> 1] = 0;
  HEAP16[$$0375 >> 1] = 0;
  $$0375 = $$0375 + 2 | 0;
  $$0377 = $$0377 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1376 = $5;
 $$1378 = $5 + ($13 << 1) | 0;
 $$1393 = 0;
 while (1) {
  if (($$1393 | 0) >= ($2 | 0)) break;
  HEAP16[$$1378 >> 1] = 0;
  HEAP16[$$1376 >> 1] = 0;
  $$1376 = $$1376 + ($1 << 1) | 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1393 = $$1393 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $27 = 0 - $1 | 0;
 $$0374 = $0 + ($20 << 1) | 0;
 $$0379 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$0389 = 1;
 $$0397 = 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0389 | 0) < ($6 | 0)) {
   $$1 = $$0374;
   $$1380 = $$0379;
   $$1398 = $$0397;
   $$2394 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2394 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 + 1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1380 >> 0] = 0;
    $$3400 = $$1398;
   } else {
    HEAP8[$$1380 >> 0] = -1;
    $34 = $$3 + ($27 << 1) | 0;
    $35 = HEAP16[$34 >> 1] | 0;
    if ($35 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $35;
     $38 = ($35 << 16 >> 16) * 7 | 0;
     $40 = $4 + 1310736 + ($38 + -7 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
     $44 = $4 + 1310736 + ($38 + -6 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$2394;
     $48 = $4 + 1310736 + ($38 + -5 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($38 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $54 = HEAP16[$34 + 2 >> 1] | 0;
    $57 = HEAP16[$34 + -2 >> 1] | 0;
    $59 = $57 << 16 >> 16 > 0;
    $60 = $$3 + -2 | 0;
    $61 = ($57 << 16 >> 16) + -1 | 0;
    if ($54 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$$3 >> 1] = $57;
      $153 = $61 * 7 | 0;
      $154 = $4 + 1310736 + ($153 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
      $158 = $4 + 1310736 + ($153 + 1 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2394;
      $162 = $4 + 1310736 + ($153 + 2 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0389;
      $166 = $4 + 1310736 + ($153 + 4 << 2) | 0;
      if ((HEAP32[$166 >> 2] | 0) < ($$2394 | 0)) HEAP32[$166 >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($153 + 6 << 2) >> 2] = $$0389;
      $$3400 = $$1398;
      break;
     }
     $171 = HEAP16[$60 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $4 + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $4 + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$2394;
      $184 = $4 + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$0389;
      $187 = $174 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($187 << 2) >> 2] | 0) < ($$2394 | 0)) {
       $$2399 = $$1398;
       $$sink = $$2394;
       $$sink3 = $187;
      } else {
       $$3400 = $$1398;
       break;
      }
     } else {
      $191 = $$1398 + 1 | 0;
      if (($$1398 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $191;
      HEAP32[$4 + 1179664 + ($$1398 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $$1398 * 7 | 0;
      HEAP32[$4 + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($196 + 1 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($196 + 2 << 2) >> 2] = $$0389;
      HEAP32[$4 + 1310736 + ($196 + 3 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($196 + 4 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($196 + 5 << 2) >> 2] = $$0389;
      $$2399 = $191;
      $$sink = $$0389;
      $$sink3 = $196 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3400 = $$2399;
     break;
    }
    $63 = ($54 << 16 >> 16) + -1 | 0;
    $64 = $4 + 1179664 + ($63 << 2) | 0;
    if ($59) {
     $65 = HEAP32[$64 >> 2] | 0;
     $67 = HEAP32[$4 + 1179664 + ($61 << 2) >> 2] | 0;
     L36 : do if (($65 | 0) > ($67 | 0)) {
      HEAP16[$$3 >> 1] = $67;
      $$0381 = $19;
      $$0385 = 0;
      while (1) {
       if (($$0385 | 0) >= ($$1398 | 0)) {
        $82 = $67;
        break L36;
       }
       if ((HEAP32[$$0381 >> 2] | 0) == ($65 | 0)) HEAP32[$$0381 >> 2] = $67;
       $$0381 = $$0381 + 4 | 0;
       $$0385 = $$0385 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $65;
      if (($65 | 0) < ($67 | 0)) {
       $$1382 = $19;
       $$1386 = 0;
       while (1) {
        if (($$1386 | 0) >= ($$1398 | 0)) {
         $82 = $65;
         break L36;
        }
        if ((HEAP32[$$1382 >> 2] | 0) == ($67 | 0)) HEAP32[$$1382 >> 2] = $65;
        $$1382 = $$1382 + 4 | 0;
        $$1386 = $$1386 + 1 | 0;
       }
      } else $82 = $65;
     } while (0);
     $84 = ($82 << 16 >> 16) * 7 | 0;
     $86 = $4 + 1310736 + ($84 + -7 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 1;
     $90 = $4 + 1310736 + ($84 + -6 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $$2394;
     $94 = $4 + 1310736 + ($84 + -5 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($84 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $99 = HEAP16[$60 >> 1] | 0;
    if ($99 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $54;
     $135 = $63 * 7 | 0;
     $136 = $4 + 1310736 + ($135 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
     $140 = $4 + 1310736 + ($135 + 1 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$2394;
     $144 = $4 + 1310736 + ($135 + 2 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$0389;
     $148 = $4 + 1310736 + ($135 + 3 << 2) | 0;
     if ((HEAP32[$148 >> 2] | 0) > ($$2394 | 0)) HEAP32[$148 >> 2] = $$2394;
     HEAP32[$4 + 1310736 + ($135 + 6 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $102 = HEAP32[$64 >> 2] | 0;
    $105 = HEAP32[$4 + 1179664 + (($99 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($102 | 0) > ($105 | 0)) {
     HEAP16[$$3 >> 1] = $105;
     $$2383 = $19;
     $$2387 = 0;
     while (1) {
      if (($$2387 | 0) >= ($$1398 | 0)) {
       $120 = $105;
       break L59;
      }
      if ((HEAP32[$$2383 >> 2] | 0) == ($102 | 0)) HEAP32[$$2383 >> 2] = $105;
      $$2383 = $$2383 + 4 | 0;
      $$2387 = $$2387 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $102;
     if (($102 | 0) < ($105 | 0)) {
      $$3384 = $19;
      $$3388 = 0;
      while (1) {
       if (($$3388 | 0) >= ($$1398 | 0)) {
        $120 = $102;
        break L59;
       }
       if ((HEAP32[$$3384 >> 2] | 0) == ($105 | 0)) HEAP32[$$3384 >> 2] = $102;
       $$3384 = $$3384 + 4 | 0;
       $$3388 = $$3388 + 1 | 0;
      }
     } else $120 = $102;
    } while (0);
    $122 = ($120 << 16 >> 16) * 7 | 0;
    $124 = $4 + 1310736 + ($122 + -7 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1;
    $128 = $4 + 1310736 + ($122 + -6 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$2394;
    $132 = $4 + 1310736 + ($122 + -5 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$0389;
    $$3400 = $$1398;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1380 = $$1380 + 1 | 0;
   $$1398 = $$3400;
   $$2394 = $$2394 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0374 = $$1 + 4 | 0;
  $$0379 = $$1380 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
  $$0397 = $$1398;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $218 = $4 + 12 | 0;
  $$1390 = 1;
  $$3395 = 1;
  $$4 = $19;
  while (1) {
   if (($$3395 | 0) > ($$0397 | 0)) break;
   $220 = HEAP32[$$4 >> 2] | 0;
   if (($220 | 0) == ($$3395 | 0)) {
    $$2391 = $$1390 + 1 | 0;
    $226 = $$1390;
   } else {
    $$2391 = $$1390;
    $226 = HEAP32[$4 + 1179664 + ($220 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $226;
   $$1390 = $$2391;
   $$3395 = $$3395 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $229 = $4 + 8 | 0;
  $230 = $$1390 + -1 | 0;
  HEAP32[$229 >> 2] = $230;
  if (!$230) $$0 = 0; else {
   _memset($218 | 0, 0, $230 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $230 << 4 | 0) | 0;
   $$4396 = 0;
   $236 = $230;
   while (1) {
    if (($$4396 | 0) >= ($236 | 0)) {
     $$5 = 0;
     break;
    }
    $237 = $$4396 << 2;
    HEAP32[$4 + 131084 + ($237 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($237 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $$4396 = $$4396 + 1 | 0;
    $236 = HEAP32[$229 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0397 | 0)) {
     $$6 = 0;
     break;
    }
    $249 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $$5 * 7 | 0;
    $253 = $4 + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $4 + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $4 + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $4 + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$4 + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $4 + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$229 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $303 = $4 + 12 + ($$6 << 2) | 0;
    $306 = $$6 << 1;
    $307 = $4 + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $313 = $4 + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWRYC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0374 = 0, $$0375 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0385 = 0, $$0389 = 0, $$0392 = 0, $$0397 = 0, $$1 = 0, $$1376 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1386 = 0, $$1390 = 0, $$1393 = 0, $$1398 = 0, $$2 = 0, $$2383 = 0, $$2387 = 0, $$2391 = 0, $$2394 = 0, $$2399 = 0, $$3 = 0, $$3384 = 0, $$3388 = 0, $$3395 = 0, $$3400 = 0, $$4 = 0, $$4396 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $104 = 0, $119 = 0, $121 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $152 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $186 = 0, $19 = 0, $190 = 0, $195 = 0, $20 = 0, $217 = 0, $219 = 0, $225 = 0, $228 = 0, $229 = 0, $235 = 0, $236 = 0, $248 = 0, $249 = 0, $252 = 0, $259 = 0, $260 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $276 = 0, $279 = 0, $283 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $302 = 0, $305 = 0, $306 = 0, $312 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $93 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0375 = $5;
 $$0377 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0392 = 0;
 while (1) {
  if (($$0392 | 0) >= ($1 | 0)) break;
  HEAP16[$$0377 >> 1] = 0;
  HEAP16[$$0375 >> 1] = 0;
  $$0375 = $$0375 + 2 | 0;
  $$0377 = $$0377 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1376 = $5;
 $$1378 = $5 + ($13 << 1) | 0;
 $$1393 = 0;
 while (1) {
  if (($$1393 | 0) >= ($2 | 0)) break;
  HEAP16[$$1378 >> 1] = 0;
  HEAP16[$$1376 >> 1] = 0;
  $$1376 = $$1376 + ($1 << 1) | 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1393 = $$1393 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $27 = 0 - $1 | 0;
 $$0374 = $0 + ($20 << 1) | 0;
 $$0379 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$0389 = 1;
 $$0397 = 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0389 | 0) < ($6 | 0)) {
   $$1 = $$0374;
   $$1380 = $$0379;
   $$1398 = $$0397;
   $$2394 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2394 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP8[$$1380 >> 0] = -1;
    $33 = $$3 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2394;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $56 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $56 << 16 >> 16 > 0;
    $59 = ($56 << 16 >> 16) + -1 | 0;
    $60 = $$3 + -2 | 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$$3 >> 1] = $56;
      $152 = $59 * 7 | 0;
      $153 = $4 + 1310736 + ($152 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $4 + 1310736 + ($152 + 1 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$2394;
      $161 = $4 + 1310736 + ($152 + 2 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$0389;
      $165 = $4 + 1310736 + ($152 + 4 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($$2394 | 0)) HEAP32[$165 >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($152 + 6 << 2) >> 2] = $$0389;
      $$3400 = $$1398;
      break;
     }
     $170 = HEAP16[$60 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $4 + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $4 + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $$2394;
      $183 = $4 + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$0389;
      $186 = $173 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($186 << 2) >> 2] | 0) < ($$2394 | 0)) {
       $$2399 = $$1398;
       $$sink = $$2394;
       $$sink3 = $186;
      } else {
       $$3400 = $$1398;
       break;
      }
     } else {
      $190 = $$1398 + 1 | 0;
      if (($$1398 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $190;
      HEAP32[$4 + 1179664 + ($$1398 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $$1398 * 7 | 0;
      HEAP32[$4 + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($195 + 1 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($195 + 2 << 2) >> 2] = $$0389;
      HEAP32[$4 + 1310736 + ($195 + 3 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($195 + 4 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($195 + 5 << 2) >> 2] = $$0389;
      $$2399 = $190;
      $$sink = $$0389;
      $$sink3 = $195 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3400 = $$2399;
     break;
    }
    $62 = ($53 << 16 >> 16) + -1 | 0;
    $63 = $4 + 1179664 + ($62 << 2) | 0;
    if ($58) {
     $64 = HEAP32[$63 >> 2] | 0;
     $66 = HEAP32[$4 + 1179664 + ($59 << 2) >> 2] | 0;
     L35 : do if (($64 | 0) > ($66 | 0)) {
      HEAP16[$$3 >> 1] = $66;
      $$0381 = $19;
      $$0385 = 0;
      while (1) {
       if (($$0385 | 0) >= ($$1398 | 0)) {
        $81 = $66;
        break L35;
       }
       if ((HEAP32[$$0381 >> 2] | 0) == ($64 | 0)) HEAP32[$$0381 >> 2] = $66;
       $$0381 = $$0381 + 4 | 0;
       $$0385 = $$0385 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $64;
      if (($64 | 0) < ($66 | 0)) {
       $$1382 = $19;
       $$1386 = 0;
       while (1) {
        if (($$1386 | 0) >= ($$1398 | 0)) {
         $81 = $64;
         break L35;
        }
        if ((HEAP32[$$1382 >> 2] | 0) == ($66 | 0)) HEAP32[$$1382 >> 2] = $64;
        $$1382 = $$1382 + 4 | 0;
        $$1386 = $$1386 + 1 | 0;
       }
      } else $81 = $64;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $4 + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $4 + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$2394;
     $93 = $4 + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($83 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $98 = HEAP16[$60 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $53;
     $134 = $62 * 7 | 0;
     $135 = $4 + 1310736 + ($134 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $4 + 1310736 + ($134 + 1 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2394;
     $143 = $4 + 1310736 + ($134 + 2 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0389;
     $147 = $4 + 1310736 + ($134 + 3 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($$2394 | 0)) HEAP32[$147 >> 2] = $$2394;
     HEAP32[$4 + 1310736 + ($134 + 6 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $101 = HEAP32[$63 >> 2] | 0;
    $104 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($101 | 0) > ($104 | 0)) {
     HEAP16[$$3 >> 1] = $104;
     $$2383 = $19;
     $$2387 = 0;
     while (1) {
      if (($$2387 | 0) >= ($$1398 | 0)) {
       $119 = $104;
       break L58;
      }
      if ((HEAP32[$$2383 >> 2] | 0) == ($101 | 0)) HEAP32[$$2383 >> 2] = $104;
      $$2383 = $$2383 + 4 | 0;
      $$2387 = $$2387 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $101;
     if (($101 | 0) < ($104 | 0)) {
      $$3384 = $19;
      $$3388 = 0;
      while (1) {
       if (($$3388 | 0) >= ($$1398 | 0)) {
        $119 = $101;
        break L58;
       }
       if ((HEAP32[$$3384 >> 2] | 0) == ($104 | 0)) HEAP32[$$3384 >> 2] = $101;
       $$3384 = $$3384 + 4 | 0;
       $$3388 = $$3388 + 1 | 0;
      }
     } else $119 = $101;
    } while (0);
    $121 = ($119 << 16 >> 16) * 7 | 0;
    $123 = $4 + 1310736 + ($121 + -7 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + 1;
    $127 = $4 + 1310736 + ($121 + -6 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $$2394;
    $131 = $4 + 1310736 + ($121 + -5 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $$0389;
    $$3400 = $$1398;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1380 >> 0] = 0;
    $$3400 = $$1398;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1380 = $$1380 + 1 | 0;
   $$1398 = $$3400;
   $$2394 = $$2394 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0374 = $$1 + 4 | 0;
  $$0379 = $$1380 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
  $$0397 = $$1398;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $217 = $4 + 12 | 0;
  $$1390 = 1;
  $$3395 = 1;
  $$4 = $19;
  while (1) {
   if (($$3395 | 0) > ($$0397 | 0)) break;
   $219 = HEAP32[$$4 >> 2] | 0;
   if (($219 | 0) == ($$3395 | 0)) {
    $$2391 = $$1390 + 1 | 0;
    $225 = $$1390;
   } else {
    $$2391 = $$1390;
    $225 = HEAP32[$4 + 1179664 + ($219 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $225;
   $$1390 = $$2391;
   $$3395 = $$3395 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $228 = $4 + 8 | 0;
  $229 = $$1390 + -1 | 0;
  HEAP32[$228 >> 2] = $229;
  if (!$229) $$0 = 0; else {
   _memset($217 | 0, 0, $229 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $229 << 4 | 0) | 0;
   $$4396 = 0;
   $235 = $229;
   while (1) {
    if (($$4396 | 0) >= ($235 | 0)) {
     $$5 = 0;
     break;
    }
    $236 = $$4396 << 2;
    HEAP32[$4 + 131084 + ($236 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($236 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($236 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($236 | 3) << 2) >> 2] = 0;
    $$4396 = $$4396 + 1 | 0;
    $235 = HEAP32[$228 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0397 | 0)) {
     $$6 = 0;
     break;
    }
    $248 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $249 = $$5 * 7 | 0;
    $252 = $4 + 12 + ($248 << 2) | 0;
    HEAP32[$252 >> 2] = (HEAP32[$252 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($249 << 2) >> 2] | 0);
    $259 = $248 << 1;
    $260 = $4 + 655376 + ($259 << 3) | 0;
    HEAPF64[$260 >> 3] = +HEAPF64[$260 >> 3] + +(HEAP32[$4 + 1310736 + ($249 + 1 << 2) >> 2] | 0);
    $268 = $4 + 655376 + (($259 | 1) << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$4 + 1310736 + ($249 + 2 << 2) >> 2] | 0);
    $271 = $248 << 2;
    $272 = $4 + 131084 + ($271 << 2) | 0;
    $276 = HEAP32[$4 + 1310736 + ($249 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$272 >> 2] | 0) > ($276 | 0)) HEAP32[$272 >> 2] = $276;
    $279 = $4 + 131084 + (($271 | 1) << 2) | 0;
    $283 = HEAP32[$4 + 1310736 + ($249 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$279 >> 2] | 0) < ($283 | 0)) HEAP32[$279 >> 2] = $283;
    $286 = $4 + 131084 + (($271 | 2) << 2) | 0;
    $290 = HEAP32[$4 + 1310736 + ($249 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $4 + 131084 + (($271 | 3) << 2) | 0;
    $297 = HEAP32[$4 + 1310736 + ($249 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$228 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $302 = $4 + 12 + ($$6 << 2) | 0;
    $305 = $$6 << 1;
    $306 = $4 + 655376 + ($305 << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $312 = $4 + 655376 + (($305 | 1) << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBRYC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0374 = 0, $$0375 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0385 = 0, $$0389 = 0, $$0392 = 0, $$0397 = 0, $$1 = 0, $$1376 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1386 = 0, $$1390 = 0, $$1393 = 0, $$1398 = 0, $$2 = 0, $$2383 = 0, $$2387 = 0, $$2391 = 0, $$2394 = 0, $$2399 = 0, $$3 = 0, $$3384 = 0, $$3388 = 0, $$3395 = 0, $$3400 = 0, $$4 = 0, $$4396 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $104 = 0, $119 = 0, $121 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $152 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $186 = 0, $19 = 0, $190 = 0, $195 = 0, $20 = 0, $217 = 0, $219 = 0, $225 = 0, $228 = 0, $229 = 0, $235 = 0, $236 = 0, $248 = 0, $249 = 0, $252 = 0, $259 = 0, $260 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $276 = 0, $279 = 0, $283 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $302 = 0, $305 = 0, $306 = 0, $312 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $93 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0375 = $5;
 $$0377 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0392 = 0;
 while (1) {
  if (($$0392 | 0) >= ($1 | 0)) break;
  HEAP16[$$0377 >> 1] = 0;
  HEAP16[$$0375 >> 1] = 0;
  $$0375 = $$0375 + 2 | 0;
  $$0377 = $$0377 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1376 = $5;
 $$1378 = $5 + ($13 << 1) | 0;
 $$1393 = 0;
 while (1) {
  if (($$1393 | 0) >= ($2 | 0)) break;
  HEAP16[$$1378 >> 1] = 0;
  HEAP16[$$1376 >> 1] = 0;
  $$1376 = $$1376 + ($1 << 1) | 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1393 = $$1393 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $27 = 0 - $1 | 0;
 $$0374 = $0 + ($20 << 1) | 0;
 $$0379 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$0389 = 1;
 $$0397 = 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0389 | 0) < ($6 | 0)) {
   $$1 = $$0374;
   $$1380 = $$0379;
   $$1398 = $$0397;
   $$2394 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2394 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1380 >> 0] = 0;
    $$3400 = $$1398;
   } else {
    HEAP8[$$1380 >> 0] = -1;
    $33 = $$3 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2394;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $56 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $56 << 16 >> 16 > 0;
    $59 = ($56 << 16 >> 16) + -1 | 0;
    $60 = $$3 + -2 | 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$$3 >> 1] = $56;
      $152 = $59 * 7 | 0;
      $153 = $4 + 1310736 + ($152 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $4 + 1310736 + ($152 + 1 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$2394;
      $161 = $4 + 1310736 + ($152 + 2 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$0389;
      $165 = $4 + 1310736 + ($152 + 4 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($$2394 | 0)) HEAP32[$165 >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($152 + 6 << 2) >> 2] = $$0389;
      $$3400 = $$1398;
      break;
     }
     $170 = HEAP16[$60 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $4 + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $4 + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $$2394;
      $183 = $4 + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$0389;
      $186 = $173 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($186 << 2) >> 2] | 0) < ($$2394 | 0)) {
       $$2399 = $$1398;
       $$sink = $$2394;
       $$sink3 = $186;
      } else {
       $$3400 = $$1398;
       break;
      }
     } else {
      $190 = $$1398 + 1 | 0;
      if (($$1398 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $190;
      HEAP32[$4 + 1179664 + ($$1398 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $$1398 * 7 | 0;
      HEAP32[$4 + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($195 + 1 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($195 + 2 << 2) >> 2] = $$0389;
      HEAP32[$4 + 1310736 + ($195 + 3 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($195 + 4 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($195 + 5 << 2) >> 2] = $$0389;
      $$2399 = $190;
      $$sink = $$0389;
      $$sink3 = $195 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3400 = $$2399;
     break;
    }
    $62 = ($53 << 16 >> 16) + -1 | 0;
    $63 = $4 + 1179664 + ($62 << 2) | 0;
    if ($58) {
     $64 = HEAP32[$63 >> 2] | 0;
     $66 = HEAP32[$4 + 1179664 + ($59 << 2) >> 2] | 0;
     L36 : do if (($64 | 0) > ($66 | 0)) {
      HEAP16[$$3 >> 1] = $66;
      $$0381 = $19;
      $$0385 = 0;
      while (1) {
       if (($$0385 | 0) >= ($$1398 | 0)) {
        $81 = $66;
        break L36;
       }
       if ((HEAP32[$$0381 >> 2] | 0) == ($64 | 0)) HEAP32[$$0381 >> 2] = $66;
       $$0381 = $$0381 + 4 | 0;
       $$0385 = $$0385 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $64;
      if (($64 | 0) < ($66 | 0)) {
       $$1382 = $19;
       $$1386 = 0;
       while (1) {
        if (($$1386 | 0) >= ($$1398 | 0)) {
         $81 = $64;
         break L36;
        }
        if ((HEAP32[$$1382 >> 2] | 0) == ($66 | 0)) HEAP32[$$1382 >> 2] = $64;
        $$1382 = $$1382 + 4 | 0;
        $$1386 = $$1386 + 1 | 0;
       }
      } else $81 = $64;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $4 + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $4 + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$2394;
     $93 = $4 + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($83 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $98 = HEAP16[$60 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $53;
     $134 = $62 * 7 | 0;
     $135 = $4 + 1310736 + ($134 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $4 + 1310736 + ($134 + 1 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2394;
     $143 = $4 + 1310736 + ($134 + 2 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0389;
     $147 = $4 + 1310736 + ($134 + 3 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($$2394 | 0)) HEAP32[$147 >> 2] = $$2394;
     HEAP32[$4 + 1310736 + ($134 + 6 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $101 = HEAP32[$63 >> 2] | 0;
    $104 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($101 | 0) > ($104 | 0)) {
     HEAP16[$$3 >> 1] = $104;
     $$2383 = $19;
     $$2387 = 0;
     while (1) {
      if (($$2387 | 0) >= ($$1398 | 0)) {
       $119 = $104;
       break L59;
      }
      if ((HEAP32[$$2383 >> 2] | 0) == ($101 | 0)) HEAP32[$$2383 >> 2] = $104;
      $$2383 = $$2383 + 4 | 0;
      $$2387 = $$2387 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $101;
     if (($101 | 0) < ($104 | 0)) {
      $$3384 = $19;
      $$3388 = 0;
      while (1) {
       if (($$3388 | 0) >= ($$1398 | 0)) {
        $119 = $101;
        break L59;
       }
       if ((HEAP32[$$3384 >> 2] | 0) == ($104 | 0)) HEAP32[$$3384 >> 2] = $101;
       $$3384 = $$3384 + 4 | 0;
       $$3388 = $$3388 + 1 | 0;
      }
     } else $119 = $101;
    } while (0);
    $121 = ($119 << 16 >> 16) * 7 | 0;
    $123 = $4 + 1310736 + ($121 + -7 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + 1;
    $127 = $4 + 1310736 + ($121 + -6 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $$2394;
    $131 = $4 + 1310736 + ($121 + -5 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $$0389;
    $$3400 = $$1398;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1380 = $$1380 + 1 | 0;
   $$1398 = $$3400;
   $$2394 = $$2394 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0374 = $$1 + 4 | 0;
  $$0379 = $$1380 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
  $$0397 = $$1398;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $217 = $4 + 12 | 0;
  $$1390 = 1;
  $$3395 = 1;
  $$4 = $19;
  while (1) {
   if (($$3395 | 0) > ($$0397 | 0)) break;
   $219 = HEAP32[$$4 >> 2] | 0;
   if (($219 | 0) == ($$3395 | 0)) {
    $$2391 = $$1390 + 1 | 0;
    $225 = $$1390;
   } else {
    $$2391 = $$1390;
    $225 = HEAP32[$4 + 1179664 + ($219 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $225;
   $$1390 = $$2391;
   $$3395 = $$3395 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $228 = $4 + 8 | 0;
  $229 = $$1390 + -1 | 0;
  HEAP32[$228 >> 2] = $229;
  if (!$229) $$0 = 0; else {
   _memset($217 | 0, 0, $229 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $229 << 4 | 0) | 0;
   $$4396 = 0;
   $235 = $229;
   while (1) {
    if (($$4396 | 0) >= ($235 | 0)) {
     $$5 = 0;
     break;
    }
    $236 = $$4396 << 2;
    HEAP32[$4 + 131084 + ($236 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($236 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($236 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($236 | 3) << 2) >> 2] = 0;
    $$4396 = $$4396 + 1 | 0;
    $235 = HEAP32[$228 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0397 | 0)) {
     $$6 = 0;
     break;
    }
    $248 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $249 = $$5 * 7 | 0;
    $252 = $4 + 12 + ($248 << 2) | 0;
    HEAP32[$252 >> 2] = (HEAP32[$252 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($249 << 2) >> 2] | 0);
    $259 = $248 << 1;
    $260 = $4 + 655376 + ($259 << 3) | 0;
    HEAPF64[$260 >> 3] = +HEAPF64[$260 >> 3] + +(HEAP32[$4 + 1310736 + ($249 + 1 << 2) >> 2] | 0);
    $268 = $4 + 655376 + (($259 | 1) << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$4 + 1310736 + ($249 + 2 << 2) >> 2] | 0);
    $271 = $248 << 2;
    $272 = $4 + 131084 + ($271 << 2) | 0;
    $276 = HEAP32[$4 + 1310736 + ($249 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$272 >> 2] | 0) > ($276 | 0)) HEAP32[$272 >> 2] = $276;
    $279 = $4 + 131084 + (($271 | 1) << 2) | 0;
    $283 = HEAP32[$4 + 1310736 + ($249 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$279 >> 2] | 0) < ($283 | 0)) HEAP32[$279 >> 2] = $283;
    $286 = $4 + 131084 + (($271 | 2) << 2) | 0;
    $290 = HEAP32[$4 + 1310736 + ($249 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $4 + 131084 + (($271 | 3) << 2) | 0;
    $297 = HEAP32[$4 + 1310736 + ($249 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$228 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $302 = $4 + 12 + ($$6 << 2) | 0;
    $305 = $$6 << 1;
    $306 = $4 + 655376 + ($305 << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $312 = $4 + 655376 + (($305 | 1) << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWRC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0374 = 0, $$0375 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0385 = 0, $$0389 = 0, $$0392 = 0, $$0397 = 0, $$1 = 0, $$1376 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1386 = 0, $$1390 = 0, $$1393 = 0, $$1398 = 0, $$2 = 0, $$2383 = 0, $$2387 = 0, $$2391 = 0, $$2394 = 0, $$2399 = 0, $$3 = 0, $$3384 = 0, $$3388 = 0, $$3395 = 0, $$3400 = 0, $$4 = 0, $$4396 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $103 = 0, $118 = 0, $120 = 0, $122 = 0, $126 = 0, $13 = 0, $130 = 0, $133 = 0, $134 = 0, $138 = 0, $142 = 0, $146 = 0, $151 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $169 = 0, $172 = 0, $174 = 0, $178 = 0, $182 = 0, $185 = 0, $189 = 0, $19 = 0, $194 = 0, $20 = 0, $216 = 0, $218 = 0, $224 = 0, $227 = 0, $228 = 0, $234 = 0, $235 = 0, $247 = 0, $248 = 0, $251 = 0, $258 = 0, $259 = 0, $26 = 0, $267 = 0, $270 = 0, $271 = 0, $275 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $301 = 0, $304 = 0, $305 = 0, $311 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $42 = 0, $46 = 0, $5 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $92 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0375 = $5;
 $$0377 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0392 = 0;
 while (1) {
  if (($$0392 | 0) >= ($1 | 0)) break;
  HEAP16[$$0377 >> 1] = 0;
  HEAP16[$$0375 >> 1] = 0;
  $$0375 = $$0375 + 2 | 0;
  $$0377 = $$0377 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1376 = $5;
 $$1378 = $5 + ($13 << 1) | 0;
 $$1393 = 0;
 while (1) {
  if (($$1393 | 0) >= ($2 | 0)) break;
  HEAP16[$$1378 >> 1] = 0;
  HEAP16[$$1376 >> 1] = 0;
  $$1376 = $$1376 + ($1 << 1) | 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1393 = $$1393 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $26 = 0 - $1 | 0;
 $$0374 = $0 + $20 | 0;
 $$0379 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$0389 = 1;
 $$0397 = 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0389 | 0) < ($6 | 0)) {
   $$1 = $$0374;
   $$1380 = $$0379;
   $$1398 = $$0397;
   $$2394 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2394 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP8[$$1380 >> 0] = -1;
    $32 = $$3 + ($26 << 1) | 0;
    $33 = HEAP16[$32 >> 1] | 0;
    if ($33 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $33;
     $36 = ($33 << 16 >> 16) * 7 | 0;
     $38 = $4 + 1310736 + ($36 + -7 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 1;
     $42 = $4 + 1310736 + ($36 + -6 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $$2394;
     $46 = $4 + 1310736 + ($36 + -5 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($36 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $52 = HEAP16[$32 + 2 >> 1] | 0;
    $55 = HEAP16[$32 + -2 >> 1] | 0;
    $57 = $55 << 16 >> 16 > 0;
    $58 = $$3 + -2 | 0;
    $59 = ($55 << 16 >> 16) + -1 | 0;
    if ($52 << 16 >> 16 <= 0) {
     if ($57) {
      HEAP16[$$3 >> 1] = $55;
      $151 = $59 * 7 | 0;
      $152 = $4 + 1310736 + ($151 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
      $156 = $4 + 1310736 + ($151 + 1 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $$2394;
      $160 = $4 + 1310736 + ($151 + 2 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $$0389;
      $164 = $4 + 1310736 + ($151 + 4 << 2) | 0;
      if ((HEAP32[$164 >> 2] | 0) < ($$2394 | 0)) HEAP32[$164 >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($151 + 6 << 2) >> 2] = $$0389;
      $$3400 = $$1398;
      break;
     }
     $169 = HEAP16[$58 >> 1] | 0;
     if ($169 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $169;
      $172 = ($169 << 16 >> 16) * 7 | 0;
      $174 = $4 + 1310736 + ($172 + -7 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + 1;
      $178 = $4 + 1310736 + ($172 + -6 << 2) | 0;
      HEAP32[$178 >> 2] = (HEAP32[$178 >> 2] | 0) + $$2394;
      $182 = $4 + 1310736 + ($172 + -5 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + $$0389;
      $185 = $172 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($185 << 2) >> 2] | 0) < ($$2394 | 0)) {
       $$2399 = $$1398;
       $$sink = $$2394;
       $$sink3 = $185;
      } else {
       $$3400 = $$1398;
       break;
      }
     } else {
      $189 = $$1398 + 1 | 0;
      if (($$1398 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $189;
      HEAP32[$4 + 1179664 + ($$1398 << 2) >> 2] = $189 << 16 >> 16;
      $194 = $$1398 * 7 | 0;
      HEAP32[$4 + 1310736 + ($194 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($194 + 1 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($194 + 2 << 2) >> 2] = $$0389;
      HEAP32[$4 + 1310736 + ($194 + 3 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($194 + 4 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($194 + 5 << 2) >> 2] = $$0389;
      $$2399 = $189;
      $$sink = $$0389;
      $$sink3 = $194 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3400 = $$2399;
     break;
    }
    $61 = ($52 << 16 >> 16) + -1 | 0;
    $62 = $4 + 1179664 + ($61 << 2) | 0;
    if ($57) {
     $63 = HEAP32[$62 >> 2] | 0;
     $65 = HEAP32[$4 + 1179664 + ($59 << 2) >> 2] | 0;
     L35 : do if (($63 | 0) > ($65 | 0)) {
      HEAP16[$$3 >> 1] = $65;
      $$0381 = $19;
      $$0385 = 0;
      while (1) {
       if (($$0385 | 0) >= ($$1398 | 0)) {
        $80 = $65;
        break L35;
       }
       if ((HEAP32[$$0381 >> 2] | 0) == ($63 | 0)) HEAP32[$$0381 >> 2] = $65;
       $$0381 = $$0381 + 4 | 0;
       $$0385 = $$0385 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $63;
      if (($63 | 0) < ($65 | 0)) {
       $$1382 = $19;
       $$1386 = 0;
       while (1) {
        if (($$1386 | 0) >= ($$1398 | 0)) {
         $80 = $63;
         break L35;
        }
        if ((HEAP32[$$1382 >> 2] | 0) == ($65 | 0)) HEAP32[$$1382 >> 2] = $63;
        $$1382 = $$1382 + 4 | 0;
        $$1386 = $$1386 + 1 | 0;
       }
      } else $80 = $63;
     } while (0);
     $82 = ($80 << 16 >> 16) * 7 | 0;
     $84 = $4 + 1310736 + ($82 + -7 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 1;
     $88 = $4 + 1310736 + ($82 + -6 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $$2394;
     $92 = $4 + 1310736 + ($82 + -5 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($82 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $97 = HEAP16[$58 >> 1] | 0;
    if ($97 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $52;
     $133 = $61 * 7 | 0;
     $134 = $4 + 1310736 + ($133 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
     $138 = $4 + 1310736 + ($133 + 1 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$2394;
     $142 = $4 + 1310736 + ($133 + 2 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$0389;
     $146 = $4 + 1310736 + ($133 + 3 << 2) | 0;
     if ((HEAP32[$146 >> 2] | 0) > ($$2394 | 0)) HEAP32[$146 >> 2] = $$2394;
     HEAP32[$4 + 1310736 + ($133 + 6 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $100 = HEAP32[$62 >> 2] | 0;
    $103 = HEAP32[$4 + 1179664 + (($97 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($100 | 0) > ($103 | 0)) {
     HEAP16[$$3 >> 1] = $103;
     $$2383 = $19;
     $$2387 = 0;
     while (1) {
      if (($$2387 | 0) >= ($$1398 | 0)) {
       $118 = $103;
       break L58;
      }
      if ((HEAP32[$$2383 >> 2] | 0) == ($100 | 0)) HEAP32[$$2383 >> 2] = $103;
      $$2383 = $$2383 + 4 | 0;
      $$2387 = $$2387 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $100;
     if (($100 | 0) < ($103 | 0)) {
      $$3384 = $19;
      $$3388 = 0;
      while (1) {
       if (($$3388 | 0) >= ($$1398 | 0)) {
        $118 = $100;
        break L58;
       }
       if ((HEAP32[$$3384 >> 2] | 0) == ($103 | 0)) HEAP32[$$3384 >> 2] = $100;
       $$3384 = $$3384 + 4 | 0;
       $$3388 = $$3388 + 1 | 0;
      }
     } else $118 = $100;
    } while (0);
    $120 = ($118 << 16 >> 16) * 7 | 0;
    $122 = $4 + 1310736 + ($120 + -7 << 2) | 0;
    HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + 1;
    $126 = $4 + 1310736 + ($120 + -6 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + $$2394;
    $130 = $4 + 1310736 + ($120 + -5 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $$0389;
    $$3400 = $$1398;
   } else {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1380 >> 0] = 0;
    $$3400 = $$1398;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1380 = $$1380 + 1 | 0;
   $$1398 = $$3400;
   $$2394 = $$2394 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0374 = $$1 + 2 | 0;
  $$0379 = $$1380 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
  $$0397 = $$1398;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $216 = $4 + 12 | 0;
  $$1390 = 1;
  $$3395 = 1;
  $$4 = $19;
  while (1) {
   if (($$3395 | 0) > ($$0397 | 0)) break;
   $218 = HEAP32[$$4 >> 2] | 0;
   if (($218 | 0) == ($$3395 | 0)) {
    $$2391 = $$1390 + 1 | 0;
    $224 = $$1390;
   } else {
    $$2391 = $$1390;
    $224 = HEAP32[$4 + 1179664 + ($218 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $224;
   $$1390 = $$2391;
   $$3395 = $$3395 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $227 = $4 + 8 | 0;
  $228 = $$1390 + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $$4396 = 0;
   $234 = $228;
   while (1) {
    if (($$4396 | 0) >= ($234 | 0)) {
     $$5 = 0;
     break;
    }
    $235 = $$4396 << 2;
    HEAP32[$4 + 131084 + ($235 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($235 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($235 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($235 | 3) << 2) >> 2] = 0;
    $$4396 = $$4396 + 1 | 0;
    $234 = HEAP32[$227 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0397 | 0)) {
     $$6 = 0;
     break;
    }
    $247 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $248 = $$5 * 7 | 0;
    $251 = $4 + 12 + ($247 << 2) | 0;
    HEAP32[$251 >> 2] = (HEAP32[$251 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($248 << 2) >> 2] | 0);
    $258 = $247 << 1;
    $259 = $4 + 655376 + ($258 << 3) | 0;
    HEAPF64[$259 >> 3] = +HEAPF64[$259 >> 3] + +(HEAP32[$4 + 1310736 + ($248 + 1 << 2) >> 2] | 0);
    $267 = $4 + 655376 + (($258 | 1) << 3) | 0;
    HEAPF64[$267 >> 3] = +HEAPF64[$267 >> 3] + +(HEAP32[$4 + 1310736 + ($248 + 2 << 2) >> 2] | 0);
    $270 = $247 << 2;
    $271 = $4 + 131084 + ($270 << 2) | 0;
    $275 = HEAP32[$4 + 1310736 + ($248 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$271 >> 2] | 0) > ($275 | 0)) HEAP32[$271 >> 2] = $275;
    $278 = $4 + 131084 + (($270 | 1) << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($248 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) < ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($270 | 2) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($248 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) > ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($270 | 3) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($248 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) < ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$227 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $301 = $4 + 12 + ($$6 << 2) | 0;
    $304 = $$6 << 1;
    $305 = $4 + 655376 + ($304 << 3) | 0;
    HEAPF64[$305 >> 3] = +HEAPF64[$305 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $311 = $4 + 655376 + (($304 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBRC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0374 = 0, $$0375 = 0, $$0377 = 0, $$0379 = 0, $$0381 = 0, $$0385 = 0, $$0389 = 0, $$0392 = 0, $$0397 = 0, $$1 = 0, $$1376 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1386 = 0, $$1390 = 0, $$1393 = 0, $$1398 = 0, $$2 = 0, $$2383 = 0, $$2387 = 0, $$2391 = 0, $$2394 = 0, $$2399 = 0, $$3 = 0, $$3384 = 0, $$3388 = 0, $$3395 = 0, $$3400 = 0, $$4 = 0, $$4396 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $103 = 0, $118 = 0, $120 = 0, $122 = 0, $126 = 0, $13 = 0, $130 = 0, $133 = 0, $134 = 0, $138 = 0, $142 = 0, $146 = 0, $151 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $169 = 0, $172 = 0, $174 = 0, $178 = 0, $182 = 0, $185 = 0, $189 = 0, $19 = 0, $194 = 0, $20 = 0, $216 = 0, $218 = 0, $224 = 0, $227 = 0, $228 = 0, $234 = 0, $235 = 0, $247 = 0, $248 = 0, $251 = 0, $258 = 0, $259 = 0, $26 = 0, $267 = 0, $270 = 0, $271 = 0, $275 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $301 = 0, $304 = 0, $305 = 0, $311 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $42 = 0, $46 = 0, $5 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $92 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0375 = $5;
 $$0377 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0392 = 0;
 while (1) {
  if (($$0392 | 0) >= ($1 | 0)) break;
  HEAP16[$$0377 >> 1] = 0;
  HEAP16[$$0375 >> 1] = 0;
  $$0375 = $$0375 + 2 | 0;
  $$0377 = $$0377 + 2 | 0;
  $$0392 = $$0392 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1376 = $5;
 $$1378 = $5 + ($13 << 1) | 0;
 $$1393 = 0;
 while (1) {
  if (($$1393 | 0) >= ($2 | 0)) break;
  HEAP16[$$1378 >> 1] = 0;
  HEAP16[$$1376 >> 1] = 0;
  $$1376 = $$1376 + ($1 << 1) | 0;
  $$1378 = $$1378 + ($1 << 1) | 0;
  $$1393 = $$1393 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $26 = 0 - $1 | 0;
 $$0374 = $0 + $20 | 0;
 $$0379 = (HEAP32[$4 + 4 >> 2] | 0) + $20 | 0;
 $$0389 = 1;
 $$0397 = 0;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0389 | 0) < ($6 | 0)) {
   $$1 = $$0374;
   $$1380 = $$0379;
   $$1398 = $$0397;
   $$2394 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2394 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    HEAP8[$$1380 >> 0] = 0;
    $$3400 = $$1398;
   } else {
    HEAP8[$$1380 >> 0] = -1;
    $32 = $$3 + ($26 << 1) | 0;
    $33 = HEAP16[$32 >> 1] | 0;
    if ($33 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $33;
     $36 = ($33 << 16 >> 16) * 7 | 0;
     $38 = $4 + 1310736 + ($36 + -7 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 1;
     $42 = $4 + 1310736 + ($36 + -6 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $$2394;
     $46 = $4 + 1310736 + ($36 + -5 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($36 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $52 = HEAP16[$32 + 2 >> 1] | 0;
    $55 = HEAP16[$32 + -2 >> 1] | 0;
    $57 = $55 << 16 >> 16 > 0;
    $58 = $$3 + -2 | 0;
    $59 = ($55 << 16 >> 16) + -1 | 0;
    if ($52 << 16 >> 16 <= 0) {
     if ($57) {
      HEAP16[$$3 >> 1] = $55;
      $151 = $59 * 7 | 0;
      $152 = $4 + 1310736 + ($151 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
      $156 = $4 + 1310736 + ($151 + 1 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $$2394;
      $160 = $4 + 1310736 + ($151 + 2 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $$0389;
      $164 = $4 + 1310736 + ($151 + 4 << 2) | 0;
      if ((HEAP32[$164 >> 2] | 0) < ($$2394 | 0)) HEAP32[$164 >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($151 + 6 << 2) >> 2] = $$0389;
      $$3400 = $$1398;
      break;
     }
     $169 = HEAP16[$58 >> 1] | 0;
     if ($169 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $169;
      $172 = ($169 << 16 >> 16) * 7 | 0;
      $174 = $4 + 1310736 + ($172 + -7 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + 1;
      $178 = $4 + 1310736 + ($172 + -6 << 2) | 0;
      HEAP32[$178 >> 2] = (HEAP32[$178 >> 2] | 0) + $$2394;
      $182 = $4 + 1310736 + ($172 + -5 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + $$0389;
      $185 = $172 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($185 << 2) >> 2] | 0) < ($$2394 | 0)) {
       $$2399 = $$1398;
       $$sink = $$2394;
       $$sink3 = $185;
      } else {
       $$3400 = $$1398;
       break;
      }
     } else {
      $189 = $$1398 + 1 | 0;
      if (($$1398 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $189;
      HEAP32[$4 + 1179664 + ($$1398 << 2) >> 2] = $189 << 16 >> 16;
      $194 = $$1398 * 7 | 0;
      HEAP32[$4 + 1310736 + ($194 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($194 + 1 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($194 + 2 << 2) >> 2] = $$0389;
      HEAP32[$4 + 1310736 + ($194 + 3 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($194 + 4 << 2) >> 2] = $$2394;
      HEAP32[$4 + 1310736 + ($194 + 5 << 2) >> 2] = $$0389;
      $$2399 = $189;
      $$sink = $$0389;
      $$sink3 = $194 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3400 = $$2399;
     break;
    }
    $61 = ($52 << 16 >> 16) + -1 | 0;
    $62 = $4 + 1179664 + ($61 << 2) | 0;
    if ($57) {
     $63 = HEAP32[$62 >> 2] | 0;
     $65 = HEAP32[$4 + 1179664 + ($59 << 2) >> 2] | 0;
     L36 : do if (($63 | 0) > ($65 | 0)) {
      HEAP16[$$3 >> 1] = $65;
      $$0381 = $19;
      $$0385 = 0;
      while (1) {
       if (($$0385 | 0) >= ($$1398 | 0)) {
        $80 = $65;
        break L36;
       }
       if ((HEAP32[$$0381 >> 2] | 0) == ($63 | 0)) HEAP32[$$0381 >> 2] = $65;
       $$0381 = $$0381 + 4 | 0;
       $$0385 = $$0385 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $63;
      if (($63 | 0) < ($65 | 0)) {
       $$1382 = $19;
       $$1386 = 0;
       while (1) {
        if (($$1386 | 0) >= ($$1398 | 0)) {
         $80 = $63;
         break L36;
        }
        if ((HEAP32[$$1382 >> 2] | 0) == ($65 | 0)) HEAP32[$$1382 >> 2] = $63;
        $$1382 = $$1382 + 4 | 0;
        $$1386 = $$1386 + 1 | 0;
       }
      } else $80 = $63;
     } while (0);
     $82 = ($80 << 16 >> 16) * 7 | 0;
     $84 = $4 + 1310736 + ($82 + -7 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 1;
     $88 = $4 + 1310736 + ($82 + -6 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $$2394;
     $92 = $4 + 1310736 + ($82 + -5 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $$0389;
     HEAP32[$4 + 1310736 + ($82 + -1 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $97 = HEAP16[$58 >> 1] | 0;
    if ($97 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $52;
     $133 = $61 * 7 | 0;
     $134 = $4 + 1310736 + ($133 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
     $138 = $4 + 1310736 + ($133 + 1 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$2394;
     $142 = $4 + 1310736 + ($133 + 2 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$0389;
     $146 = $4 + 1310736 + ($133 + 3 << 2) | 0;
     if ((HEAP32[$146 >> 2] | 0) > ($$2394 | 0)) HEAP32[$146 >> 2] = $$2394;
     HEAP32[$4 + 1310736 + ($133 + 6 << 2) >> 2] = $$0389;
     $$3400 = $$1398;
     break;
    }
    $100 = HEAP32[$62 >> 2] | 0;
    $103 = HEAP32[$4 + 1179664 + (($97 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($100 | 0) > ($103 | 0)) {
     HEAP16[$$3 >> 1] = $103;
     $$2383 = $19;
     $$2387 = 0;
     while (1) {
      if (($$2387 | 0) >= ($$1398 | 0)) {
       $118 = $103;
       break L59;
      }
      if ((HEAP32[$$2383 >> 2] | 0) == ($100 | 0)) HEAP32[$$2383 >> 2] = $103;
      $$2383 = $$2383 + 4 | 0;
      $$2387 = $$2387 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $100;
     if (($100 | 0) < ($103 | 0)) {
      $$3384 = $19;
      $$3388 = 0;
      while (1) {
       if (($$3388 | 0) >= ($$1398 | 0)) {
        $118 = $100;
        break L59;
       }
       if ((HEAP32[$$3384 >> 2] | 0) == ($103 | 0)) HEAP32[$$3384 >> 2] = $100;
       $$3384 = $$3384 + 4 | 0;
       $$3388 = $$3388 + 1 | 0;
      }
     } else $118 = $100;
    } while (0);
    $120 = ($118 << 16 >> 16) * 7 | 0;
    $122 = $4 + 1310736 + ($120 + -7 << 2) | 0;
    HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + 1;
    $126 = $4 + 1310736 + ($120 + -6 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + $$2394;
    $130 = $4 + 1310736 + ($120 + -5 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $$0389;
    $$3400 = $$1398;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1380 = $$1380 + 1 | 0;
   $$1398 = $$3400;
   $$2394 = $$2394 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0374 = $$1 + 2 | 0;
  $$0379 = $$1380 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
  $$0397 = $$1398;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $216 = $4 + 12 | 0;
  $$1390 = 1;
  $$3395 = 1;
  $$4 = $19;
  while (1) {
   if (($$3395 | 0) > ($$0397 | 0)) break;
   $218 = HEAP32[$$4 >> 2] | 0;
   if (($218 | 0) == ($$3395 | 0)) {
    $$2391 = $$1390 + 1 | 0;
    $224 = $$1390;
   } else {
    $$2391 = $$1390;
    $224 = HEAP32[$4 + 1179664 + ($218 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $224;
   $$1390 = $$2391;
   $$3395 = $$3395 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $227 = $4 + 8 | 0;
  $228 = $$1390 + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $$4396 = 0;
   $234 = $228;
   while (1) {
    if (($$4396 | 0) >= ($234 | 0)) {
     $$5 = 0;
     break;
    }
    $235 = $$4396 << 2;
    HEAP32[$4 + 131084 + ($235 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($235 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($235 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($235 | 3) << 2) >> 2] = 0;
    $$4396 = $$4396 + 1 | 0;
    $234 = HEAP32[$227 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0397 | 0)) {
     $$6 = 0;
     break;
    }
    $247 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $248 = $$5 * 7 | 0;
    $251 = $4 + 12 + ($247 << 2) | 0;
    HEAP32[$251 >> 2] = (HEAP32[$251 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($248 << 2) >> 2] | 0);
    $258 = $247 << 1;
    $259 = $4 + 655376 + ($258 << 3) | 0;
    HEAPF64[$259 >> 3] = +HEAPF64[$259 >> 3] + +(HEAP32[$4 + 1310736 + ($248 + 1 << 2) >> 2] | 0);
    $267 = $4 + 655376 + (($258 | 1) << 3) | 0;
    HEAPF64[$267 >> 3] = +HEAPF64[$267 >> 3] + +(HEAP32[$4 + 1310736 + ($248 + 2 << 2) >> 2] | 0);
    $270 = $247 << 2;
    $271 = $4 + 131084 + ($270 << 2) | 0;
    $275 = HEAP32[$4 + 1310736 + ($248 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$271 >> 2] | 0) > ($275 | 0)) HEAP32[$271 >> 2] = $275;
    $278 = $4 + 131084 + (($270 | 1) << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($248 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) < ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($270 | 2) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($248 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) > ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($270 | 3) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($248 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) < ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$227 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $301 = $4 + 12 + ($$6 << 2) | 0;
    $304 = $$6 << 1;
    $305 = $4 + 655376 + ($304 << 3) | 0;
    HEAPF64[$305 >> 3] = +HEAPF64[$305 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $311 = $4 + 655376 + (($304 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3CA5551($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0368 = 0, $$0369 = 0, $$0371 = 0, $$0373 = 0, $$0377 = 0, $$0381 = 0, $$0385 = 0, $$0388 = 0, $$1 = 0, $$1370 = 0, $$1372 = 0, $$1374 = 0, $$1378 = 0, $$1382 = 0, $$1386 = 0, $$1389 = 0, $$2 = 0, $$2375 = 0, $$2379 = 0, $$2383 = 0, $$2387 = 0, $$2390 = 0, $$3 = 0, $$3376 = 0, $$3380 = 0, $$3384 = 0, $$3391 = 0, $$4 = 0, $$4392 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $110 = 0, $113 = 0, $116 = 0, $13 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $146 = 0, $147 = 0, $151 = 0, $155 = 0, $159 = 0, $164 = 0, $165 = 0, $169 = 0, $173 = 0, $177 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $20 = 0, $202 = 0, $207 = 0, $21 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $25 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $29 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $35 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $59 = 0, $6 = 0, $65 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $93 = 0, $95 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0369 = $5;
 $$0371 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0388 = 0;
 while (1) {
  if (($$0388 | 0) >= ($1 | 0)) break;
  HEAP16[$$0371 >> 1] = 0;
  HEAP16[$$0369 >> 1] = 0;
  $$0369 = $$0369 + 2 | 0;
  $$0371 = $$0371 + 2 | 0;
  $$0388 = $$0388 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1370 = $5;
 $$1372 = $5 + ($14 << 1) | 0;
 $$1389 = 0;
 while (1) {
  if (($$1389 | 0) >= ($2 | 0)) break;
  HEAP16[$$1372 >> 1] = 0;
  HEAP16[$$1370 >> 1] = 0;
  $$1370 = $$1370 + ($1 << 1) | 0;
  $$1372 = $$1372 + ($1 << 1) | 0;
  $$1389 = $$1389 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0368 = $0 + ($21 << 1) | 0;
 $$0373 = 0;
 $$0385 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0385 | 0) < ($6 | 0)) {
   $$1 = $$0368;
   $$1374 = $$0373;
   $$2390 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2390 | 0) >= ($14 | 0)) break;
   $29 = HEAPU8[$$1 >> 0] | 0;
   $35 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($29 & 248) + 12 + ($29 << 5 & 224) + ($35 >>> 3 & 24) + ($35 << 2 & 248) | 0) > ($13 | 0)) {
    $45 = $$3 + ($25 << 1) | 0;
    $46 = HEAP16[$45 >> 1] | 0;
    if ($46 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $46;
     $49 = ($46 << 16 >> 16) * 7 | 0;
     $51 = $4 + 1310736 + ($49 + -7 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + 1;
     $55 = $4 + 1310736 + ($49 + -6 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $$2390;
     $59 = $4 + 1310736 + ($49 + -5 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$0385;
     HEAP32[$4 + 1310736 + ($49 + -1 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $65 = HEAP16[$45 + 2 >> 1] | 0;
    $68 = HEAP16[$45 + -2 >> 1] | 0;
    $70 = $68 << 16 >> 16 > 0;
    $71 = $$3 + -2 | 0;
    $72 = ($68 << 16 >> 16) + -1 | 0;
    if ($65 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$$3 >> 1] = $68;
      $164 = $72 * 7 | 0;
      $165 = $4 + 1310736 + ($164 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $4 + 1310736 + ($164 + 1 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $$2390;
      $173 = $4 + 1310736 + ($164 + 2 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$0385;
      $177 = $4 + 1310736 + ($164 + 4 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($$2390 | 0)) HEAP32[$177 >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($164 + 6 << 2) >> 2] = $$0385;
      $$3376 = $$1374;
      break;
     }
     $182 = HEAP16[$71 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $4 + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $4 + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$2390;
      $195 = $4 + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$0385;
      $198 = $185 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($198 << 2) >> 2] | 0) < ($$2390 | 0)) {
       $$2375 = $$1374;
       $$sink = $$2390;
       $$sink3 = $198;
      } else {
       $$3376 = $$1374;
       break;
      }
     } else {
      $202 = $$1374 + 1 | 0;
      if (($$1374 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $202;
      HEAP32[$4 + 1179664 + ($$1374 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $$1374 * 7 | 0;
      HEAP32[$4 + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($207 + 1 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 2 << 2) >> 2] = $$0385;
      HEAP32[$4 + 1310736 + ($207 + 3 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 4 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 5 << 2) >> 2] = $$0385;
      $$2375 = $202;
      $$sink = $$0385;
      $$sink3 = $207 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3376 = $$2375;
     break;
    }
    $74 = ($65 << 16 >> 16) + -1 | 0;
    $75 = $4 + 1179664 + ($74 << 2) | 0;
    if ($70) {
     $76 = HEAP32[$75 >> 2] | 0;
     $78 = HEAP32[$4 + 1179664 + ($72 << 2) >> 2] | 0;
     L35 : do if (($76 | 0) > ($78 | 0)) {
      HEAP16[$$3 >> 1] = $78;
      $$0377 = $20;
      $$0381 = 0;
      while (1) {
       if (($$0381 | 0) >= ($$1374 | 0)) {
        $93 = $78;
        break L35;
       }
       if ((HEAP32[$$0377 >> 2] | 0) == ($76 | 0)) HEAP32[$$0377 >> 2] = $78;
       $$0377 = $$0377 + 4 | 0;
       $$0381 = $$0381 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $76;
      if (($76 | 0) < ($78 | 0)) {
       $$1378 = $20;
       $$1382 = 0;
       while (1) {
        if (($$1382 | 0) >= ($$1374 | 0)) {
         $93 = $76;
         break L35;
        }
        if ((HEAP32[$$1378 >> 2] | 0) == ($78 | 0)) HEAP32[$$1378 >> 2] = $76;
        $$1378 = $$1378 + 4 | 0;
        $$1382 = $$1382 + 1 | 0;
       }
      } else $93 = $76;
     } while (0);
     $95 = ($93 << 16 >> 16) * 7 | 0;
     $97 = $4 + 1310736 + ($95 + -7 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + 1;
     $101 = $4 + 1310736 + ($95 + -6 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $$2390;
     $105 = $4 + 1310736 + ($95 + -5 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$0385;
     HEAP32[$4 + 1310736 + ($95 + -1 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $110 = HEAP16[$71 >> 1] | 0;
    if ($110 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $65;
     $146 = $74 * 7 | 0;
     $147 = $4 + 1310736 + ($146 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + 1;
     $151 = $4 + 1310736 + ($146 + 1 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $$2390;
     $155 = $4 + 1310736 + ($146 + 2 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$0385;
     $159 = $4 + 1310736 + ($146 + 3 << 2) | 0;
     if ((HEAP32[$159 >> 2] | 0) > ($$2390 | 0)) HEAP32[$159 >> 2] = $$2390;
     HEAP32[$4 + 1310736 + ($146 + 6 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $113 = HEAP32[$75 >> 2] | 0;
    $116 = HEAP32[$4 + 1179664 + (($110 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$$3 >> 1] = $116;
     $$2379 = $20;
     $$2383 = 0;
     while (1) {
      if (($$2383 | 0) >= ($$1374 | 0)) {
       $131 = $116;
       break L58;
      }
      if ((HEAP32[$$2379 >> 2] | 0) == ($113 | 0)) HEAP32[$$2379 >> 2] = $116;
      $$2379 = $$2379 + 4 | 0;
      $$2383 = $$2383 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $$3380 = $20;
      $$3384 = 0;
      while (1) {
       if (($$3384 | 0) >= ($$1374 | 0)) {
        $131 = $113;
        break L58;
       }
       if ((HEAP32[$$3380 >> 2] | 0) == ($116 | 0)) HEAP32[$$3380 >> 2] = $113;
       $$3380 = $$3380 + 4 | 0;
       $$3384 = $$3384 + 1 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $4 + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $4 + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2390;
    $143 = $4 + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0385;
    $$3376 = $$1374;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3376 = $$1374;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1374 = $$3376;
   $$2390 = $$2390 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0368 = $$1 + 4 | 0;
  $$0373 = $$1374;
  $$0385 = $$0385 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $4 + 12 | 0;
  $$1386 = 1;
  $$3391 = 1;
  $$4 = $20;
  while (1) {
   if (($$3391 | 0) > ($$0373 | 0)) break;
   $229 = HEAP32[$$4 >> 2] | 0;
   if (($229 | 0) == ($$3391 | 0)) {
    $$2387 = $$1386 + 1 | 0;
    $235 = $$1386;
   } else {
    $$2387 = $$1386;
    $235 = HEAP32[$4 + 1179664 + ($229 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $235;
   $$1386 = $$2387;
   $$3391 = $$3391 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $238 = $4 + 8 | 0;
  $239 = $$1386 + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $$4392 = 0;
   $245 = $239;
   while (1) {
    if (($$4392 | 0) >= ($245 | 0)) {
     $$5 = 0;
     break;
    }
    $246 = $$4392 << 2;
    HEAP32[$4 + 131084 + ($246 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($246 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $$4392 = $$4392 + 1 | 0;
    $245 = HEAP32[$238 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0373 | 0)) {
     $$6 = 0;
     break;
    }
    $258 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $$5 * 7 | 0;
    $262 = $4 + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $4 + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $4 + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $4 + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $4 + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$4 + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $4 + 12 + ($$6 << 2) | 0;
    $315 = $$6 << 1;
    $316 = $4 + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $4 + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3CA5551($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0368 = 0, $$0369 = 0, $$0371 = 0, $$0373 = 0, $$0377 = 0, $$0381 = 0, $$0385 = 0, $$0388 = 0, $$1 = 0, $$1370 = 0, $$1372 = 0, $$1374 = 0, $$1378 = 0, $$1382 = 0, $$1386 = 0, $$1389 = 0, $$2 = 0, $$2375 = 0, $$2379 = 0, $$2383 = 0, $$2387 = 0, $$2390 = 0, $$3 = 0, $$3376 = 0, $$3380 = 0, $$3384 = 0, $$3391 = 0, $$4 = 0, $$4392 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $110 = 0, $113 = 0, $116 = 0, $13 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $146 = 0, $147 = 0, $151 = 0, $155 = 0, $159 = 0, $164 = 0, $165 = 0, $169 = 0, $173 = 0, $177 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $20 = 0, $202 = 0, $207 = 0, $21 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $25 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $29 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $35 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $59 = 0, $6 = 0, $65 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $93 = 0, $95 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0369 = $5;
 $$0371 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0388 = 0;
 while (1) {
  if (($$0388 | 0) >= ($1 | 0)) break;
  HEAP16[$$0371 >> 1] = 0;
  HEAP16[$$0369 >> 1] = 0;
  $$0369 = $$0369 + 2 | 0;
  $$0371 = $$0371 + 2 | 0;
  $$0388 = $$0388 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1370 = $5;
 $$1372 = $5 + ($14 << 1) | 0;
 $$1389 = 0;
 while (1) {
  if (($$1389 | 0) >= ($2 | 0)) break;
  HEAP16[$$1372 >> 1] = 0;
  HEAP16[$$1370 >> 1] = 0;
  $$1370 = $$1370 + ($1 << 1) | 0;
  $$1372 = $$1372 + ($1 << 1) | 0;
  $$1389 = $$1389 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0368 = $0 + ($21 << 1) | 0;
 $$0373 = 0;
 $$0385 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0385 | 0) < ($6 | 0)) {
   $$1 = $$0368;
   $$1374 = $$0373;
   $$2390 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2390 | 0) >= ($14 | 0)) break;
   $29 = HEAPU8[$$1 >> 0] | 0;
   $35 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($29 & 248) + 12 + ($29 << 5 & 224) + ($35 >>> 3 & 24) + ($35 << 2 & 248) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3376 = $$1374;
   } else {
    $45 = $$3 + ($25 << 1) | 0;
    $46 = HEAP16[$45 >> 1] | 0;
    if ($46 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $46;
     $49 = ($46 << 16 >> 16) * 7 | 0;
     $51 = $4 + 1310736 + ($49 + -7 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + 1;
     $55 = $4 + 1310736 + ($49 + -6 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $$2390;
     $59 = $4 + 1310736 + ($49 + -5 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$0385;
     HEAP32[$4 + 1310736 + ($49 + -1 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $65 = HEAP16[$45 + 2 >> 1] | 0;
    $68 = HEAP16[$45 + -2 >> 1] | 0;
    $70 = $68 << 16 >> 16 > 0;
    $71 = $$3 + -2 | 0;
    $72 = ($68 << 16 >> 16) + -1 | 0;
    if ($65 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$$3 >> 1] = $68;
      $164 = $72 * 7 | 0;
      $165 = $4 + 1310736 + ($164 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $4 + 1310736 + ($164 + 1 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $$2390;
      $173 = $4 + 1310736 + ($164 + 2 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$0385;
      $177 = $4 + 1310736 + ($164 + 4 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($$2390 | 0)) HEAP32[$177 >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($164 + 6 << 2) >> 2] = $$0385;
      $$3376 = $$1374;
      break;
     }
     $182 = HEAP16[$71 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $4 + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $4 + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$2390;
      $195 = $4 + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$0385;
      $198 = $185 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($198 << 2) >> 2] | 0) < ($$2390 | 0)) {
       $$2375 = $$1374;
       $$sink = $$2390;
       $$sink3 = $198;
      } else {
       $$3376 = $$1374;
       break;
      }
     } else {
      $202 = $$1374 + 1 | 0;
      if (($$1374 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $202;
      HEAP32[$4 + 1179664 + ($$1374 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $$1374 * 7 | 0;
      HEAP32[$4 + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($207 + 1 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 2 << 2) >> 2] = $$0385;
      HEAP32[$4 + 1310736 + ($207 + 3 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 4 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 5 << 2) >> 2] = $$0385;
      $$2375 = $202;
      $$sink = $$0385;
      $$sink3 = $207 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3376 = $$2375;
     break;
    }
    $74 = ($65 << 16 >> 16) + -1 | 0;
    $75 = $4 + 1179664 + ($74 << 2) | 0;
    if ($70) {
     $76 = HEAP32[$75 >> 2] | 0;
     $78 = HEAP32[$4 + 1179664 + ($72 << 2) >> 2] | 0;
     L36 : do if (($76 | 0) > ($78 | 0)) {
      HEAP16[$$3 >> 1] = $78;
      $$0377 = $20;
      $$0381 = 0;
      while (1) {
       if (($$0381 | 0) >= ($$1374 | 0)) {
        $93 = $78;
        break L36;
       }
       if ((HEAP32[$$0377 >> 2] | 0) == ($76 | 0)) HEAP32[$$0377 >> 2] = $78;
       $$0377 = $$0377 + 4 | 0;
       $$0381 = $$0381 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $76;
      if (($76 | 0) < ($78 | 0)) {
       $$1378 = $20;
       $$1382 = 0;
       while (1) {
        if (($$1382 | 0) >= ($$1374 | 0)) {
         $93 = $76;
         break L36;
        }
        if ((HEAP32[$$1378 >> 2] | 0) == ($78 | 0)) HEAP32[$$1378 >> 2] = $76;
        $$1378 = $$1378 + 4 | 0;
        $$1382 = $$1382 + 1 | 0;
       }
      } else $93 = $76;
     } while (0);
     $95 = ($93 << 16 >> 16) * 7 | 0;
     $97 = $4 + 1310736 + ($95 + -7 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + 1;
     $101 = $4 + 1310736 + ($95 + -6 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $$2390;
     $105 = $4 + 1310736 + ($95 + -5 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$0385;
     HEAP32[$4 + 1310736 + ($95 + -1 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $110 = HEAP16[$71 >> 1] | 0;
    if ($110 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $65;
     $146 = $74 * 7 | 0;
     $147 = $4 + 1310736 + ($146 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + 1;
     $151 = $4 + 1310736 + ($146 + 1 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $$2390;
     $155 = $4 + 1310736 + ($146 + 2 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$0385;
     $159 = $4 + 1310736 + ($146 + 3 << 2) | 0;
     if ((HEAP32[$159 >> 2] | 0) > ($$2390 | 0)) HEAP32[$159 >> 2] = $$2390;
     HEAP32[$4 + 1310736 + ($146 + 6 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $113 = HEAP32[$75 >> 2] | 0;
    $116 = HEAP32[$4 + 1179664 + (($110 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$$3 >> 1] = $116;
     $$2379 = $20;
     $$2383 = 0;
     while (1) {
      if (($$2383 | 0) >= ($$1374 | 0)) {
       $131 = $116;
       break L59;
      }
      if ((HEAP32[$$2379 >> 2] | 0) == ($113 | 0)) HEAP32[$$2379 >> 2] = $116;
      $$2379 = $$2379 + 4 | 0;
      $$2383 = $$2383 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $$3380 = $20;
      $$3384 = 0;
      while (1) {
       if (($$3384 | 0) >= ($$1374 | 0)) {
        $131 = $113;
        break L59;
       }
       if ((HEAP32[$$3380 >> 2] | 0) == ($116 | 0)) HEAP32[$$3380 >> 2] = $113;
       $$3380 = $$3380 + 4 | 0;
       $$3384 = $$3384 + 1 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $4 + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $4 + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2390;
    $143 = $4 + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0385;
    $$3376 = $$1374;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1374 = $$3376;
   $$2390 = $$2390 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0368 = $$1 + 4 | 0;
  $$0373 = $$1374;
  $$0385 = $$0385 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $4 + 12 | 0;
  $$1386 = 1;
  $$3391 = 1;
  $$4 = $20;
  while (1) {
   if (($$3391 | 0) > ($$0373 | 0)) break;
   $229 = HEAP32[$$4 >> 2] | 0;
   if (($229 | 0) == ($$3391 | 0)) {
    $$2387 = $$1386 + 1 | 0;
    $235 = $$1386;
   } else {
    $$2387 = $$1386;
    $235 = HEAP32[$4 + 1179664 + ($229 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $235;
   $$1386 = $$2387;
   $$3391 = $$3391 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $238 = $4 + 8 | 0;
  $239 = $$1386 + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $$4392 = 0;
   $245 = $239;
   while (1) {
    if (($$4392 | 0) >= ($245 | 0)) {
     $$5 = 0;
     break;
    }
    $246 = $$4392 << 2;
    HEAP32[$4 + 131084 + ($246 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($246 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $$4392 = $$4392 + 1 | 0;
    $245 = HEAP32[$238 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0373 | 0)) {
     $$6 = 0;
     break;
    }
    $258 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $$5 * 7 | 0;
    $262 = $4 + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $4 + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $4 + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $4 + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $4 + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$4 + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $4 + 12 + ($$6 << 2) | 0;
    $315 = $$6 << 1;
    $316 = $4 + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $4 + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWIA3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0386 = 0, $$0389 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1387 = 0, $$1390 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2388 = 0, $$2391 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3385 = 0, $$3392 = 0, $$4 = 0, $$4393 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $109 = 0, $112 = 0, $115 = 0, $130 = 0, $132 = 0, $134 = 0, $138 = 0, $142 = 0, $145 = 0, $146 = 0, $15 = 0, $150 = 0, $154 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $168 = 0, $172 = 0, $176 = 0, $181 = 0, $184 = 0, $186 = 0, $190 = 0, $194 = 0, $197 = 0, $201 = 0, $206 = 0, $22 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $28 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $29 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $8 = 0, $92 = 0, $94 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0389 = 0;
 while (1) {
  if (($$0389 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($16 << 1) | 0;
 $$1390 = 0;
 while (1) {
  if (($$1390 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1390 = $$1390 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $28 = 0 - $5 | 0;
 $29 = $1 << 2;
 $$0369 = $0 + (($1 << 3) + 8) | 0;
 $$0374 = 0;
 $$0386 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0386 | 0) < ($8 | 0)) {
   $$1 = $$0369;
   $$1375 = $$0374;
   $$2391 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2391 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 2 >> 0] | 0) + (HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 + 3 >> 0] | 0) | 0) > ($15 | 0)) {
    $44 = $$3 + ($28 << 1) | 0;
    $45 = HEAP16[$44 >> 1] | 0;
    if ($45 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $45;
     $48 = ($45 << 16 >> 16) * 7 | 0;
     $50 = $4 + 1310736 + ($48 + -7 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
     $54 = $4 + 1310736 + ($48 + -6 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $$2391;
     $58 = $4 + 1310736 + ($48 + -5 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($48 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $64 = HEAP16[$44 + 2 >> 1] | 0;
    $67 = HEAP16[$44 + -2 >> 1] | 0;
    $69 = $67 << 16 >> 16 > 0;
    $70 = ($67 << 16 >> 16) + -1 | 0;
    $71 = $$3 + -2 | 0;
    if ($64 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$$3 >> 1] = $67;
      $163 = $70 * 7 | 0;
      $164 = $4 + 1310736 + ($163 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $4 + 1310736 + ($163 + 1 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $$2391;
      $172 = $4 + 1310736 + ($163 + 2 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$0386;
      $176 = $4 + 1310736 + ($163 + 4 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($$2391 | 0)) HEAP32[$176 >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($163 + 6 << 2) >> 2] = $$0386;
      $$3377 = $$1375;
      break;
     }
     $181 = HEAP16[$71 >> 1] | 0;
     if ($181 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $181;
      $184 = ($181 << 16 >> 16) * 7 | 0;
      $186 = $4 + 1310736 + ($184 + -7 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 1;
      $190 = $4 + 1310736 + ($184 + -6 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $$2391;
      $194 = $4 + 1310736 + ($184 + -5 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$0386;
      $197 = $184 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($197 << 2) >> 2] | 0) < ($$2391 | 0)) {
       $$2376 = $$1375;
       $$sink = $$2391;
       $$sink3 = $197;
      } else {
       $$3377 = $$1375;
       break;
      }
     } else {
      $201 = $$1375 + 1 | 0;
      if (($$1375 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $201;
      HEAP32[$4 + 1179664 + ($$1375 << 2) >> 2] = $201 << 16 >> 16;
      $206 = $$1375 * 7 | 0;
      HEAP32[$4 + 1310736 + ($206 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($206 + 1 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($206 + 2 << 2) >> 2] = $$0386;
      HEAP32[$4 + 1310736 + ($206 + 3 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($206 + 4 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($206 + 5 << 2) >> 2] = $$0386;
      $$2376 = $201;
      $$sink = $$0386;
      $$sink3 = $206 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3377 = $$2376;
     break;
    }
    $73 = ($64 << 16 >> 16) + -1 | 0;
    $74 = $4 + 1179664 + ($73 << 2) | 0;
    if ($69) {
     $75 = HEAP32[$74 >> 2] | 0;
     $77 = HEAP32[$4 + 1179664 + ($70 << 2) >> 2] | 0;
     L35 : do if (($75 | 0) > ($77 | 0)) {
      HEAP16[$$3 >> 1] = $77;
      $$0378 = $22;
      $$0382 = 0;
      while (1) {
       if (($$0382 | 0) >= ($$1375 | 0)) {
        $92 = $77;
        break L35;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($75 | 0)) HEAP32[$$0378 >> 2] = $77;
       $$0378 = $$0378 + 4 | 0;
       $$0382 = $$0382 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $75;
      if (($75 | 0) < ($77 | 0)) {
       $$1379 = $22;
       $$1383 = 0;
       while (1) {
        if (($$1383 | 0) >= ($$1375 | 0)) {
         $92 = $75;
         break L35;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($77 | 0)) HEAP32[$$1379 >> 2] = $75;
        $$1379 = $$1379 + 4 | 0;
        $$1383 = $$1383 + 1 | 0;
       }
      } else $92 = $75;
     } while (0);
     $94 = ($92 << 16 >> 16) * 7 | 0;
     $96 = $4 + 1310736 + ($94 + -7 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + 1;
     $100 = $4 + 1310736 + ($94 + -6 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $$2391;
     $104 = $4 + 1310736 + ($94 + -5 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($94 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $109 = HEAP16[$71 >> 1] | 0;
    if ($109 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $64;
     $145 = $73 * 7 | 0;
     $146 = $4 + 1310736 + ($145 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + 1;
     $150 = $4 + 1310736 + ($145 + 1 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$2391;
     $154 = $4 + 1310736 + ($145 + 2 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$0386;
     $158 = $4 + 1310736 + ($145 + 3 << 2) | 0;
     if ((HEAP32[$158 >> 2] | 0) > ($$2391 | 0)) HEAP32[$158 >> 2] = $$2391;
     HEAP32[$4 + 1310736 + ($145 + 6 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $112 = HEAP32[$74 >> 2] | 0;
    $115 = HEAP32[$4 + 1179664 + (($109 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($112 | 0) > ($115 | 0)) {
     HEAP16[$$3 >> 1] = $115;
     $$2380 = $22;
     $$2384 = 0;
     while (1) {
      if (($$2384 | 0) >= ($$1375 | 0)) {
       $130 = $115;
       break L58;
      }
      if ((HEAP32[$$2380 >> 2] | 0) == ($112 | 0)) HEAP32[$$2380 >> 2] = $115;
      $$2380 = $$2380 + 4 | 0;
      $$2384 = $$2384 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $112;
     if (($112 | 0) < ($115 | 0)) {
      $$3381 = $22;
      $$3385 = 0;
      while (1) {
       if (($$3385 | 0) >= ($$1375 | 0)) {
        $130 = $112;
        break L58;
       }
       if ((HEAP32[$$3381 >> 2] | 0) == ($115 | 0)) HEAP32[$$3381 >> 2] = $112;
       $$3381 = $$3381 + 4 | 0;
       $$3385 = $$3385 + 1 | 0;
      }
     } else $130 = $112;
    } while (0);
    $132 = ($130 << 16 >> 16) * 7 | 0;
    $134 = $4 + 1310736 + ($132 + -7 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
    $138 = $4 + 1310736 + ($132 + -6 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$2391;
    $142 = $4 + 1310736 + ($132 + -5 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$0386;
    $$3377 = $$1375;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3377 = $$1375;
   } while (0);
   $$1 = $$1 + 8 | 0;
   $$1375 = $$3377;
   $$2391 = $$2391 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $29 + 16 | 0;
  $$0374 = $$1375;
  $$0386 = $$0386 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $4 + 12 | 0;
  $$1387 = 1;
  $$3392 = 1;
  $$4 = $22;
  while (1) {
   if (($$3392 | 0) > ($$0374 | 0)) break;
   $229 = HEAP32[$$4 >> 2] | 0;
   if (($229 | 0) == ($$3392 | 0)) {
    $$2388 = $$1387 + 1 | 0;
    $235 = $$1387;
   } else {
    $$2388 = $$1387;
    $235 = HEAP32[$4 + 1179664 + ($229 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $235;
   $$1387 = $$2388;
   $$3392 = $$3392 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $238 = $4 + 8 | 0;
  $239 = $$1387 + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $$4393 = 0;
   $245 = $239;
   while (1) {
    if (($$4393 | 0) >= ($245 | 0)) {
     $$5 = 0;
     break;
    }
    $246 = $$4393 << 2;
    HEAP32[$4 + 131084 + ($246 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($246 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $$4393 = $$4393 + 1 | 0;
    $245 = HEAP32[$238 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0374 | 0)) {
     $$6 = 0;
     break;
    }
    $258 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $$5 * 7 | 0;
    $262 = $4 + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $4 + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $4 + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $4 + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $4 + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$4 + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $4 + 12 + ($$6 << 2) | 0;
    $315 = $$6 << 1;
    $316 = $4 + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $4 + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBIA3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0386 = 0, $$0389 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1387 = 0, $$1390 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2388 = 0, $$2391 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3385 = 0, $$3392 = 0, $$4 = 0, $$4393 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $104 = 0, $109 = 0, $112 = 0, $115 = 0, $130 = 0, $132 = 0, $134 = 0, $138 = 0, $142 = 0, $145 = 0, $146 = 0, $15 = 0, $150 = 0, $154 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $168 = 0, $172 = 0, $176 = 0, $181 = 0, $184 = 0, $186 = 0, $190 = 0, $194 = 0, $197 = 0, $201 = 0, $206 = 0, $22 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $28 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $29 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $8 = 0, $92 = 0, $94 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0389 = 0;
 while (1) {
  if (($$0389 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($16 << 1) | 0;
 $$1390 = 0;
 while (1) {
  if (($$1390 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1390 = $$1390 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $28 = 0 - $5 | 0;
 $29 = $1 << 2;
 $$0369 = $0 + (($1 << 3) + 8) | 0;
 $$0374 = 0;
 $$0386 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0386 | 0) < ($8 | 0)) {
   $$1 = $$0369;
   $$1375 = $$0374;
   $$2391 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2391 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 2 >> 0] | 0) + (HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 + 3 >> 0] | 0) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3377 = $$1375;
   } else {
    $44 = $$3 + ($28 << 1) | 0;
    $45 = HEAP16[$44 >> 1] | 0;
    if ($45 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $45;
     $48 = ($45 << 16 >> 16) * 7 | 0;
     $50 = $4 + 1310736 + ($48 + -7 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
     $54 = $4 + 1310736 + ($48 + -6 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $$2391;
     $58 = $4 + 1310736 + ($48 + -5 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($48 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $64 = HEAP16[$44 + 2 >> 1] | 0;
    $67 = HEAP16[$44 + -2 >> 1] | 0;
    $69 = $67 << 16 >> 16 > 0;
    $70 = ($67 << 16 >> 16) + -1 | 0;
    $71 = $$3 + -2 | 0;
    if ($64 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$$3 >> 1] = $67;
      $163 = $70 * 7 | 0;
      $164 = $4 + 1310736 + ($163 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $4 + 1310736 + ($163 + 1 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $$2391;
      $172 = $4 + 1310736 + ($163 + 2 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $$0386;
      $176 = $4 + 1310736 + ($163 + 4 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($$2391 | 0)) HEAP32[$176 >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($163 + 6 << 2) >> 2] = $$0386;
      $$3377 = $$1375;
      break;
     }
     $181 = HEAP16[$71 >> 1] | 0;
     if ($181 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $181;
      $184 = ($181 << 16 >> 16) * 7 | 0;
      $186 = $4 + 1310736 + ($184 + -7 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 1;
      $190 = $4 + 1310736 + ($184 + -6 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $$2391;
      $194 = $4 + 1310736 + ($184 + -5 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $$0386;
      $197 = $184 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($197 << 2) >> 2] | 0) < ($$2391 | 0)) {
       $$2376 = $$1375;
       $$sink = $$2391;
       $$sink3 = $197;
      } else {
       $$3377 = $$1375;
       break;
      }
     } else {
      $201 = $$1375 + 1 | 0;
      if (($$1375 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $201;
      HEAP32[$4 + 1179664 + ($$1375 << 2) >> 2] = $201 << 16 >> 16;
      $206 = $$1375 * 7 | 0;
      HEAP32[$4 + 1310736 + ($206 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($206 + 1 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($206 + 2 << 2) >> 2] = $$0386;
      HEAP32[$4 + 1310736 + ($206 + 3 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($206 + 4 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($206 + 5 << 2) >> 2] = $$0386;
      $$2376 = $201;
      $$sink = $$0386;
      $$sink3 = $206 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3377 = $$2376;
     break;
    }
    $73 = ($64 << 16 >> 16) + -1 | 0;
    $74 = $4 + 1179664 + ($73 << 2) | 0;
    if ($69) {
     $75 = HEAP32[$74 >> 2] | 0;
     $77 = HEAP32[$4 + 1179664 + ($70 << 2) >> 2] | 0;
     L36 : do if (($75 | 0) > ($77 | 0)) {
      HEAP16[$$3 >> 1] = $77;
      $$0378 = $22;
      $$0382 = 0;
      while (1) {
       if (($$0382 | 0) >= ($$1375 | 0)) {
        $92 = $77;
        break L36;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($75 | 0)) HEAP32[$$0378 >> 2] = $77;
       $$0378 = $$0378 + 4 | 0;
       $$0382 = $$0382 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $75;
      if (($75 | 0) < ($77 | 0)) {
       $$1379 = $22;
       $$1383 = 0;
       while (1) {
        if (($$1383 | 0) >= ($$1375 | 0)) {
         $92 = $75;
         break L36;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($77 | 0)) HEAP32[$$1379 >> 2] = $75;
        $$1379 = $$1379 + 4 | 0;
        $$1383 = $$1383 + 1 | 0;
       }
      } else $92 = $75;
     } while (0);
     $94 = ($92 << 16 >> 16) * 7 | 0;
     $96 = $4 + 1310736 + ($94 + -7 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + 1;
     $100 = $4 + 1310736 + ($94 + -6 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $$2391;
     $104 = $4 + 1310736 + ($94 + -5 << 2) | 0;
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($94 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $109 = HEAP16[$71 >> 1] | 0;
    if ($109 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $64;
     $145 = $73 * 7 | 0;
     $146 = $4 + 1310736 + ($145 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + 1;
     $150 = $4 + 1310736 + ($145 + 1 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$2391;
     $154 = $4 + 1310736 + ($145 + 2 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$0386;
     $158 = $4 + 1310736 + ($145 + 3 << 2) | 0;
     if ((HEAP32[$158 >> 2] | 0) > ($$2391 | 0)) HEAP32[$158 >> 2] = $$2391;
     HEAP32[$4 + 1310736 + ($145 + 6 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $112 = HEAP32[$74 >> 2] | 0;
    $115 = HEAP32[$4 + 1179664 + (($109 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($112 | 0) > ($115 | 0)) {
     HEAP16[$$3 >> 1] = $115;
     $$2380 = $22;
     $$2384 = 0;
     while (1) {
      if (($$2384 | 0) >= ($$1375 | 0)) {
       $130 = $115;
       break L59;
      }
      if ((HEAP32[$$2380 >> 2] | 0) == ($112 | 0)) HEAP32[$$2380 >> 2] = $115;
      $$2380 = $$2380 + 4 | 0;
      $$2384 = $$2384 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $112;
     if (($112 | 0) < ($115 | 0)) {
      $$3381 = $22;
      $$3385 = 0;
      while (1) {
       if (($$3385 | 0) >= ($$1375 | 0)) {
        $130 = $112;
        break L59;
       }
       if ((HEAP32[$$3381 >> 2] | 0) == ($115 | 0)) HEAP32[$$3381 >> 2] = $112;
       $$3381 = $$3381 + 4 | 0;
       $$3385 = $$3385 + 1 | 0;
      }
     } else $130 = $112;
    } while (0);
    $132 = ($130 << 16 >> 16) * 7 | 0;
    $134 = $4 + 1310736 + ($132 + -7 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
    $138 = $4 + 1310736 + ($132 + -6 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$2391;
    $142 = $4 + 1310736 + ($132 + -5 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $$0386;
    $$3377 = $$1375;
   } while (0);
   $$1 = $$1 + 8 | 0;
   $$1375 = $$3377;
   $$2391 = $$2391 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $29 + 16 | 0;
  $$0374 = $$1375;
  $$0386 = $$0386 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $4 + 12 | 0;
  $$1387 = 1;
  $$3392 = 1;
  $$4 = $22;
  while (1) {
   if (($$3392 | 0) > ($$0374 | 0)) break;
   $229 = HEAP32[$$4 >> 2] | 0;
   if (($229 | 0) == ($$3392 | 0)) {
    $$2388 = $$1387 + 1 | 0;
    $235 = $$1387;
   } else {
    $$2388 = $$1387;
    $235 = HEAP32[$4 + 1179664 + ($229 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $235;
   $$1387 = $$2388;
   $$3392 = $$3392 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $238 = $4 + 8 | 0;
  $239 = $$1387 + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $$4393 = 0;
   $245 = $239;
   while (1) {
    if (($$4393 | 0) >= ($245 | 0)) {
     $$5 = 0;
     break;
    }
    $246 = $$4393 << 2;
    HEAP32[$4 + 131084 + ($246 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($246 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $$4393 = $$4393 + 1 | 0;
    $245 = HEAP32[$238 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0374 | 0)) {
     $$6 = 0;
     break;
    }
    $258 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $$5 * 7 | 0;
    $262 = $4 + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $4 + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $4 + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $4 + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $4 + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$4 + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $4 + 12 + ($$6 << 2) | 0;
    $315 = $$6 << 1;
    $316 = $4 + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $4 + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3C565($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0368 = 0, $$0369 = 0, $$0371 = 0, $$0373 = 0, $$0377 = 0, $$0381 = 0, $$0385 = 0, $$0388 = 0, $$1 = 0, $$1370 = 0, $$1372 = 0, $$1374 = 0, $$1378 = 0, $$1382 = 0, $$1386 = 0, $$1389 = 0, $$2 = 0, $$2375 = 0, $$2379 = 0, $$2383 = 0, $$2387 = 0, $$2390 = 0, $$3 = 0, $$3376 = 0, $$3380 = 0, $$3384 = 0, $$3391 = 0, $$4 = 0, $$4392 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $110 = 0, $113 = 0, $116 = 0, $13 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $146 = 0, $147 = 0, $151 = 0, $155 = 0, $159 = 0, $164 = 0, $165 = 0, $169 = 0, $173 = 0, $177 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $20 = 0, $202 = 0, $207 = 0, $21 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $25 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $29 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $35 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $59 = 0, $6 = 0, $65 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $93 = 0, $95 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0369 = $5;
 $$0371 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0388 = 0;
 while (1) {
  if (($$0388 | 0) >= ($1 | 0)) break;
  HEAP16[$$0371 >> 1] = 0;
  HEAP16[$$0369 >> 1] = 0;
  $$0369 = $$0369 + 2 | 0;
  $$0371 = $$0371 + 2 | 0;
  $$0388 = $$0388 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1370 = $5;
 $$1372 = $5 + ($14 << 1) | 0;
 $$1389 = 0;
 while (1) {
  if (($$1389 | 0) >= ($2 | 0)) break;
  HEAP16[$$1372 >> 1] = 0;
  HEAP16[$$1370 >> 1] = 0;
  $$1370 = $$1370 + ($1 << 1) | 0;
  $$1372 = $$1372 + ($1 << 1) | 0;
  $$1389 = $$1389 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0368 = $0 + ($21 << 1) | 0;
 $$0373 = 0;
 $$0385 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0385 | 0) < ($6 | 0)) {
   $$1 = $$0368;
   $$1374 = $$0373;
   $$2390 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2390 | 0) >= ($14 | 0)) break;
   $29 = HEAPU8[$$1 >> 0] | 0;
   $35 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($29 & 248) + 10 + ($29 << 5 & 224) + ($35 >>> 3 & 28) + ($35 << 3 & 248) | 0) > ($13 | 0)) {
    $45 = $$3 + ($25 << 1) | 0;
    $46 = HEAP16[$45 >> 1] | 0;
    if ($46 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $46;
     $49 = ($46 << 16 >> 16) * 7 | 0;
     $51 = $4 + 1310736 + ($49 + -7 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + 1;
     $55 = $4 + 1310736 + ($49 + -6 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $$2390;
     $59 = $4 + 1310736 + ($49 + -5 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$0385;
     HEAP32[$4 + 1310736 + ($49 + -1 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $65 = HEAP16[$45 + 2 >> 1] | 0;
    $68 = HEAP16[$45 + -2 >> 1] | 0;
    $70 = $68 << 16 >> 16 > 0;
    $71 = $$3 + -2 | 0;
    $72 = ($68 << 16 >> 16) + -1 | 0;
    if ($65 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$$3 >> 1] = $68;
      $164 = $72 * 7 | 0;
      $165 = $4 + 1310736 + ($164 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $4 + 1310736 + ($164 + 1 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $$2390;
      $173 = $4 + 1310736 + ($164 + 2 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$0385;
      $177 = $4 + 1310736 + ($164 + 4 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($$2390 | 0)) HEAP32[$177 >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($164 + 6 << 2) >> 2] = $$0385;
      $$3376 = $$1374;
      break;
     }
     $182 = HEAP16[$71 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $4 + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $4 + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$2390;
      $195 = $4 + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$0385;
      $198 = $185 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($198 << 2) >> 2] | 0) < ($$2390 | 0)) {
       $$2375 = $$1374;
       $$sink = $$2390;
       $$sink3 = $198;
      } else {
       $$3376 = $$1374;
       break;
      }
     } else {
      $202 = $$1374 + 1 | 0;
      if (($$1374 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $202;
      HEAP32[$4 + 1179664 + ($$1374 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $$1374 * 7 | 0;
      HEAP32[$4 + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($207 + 1 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 2 << 2) >> 2] = $$0385;
      HEAP32[$4 + 1310736 + ($207 + 3 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 4 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 5 << 2) >> 2] = $$0385;
      $$2375 = $202;
      $$sink = $$0385;
      $$sink3 = $207 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3376 = $$2375;
     break;
    }
    $74 = ($65 << 16 >> 16) + -1 | 0;
    $75 = $4 + 1179664 + ($74 << 2) | 0;
    if ($70) {
     $76 = HEAP32[$75 >> 2] | 0;
     $78 = HEAP32[$4 + 1179664 + ($72 << 2) >> 2] | 0;
     L35 : do if (($76 | 0) > ($78 | 0)) {
      HEAP16[$$3 >> 1] = $78;
      $$0377 = $20;
      $$0381 = 0;
      while (1) {
       if (($$0381 | 0) >= ($$1374 | 0)) {
        $93 = $78;
        break L35;
       }
       if ((HEAP32[$$0377 >> 2] | 0) == ($76 | 0)) HEAP32[$$0377 >> 2] = $78;
       $$0377 = $$0377 + 4 | 0;
       $$0381 = $$0381 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $76;
      if (($76 | 0) < ($78 | 0)) {
       $$1378 = $20;
       $$1382 = 0;
       while (1) {
        if (($$1382 | 0) >= ($$1374 | 0)) {
         $93 = $76;
         break L35;
        }
        if ((HEAP32[$$1378 >> 2] | 0) == ($78 | 0)) HEAP32[$$1378 >> 2] = $76;
        $$1378 = $$1378 + 4 | 0;
        $$1382 = $$1382 + 1 | 0;
       }
      } else $93 = $76;
     } while (0);
     $95 = ($93 << 16 >> 16) * 7 | 0;
     $97 = $4 + 1310736 + ($95 + -7 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + 1;
     $101 = $4 + 1310736 + ($95 + -6 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $$2390;
     $105 = $4 + 1310736 + ($95 + -5 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$0385;
     HEAP32[$4 + 1310736 + ($95 + -1 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $110 = HEAP16[$71 >> 1] | 0;
    if ($110 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $65;
     $146 = $74 * 7 | 0;
     $147 = $4 + 1310736 + ($146 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + 1;
     $151 = $4 + 1310736 + ($146 + 1 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $$2390;
     $155 = $4 + 1310736 + ($146 + 2 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$0385;
     $159 = $4 + 1310736 + ($146 + 3 << 2) | 0;
     if ((HEAP32[$159 >> 2] | 0) > ($$2390 | 0)) HEAP32[$159 >> 2] = $$2390;
     HEAP32[$4 + 1310736 + ($146 + 6 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $113 = HEAP32[$75 >> 2] | 0;
    $116 = HEAP32[$4 + 1179664 + (($110 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$$3 >> 1] = $116;
     $$2379 = $20;
     $$2383 = 0;
     while (1) {
      if (($$2383 | 0) >= ($$1374 | 0)) {
       $131 = $116;
       break L58;
      }
      if ((HEAP32[$$2379 >> 2] | 0) == ($113 | 0)) HEAP32[$$2379 >> 2] = $116;
      $$2379 = $$2379 + 4 | 0;
      $$2383 = $$2383 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $$3380 = $20;
      $$3384 = 0;
      while (1) {
       if (($$3384 | 0) >= ($$1374 | 0)) {
        $131 = $113;
        break L58;
       }
       if ((HEAP32[$$3380 >> 2] | 0) == ($116 | 0)) HEAP32[$$3380 >> 2] = $113;
       $$3380 = $$3380 + 4 | 0;
       $$3384 = $$3384 + 1 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $4 + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $4 + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2390;
    $143 = $4 + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0385;
    $$3376 = $$1374;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3376 = $$1374;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1374 = $$3376;
   $$2390 = $$2390 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0368 = $$1 + 4 | 0;
  $$0373 = $$1374;
  $$0385 = $$0385 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $4 + 12 | 0;
  $$1386 = 1;
  $$3391 = 1;
  $$4 = $20;
  while (1) {
   if (($$3391 | 0) > ($$0373 | 0)) break;
   $229 = HEAP32[$$4 >> 2] | 0;
   if (($229 | 0) == ($$3391 | 0)) {
    $$2387 = $$1386 + 1 | 0;
    $235 = $$1386;
   } else {
    $$2387 = $$1386;
    $235 = HEAP32[$4 + 1179664 + ($229 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $235;
   $$1386 = $$2387;
   $$3391 = $$3391 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $238 = $4 + 8 | 0;
  $239 = $$1386 + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $$4392 = 0;
   $245 = $239;
   while (1) {
    if (($$4392 | 0) >= ($245 | 0)) {
     $$5 = 0;
     break;
    }
    $246 = $$4392 << 2;
    HEAP32[$4 + 131084 + ($246 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($246 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $$4392 = $$4392 + 1 | 0;
    $245 = HEAP32[$238 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0373 | 0)) {
     $$6 = 0;
     break;
    }
    $258 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $$5 * 7 | 0;
    $262 = $4 + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $4 + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $4 + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $4 + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $4 + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$4 + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $4 + 12 + ($$6 << 2) | 0;
    $315 = $$6 << 1;
    $316 = $4 + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $4 + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3C565($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0368 = 0, $$0369 = 0, $$0371 = 0, $$0373 = 0, $$0377 = 0, $$0381 = 0, $$0385 = 0, $$0388 = 0, $$1 = 0, $$1370 = 0, $$1372 = 0, $$1374 = 0, $$1378 = 0, $$1382 = 0, $$1386 = 0, $$1389 = 0, $$2 = 0, $$2375 = 0, $$2379 = 0, $$2383 = 0, $$2387 = 0, $$2390 = 0, $$3 = 0, $$3376 = 0, $$3380 = 0, $$3384 = 0, $$3391 = 0, $$4 = 0, $$4392 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $105 = 0, $110 = 0, $113 = 0, $116 = 0, $13 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $146 = 0, $147 = 0, $151 = 0, $155 = 0, $159 = 0, $164 = 0, $165 = 0, $169 = 0, $173 = 0, $177 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $20 = 0, $202 = 0, $207 = 0, $21 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $25 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $29 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $35 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $59 = 0, $6 = 0, $65 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $93 = 0, $95 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0369 = $5;
 $$0371 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0388 = 0;
 while (1) {
  if (($$0388 | 0) >= ($1 | 0)) break;
  HEAP16[$$0371 >> 1] = 0;
  HEAP16[$$0369 >> 1] = 0;
  $$0369 = $$0369 + 2 | 0;
  $$0371 = $$0371 + 2 | 0;
  $$0388 = $$0388 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1370 = $5;
 $$1372 = $5 + ($14 << 1) | 0;
 $$1389 = 0;
 while (1) {
  if (($$1389 | 0) >= ($2 | 0)) break;
  HEAP16[$$1372 >> 1] = 0;
  HEAP16[$$1370 >> 1] = 0;
  $$1370 = $$1370 + ($1 << 1) | 0;
  $$1372 = $$1372 + ($1 << 1) | 0;
  $$1389 = $$1389 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0368 = $0 + ($21 << 1) | 0;
 $$0373 = 0;
 $$0385 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0385 | 0) < ($6 | 0)) {
   $$1 = $$0368;
   $$1374 = $$0373;
   $$2390 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2390 | 0) >= ($14 | 0)) break;
   $29 = HEAPU8[$$1 >> 0] | 0;
   $35 = HEAPU8[$$1 + 1 >> 0] | 0;
   do if ((($29 & 248) + 10 + ($29 << 5 & 224) + ($35 >>> 3 & 28) + ($35 << 3 & 248) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3376 = $$1374;
   } else {
    $45 = $$3 + ($25 << 1) | 0;
    $46 = HEAP16[$45 >> 1] | 0;
    if ($46 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $46;
     $49 = ($46 << 16 >> 16) * 7 | 0;
     $51 = $4 + 1310736 + ($49 + -7 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + 1;
     $55 = $4 + 1310736 + ($49 + -6 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $$2390;
     $59 = $4 + 1310736 + ($49 + -5 << 2) | 0;
     HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + $$0385;
     HEAP32[$4 + 1310736 + ($49 + -1 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $65 = HEAP16[$45 + 2 >> 1] | 0;
    $68 = HEAP16[$45 + -2 >> 1] | 0;
    $70 = $68 << 16 >> 16 > 0;
    $71 = $$3 + -2 | 0;
    $72 = ($68 << 16 >> 16) + -1 | 0;
    if ($65 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$$3 >> 1] = $68;
      $164 = $72 * 7 | 0;
      $165 = $4 + 1310736 + ($164 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $4 + 1310736 + ($164 + 1 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $$2390;
      $173 = $4 + 1310736 + ($164 + 2 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $$0385;
      $177 = $4 + 1310736 + ($164 + 4 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($$2390 | 0)) HEAP32[$177 >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($164 + 6 << 2) >> 2] = $$0385;
      $$3376 = $$1374;
      break;
     }
     $182 = HEAP16[$71 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $4 + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $4 + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$2390;
      $195 = $4 + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $$0385;
      $198 = $185 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($198 << 2) >> 2] | 0) < ($$2390 | 0)) {
       $$2375 = $$1374;
       $$sink = $$2390;
       $$sink3 = $198;
      } else {
       $$3376 = $$1374;
       break;
      }
     } else {
      $202 = $$1374 + 1 | 0;
      if (($$1374 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $202;
      HEAP32[$4 + 1179664 + ($$1374 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $$1374 * 7 | 0;
      HEAP32[$4 + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($207 + 1 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 2 << 2) >> 2] = $$0385;
      HEAP32[$4 + 1310736 + ($207 + 3 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 4 << 2) >> 2] = $$2390;
      HEAP32[$4 + 1310736 + ($207 + 5 << 2) >> 2] = $$0385;
      $$2375 = $202;
      $$sink = $$0385;
      $$sink3 = $207 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3376 = $$2375;
     break;
    }
    $74 = ($65 << 16 >> 16) + -1 | 0;
    $75 = $4 + 1179664 + ($74 << 2) | 0;
    if ($70) {
     $76 = HEAP32[$75 >> 2] | 0;
     $78 = HEAP32[$4 + 1179664 + ($72 << 2) >> 2] | 0;
     L36 : do if (($76 | 0) > ($78 | 0)) {
      HEAP16[$$3 >> 1] = $78;
      $$0377 = $20;
      $$0381 = 0;
      while (1) {
       if (($$0381 | 0) >= ($$1374 | 0)) {
        $93 = $78;
        break L36;
       }
       if ((HEAP32[$$0377 >> 2] | 0) == ($76 | 0)) HEAP32[$$0377 >> 2] = $78;
       $$0377 = $$0377 + 4 | 0;
       $$0381 = $$0381 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $76;
      if (($76 | 0) < ($78 | 0)) {
       $$1378 = $20;
       $$1382 = 0;
       while (1) {
        if (($$1382 | 0) >= ($$1374 | 0)) {
         $93 = $76;
         break L36;
        }
        if ((HEAP32[$$1378 >> 2] | 0) == ($78 | 0)) HEAP32[$$1378 >> 2] = $76;
        $$1378 = $$1378 + 4 | 0;
        $$1382 = $$1382 + 1 | 0;
       }
      } else $93 = $76;
     } while (0);
     $95 = ($93 << 16 >> 16) * 7 | 0;
     $97 = $4 + 1310736 + ($95 + -7 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + 1;
     $101 = $4 + 1310736 + ($95 + -6 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $$2390;
     $105 = $4 + 1310736 + ($95 + -5 << 2) | 0;
     HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + $$0385;
     HEAP32[$4 + 1310736 + ($95 + -1 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $110 = HEAP16[$71 >> 1] | 0;
    if ($110 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $65;
     $146 = $74 * 7 | 0;
     $147 = $4 + 1310736 + ($146 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + 1;
     $151 = $4 + 1310736 + ($146 + 1 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $$2390;
     $155 = $4 + 1310736 + ($146 + 2 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$0385;
     $159 = $4 + 1310736 + ($146 + 3 << 2) | 0;
     if ((HEAP32[$159 >> 2] | 0) > ($$2390 | 0)) HEAP32[$159 >> 2] = $$2390;
     HEAP32[$4 + 1310736 + ($146 + 6 << 2) >> 2] = $$0385;
     $$3376 = $$1374;
     break;
    }
    $113 = HEAP32[$75 >> 2] | 0;
    $116 = HEAP32[$4 + 1179664 + (($110 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$$3 >> 1] = $116;
     $$2379 = $20;
     $$2383 = 0;
     while (1) {
      if (($$2383 | 0) >= ($$1374 | 0)) {
       $131 = $116;
       break L59;
      }
      if ((HEAP32[$$2379 >> 2] | 0) == ($113 | 0)) HEAP32[$$2379 >> 2] = $116;
      $$2379 = $$2379 + 4 | 0;
      $$2383 = $$2383 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $$3380 = $20;
      $$3384 = 0;
      while (1) {
       if (($$3384 | 0) >= ($$1374 | 0)) {
        $131 = $113;
        break L59;
       }
       if ((HEAP32[$$3380 >> 2] | 0) == ($116 | 0)) HEAP32[$$3380 >> 2] = $113;
       $$3380 = $$3380 + 4 | 0;
       $$3384 = $$3384 + 1 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $4 + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $4 + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2390;
    $143 = $4 + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0385;
    $$3376 = $$1374;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1374 = $$3376;
   $$2390 = $$2390 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0368 = $$1 + 4 | 0;
  $$0373 = $$1374;
  $$0385 = $$0385 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $4 + 12 | 0;
  $$1386 = 1;
  $$3391 = 1;
  $$4 = $20;
  while (1) {
   if (($$3391 | 0) > ($$0373 | 0)) break;
   $229 = HEAP32[$$4 >> 2] | 0;
   if (($229 | 0) == ($$3391 | 0)) {
    $$2387 = $$1386 + 1 | 0;
    $235 = $$1386;
   } else {
    $$2387 = $$1386;
    $235 = HEAP32[$4 + 1179664 + ($229 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $235;
   $$1386 = $$2387;
   $$3391 = $$3391 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $238 = $4 + 8 | 0;
  $239 = $$1386 + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $$4392 = 0;
   $245 = $239;
   while (1) {
    if (($$4392 | 0) >= ($245 | 0)) {
     $$5 = 0;
     break;
    }
    $246 = $$4392 << 2;
    HEAP32[$4 + 131084 + ($246 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($246 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $$4392 = $$4392 + 1 | 0;
    $245 = HEAP32[$238 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0373 | 0)) {
     $$6 = 0;
     break;
    }
    $258 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $$5 * 7 | 0;
    $262 = $4 + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $4 + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $4 + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$4 + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $4 + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $4 + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$4 + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $4 + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$4 + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $4 + 12 + ($$6 << 2) | 0;
    $315 = $$6 << 1;
    $316 = $4 + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $4 + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0386 = 0, $$0389 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1387 = 0, $$1390 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2388 = 0, $$2391 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3385 = 0, $$3392 = 0, $$4 = 0, $$4393 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $108 = 0, $111 = 0, $114 = 0, $129 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $144 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $162 = 0, $163 = 0, $167 = 0, $171 = 0, $175 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $200 = 0, $205 = 0, $22 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $28 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $29 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0389 = 0;
 while (1) {
  if (($$0389 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($16 << 1) | 0;
 $$1390 = 0;
 while (1) {
  if (($$1390 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1390 = $$1390 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $28 = 0 - $5 | 0;
 $29 = $1 * 3 | 0;
 $$0369 = $0 + (($1 * 6 | 0) + 6) | 0;
 $$0374 = 0;
 $$0386 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0386 | 0) < ($8 | 0)) {
   $$1 = $$0369;
   $$1375 = $$0374;
   $$2391 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2391 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($15 | 0)) {
    $43 = $$3 + ($28 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $4 + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $4 + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$2391;
     $57 = $4 + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($47 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $66 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $66 << 16 >> 16 > 0;
    $69 = $$3 + -2 | 0;
    $70 = ($66 << 16 >> 16) + -1 | 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($68) {
      HEAP16[$$3 >> 1] = $66;
      $162 = $70 * 7 | 0;
      $163 = $4 + 1310736 + ($162 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $4 + 1310736 + ($162 + 1 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$2391;
      $171 = $4 + 1310736 + ($162 + 2 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $$0386;
      $175 = $4 + 1310736 + ($162 + 4 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($$2391 | 0)) HEAP32[$175 >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($162 + 6 << 2) >> 2] = $$0386;
      $$3377 = $$1375;
      break;
     }
     $180 = HEAP16[$69 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $4 + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $4 + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$2391;
      $193 = $4 + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $$0386;
      $196 = $183 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($196 << 2) >> 2] | 0) < ($$2391 | 0)) {
       $$2376 = $$1375;
       $$sink = $$2391;
       $$sink3 = $196;
      } else {
       $$3377 = $$1375;
       break;
      }
     } else {
      $200 = $$1375 + 1 | 0;
      if (($$1375 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $200;
      HEAP32[$4 + 1179664 + ($$1375 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $$1375 * 7 | 0;
      HEAP32[$4 + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($205 + 1 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 2 << 2) >> 2] = $$0386;
      HEAP32[$4 + 1310736 + ($205 + 3 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 4 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 5 << 2) >> 2] = $$0386;
      $$2376 = $200;
      $$sink = $$0386;
      $$sink3 = $205 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3377 = $$2376;
     break;
    }
    $72 = ($63 << 16 >> 16) + -1 | 0;
    $73 = $4 + 1179664 + ($72 << 2) | 0;
    if ($68) {
     $74 = HEAP32[$73 >> 2] | 0;
     $76 = HEAP32[$4 + 1179664 + ($70 << 2) >> 2] | 0;
     L35 : do if (($74 | 0) > ($76 | 0)) {
      HEAP16[$$3 >> 1] = $76;
      $$0378 = $22;
      $$0382 = 0;
      while (1) {
       if (($$0382 | 0) >= ($$1375 | 0)) {
        $91 = $76;
        break L35;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($74 | 0)) HEAP32[$$0378 >> 2] = $76;
       $$0378 = $$0378 + 4 | 0;
       $$0382 = $$0382 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $74;
      if (($74 | 0) < ($76 | 0)) {
       $$1379 = $22;
       $$1383 = 0;
       while (1) {
        if (($$1383 | 0) >= ($$1375 | 0)) {
         $91 = $74;
         break L35;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($76 | 0)) HEAP32[$$1379 >> 2] = $74;
        $$1379 = $$1379 + 4 | 0;
        $$1383 = $$1383 + 1 | 0;
       }
      } else $91 = $74;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $4 + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $4 + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$2391;
     $103 = $4 + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($93 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $108 = HEAP16[$69 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $63;
     $144 = $72 * 7 | 0;
     $145 = $4 + 1310736 + ($144 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $4 + 1310736 + ($144 + 1 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$2391;
     $153 = $4 + 1310736 + ($144 + 2 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$0386;
     $157 = $4 + 1310736 + ($144 + 3 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($$2391 | 0)) HEAP32[$157 >> 2] = $$2391;
     HEAP32[$4 + 1310736 + ($144 + 6 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $111 = HEAP32[$73 >> 2] | 0;
    $114 = HEAP32[$4 + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$$3 >> 1] = $114;
     $$2380 = $22;
     $$2384 = 0;
     while (1) {
      if (($$2384 | 0) >= ($$1375 | 0)) {
       $129 = $114;
       break L58;
      }
      if ((HEAP32[$$2380 >> 2] | 0) == ($111 | 0)) HEAP32[$$2380 >> 2] = $114;
      $$2380 = $$2380 + 4 | 0;
      $$2384 = $$2384 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $$3381 = $22;
      $$3385 = 0;
      while (1) {
       if (($$3385 | 0) >= ($$1375 | 0)) {
        $129 = $111;
        break L58;
       }
       if ((HEAP32[$$3381 >> 2] | 0) == ($114 | 0)) HEAP32[$$3381 >> 2] = $111;
       $$3381 = $$3381 + 4 | 0;
       $$3385 = $$3385 + 1 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $4 + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $4 + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$2391;
    $141 = $4 + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$0386;
    $$3377 = $$1375;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3377 = $$1375;
   } while (0);
   $$1 = $$1 + 6 | 0;
   $$1375 = $$3377;
   $$2391 = $$2391 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $29 + 12 | 0;
  $$0374 = $$1375;
  $$0386 = $$0386 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $4 + 12 | 0;
  $$1387 = 1;
  $$3392 = 1;
  $$4 = $22;
  while (1) {
   if (($$3392 | 0) > ($$0374 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3392 | 0)) {
    $$2388 = $$1387 + 1 | 0;
    $234 = $$1387;
   } else {
    $$2388 = $$1387;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1387 = $$2388;
   $$3392 = $$3392 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1387 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4393 = 0;
   $244 = $238;
   while (1) {
    if (($$4393 | 0) >= ($244 | 0)) {
     $$5 = 0;
     break;
    }
    $245 = $$4393 << 2;
    HEAP32[$4 + 131084 + ($245 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($245 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $$4393 = $$4393 + 1 | 0;
    $244 = HEAP32[$237 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0374 | 0)) {
     $$6 = 0;
     break;
    }
    $257 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $$5 * 7 | 0;
    $261 = $4 + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $4 + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $4 + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $4 + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $4 + 12 + ($$6 << 2) | 0;
    $314 = $$6 << 1;
    $315 = $4 + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $4 + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0386 = 0, $$0389 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1387 = 0, $$1390 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2388 = 0, $$2391 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3385 = 0, $$3392 = 0, $$4 = 0, $$4393 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $108 = 0, $111 = 0, $114 = 0, $129 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $144 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $162 = 0, $163 = 0, $167 = 0, $171 = 0, $175 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $200 = 0, $205 = 0, $22 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $28 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $29 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0389 = 0;
 while (1) {
  if (($$0389 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($16 << 1) | 0;
 $$1390 = 0;
 while (1) {
  if (($$1390 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1390 = $$1390 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $28 = 0 - $5 | 0;
 $29 = $1 * 3 | 0;
 $$0369 = $0 + (($1 * 6 | 0) + 6) | 0;
 $$0374 = 0;
 $$0386 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0386 | 0) < ($8 | 0)) {
   $$1 = $$0369;
   $$1375 = $$0374;
   $$2391 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2391 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3377 = $$1375;
   } else {
    $43 = $$3 + ($28 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $4 + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $4 + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$2391;
     $57 = $4 + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($47 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $66 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $66 << 16 >> 16 > 0;
    $69 = $$3 + -2 | 0;
    $70 = ($66 << 16 >> 16) + -1 | 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($68) {
      HEAP16[$$3 >> 1] = $66;
      $162 = $70 * 7 | 0;
      $163 = $4 + 1310736 + ($162 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $4 + 1310736 + ($162 + 1 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$2391;
      $171 = $4 + 1310736 + ($162 + 2 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $$0386;
      $175 = $4 + 1310736 + ($162 + 4 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($$2391 | 0)) HEAP32[$175 >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($162 + 6 << 2) >> 2] = $$0386;
      $$3377 = $$1375;
      break;
     }
     $180 = HEAP16[$69 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $4 + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $4 + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$2391;
      $193 = $4 + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $$0386;
      $196 = $183 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($196 << 2) >> 2] | 0) < ($$2391 | 0)) {
       $$2376 = $$1375;
       $$sink = $$2391;
       $$sink3 = $196;
      } else {
       $$3377 = $$1375;
       break;
      }
     } else {
      $200 = $$1375 + 1 | 0;
      if (($$1375 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $200;
      HEAP32[$4 + 1179664 + ($$1375 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $$1375 * 7 | 0;
      HEAP32[$4 + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($205 + 1 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 2 << 2) >> 2] = $$0386;
      HEAP32[$4 + 1310736 + ($205 + 3 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 4 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 5 << 2) >> 2] = $$0386;
      $$2376 = $200;
      $$sink = $$0386;
      $$sink3 = $205 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3377 = $$2376;
     break;
    }
    $72 = ($63 << 16 >> 16) + -1 | 0;
    $73 = $4 + 1179664 + ($72 << 2) | 0;
    if ($68) {
     $74 = HEAP32[$73 >> 2] | 0;
     $76 = HEAP32[$4 + 1179664 + ($70 << 2) >> 2] | 0;
     L36 : do if (($74 | 0) > ($76 | 0)) {
      HEAP16[$$3 >> 1] = $76;
      $$0378 = $22;
      $$0382 = 0;
      while (1) {
       if (($$0382 | 0) >= ($$1375 | 0)) {
        $91 = $76;
        break L36;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($74 | 0)) HEAP32[$$0378 >> 2] = $76;
       $$0378 = $$0378 + 4 | 0;
       $$0382 = $$0382 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $74;
      if (($74 | 0) < ($76 | 0)) {
       $$1379 = $22;
       $$1383 = 0;
       while (1) {
        if (($$1383 | 0) >= ($$1375 | 0)) {
         $91 = $74;
         break L36;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($76 | 0)) HEAP32[$$1379 >> 2] = $74;
        $$1379 = $$1379 + 4 | 0;
        $$1383 = $$1383 + 1 | 0;
       }
      } else $91 = $74;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $4 + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $4 + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$2391;
     $103 = $4 + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($93 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $108 = HEAP16[$69 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $63;
     $144 = $72 * 7 | 0;
     $145 = $4 + 1310736 + ($144 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $4 + 1310736 + ($144 + 1 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$2391;
     $153 = $4 + 1310736 + ($144 + 2 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$0386;
     $157 = $4 + 1310736 + ($144 + 3 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($$2391 | 0)) HEAP32[$157 >> 2] = $$2391;
     HEAP32[$4 + 1310736 + ($144 + 6 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $111 = HEAP32[$73 >> 2] | 0;
    $114 = HEAP32[$4 + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$$3 >> 1] = $114;
     $$2380 = $22;
     $$2384 = 0;
     while (1) {
      if (($$2384 | 0) >= ($$1375 | 0)) {
       $129 = $114;
       break L59;
      }
      if ((HEAP32[$$2380 >> 2] | 0) == ($111 | 0)) HEAP32[$$2380 >> 2] = $114;
      $$2380 = $$2380 + 4 | 0;
      $$2384 = $$2384 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $$3381 = $22;
      $$3385 = 0;
      while (1) {
       if (($$3385 | 0) >= ($$1375 | 0)) {
        $129 = $111;
        break L59;
       }
       if ((HEAP32[$$3381 >> 2] | 0) == ($114 | 0)) HEAP32[$$3381 >> 2] = $111;
       $$3381 = $$3381 + 4 | 0;
       $$3385 = $$3385 + 1 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $4 + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $4 + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$2391;
    $141 = $4 + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$0386;
    $$3377 = $$1375;
   } while (0);
   $$1 = $$1 + 6 | 0;
   $$1375 = $$3377;
   $$2391 = $$2391 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $29 + 12 | 0;
  $$0374 = $$1375;
  $$0386 = $$0386 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $4 + 12 | 0;
  $$1387 = 1;
  $$3392 = 1;
  $$4 = $22;
  while (1) {
   if (($$3392 | 0) > ($$0374 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3392 | 0)) {
    $$2388 = $$1387 + 1 | 0;
    $234 = $$1387;
   } else {
    $$2388 = $$1387;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1387 = $$2388;
   $$3392 = $$3392 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1387 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4393 = 0;
   $244 = $238;
   while (1) {
    if (($$4393 | 0) >= ($244 | 0)) {
     $$5 = 0;
     break;
    }
    $245 = $$4393 << 2;
    HEAP32[$4 + 131084 + ($245 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($245 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $$4393 = $$4393 + 1 | 0;
    $244 = HEAP32[$237 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0374 | 0)) {
     $$6 = 0;
     break;
    }
    $257 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $$5 * 7 | 0;
    $261 = $4 + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $4 + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $4 + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $4 + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $4 + 12 + ($$6 << 2) | 0;
    $314 = $$6 << 1;
    $315 = $4 + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $4 + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3CA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0386 = 0, $$0389 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1387 = 0, $$1390 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2388 = 0, $$2391 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3385 = 0, $$3392 = 0, $$4 = 0, $$4393 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $108 = 0, $111 = 0, $114 = 0, $129 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $144 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $162 = 0, $163 = 0, $167 = 0, $171 = 0, $175 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $200 = 0, $205 = 0, $22 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $28 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $29 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0389 = 0;
 while (1) {
  if (($$0389 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($16 << 1) | 0;
 $$1390 = 0;
 while (1) {
  if (($$1390 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1390 = $$1390 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $28 = 0 - $5 | 0;
 $29 = $1 << 2;
 $$0369 = $0 + (($1 << 3) + 8) | 0;
 $$0374 = 0;
 $$0386 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0386 | 0) < ($8 | 0)) {
   $$1 = $$0369;
   $$1375 = $$0374;
   $$2391 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2391 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($15 | 0)) {
    $43 = $$3 + ($28 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $4 + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $4 + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$2391;
     $57 = $4 + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($47 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $66 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $66 << 16 >> 16 > 0;
    $69 = $$3 + -2 | 0;
    $70 = ($66 << 16 >> 16) + -1 | 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($68) {
      HEAP16[$$3 >> 1] = $66;
      $162 = $70 * 7 | 0;
      $163 = $4 + 1310736 + ($162 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $4 + 1310736 + ($162 + 1 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$2391;
      $171 = $4 + 1310736 + ($162 + 2 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $$0386;
      $175 = $4 + 1310736 + ($162 + 4 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($$2391 | 0)) HEAP32[$175 >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($162 + 6 << 2) >> 2] = $$0386;
      $$3377 = $$1375;
      break;
     }
     $180 = HEAP16[$69 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $4 + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $4 + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$2391;
      $193 = $4 + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $$0386;
      $196 = $183 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($196 << 2) >> 2] | 0) < ($$2391 | 0)) {
       $$2376 = $$1375;
       $$sink = $$2391;
       $$sink3 = $196;
      } else {
       $$3377 = $$1375;
       break;
      }
     } else {
      $200 = $$1375 + 1 | 0;
      if (($$1375 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $200;
      HEAP32[$4 + 1179664 + ($$1375 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $$1375 * 7 | 0;
      HEAP32[$4 + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($205 + 1 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 2 << 2) >> 2] = $$0386;
      HEAP32[$4 + 1310736 + ($205 + 3 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 4 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 5 << 2) >> 2] = $$0386;
      $$2376 = $200;
      $$sink = $$0386;
      $$sink3 = $205 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3377 = $$2376;
     break;
    }
    $72 = ($63 << 16 >> 16) + -1 | 0;
    $73 = $4 + 1179664 + ($72 << 2) | 0;
    if ($68) {
     $74 = HEAP32[$73 >> 2] | 0;
     $76 = HEAP32[$4 + 1179664 + ($70 << 2) >> 2] | 0;
     L35 : do if (($74 | 0) > ($76 | 0)) {
      HEAP16[$$3 >> 1] = $76;
      $$0378 = $22;
      $$0382 = 0;
      while (1) {
       if (($$0382 | 0) >= ($$1375 | 0)) {
        $91 = $76;
        break L35;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($74 | 0)) HEAP32[$$0378 >> 2] = $76;
       $$0378 = $$0378 + 4 | 0;
       $$0382 = $$0382 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $74;
      if (($74 | 0) < ($76 | 0)) {
       $$1379 = $22;
       $$1383 = 0;
       while (1) {
        if (($$1383 | 0) >= ($$1375 | 0)) {
         $91 = $74;
         break L35;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($76 | 0)) HEAP32[$$1379 >> 2] = $74;
        $$1379 = $$1379 + 4 | 0;
        $$1383 = $$1383 + 1 | 0;
       }
      } else $91 = $74;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $4 + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $4 + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$2391;
     $103 = $4 + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($93 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $108 = HEAP16[$69 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $63;
     $144 = $72 * 7 | 0;
     $145 = $4 + 1310736 + ($144 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $4 + 1310736 + ($144 + 1 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$2391;
     $153 = $4 + 1310736 + ($144 + 2 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$0386;
     $157 = $4 + 1310736 + ($144 + 3 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($$2391 | 0)) HEAP32[$157 >> 2] = $$2391;
     HEAP32[$4 + 1310736 + ($144 + 6 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $111 = HEAP32[$73 >> 2] | 0;
    $114 = HEAP32[$4 + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$$3 >> 1] = $114;
     $$2380 = $22;
     $$2384 = 0;
     while (1) {
      if (($$2384 | 0) >= ($$1375 | 0)) {
       $129 = $114;
       break L58;
      }
      if ((HEAP32[$$2380 >> 2] | 0) == ($111 | 0)) HEAP32[$$2380 >> 2] = $114;
      $$2380 = $$2380 + 4 | 0;
      $$2384 = $$2384 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $$3381 = $22;
      $$3385 = 0;
      while (1) {
       if (($$3385 | 0) >= ($$1375 | 0)) {
        $129 = $111;
        break L58;
       }
       if ((HEAP32[$$3381 >> 2] | 0) == ($114 | 0)) HEAP32[$$3381 >> 2] = $111;
       $$3381 = $$3381 + 4 | 0;
       $$3385 = $$3385 + 1 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $4 + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $4 + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$2391;
    $141 = $4 + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$0386;
    $$3377 = $$1375;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3377 = $$1375;
   } while (0);
   $$1 = $$1 + 8 | 0;
   $$1375 = $$3377;
   $$2391 = $$2391 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $29 + 16 | 0;
  $$0374 = $$1375;
  $$0386 = $$0386 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $4 + 12 | 0;
  $$1387 = 1;
  $$3392 = 1;
  $$4 = $22;
  while (1) {
   if (($$3392 | 0) > ($$0374 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3392 | 0)) {
    $$2388 = $$1387 + 1 | 0;
    $234 = $$1387;
   } else {
    $$2388 = $$1387;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1387 = $$2388;
   $$3392 = $$3392 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1387 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4393 = 0;
   $244 = $238;
   while (1) {
    if (($$4393 | 0) >= ($244 | 0)) {
     $$5 = 0;
     break;
    }
    $245 = $$4393 << 2;
    HEAP32[$4 + 131084 + ($245 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($245 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $$4393 = $$4393 + 1 | 0;
    $244 = HEAP32[$237 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0374 | 0)) {
     $$6 = 0;
     break;
    }
    $257 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $$5 * 7 | 0;
    $261 = $4 + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $4 + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $4 + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $4 + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $4 + 12 + ($$6 << 2) | 0;
    $314 = $$6 << 1;
    $315 = $4 + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $4 + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3CA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0369 = 0, $$0370 = 0, $$0372 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0386 = 0, $$0389 = 0, $$1 = 0, $$1371 = 0, $$1373 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1387 = 0, $$1390 = 0, $$2 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2388 = 0, $$2391 = 0, $$3 = 0, $$3377 = 0, $$3381 = 0, $$3385 = 0, $$3392 = 0, $$4 = 0, $$4393 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $103 = 0, $108 = 0, $111 = 0, $114 = 0, $129 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $144 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $162 = 0, $163 = 0, $167 = 0, $171 = 0, $175 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $200 = 0, $205 = 0, $22 = 0, $226 = 0, $228 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $28 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $29 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0370 = $7;
 $$0372 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0389 = 0;
 while (1) {
  if (($$0389 | 0) >= ($5 | 0)) break;
  HEAP16[$$0372 >> 1] = 0;
  HEAP16[$$0370 >> 1] = 0;
  $$0370 = $$0370 + 2 | 0;
  $$0372 = $$0372 + 2 | 0;
  $$0389 = $$0389 + 1 | 0;
 }
 $15 = $3 * 3 | 0;
 $16 = $5 + -1 | 0;
 $$1371 = $7;
 $$1373 = $7 + ($16 << 1) | 0;
 $$1390 = 0;
 while (1) {
  if (($$1390 | 0) >= ($6 | 0)) break;
  HEAP16[$$1373 >> 1] = 0;
  HEAP16[$$1371 >> 1] = 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1373 = $$1373 + ($5 << 1) | 0;
  $$1390 = $$1390 + 1 | 0;
 }
 $22 = $4 + 1179664 | 0;
 $28 = 0 - $5 | 0;
 $29 = $1 << 2;
 $$0369 = $0 + (($1 << 3) + 8) | 0;
 $$0374 = 0;
 $$0386 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0386 | 0) < ($8 | 0)) {
   $$1 = $$0369;
   $$1375 = $$0374;
   $$2391 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2391 | 0) >= ($16 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($15 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3377 = $$1375;
   } else {
    $43 = $$3 + ($28 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $4 + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $4 + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$2391;
     $57 = $4 + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($47 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $66 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $66 << 16 >> 16 > 0;
    $69 = $$3 + -2 | 0;
    $70 = ($66 << 16 >> 16) + -1 | 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($68) {
      HEAP16[$$3 >> 1] = $66;
      $162 = $70 * 7 | 0;
      $163 = $4 + 1310736 + ($162 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $4 + 1310736 + ($162 + 1 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$2391;
      $171 = $4 + 1310736 + ($162 + 2 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $$0386;
      $175 = $4 + 1310736 + ($162 + 4 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($$2391 | 0)) HEAP32[$175 >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($162 + 6 << 2) >> 2] = $$0386;
      $$3377 = $$1375;
      break;
     }
     $180 = HEAP16[$69 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $4 + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $4 + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$2391;
      $193 = $4 + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $$0386;
      $196 = $183 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($196 << 2) >> 2] | 0) < ($$2391 | 0)) {
       $$2376 = $$1375;
       $$sink = $$2391;
       $$sink3 = $196;
      } else {
       $$3377 = $$1375;
       break;
      }
     } else {
      $200 = $$1375 + 1 | 0;
      if (($$1375 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $200;
      HEAP32[$4 + 1179664 + ($$1375 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $$1375 * 7 | 0;
      HEAP32[$4 + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($205 + 1 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 2 << 2) >> 2] = $$0386;
      HEAP32[$4 + 1310736 + ($205 + 3 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 4 << 2) >> 2] = $$2391;
      HEAP32[$4 + 1310736 + ($205 + 5 << 2) >> 2] = $$0386;
      $$2376 = $200;
      $$sink = $$0386;
      $$sink3 = $205 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3377 = $$2376;
     break;
    }
    $72 = ($63 << 16 >> 16) + -1 | 0;
    $73 = $4 + 1179664 + ($72 << 2) | 0;
    if ($68) {
     $74 = HEAP32[$73 >> 2] | 0;
     $76 = HEAP32[$4 + 1179664 + ($70 << 2) >> 2] | 0;
     L36 : do if (($74 | 0) > ($76 | 0)) {
      HEAP16[$$3 >> 1] = $76;
      $$0378 = $22;
      $$0382 = 0;
      while (1) {
       if (($$0382 | 0) >= ($$1375 | 0)) {
        $91 = $76;
        break L36;
       }
       if ((HEAP32[$$0378 >> 2] | 0) == ($74 | 0)) HEAP32[$$0378 >> 2] = $76;
       $$0378 = $$0378 + 4 | 0;
       $$0382 = $$0382 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $74;
      if (($74 | 0) < ($76 | 0)) {
       $$1379 = $22;
       $$1383 = 0;
       while (1) {
        if (($$1383 | 0) >= ($$1375 | 0)) {
         $91 = $74;
         break L36;
        }
        if ((HEAP32[$$1379 >> 2] | 0) == ($76 | 0)) HEAP32[$$1379 >> 2] = $74;
        $$1379 = $$1379 + 4 | 0;
        $$1383 = $$1383 + 1 | 0;
       }
      } else $91 = $74;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $4 + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $4 + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$2391;
     $103 = $4 + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $$0386;
     HEAP32[$4 + 1310736 + ($93 + -1 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $108 = HEAP16[$69 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $63;
     $144 = $72 * 7 | 0;
     $145 = $4 + 1310736 + ($144 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $4 + 1310736 + ($144 + 1 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$2391;
     $153 = $4 + 1310736 + ($144 + 2 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$0386;
     $157 = $4 + 1310736 + ($144 + 3 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($$2391 | 0)) HEAP32[$157 >> 2] = $$2391;
     HEAP32[$4 + 1310736 + ($144 + 6 << 2) >> 2] = $$0386;
     $$3377 = $$1375;
     break;
    }
    $111 = HEAP32[$73 >> 2] | 0;
    $114 = HEAP32[$4 + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$$3 >> 1] = $114;
     $$2380 = $22;
     $$2384 = 0;
     while (1) {
      if (($$2384 | 0) >= ($$1375 | 0)) {
       $129 = $114;
       break L59;
      }
      if ((HEAP32[$$2380 >> 2] | 0) == ($111 | 0)) HEAP32[$$2380 >> 2] = $114;
      $$2380 = $$2380 + 4 | 0;
      $$2384 = $$2384 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $$3381 = $22;
      $$3385 = 0;
      while (1) {
       if (($$3385 | 0) >= ($$1375 | 0)) {
        $129 = $111;
        break L59;
       }
       if ((HEAP32[$$3381 >> 2] | 0) == ($114 | 0)) HEAP32[$$3381 >> 2] = $111;
       $$3381 = $$3381 + 4 | 0;
       $$3385 = $$3385 + 1 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $4 + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $4 + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$2391;
    $141 = $4 + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$0386;
    $$3377 = $$1375;
   } while (0);
   $$1 = $$1 + 8 | 0;
   $$1375 = $$3377;
   $$2391 = $$2391 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0369 = $$1 + $29 + 16 | 0;
  $$0374 = $$1375;
  $$0386 = $$0386 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $4 + 12 | 0;
  $$1387 = 1;
  $$3392 = 1;
  $$4 = $22;
  while (1) {
   if (($$3392 | 0) > ($$0374 | 0)) break;
   $228 = HEAP32[$$4 >> 2] | 0;
   if (($228 | 0) == ($$3392 | 0)) {
    $$2388 = $$1387 + 1 | 0;
    $234 = $$1387;
   } else {
    $$2388 = $$1387;
    $234 = HEAP32[$4 + 1179664 + ($228 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $234;
   $$1387 = $$2388;
   $$3392 = $$3392 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $237 = $4 + 8 | 0;
  $238 = $$1387 + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $$4393 = 0;
   $244 = $238;
   while (1) {
    if (($$4393 | 0) >= ($244 | 0)) {
     $$5 = 0;
     break;
    }
    $245 = $$4393 << 2;
    HEAP32[$4 + 131084 + ($245 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($245 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $$4393 = $$4393 + 1 | 0;
    $244 = HEAP32[$237 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0374 | 0)) {
     $$6 = 0;
     break;
    }
    $257 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $$5 * 7 | 0;
    $261 = $4 + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $4 + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $4 + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$4 + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $4 + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $4 + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$4 + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $4 + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$4 + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $4 + 12 + ($$6 << 2) | 0;
    $314 = $$6 << 1;
    $315 = $4 + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $4 + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWZ($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0368 = 0, $$0369 = 0, $$0371 = 0, $$0373 = 0, $$0375 = 0, $$0379 = 0, $$0382 = 0, $$0387 = 0, $$0391 = 0, $$1 = 0, $$1370 = 0, $$1372 = 0, $$1374 = 0, $$1376 = 0, $$1380 = 0, $$1383 = 0, $$1388 = 0, $$1392 = 0, $$2 = 0, $$2377 = 0, $$2381 = 0, $$2384 = 0, $$2389 = 0, $$2393 = 0, $$3 = 0, $$3378 = 0, $$3385 = 0, $$3390 = 0, $$3394 = 0, $$4 = 0, $$4386 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $167 = 0, $170 = 0, $172 = 0, $176 = 0, $180 = 0, $183 = 0, $187 = 0, $19 = 0, $192 = 0, $20 = 0, $214 = 0, $216 = 0, $222 = 0, $225 = 0, $226 = 0, $232 = 0, $233 = 0, $24 = 0, $245 = 0, $246 = 0, $249 = 0, $256 = 0, $257 = 0, $265 = 0, $268 = 0, $269 = 0, $273 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $299 = 0, $30 = 0, $302 = 0, $303 = 0, $309 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $44 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $78 = 0, $80 = 0, $82 = 0, $86 = 0, $90 = 0, $95 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0371 = $5;
 $$0382 = 0;
 $$0391 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 while (1) {
  if (($$0382 | 0) >= ($1 | 0)) break;
  HEAP16[$$0391 >> 1] = 0;
  HEAP16[$$0371 >> 1] = 0;
  $$0371 = $$0371 + 2 | 0;
  $$0382 = $$0382 + 1 | 0;
  $$0391 = $$0391 + 2 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1372 = $5;
 $$1383 = 0;
 $$1392 = $5 + ($13 << 1) | 0;
 while (1) {
  if (($$1383 | 0) >= ($2 | 0)) break;
  HEAP16[$$1392 >> 1] = 0;
  HEAP16[$$1372 >> 1] = 0;
  $$1372 = $$1372 + ($1 << 1) | 0;
  $$1383 = $$1383 + 1 | 0;
  $$1392 = $$1392 + ($1 << 1) | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $24 = 0 - $1 | 0;
 $$0368 = $0 + $20 | 0;
 $$0369 = $3 + $20 | 0;
 $$0379 = 1;
 $$0387 = 0;
 $$2393 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0379 | 0) < ($6 | 0)) {
   $$1 = $$0368;
   $$1370 = $$0369;
   $$1388 = $$0387;
   $$2384 = 1;
   $$3394 = $$2393;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2384 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0) > (HEAPU8[$$1370 >> 0] | 0)) {
    $30 = $$3394 + ($24 << 1) | 0;
    $31 = HEAP16[$30 >> 1] | 0;
    if ($31 << 16 >> 16 > 0) {
     HEAP16[$$3394 >> 1] = $31;
     $34 = ($31 << 16 >> 16) * 7 | 0;
     $36 = $4 + 1310736 + ($34 + -7 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
     $40 = $4 + 1310736 + ($34 + -6 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $$2384;
     $44 = $4 + 1310736 + ($34 + -5 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$0379;
     HEAP32[$4 + 1310736 + ($34 + -1 << 2) >> 2] = $$0379;
     $$3390 = $$1388;
     break;
    }
    $50 = HEAP16[$30 + 2 >> 1] | 0;
    $53 = HEAP16[$30 + -2 >> 1] | 0;
    $55 = $53 << 16 >> 16 > 0;
    $56 = ($53 << 16 >> 16) + -1 | 0;
    $57 = $$3394 + -2 | 0;
    if ($50 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$$3394 >> 1] = $53;
      $149 = $56 * 7 | 0;
      $150 = $4 + 1310736 + ($149 << 2) | 0;
      HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
      $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2384;
      $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0379;
      $162 = $4 + 1310736 + ($149 + 4 << 2) | 0;
      if ((HEAP32[$162 >> 2] | 0) < ($$2384 | 0)) HEAP32[$162 >> 2] = $$2384;
      HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0379;
      $$3390 = $$1388;
      break;
     }
     $167 = HEAP16[$57 >> 1] | 0;
     if ($167 << 16 >> 16 > 0) {
      HEAP16[$$3394 >> 1] = $167;
      $170 = ($167 << 16 >> 16) * 7 | 0;
      $172 = $4 + 1310736 + ($170 + -7 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $4 + 1310736 + ($170 + -6 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$2384;
      $180 = $4 + 1310736 + ($170 + -5 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$0379;
      $183 = $170 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($183 << 2) >> 2] | 0) < ($$2384 | 0)) {
       $$2389 = $$1388;
       $$sink = $$2384;
       $$sink3 = $183;
      } else {
       $$3390 = $$1388;
       break;
      }
     } else {
      $187 = $$1388 + 1 | 0;
      if (($$1388 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3394 >> 1] = $187;
      HEAP32[$4 + 1179664 + ($$1388 << 2) >> 2] = $187 << 16 >> 16;
      $192 = $$1388 * 7 | 0;
      HEAP32[$4 + 1310736 + ($192 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($192 + 1 << 2) >> 2] = $$2384;
      HEAP32[$4 + 1310736 + ($192 + 2 << 2) >> 2] = $$0379;
      HEAP32[$4 + 1310736 + ($192 + 3 << 2) >> 2] = $$2384;
      HEAP32[$4 + 1310736 + ($192 + 4 << 2) >> 2] = $$2384;
      HEAP32[$4 + 1310736 + ($192 + 5 << 2) >> 2] = $$0379;
      $$2389 = $187;
      $$sink = $$0379;
      $$sink3 = $192 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3390 = $$2389;
     break;
    }
    $59 = ($50 << 16 >> 16) + -1 | 0;
    $60 = $4 + 1179664 + ($59 << 2) | 0;
    if ($55) {
     $61 = HEAP32[$60 >> 2] | 0;
     $63 = HEAP32[$4 + 1179664 + ($56 << 2) >> 2] | 0;
     L35 : do if (($61 | 0) > ($63 | 0)) {
      HEAP16[$$3394 >> 1] = $63;
      $$0373 = $19;
      $$0375 = 0;
      while (1) {
       if (($$0375 | 0) >= ($$1388 | 0)) {
        $78 = $63;
        break L35;
       }
       if ((HEAP32[$$0373 >> 2] | 0) == ($61 | 0)) HEAP32[$$0373 >> 2] = $63;
       $$0373 = $$0373 + 4 | 0;
       $$0375 = $$0375 + 1 | 0;
      }
     } else {
      HEAP16[$$3394 >> 1] = $61;
      if (($61 | 0) < ($63 | 0)) {
       $$1374 = $19;
       $$1376 = 0;
       while (1) {
        if (($$1376 | 0) >= ($$1388 | 0)) {
         $78 = $61;
         break L35;
        }
        if ((HEAP32[$$1374 >> 2] | 0) == ($63 | 0)) HEAP32[$$1374 >> 2] = $61;
        $$1374 = $$1374 + 4 | 0;
        $$1376 = $$1376 + 1 | 0;
       }
      } else $78 = $61;
     } while (0);
     $80 = ($78 << 16 >> 16) * 7 | 0;
     $82 = $4 + 1310736 + ($80 + -7 << 2) | 0;
     HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + 1;
     $86 = $4 + 1310736 + ($80 + -6 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + $$2384;
     $90 = $4 + 1310736 + ($80 + -5 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $$0379;
     HEAP32[$4 + 1310736 + ($80 + -1 << 2) >> 2] = $$0379;
     $$3390 = $$1388;
     break;
    }
    $95 = HEAP16[$57 >> 1] | 0;
    if ($95 << 16 >> 16 <= 0) {
     HEAP16[$$3394 >> 1] = $50;
     $131 = $59 * 7 | 0;
     $132 = $4 + 1310736 + ($131 << 2) | 0;
     HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
     $136 = $4 + 1310736 + ($131 + 1 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$2384;
     $140 = $4 + 1310736 + ($131 + 2 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$0379;
     $144 = $4 + 1310736 + ($131 + 3 << 2) | 0;
     if ((HEAP32[$144 >> 2] | 0) > ($$2384 | 0)) HEAP32[$144 >> 2] = $$2384;
     HEAP32[$4 + 1310736 + ($131 + 6 << 2) >> 2] = $$0379;
     $$3390 = $$1388;
     break;
    }
    $98 = HEAP32[$60 >> 2] | 0;
    $101 = HEAP32[$4 + 1179664 + (($95 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$$3394 >> 1] = $101;
     $$2 = $19;
     $$2377 = 0;
     while (1) {
      if (($$2377 | 0) >= ($$1388 | 0)) {
       $116 = $101;
       break L58;
      }
      if ((HEAP32[$$2 >> 2] | 0) == ($98 | 0)) HEAP32[$$2 >> 2] = $101;
      $$2 = $$2 + 4 | 0;
      $$2377 = $$2377 + 1 | 0;
     }
    } else {
     HEAP16[$$3394 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $$3 = $19;
      $$3378 = 0;
      while (1) {
       if (($$3378 | 0) >= ($$1388 | 0)) {
        $116 = $98;
        break L58;
       }
       if ((HEAP32[$$3 >> 2] | 0) == ($101 | 0)) HEAP32[$$3 >> 2] = $98;
       $$3 = $$3 + 4 | 0;
       $$3378 = $$3378 + 1 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $4 + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $4 + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $$2384;
    $128 = $4 + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$0379;
    $$3390 = $$1388;
   } else {
    HEAP16[$$3394 >> 1] = 0;
    $$3390 = $$1388;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1370 = $$1370 + 1 | 0;
   $$1388 = $$3390;
   $$2384 = $$2384 + 1 | 0;
   $$3394 = $$3394 + 2 | 0;
  }
  $$0368 = $$1 + 2 | 0;
  $$0369 = $$1370 + 2 | 0;
  $$0379 = $$0379 + 1 | 0;
  $$0387 = $$1388;
  $$2393 = $$3394 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $214 = $4 + 12 | 0;
  $$1380 = 1;
  $$3385 = 1;
  $$4 = $19;
  while (1) {
   if (($$3385 | 0) > ($$0387 | 0)) break;
   $216 = HEAP32[$$4 >> 2] | 0;
   if (($216 | 0) == ($$3385 | 0)) {
    $$2381 = $$1380 + 1 | 0;
    $222 = $$1380;
   } else {
    $$2381 = $$1380;
    $222 = HEAP32[$4 + 1179664 + ($216 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $222;
   $$1380 = $$2381;
   $$3385 = $$3385 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $225 = $4 + 8 | 0;
  $226 = $$1380 + -1 | 0;
  HEAP32[$225 >> 2] = $226;
  if (!$226) $$0 = 0; else {
   _memset($214 | 0, 0, $226 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $226 << 4 | 0) | 0;
   $$4386 = 0;
   $232 = $226;
   while (1) {
    if (($$4386 | 0) >= ($232 | 0)) {
     $$5 = 0;
     break;
    }
    $233 = $$4386 << 2;
    HEAP32[$4 + 131084 + ($233 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($233 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($233 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($233 | 3) << 2) >> 2] = 0;
    $$4386 = $$4386 + 1 | 0;
    $232 = HEAP32[$225 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0387 | 0)) {
     $$6 = 0;
     break;
    }
    $245 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $246 = $$5 * 7 | 0;
    $249 = $4 + 12 + ($245 << 2) | 0;
    HEAP32[$249 >> 2] = (HEAP32[$249 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($246 << 2) >> 2] | 0);
    $256 = $245 << 1;
    $257 = $4 + 655376 + ($256 << 3) | 0;
    HEAPF64[$257 >> 3] = +HEAPF64[$257 >> 3] + +(HEAP32[$4 + 1310736 + ($246 + 1 << 2) >> 2] | 0);
    $265 = $4 + 655376 + (($256 | 1) << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$4 + 1310736 + ($246 + 2 << 2) >> 2] | 0);
    $268 = $245 << 2;
    $269 = $4 + 131084 + ($268 << 2) | 0;
    $273 = HEAP32[$4 + 1310736 + ($246 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$269 >> 2] | 0) > ($273 | 0)) HEAP32[$269 >> 2] = $273;
    $276 = $4 + 131084 + (($268 | 1) << 2) | 0;
    $280 = HEAP32[$4 + 1310736 + ($246 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) < ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $4 + 131084 + (($268 | 2) << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($246 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($268 | 3) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($246 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$225 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $299 = $4 + 12 + ($$6 << 2) | 0;
    $302 = $$6 << 1;
    $303 = $4 + 655376 + ($302 << 3) | 0;
    HEAPF64[$303 >> 3] = +HEAPF64[$303 >> 3] / +(HEAP32[$299 >> 2] | 0);
    $309 = $4 + 655376 + (($302 | 1) << 3) | 0;
    HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] / +(HEAP32[$299 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBZ($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0368 = 0, $$0369 = 0, $$0371 = 0, $$0373 = 0, $$0375 = 0, $$0379 = 0, $$0382 = 0, $$0387 = 0, $$0391 = 0, $$1 = 0, $$1370 = 0, $$1372 = 0, $$1374 = 0, $$1376 = 0, $$1380 = 0, $$1383 = 0, $$1388 = 0, $$1392 = 0, $$2 = 0, $$2377 = 0, $$2381 = 0, $$2384 = 0, $$2389 = 0, $$2393 = 0, $$3 = 0, $$3378 = 0, $$3385 = 0, $$3390 = 0, $$3394 = 0, $$4 = 0, $$4386 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $167 = 0, $170 = 0, $172 = 0, $176 = 0, $180 = 0, $183 = 0, $187 = 0, $19 = 0, $192 = 0, $20 = 0, $214 = 0, $216 = 0, $222 = 0, $225 = 0, $226 = 0, $232 = 0, $233 = 0, $24 = 0, $245 = 0, $246 = 0, $249 = 0, $256 = 0, $257 = 0, $265 = 0, $268 = 0, $269 = 0, $273 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $299 = 0, $30 = 0, $302 = 0, $303 = 0, $309 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $44 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $78 = 0, $80 = 0, $82 = 0, $86 = 0, $90 = 0, $95 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0371 = $5;
 $$0382 = 0;
 $$0391 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 while (1) {
  if (($$0382 | 0) >= ($1 | 0)) break;
  HEAP16[$$0391 >> 1] = 0;
  HEAP16[$$0371 >> 1] = 0;
  $$0371 = $$0371 + 2 | 0;
  $$0382 = $$0382 + 1 | 0;
  $$0391 = $$0391 + 2 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1372 = $5;
 $$1383 = 0;
 $$1392 = $5 + ($13 << 1) | 0;
 while (1) {
  if (($$1383 | 0) >= ($2 | 0)) break;
  HEAP16[$$1392 >> 1] = 0;
  HEAP16[$$1372 >> 1] = 0;
  $$1372 = $$1372 + ($1 << 1) | 0;
  $$1383 = $$1383 + 1 | 0;
  $$1392 = $$1392 + ($1 << 1) | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $24 = 0 - $1 | 0;
 $$0368 = $0 + $20 | 0;
 $$0369 = $3 + $20 | 0;
 $$0379 = 1;
 $$0387 = 0;
 $$2393 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0379 | 0) < ($6 | 0)) {
   $$1 = $$0368;
   $$1370 = $$0369;
   $$1388 = $$0387;
   $$2384 = 1;
   $$3394 = $$2393;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2384 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0) > (HEAPU8[$$1370 >> 0] | 0)) {
    HEAP16[$$3394 >> 1] = 0;
    $$3390 = $$1388;
   } else {
    $30 = $$3394 + ($24 << 1) | 0;
    $31 = HEAP16[$30 >> 1] | 0;
    if ($31 << 16 >> 16 > 0) {
     HEAP16[$$3394 >> 1] = $31;
     $34 = ($31 << 16 >> 16) * 7 | 0;
     $36 = $4 + 1310736 + ($34 + -7 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
     $40 = $4 + 1310736 + ($34 + -6 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $$2384;
     $44 = $4 + 1310736 + ($34 + -5 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$0379;
     HEAP32[$4 + 1310736 + ($34 + -1 << 2) >> 2] = $$0379;
     $$3390 = $$1388;
     break;
    }
    $50 = HEAP16[$30 + 2 >> 1] | 0;
    $53 = HEAP16[$30 + -2 >> 1] | 0;
    $55 = $53 << 16 >> 16 > 0;
    $56 = ($53 << 16 >> 16) + -1 | 0;
    $57 = $$3394 + -2 | 0;
    if ($50 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$$3394 >> 1] = $53;
      $149 = $56 * 7 | 0;
      $150 = $4 + 1310736 + ($149 << 2) | 0;
      HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
      $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2384;
      $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0379;
      $162 = $4 + 1310736 + ($149 + 4 << 2) | 0;
      if ((HEAP32[$162 >> 2] | 0) < ($$2384 | 0)) HEAP32[$162 >> 2] = $$2384;
      HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0379;
      $$3390 = $$1388;
      break;
     }
     $167 = HEAP16[$57 >> 1] | 0;
     if ($167 << 16 >> 16 > 0) {
      HEAP16[$$3394 >> 1] = $167;
      $170 = ($167 << 16 >> 16) * 7 | 0;
      $172 = $4 + 1310736 + ($170 + -7 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $4 + 1310736 + ($170 + -6 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$2384;
      $180 = $4 + 1310736 + ($170 + -5 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$0379;
      $183 = $170 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($183 << 2) >> 2] | 0) < ($$2384 | 0)) {
       $$2389 = $$1388;
       $$sink = $$2384;
       $$sink3 = $183;
      } else {
       $$3390 = $$1388;
       break;
      }
     } else {
      $187 = $$1388 + 1 | 0;
      if (($$1388 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3394 >> 1] = $187;
      HEAP32[$4 + 1179664 + ($$1388 << 2) >> 2] = $187 << 16 >> 16;
      $192 = $$1388 * 7 | 0;
      HEAP32[$4 + 1310736 + ($192 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($192 + 1 << 2) >> 2] = $$2384;
      HEAP32[$4 + 1310736 + ($192 + 2 << 2) >> 2] = $$0379;
      HEAP32[$4 + 1310736 + ($192 + 3 << 2) >> 2] = $$2384;
      HEAP32[$4 + 1310736 + ($192 + 4 << 2) >> 2] = $$2384;
      HEAP32[$4 + 1310736 + ($192 + 5 << 2) >> 2] = $$0379;
      $$2389 = $187;
      $$sink = $$0379;
      $$sink3 = $192 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3390 = $$2389;
     break;
    }
    $59 = ($50 << 16 >> 16) + -1 | 0;
    $60 = $4 + 1179664 + ($59 << 2) | 0;
    if ($55) {
     $61 = HEAP32[$60 >> 2] | 0;
     $63 = HEAP32[$4 + 1179664 + ($56 << 2) >> 2] | 0;
     L36 : do if (($61 | 0) > ($63 | 0)) {
      HEAP16[$$3394 >> 1] = $63;
      $$0373 = $19;
      $$0375 = 0;
      while (1) {
       if (($$0375 | 0) >= ($$1388 | 0)) {
        $78 = $63;
        break L36;
       }
       if ((HEAP32[$$0373 >> 2] | 0) == ($61 | 0)) HEAP32[$$0373 >> 2] = $63;
       $$0373 = $$0373 + 4 | 0;
       $$0375 = $$0375 + 1 | 0;
      }
     } else {
      HEAP16[$$3394 >> 1] = $61;
      if (($61 | 0) < ($63 | 0)) {
       $$1374 = $19;
       $$1376 = 0;
       while (1) {
        if (($$1376 | 0) >= ($$1388 | 0)) {
         $78 = $61;
         break L36;
        }
        if ((HEAP32[$$1374 >> 2] | 0) == ($63 | 0)) HEAP32[$$1374 >> 2] = $61;
        $$1374 = $$1374 + 4 | 0;
        $$1376 = $$1376 + 1 | 0;
       }
      } else $78 = $61;
     } while (0);
     $80 = ($78 << 16 >> 16) * 7 | 0;
     $82 = $4 + 1310736 + ($80 + -7 << 2) | 0;
     HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + 1;
     $86 = $4 + 1310736 + ($80 + -6 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + $$2384;
     $90 = $4 + 1310736 + ($80 + -5 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $$0379;
     HEAP32[$4 + 1310736 + ($80 + -1 << 2) >> 2] = $$0379;
     $$3390 = $$1388;
     break;
    }
    $95 = HEAP16[$57 >> 1] | 0;
    if ($95 << 16 >> 16 <= 0) {
     HEAP16[$$3394 >> 1] = $50;
     $131 = $59 * 7 | 0;
     $132 = $4 + 1310736 + ($131 << 2) | 0;
     HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
     $136 = $4 + 1310736 + ($131 + 1 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$2384;
     $140 = $4 + 1310736 + ($131 + 2 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$0379;
     $144 = $4 + 1310736 + ($131 + 3 << 2) | 0;
     if ((HEAP32[$144 >> 2] | 0) > ($$2384 | 0)) HEAP32[$144 >> 2] = $$2384;
     HEAP32[$4 + 1310736 + ($131 + 6 << 2) >> 2] = $$0379;
     $$3390 = $$1388;
     break;
    }
    $98 = HEAP32[$60 >> 2] | 0;
    $101 = HEAP32[$4 + 1179664 + (($95 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$$3394 >> 1] = $101;
     $$2 = $19;
     $$2377 = 0;
     while (1) {
      if (($$2377 | 0) >= ($$1388 | 0)) {
       $116 = $101;
       break L59;
      }
      if ((HEAP32[$$2 >> 2] | 0) == ($98 | 0)) HEAP32[$$2 >> 2] = $101;
      $$2 = $$2 + 4 | 0;
      $$2377 = $$2377 + 1 | 0;
     }
    } else {
     HEAP16[$$3394 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $$3 = $19;
      $$3378 = 0;
      while (1) {
       if (($$3378 | 0) >= ($$1388 | 0)) {
        $116 = $98;
        break L59;
       }
       if ((HEAP32[$$3 >> 2] | 0) == ($101 | 0)) HEAP32[$$3 >> 2] = $98;
       $$3 = $$3 + 4 | 0;
       $$3378 = $$3378 + 1 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $4 + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $4 + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $$2384;
    $128 = $4 + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$0379;
    $$3390 = $$1388;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1370 = $$1370 + 1 | 0;
   $$1388 = $$3390;
   $$2384 = $$2384 + 1 | 0;
   $$3394 = $$3394 + 2 | 0;
  }
  $$0368 = $$1 + 2 | 0;
  $$0369 = $$1370 + 2 | 0;
  $$0379 = $$0379 + 1 | 0;
  $$0387 = $$1388;
  $$2393 = $$3394 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $214 = $4 + 12 | 0;
  $$1380 = 1;
  $$3385 = 1;
  $$4 = $19;
  while (1) {
   if (($$3385 | 0) > ($$0387 | 0)) break;
   $216 = HEAP32[$$4 >> 2] | 0;
   if (($216 | 0) == ($$3385 | 0)) {
    $$2381 = $$1380 + 1 | 0;
    $222 = $$1380;
   } else {
    $$2381 = $$1380;
    $222 = HEAP32[$4 + 1179664 + ($216 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $222;
   $$1380 = $$2381;
   $$3385 = $$3385 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $225 = $4 + 8 | 0;
  $226 = $$1380 + -1 | 0;
  HEAP32[$225 >> 2] = $226;
  if (!$226) $$0 = 0; else {
   _memset($214 | 0, 0, $226 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $226 << 4 | 0) | 0;
   $$4386 = 0;
   $232 = $226;
   while (1) {
    if (($$4386 | 0) >= ($232 | 0)) {
     $$5 = 0;
     break;
    }
    $233 = $$4386 << 2;
    HEAP32[$4 + 131084 + ($233 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($233 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($233 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($233 | 3) << 2) >> 2] = 0;
    $$4386 = $$4386 + 1 | 0;
    $232 = HEAP32[$225 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0387 | 0)) {
     $$6 = 0;
     break;
    }
    $245 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $246 = $$5 * 7 | 0;
    $249 = $4 + 12 + ($245 << 2) | 0;
    HEAP32[$249 >> 2] = (HEAP32[$249 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($246 << 2) >> 2] | 0);
    $256 = $245 << 1;
    $257 = $4 + 655376 + ($256 << 3) | 0;
    HEAPF64[$257 >> 3] = +HEAPF64[$257 >> 3] + +(HEAP32[$4 + 1310736 + ($246 + 1 << 2) >> 2] | 0);
    $265 = $4 + 655376 + (($256 | 1) << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$4 + 1310736 + ($246 + 2 << 2) >> 2] | 0);
    $268 = $245 << 2;
    $269 = $4 + 131084 + ($268 << 2) | 0;
    $273 = HEAP32[$4 + 1310736 + ($246 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$269 >> 2] | 0) > ($273 | 0)) HEAP32[$269 >> 2] = $273;
    $276 = $4 + 131084 + (($268 | 1) << 2) | 0;
    $280 = HEAP32[$4 + 1310736 + ($246 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) < ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $4 + 131084 + (($268 | 2) << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($246 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($268 | 3) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($246 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$225 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $299 = $4 + 12 + ($$6 << 2) | 0;
    $302 = $$6 << 1;
    $303 = $4 + 655376 + ($302 << 3) | 0;
    HEAPF64[$303 >> 3] = +HEAPF64[$303 >> 3] / +(HEAP32[$299 >> 2] | 0);
    $309 = $4 + 655376 + (($302 | 1) << 3) | 0;
    HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] / +(HEAP32[$299 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3CA4444($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $106 = 0, $109 = 0, $112 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $142 = 0, $143 = 0, $147 = 0, $151 = 0, $155 = 0, $160 = 0, $161 = 0, $165 = 0, $169 = 0, $173 = 0, $178 = 0, $181 = 0, $183 = 0, $187 = 0, $191 = 0, $194 = 0, $198 = 0, $20 = 0, $203 = 0, $21 = 0, $223 = 0, $225 = 0, $231 = 0, $234 = 0, $235 = 0, $241 = 0, $242 = 0, $25 = 0, $254 = 0, $255 = 0, $258 = 0, $265 = 0, $266 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $29 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $308 = 0, $311 = 0, $312 = 0, $318 = 0, $41 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $51 = 0, $55 = 0, $6 = 0, $61 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $89 = 0, $91 = 0, $93 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($14 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0367 = $0 + ($21 << 1) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($6 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($14 | 0)) break;
   $29 = HEAPU8[$$1 >> 0] | 0;
   do if ((($29 & 240) + 24 + ($29 << 4 & 240) + (HEAP8[$$1 + 1 >> 0] & -16 & 255) | 0) > ($13 | 0)) {
    $41 = $$3 + ($25 << 1) | 0;
    $42 = HEAP16[$41 >> 1] | 0;
    if ($42 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $42;
     $45 = ($42 << 16 >> 16) * 7 | 0;
     $47 = $4 + 1310736 + ($45 + -7 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
     $51 = $4 + 1310736 + ($45 + -6 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $$2389;
     $55 = $4 + 1310736 + ($45 + -5 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($45 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $61 = HEAP16[$41 + 2 >> 1] | 0;
    $64 = HEAP16[$41 + -2 >> 1] | 0;
    $66 = $64 << 16 >> 16 > 0;
    $67 = $$3 + -2 | 0;
    $68 = ($64 << 16 >> 16) + -1 | 0;
    if ($61 << 16 >> 16 <= 0) {
     if ($66) {
      HEAP16[$$3 >> 1] = $64;
      $160 = $68 * 7 | 0;
      $161 = $4 + 1310736 + ($160 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + 1;
      $165 = $4 + 1310736 + ($160 + 1 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $$2389;
      $169 = $4 + 1310736 + ($160 + 2 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $$0384;
      $173 = $4 + 1310736 + ($160 + 4 << 2) | 0;
      if ((HEAP32[$173 >> 2] | 0) < ($$2389 | 0)) HEAP32[$173 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($160 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $178 = HEAP16[$67 >> 1] | 0;
     if ($178 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $178;
      $181 = ($178 << 16 >> 16) * 7 | 0;
      $183 = $4 + 1310736 + ($181 + -7 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + 1;
      $187 = $4 + 1310736 + ($181 + -6 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $$2389;
      $191 = $4 + 1310736 + ($181 + -5 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$0384;
      $194 = $181 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($194 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $194;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $198 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $198;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $198 << 16 >> 16;
      $203 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($203 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($203 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($203 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($203 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($203 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($203 + 5 << 2) >> 2] = $$0384;
      $$2374 = $198;
      $$sink = $$0384;
      $$sink3 = $203 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $70 = ($61 << 16 >> 16) + -1 | 0;
    $71 = $4 + 1179664 + ($70 << 2) | 0;
    if ($66) {
     $72 = HEAP32[$71 >> 2] | 0;
     $74 = HEAP32[$4 + 1179664 + ($68 << 2) >> 2] | 0;
     L35 : do if (($72 | 0) > ($74 | 0)) {
      HEAP16[$$3 >> 1] = $74;
      $$0376 = $20;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $89 = $74;
        break L35;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($72 | 0)) HEAP32[$$0376 >> 2] = $74;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $72;
      if (($72 | 0) < ($74 | 0)) {
       $$1377 = $20;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $89 = $72;
         break L35;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($74 | 0)) HEAP32[$$1377 >> 2] = $72;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $89 = $72;
     } while (0);
     $91 = ($89 << 16 >> 16) * 7 | 0;
     $93 = $4 + 1310736 + ($91 + -7 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + 1;
     $97 = $4 + 1310736 + ($91 + -6 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $$2389;
     $101 = $4 + 1310736 + ($91 + -5 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($91 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $106 = HEAP16[$67 >> 1] | 0;
    if ($106 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $61;
     $142 = $70 * 7 | 0;
     $143 = $4 + 1310736 + ($142 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 1;
     $147 = $4 + 1310736 + ($142 + 1 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $$2389;
     $151 = $4 + 1310736 + ($142 + 2 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $$0384;
     $155 = $4 + 1310736 + ($142 + 3 << 2) | 0;
     if ((HEAP32[$155 >> 2] | 0) > ($$2389 | 0)) HEAP32[$155 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($142 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $109 = HEAP32[$71 >> 2] | 0;
    $112 = HEAP32[$4 + 1179664 + (($106 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($109 | 0) > ($112 | 0)) {
     HEAP16[$$3 >> 1] = $112;
     $$2378 = $20;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $127 = $112;
       break L58;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($109 | 0)) HEAP32[$$2378 >> 2] = $112;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $109;
     if (($109 | 0) < ($112 | 0)) {
      $$3379 = $20;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $127 = $109;
        break L58;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($112 | 0)) HEAP32[$$3379 >> 2] = $109;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $127 = $109;
    } while (0);
    $129 = ($127 << 16 >> 16) * 7 | 0;
    $131 = $4 + 1310736 + ($129 + -7 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
    $135 = $4 + 1310736 + ($129 + -6 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $$2389;
    $139 = $4 + 1310736 + ($129 + -5 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 4 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $223 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $20;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $225 = HEAP32[$$4 >> 2] | 0;
   if (($225 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $231 = $$1385;
   } else {
    $$2386 = $$1385;
    $231 = HEAP32[$4 + 1179664 + ($225 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $231;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $234 = $4 + 8 | 0;
  $235 = $$1385 + -1 | 0;
  HEAP32[$234 >> 2] = $235;
  if (!$235) $$0 = 0; else {
   _memset($223 | 0, 0, $235 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $235 << 4 | 0) | 0;
   $$4391 = 0;
   $241 = $235;
   while (1) {
    if (($$4391 | 0) >= ($241 | 0)) {
     $$5 = 0;
     break;
    }
    $242 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($242 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($242 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $241 = HEAP32[$234 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $254 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $$5 * 7 | 0;
    $258 = $4 + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $4 + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $4 + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $4 + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$234 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $308 = $4 + 12 + ($$6 << 2) | 0;
    $311 = $$6 << 1;
    $312 = $4 + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $318 = $4 + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3CA4444($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $106 = 0, $109 = 0, $112 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $142 = 0, $143 = 0, $147 = 0, $151 = 0, $155 = 0, $160 = 0, $161 = 0, $165 = 0, $169 = 0, $173 = 0, $178 = 0, $181 = 0, $183 = 0, $187 = 0, $191 = 0, $194 = 0, $198 = 0, $20 = 0, $203 = 0, $21 = 0, $223 = 0, $225 = 0, $231 = 0, $234 = 0, $235 = 0, $241 = 0, $242 = 0, $25 = 0, $254 = 0, $255 = 0, $258 = 0, $265 = 0, $266 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $29 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $308 = 0, $311 = 0, $312 = 0, $318 = 0, $41 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $51 = 0, $55 = 0, $6 = 0, $61 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $89 = 0, $91 = 0, $93 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($14 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0367 = $0 + ($21 << 1) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($6 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($14 | 0)) break;
   $29 = HEAPU8[$$1 >> 0] | 0;
   do if ((($29 & 240) + 24 + ($29 << 4 & 240) + (HEAP8[$$1 + 1 >> 0] & -16 & 255) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } else {
    $41 = $$3 + ($25 << 1) | 0;
    $42 = HEAP16[$41 >> 1] | 0;
    if ($42 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $42;
     $45 = ($42 << 16 >> 16) * 7 | 0;
     $47 = $4 + 1310736 + ($45 + -7 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
     $51 = $4 + 1310736 + ($45 + -6 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $$2389;
     $55 = $4 + 1310736 + ($45 + -5 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($45 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $61 = HEAP16[$41 + 2 >> 1] | 0;
    $64 = HEAP16[$41 + -2 >> 1] | 0;
    $66 = $64 << 16 >> 16 > 0;
    $67 = $$3 + -2 | 0;
    $68 = ($64 << 16 >> 16) + -1 | 0;
    if ($61 << 16 >> 16 <= 0) {
     if ($66) {
      HEAP16[$$3 >> 1] = $64;
      $160 = $68 * 7 | 0;
      $161 = $4 + 1310736 + ($160 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + 1;
      $165 = $4 + 1310736 + ($160 + 1 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $$2389;
      $169 = $4 + 1310736 + ($160 + 2 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $$0384;
      $173 = $4 + 1310736 + ($160 + 4 << 2) | 0;
      if ((HEAP32[$173 >> 2] | 0) < ($$2389 | 0)) HEAP32[$173 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($160 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $178 = HEAP16[$67 >> 1] | 0;
     if ($178 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $178;
      $181 = ($178 << 16 >> 16) * 7 | 0;
      $183 = $4 + 1310736 + ($181 + -7 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + 1;
      $187 = $4 + 1310736 + ($181 + -6 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $$2389;
      $191 = $4 + 1310736 + ($181 + -5 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $$0384;
      $194 = $181 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($194 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $194;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $198 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $198;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $198 << 16 >> 16;
      $203 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($203 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($203 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($203 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($203 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($203 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($203 + 5 << 2) >> 2] = $$0384;
      $$2374 = $198;
      $$sink = $$0384;
      $$sink3 = $203 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $70 = ($61 << 16 >> 16) + -1 | 0;
    $71 = $4 + 1179664 + ($70 << 2) | 0;
    if ($66) {
     $72 = HEAP32[$71 >> 2] | 0;
     $74 = HEAP32[$4 + 1179664 + ($68 << 2) >> 2] | 0;
     L36 : do if (($72 | 0) > ($74 | 0)) {
      HEAP16[$$3 >> 1] = $74;
      $$0376 = $20;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $89 = $74;
        break L36;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($72 | 0)) HEAP32[$$0376 >> 2] = $74;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $72;
      if (($72 | 0) < ($74 | 0)) {
       $$1377 = $20;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $89 = $72;
         break L36;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($74 | 0)) HEAP32[$$1377 >> 2] = $72;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $89 = $72;
     } while (0);
     $91 = ($89 << 16 >> 16) * 7 | 0;
     $93 = $4 + 1310736 + ($91 + -7 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + 1;
     $97 = $4 + 1310736 + ($91 + -6 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $$2389;
     $101 = $4 + 1310736 + ($91 + -5 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($91 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $106 = HEAP16[$67 >> 1] | 0;
    if ($106 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $61;
     $142 = $70 * 7 | 0;
     $143 = $4 + 1310736 + ($142 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 1;
     $147 = $4 + 1310736 + ($142 + 1 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $$2389;
     $151 = $4 + 1310736 + ($142 + 2 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $$0384;
     $155 = $4 + 1310736 + ($142 + 3 << 2) | 0;
     if ((HEAP32[$155 >> 2] | 0) > ($$2389 | 0)) HEAP32[$155 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($142 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $109 = HEAP32[$71 >> 2] | 0;
    $112 = HEAP32[$4 + 1179664 + (($106 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($109 | 0) > ($112 | 0)) {
     HEAP16[$$3 >> 1] = $112;
     $$2378 = $20;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $127 = $112;
       break L59;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($109 | 0)) HEAP32[$$2378 >> 2] = $112;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $109;
     if (($109 | 0) < ($112 | 0)) {
      $$3379 = $20;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $127 = $109;
        break L59;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($112 | 0)) HEAP32[$$3379 >> 2] = $109;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $127 = $109;
    } while (0);
    $129 = ($127 << 16 >> 16) * 7 | 0;
    $131 = $4 + 1310736 + ($129 + -7 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
    $135 = $4 + 1310736 + ($129 + -6 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $$2389;
    $139 = $4 + 1310736 + ($129 + -5 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 4 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $223 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $20;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $225 = HEAP32[$$4 >> 2] | 0;
   if (($225 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $231 = $$1385;
   } else {
    $$2386 = $$1385;
    $231 = HEAP32[$4 + 1179664 + ($225 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $231;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $234 = $4 + 8 | 0;
  $235 = $$1385 + -1 | 0;
  HEAP32[$234 >> 2] = $235;
  if (!$235) $$0 = 0; else {
   _memset($223 | 0, 0, $235 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $235 << 4 | 0) | 0;
   $$4391 = 0;
   $241 = $235;
   while (1) {
    if (($$4391 | 0) >= ($241 | 0)) {
     $$5 = 0;
     break;
    }
    $242 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($242 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($242 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $241 = HEAP32[$234 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $254 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $$5 * 7 | 0;
    $258 = $4 + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $4 + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $4 + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$4 + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $4 + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $4 + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$4 + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$234 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $308 = $4 + 12 + ($$6 << 2) | 0;
    $311 = $$6 << 1;
    $312 = $4 + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $318 = $4 + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWRA3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $105 = 0, $108 = 0, $111 = 0, $126 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $138 = 0, $14 = 0, $141 = 0, $142 = 0, $146 = 0, $150 = 0, $154 = 0, $159 = 0, $160 = 0, $164 = 0, $168 = 0, $172 = 0, $177 = 0, $180 = 0, $182 = 0, $186 = 0, $190 = 0, $193 = 0, $197 = 0, $20 = 0, $202 = 0, $21 = 0, $222 = 0, $224 = 0, $230 = 0, $233 = 0, $234 = 0, $240 = 0, $241 = 0, $25 = 0, $253 = 0, $254 = 0, $257 = 0, $264 = 0, $265 = 0, $273 = 0, $276 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $295 = 0, $298 = 0, $302 = 0, $307 = 0, $310 = 0, $311 = 0, $317 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $5 = 0, $50 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $88 = 0, $90 = 0, $92 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($14 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0367 = $0 + ($21 << 2) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($6 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 2 >> 0] | 0) + (HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 + 3 >> 0] | 0) | 0) > ($13 | 0)) {
    $40 = $$3 + ($25 << 1) | 0;
    $41 = HEAP16[$40 >> 1] | 0;
    if ($41 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $41;
     $44 = ($41 << 16 >> 16) * 7 | 0;
     $46 = $4 + 1310736 + ($44 + -7 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + 1;
     $50 = $4 + 1310736 + ($44 + -6 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $$2389;
     $54 = $4 + 1310736 + ($44 + -5 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($44 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $60 = HEAP16[$40 + 2 >> 1] | 0;
    $63 = HEAP16[$40 + -2 >> 1] | 0;
    $65 = $63 << 16 >> 16 > 0;
    $66 = ($63 << 16 >> 16) + -1 | 0;
    $67 = $$3 + -2 | 0;
    if ($60 << 16 >> 16 <= 0) {
     if ($65) {
      HEAP16[$$3 >> 1] = $63;
      $159 = $66 * 7 | 0;
      $160 = $4 + 1310736 + ($159 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + 1;
      $164 = $4 + 1310736 + ($159 + 1 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $$2389;
      $168 = $4 + 1310736 + ($159 + 2 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $$0384;
      $172 = $4 + 1310736 + ($159 + 4 << 2) | 0;
      if ((HEAP32[$172 >> 2] | 0) < ($$2389 | 0)) HEAP32[$172 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($159 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $177 = HEAP16[$67 >> 1] | 0;
     if ($177 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $177;
      $180 = ($177 << 16 >> 16) * 7 | 0;
      $182 = $4 + 1310736 + ($180 + -7 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + 1;
      $186 = $4 + 1310736 + ($180 + -6 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + $$2389;
      $190 = $4 + 1310736 + ($180 + -5 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $$0384;
      $193 = $180 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($193 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $193;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $197 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $197;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $197 << 16 >> 16;
      $202 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($202 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($202 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($202 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($202 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($202 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($202 + 5 << 2) >> 2] = $$0384;
      $$2374 = $197;
      $$sink = $$0384;
      $$sink3 = $202 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $69 = ($60 << 16 >> 16) + -1 | 0;
    $70 = $4 + 1179664 + ($69 << 2) | 0;
    if ($65) {
     $71 = HEAP32[$70 >> 2] | 0;
     $73 = HEAP32[$4 + 1179664 + ($66 << 2) >> 2] | 0;
     L35 : do if (($71 | 0) > ($73 | 0)) {
      HEAP16[$$3 >> 1] = $73;
      $$0376 = $20;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $88 = $73;
        break L35;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($71 | 0)) HEAP32[$$0376 >> 2] = $73;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $71;
      if (($71 | 0) < ($73 | 0)) {
       $$1377 = $20;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $88 = $71;
         break L35;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($73 | 0)) HEAP32[$$1377 >> 2] = $71;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $88 = $71;
     } while (0);
     $90 = ($88 << 16 >> 16) * 7 | 0;
     $92 = $4 + 1310736 + ($90 + -7 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + 1;
     $96 = $4 + 1310736 + ($90 + -6 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $$2389;
     $100 = $4 + 1310736 + ($90 + -5 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($90 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $105 = HEAP16[$67 >> 1] | 0;
    if ($105 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $60;
     $141 = $69 * 7 | 0;
     $142 = $4 + 1310736 + ($141 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
     $146 = $4 + 1310736 + ($141 + 1 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$2389;
     $150 = $4 + 1310736 + ($141 + 2 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$0384;
     $154 = $4 + 1310736 + ($141 + 3 << 2) | 0;
     if ((HEAP32[$154 >> 2] | 0) > ($$2389 | 0)) HEAP32[$154 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($141 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $108 = HEAP32[$70 >> 2] | 0;
    $111 = HEAP32[$4 + 1179664 + (($105 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($108 | 0) > ($111 | 0)) {
     HEAP16[$$3 >> 1] = $111;
     $$2378 = $20;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $126 = $111;
       break L58;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($108 | 0)) HEAP32[$$2378 >> 2] = $111;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $108;
     if (($108 | 0) < ($111 | 0)) {
      $$3379 = $20;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $126 = $108;
        break L58;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($111 | 0)) HEAP32[$$3379 >> 2] = $108;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $126 = $108;
    } while (0);
    $128 = ($126 << 16 >> 16) * 7 | 0;
    $130 = $4 + 1310736 + ($128 + -7 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
    $134 = $4 + 1310736 + ($128 + -6 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $$2389;
    $138 = $4 + 1310736 + ($128 + -5 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 8 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $222 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $20;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $224 = HEAP32[$$4 >> 2] | 0;
   if (($224 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $230 = $$1385;
   } else {
    $$2386 = $$1385;
    $230 = HEAP32[$4 + 1179664 + ($224 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $230;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $233 = $4 + 8 | 0;
  $234 = $$1385 + -1 | 0;
  HEAP32[$233 >> 2] = $234;
  if (!$234) $$0 = 0; else {
   _memset($222 | 0, 0, $234 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $234 << 4 | 0) | 0;
   $$4391 = 0;
   $240 = $234;
   while (1) {
    if (($$4391 | 0) >= ($240 | 0)) {
     $$5 = 0;
     break;
    }
    $241 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($241 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($241 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($241 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($241 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $240 = HEAP32[$233 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $253 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $254 = $$5 * 7 | 0;
    $257 = $4 + 12 + ($253 << 2) | 0;
    HEAP32[$257 >> 2] = (HEAP32[$257 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($254 << 2) >> 2] | 0);
    $264 = $253 << 1;
    $265 = $4 + 655376 + ($264 << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$4 + 1310736 + ($254 + 1 << 2) >> 2] | 0);
    $273 = $4 + 655376 + (($264 | 1) << 3) | 0;
    HEAPF64[$273 >> 3] = +HEAPF64[$273 >> 3] + +(HEAP32[$4 + 1310736 + ($254 + 2 << 2) >> 2] | 0);
    $276 = $253 << 2;
    $277 = $4 + 131084 + ($276 << 2) | 0;
    $281 = HEAP32[$4 + 1310736 + ($254 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) > ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $4 + 131084 + (($276 | 1) << 2) | 0;
    $288 = HEAP32[$4 + 1310736 + ($254 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) < ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $4 + 131084 + (($276 | 2) << 2) | 0;
    $295 = HEAP32[$4 + 1310736 + ($254 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) > ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $298 = $4 + 131084 + (($276 | 3) << 2) | 0;
    $302 = HEAP32[$4 + 1310736 + ($254 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$298 >> 2] | 0) < ($302 | 0)) HEAP32[$298 >> 2] = $302;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$233 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $307 = $4 + 12 + ($$6 << 2) | 0;
    $310 = $$6 << 1;
    $311 = $4 + 655376 + ($310 << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $317 = $4 + 655376 + (($310 | 1) << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBRA3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $105 = 0, $108 = 0, $111 = 0, $126 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $138 = 0, $14 = 0, $141 = 0, $142 = 0, $146 = 0, $150 = 0, $154 = 0, $159 = 0, $160 = 0, $164 = 0, $168 = 0, $172 = 0, $177 = 0, $180 = 0, $182 = 0, $186 = 0, $190 = 0, $193 = 0, $197 = 0, $20 = 0, $202 = 0, $21 = 0, $222 = 0, $224 = 0, $230 = 0, $233 = 0, $234 = 0, $240 = 0, $241 = 0, $25 = 0, $253 = 0, $254 = 0, $257 = 0, $264 = 0, $265 = 0, $273 = 0, $276 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $295 = 0, $298 = 0, $302 = 0, $307 = 0, $310 = 0, $311 = 0, $317 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $5 = 0, $50 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $88 = 0, $90 = 0, $92 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($14 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0367 = $0 + ($21 << 2) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($6 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 2 >> 0] | 0) + (HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 + 3 >> 0] | 0) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } else {
    $40 = $$3 + ($25 << 1) | 0;
    $41 = HEAP16[$40 >> 1] | 0;
    if ($41 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $41;
     $44 = ($41 << 16 >> 16) * 7 | 0;
     $46 = $4 + 1310736 + ($44 + -7 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + 1;
     $50 = $4 + 1310736 + ($44 + -6 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $$2389;
     $54 = $4 + 1310736 + ($44 + -5 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($44 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $60 = HEAP16[$40 + 2 >> 1] | 0;
    $63 = HEAP16[$40 + -2 >> 1] | 0;
    $65 = $63 << 16 >> 16 > 0;
    $66 = ($63 << 16 >> 16) + -1 | 0;
    $67 = $$3 + -2 | 0;
    if ($60 << 16 >> 16 <= 0) {
     if ($65) {
      HEAP16[$$3 >> 1] = $63;
      $159 = $66 * 7 | 0;
      $160 = $4 + 1310736 + ($159 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + 1;
      $164 = $4 + 1310736 + ($159 + 1 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $$2389;
      $168 = $4 + 1310736 + ($159 + 2 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $$0384;
      $172 = $4 + 1310736 + ($159 + 4 << 2) | 0;
      if ((HEAP32[$172 >> 2] | 0) < ($$2389 | 0)) HEAP32[$172 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($159 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $177 = HEAP16[$67 >> 1] | 0;
     if ($177 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $177;
      $180 = ($177 << 16 >> 16) * 7 | 0;
      $182 = $4 + 1310736 + ($180 + -7 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + 1;
      $186 = $4 + 1310736 + ($180 + -6 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + $$2389;
      $190 = $4 + 1310736 + ($180 + -5 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $$0384;
      $193 = $180 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($193 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $193;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $197 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $197;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $197 << 16 >> 16;
      $202 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($202 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($202 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($202 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($202 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($202 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($202 + 5 << 2) >> 2] = $$0384;
      $$2374 = $197;
      $$sink = $$0384;
      $$sink3 = $202 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $69 = ($60 << 16 >> 16) + -1 | 0;
    $70 = $4 + 1179664 + ($69 << 2) | 0;
    if ($65) {
     $71 = HEAP32[$70 >> 2] | 0;
     $73 = HEAP32[$4 + 1179664 + ($66 << 2) >> 2] | 0;
     L36 : do if (($71 | 0) > ($73 | 0)) {
      HEAP16[$$3 >> 1] = $73;
      $$0376 = $20;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $88 = $73;
        break L36;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($71 | 0)) HEAP32[$$0376 >> 2] = $73;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $71;
      if (($71 | 0) < ($73 | 0)) {
       $$1377 = $20;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $88 = $71;
         break L36;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($73 | 0)) HEAP32[$$1377 >> 2] = $71;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $88 = $71;
     } while (0);
     $90 = ($88 << 16 >> 16) * 7 | 0;
     $92 = $4 + 1310736 + ($90 + -7 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + 1;
     $96 = $4 + 1310736 + ($90 + -6 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $$2389;
     $100 = $4 + 1310736 + ($90 + -5 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($90 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $105 = HEAP16[$67 >> 1] | 0;
    if ($105 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $60;
     $141 = $69 * 7 | 0;
     $142 = $4 + 1310736 + ($141 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
     $146 = $4 + 1310736 + ($141 + 1 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $$2389;
     $150 = $4 + 1310736 + ($141 + 2 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $$0384;
     $154 = $4 + 1310736 + ($141 + 3 << 2) | 0;
     if ((HEAP32[$154 >> 2] | 0) > ($$2389 | 0)) HEAP32[$154 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($141 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $108 = HEAP32[$70 >> 2] | 0;
    $111 = HEAP32[$4 + 1179664 + (($105 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($108 | 0) > ($111 | 0)) {
     HEAP16[$$3 >> 1] = $111;
     $$2378 = $20;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $126 = $111;
       break L59;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($108 | 0)) HEAP32[$$2378 >> 2] = $111;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $108;
     if (($108 | 0) < ($111 | 0)) {
      $$3379 = $20;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $126 = $108;
        break L59;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($111 | 0)) HEAP32[$$3379 >> 2] = $108;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $126 = $108;
    } while (0);
    $128 = ($126 << 16 >> 16) * 7 | 0;
    $130 = $4 + 1310736 + ($128 + -7 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
    $134 = $4 + 1310736 + ($128 + -6 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $$2389;
    $138 = $4 + 1310736 + ($128 + -5 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 8 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $222 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $20;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $224 = HEAP32[$$4 >> 2] | 0;
   if (($224 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $230 = $$1385;
   } else {
    $$2386 = $$1385;
    $230 = HEAP32[$4 + 1179664 + ($224 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $230;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $233 = $4 + 8 | 0;
  $234 = $$1385 + -1 | 0;
  HEAP32[$233 >> 2] = $234;
  if (!$234) $$0 = 0; else {
   _memset($222 | 0, 0, $234 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $234 << 4 | 0) | 0;
   $$4391 = 0;
   $240 = $234;
   while (1) {
    if (($$4391 | 0) >= ($240 | 0)) {
     $$5 = 0;
     break;
    }
    $241 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($241 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($241 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($241 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($241 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $240 = HEAP32[$233 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $253 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $254 = $$5 * 7 | 0;
    $257 = $4 + 12 + ($253 << 2) | 0;
    HEAP32[$257 >> 2] = (HEAP32[$257 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($254 << 2) >> 2] | 0);
    $264 = $253 << 1;
    $265 = $4 + 655376 + ($264 << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$4 + 1310736 + ($254 + 1 << 2) >> 2] | 0);
    $273 = $4 + 655376 + (($264 | 1) << 3) | 0;
    HEAPF64[$273 >> 3] = +HEAPF64[$273 >> 3] + +(HEAP32[$4 + 1310736 + ($254 + 2 << 2) >> 2] | 0);
    $276 = $253 << 2;
    $277 = $4 + 131084 + ($276 << 2) | 0;
    $281 = HEAP32[$4 + 1310736 + ($254 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) > ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $4 + 131084 + (($276 | 1) << 2) | 0;
    $288 = HEAP32[$4 + 1310736 + ($254 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) < ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $4 + 131084 + (($276 | 2) << 2) | 0;
    $295 = HEAP32[$4 + 1310736 + ($254 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) > ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $298 = $4 + 131084 + (($276 | 3) << 2) | 0;
    $302 = HEAP32[$4 + 1310736 + ($254 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$298 >> 2] | 0) < ($302 | 0)) HEAP32[$298 >> 2] = $302;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$233 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $307 = $4 + 12 + ($$6 << 2) | 0;
    $310 = $$6 << 1;
    $311 = $4 + 655376 + ($310 << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $317 = $4 + 655376 + (($310 | 1) << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $104 = 0, $107 = 0, $110 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $133 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $149 = 0, $153 = 0, $158 = 0, $159 = 0, $163 = 0, $167 = 0, $171 = 0, $176 = 0, $179 = 0, $181 = 0, $185 = 0, $189 = 0, $192 = 0, $196 = 0, $20 = 0, $201 = 0, $21 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $25 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($14 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0367 = $0 + ($21 * 3 | 0) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($6 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($13 | 0)) {
    $39 = $$3 + ($25 << 1) | 0;
    $40 = HEAP16[$39 >> 1] | 0;
    if ($40 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $40;
     $43 = ($40 << 16 >> 16) * 7 | 0;
     $45 = $4 + 1310736 + ($43 + -7 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
     $49 = $4 + 1310736 + ($43 + -6 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $$2389;
     $53 = $4 + 1310736 + ($43 + -5 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($43 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $59 = HEAP16[$39 + 2 >> 1] | 0;
    $62 = HEAP16[$39 + -2 >> 1] | 0;
    $64 = $62 << 16 >> 16 > 0;
    $65 = $$3 + -2 | 0;
    $66 = ($62 << 16 >> 16) + -1 | 0;
    if ($59 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$$3 >> 1] = $62;
      $158 = $66 * 7 | 0;
      $159 = $4 + 1310736 + ($158 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + 1;
      $163 = $4 + 1310736 + ($158 + 1 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $$2389;
      $167 = $4 + 1310736 + ($158 + 2 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$0384;
      $171 = $4 + 1310736 + ($158 + 4 << 2) | 0;
      if ((HEAP32[$171 >> 2] | 0) < ($$2389 | 0)) HEAP32[$171 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($158 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $176 = HEAP16[$65 >> 1] | 0;
     if ($176 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $176;
      $179 = ($176 << 16 >> 16) * 7 | 0;
      $181 = $4 + 1310736 + ($179 + -7 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + 1;
      $185 = $4 + 1310736 + ($179 + -6 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $$2389;
      $189 = $4 + 1310736 + ($179 + -5 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$0384;
      $192 = $179 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($192 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $192;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $196 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $196;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $196 << 16 >> 16;
      $201 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($201 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($201 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($201 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 5 << 2) >> 2] = $$0384;
      $$2374 = $196;
      $$sink = $$0384;
      $$sink3 = $201 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $68 = ($59 << 16 >> 16) + -1 | 0;
    $69 = $4 + 1179664 + ($68 << 2) | 0;
    if ($64) {
     $70 = HEAP32[$69 >> 2] | 0;
     $72 = HEAP32[$4 + 1179664 + ($66 << 2) >> 2] | 0;
     L35 : do if (($70 | 0) > ($72 | 0)) {
      HEAP16[$$3 >> 1] = $72;
      $$0376 = $20;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $87 = $72;
        break L35;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($70 | 0)) HEAP32[$$0376 >> 2] = $72;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $70;
      if (($70 | 0) < ($72 | 0)) {
       $$1377 = $20;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $87 = $70;
         break L35;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($72 | 0)) HEAP32[$$1377 >> 2] = $70;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $87 = $70;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $4 + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $4 + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $$2389;
     $99 = $4 + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($89 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $104 = HEAP16[$65 >> 1] | 0;
    if ($104 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $59;
     $140 = $68 * 7 | 0;
     $141 = $4 + 1310736 + ($140 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 1;
     $145 = $4 + 1310736 + ($140 + 1 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$2389;
     $149 = $4 + 1310736 + ($140 + 2 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$0384;
     $153 = $4 + 1310736 + ($140 + 3 << 2) | 0;
     if ((HEAP32[$153 >> 2] | 0) > ($$2389 | 0)) HEAP32[$153 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($140 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $107 = HEAP32[$69 >> 2] | 0;
    $110 = HEAP32[$4 + 1179664 + (($104 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($107 | 0) > ($110 | 0)) {
     HEAP16[$$3 >> 1] = $110;
     $$2378 = $20;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $125 = $110;
       break L58;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($107 | 0)) HEAP32[$$2378 >> 2] = $110;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $107;
     if (($107 | 0) < ($110 | 0)) {
      $$3379 = $20;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $125 = $107;
        break L58;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($110 | 0)) HEAP32[$$3379 >> 2] = $107;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $125 = $107;
    } while (0);
    $127 = ($125 << 16 >> 16) * 7 | 0;
    $129 = $4 + 1310736 + ($127 + -7 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
    $133 = $4 + 1310736 + ($127 + -6 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$2389;
    $137 = $4 + 1310736 + ($127 + -5 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 3 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 6 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $20;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $229 = $$1385;
   } else {
    $$2386 = $$1385;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1385 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4391 = 0;
   $239 = $233;
   while (1) {
    if (($$4391 | 0) >= ($239 | 0)) {
     $$5 = 0;
     break;
    }
    $240 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($240 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($240 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $239 = HEAP32[$232 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $252 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $$5 * 7 | 0;
    $256 = $4 + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $4 + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $4 + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $4 + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$4 + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $4 + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $4 + 12 + ($$6 << 2) | 0;
    $309 = $$6 << 1;
    $310 = $4 + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $4 + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3C($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $104 = 0, $107 = 0, $110 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $133 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $149 = 0, $153 = 0, $158 = 0, $159 = 0, $163 = 0, $167 = 0, $171 = 0, $176 = 0, $179 = 0, $181 = 0, $185 = 0, $189 = 0, $192 = 0, $196 = 0, $20 = 0, $201 = 0, $21 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $25 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($14 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0367 = $0 + ($21 * 3 | 0) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($6 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } else {
    $39 = $$3 + ($25 << 1) | 0;
    $40 = HEAP16[$39 >> 1] | 0;
    if ($40 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $40;
     $43 = ($40 << 16 >> 16) * 7 | 0;
     $45 = $4 + 1310736 + ($43 + -7 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
     $49 = $4 + 1310736 + ($43 + -6 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $$2389;
     $53 = $4 + 1310736 + ($43 + -5 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($43 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $59 = HEAP16[$39 + 2 >> 1] | 0;
    $62 = HEAP16[$39 + -2 >> 1] | 0;
    $64 = $62 << 16 >> 16 > 0;
    $65 = $$3 + -2 | 0;
    $66 = ($62 << 16 >> 16) + -1 | 0;
    if ($59 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$$3 >> 1] = $62;
      $158 = $66 * 7 | 0;
      $159 = $4 + 1310736 + ($158 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + 1;
      $163 = $4 + 1310736 + ($158 + 1 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $$2389;
      $167 = $4 + 1310736 + ($158 + 2 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$0384;
      $171 = $4 + 1310736 + ($158 + 4 << 2) | 0;
      if ((HEAP32[$171 >> 2] | 0) < ($$2389 | 0)) HEAP32[$171 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($158 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $176 = HEAP16[$65 >> 1] | 0;
     if ($176 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $176;
      $179 = ($176 << 16 >> 16) * 7 | 0;
      $181 = $4 + 1310736 + ($179 + -7 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + 1;
      $185 = $4 + 1310736 + ($179 + -6 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $$2389;
      $189 = $4 + 1310736 + ($179 + -5 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$0384;
      $192 = $179 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($192 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $192;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $196 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $196;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $196 << 16 >> 16;
      $201 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($201 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($201 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($201 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 5 << 2) >> 2] = $$0384;
      $$2374 = $196;
      $$sink = $$0384;
      $$sink3 = $201 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $68 = ($59 << 16 >> 16) + -1 | 0;
    $69 = $4 + 1179664 + ($68 << 2) | 0;
    if ($64) {
     $70 = HEAP32[$69 >> 2] | 0;
     $72 = HEAP32[$4 + 1179664 + ($66 << 2) >> 2] | 0;
     L36 : do if (($70 | 0) > ($72 | 0)) {
      HEAP16[$$3 >> 1] = $72;
      $$0376 = $20;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $87 = $72;
        break L36;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($70 | 0)) HEAP32[$$0376 >> 2] = $72;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $70;
      if (($70 | 0) < ($72 | 0)) {
       $$1377 = $20;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $87 = $70;
         break L36;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($72 | 0)) HEAP32[$$1377 >> 2] = $70;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $87 = $70;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $4 + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $4 + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $$2389;
     $99 = $4 + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($89 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $104 = HEAP16[$65 >> 1] | 0;
    if ($104 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $59;
     $140 = $68 * 7 | 0;
     $141 = $4 + 1310736 + ($140 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 1;
     $145 = $4 + 1310736 + ($140 + 1 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$2389;
     $149 = $4 + 1310736 + ($140 + 2 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$0384;
     $153 = $4 + 1310736 + ($140 + 3 << 2) | 0;
     if ((HEAP32[$153 >> 2] | 0) > ($$2389 | 0)) HEAP32[$153 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($140 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $107 = HEAP32[$69 >> 2] | 0;
    $110 = HEAP32[$4 + 1179664 + (($104 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($107 | 0) > ($110 | 0)) {
     HEAP16[$$3 >> 1] = $110;
     $$2378 = $20;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $125 = $110;
       break L59;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($107 | 0)) HEAP32[$$2378 >> 2] = $110;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $107;
     if (($107 | 0) < ($110 | 0)) {
      $$3379 = $20;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $125 = $107;
        break L59;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($110 | 0)) HEAP32[$$3379 >> 2] = $107;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $125 = $107;
    } while (0);
    $127 = ($125 << 16 >> 16) * 7 | 0;
    $129 = $4 + 1310736 + ($127 + -7 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
    $133 = $4 + 1310736 + ($127 + -6 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$2389;
    $137 = $4 + 1310736 + ($127 + -5 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 3 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 6 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $20;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $229 = $$1385;
   } else {
    $$2386 = $$1385;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1385 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4391 = 0;
   $239 = $233;
   while (1) {
    if (($$4391 | 0) >= ($239 | 0)) {
     $$5 = 0;
     break;
    }
    $240 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($240 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($240 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $239 = HEAP32[$232 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $252 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $$5 * 7 | 0;
    $256 = $4 + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $4 + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $4 + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $4 + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$4 + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $4 + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $4 + 12 + ($$6 << 2) | 0;
    $309 = $$6 << 1;
    $310 = $4 + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $4 + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3CA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $104 = 0, $107 = 0, $110 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $133 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $149 = 0, $153 = 0, $158 = 0, $159 = 0, $163 = 0, $167 = 0, $171 = 0, $176 = 0, $179 = 0, $181 = 0, $185 = 0, $189 = 0, $192 = 0, $196 = 0, $20 = 0, $201 = 0, $21 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $25 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($14 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0367 = $0 + ($21 << 2) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($6 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($13 | 0)) {
    $39 = $$3 + ($25 << 1) | 0;
    $40 = HEAP16[$39 >> 1] | 0;
    if ($40 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $40;
     $43 = ($40 << 16 >> 16) * 7 | 0;
     $45 = $4 + 1310736 + ($43 + -7 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
     $49 = $4 + 1310736 + ($43 + -6 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $$2389;
     $53 = $4 + 1310736 + ($43 + -5 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($43 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $59 = HEAP16[$39 + 2 >> 1] | 0;
    $62 = HEAP16[$39 + -2 >> 1] | 0;
    $64 = $62 << 16 >> 16 > 0;
    $65 = ($62 << 16 >> 16) + -1 | 0;
    $66 = $$3 + -2 | 0;
    if ($59 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$$3 >> 1] = $62;
      $158 = $65 * 7 | 0;
      $159 = $4 + 1310736 + ($158 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + 1;
      $163 = $4 + 1310736 + ($158 + 1 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $$2389;
      $167 = $4 + 1310736 + ($158 + 2 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$0384;
      $171 = $4 + 1310736 + ($158 + 4 << 2) | 0;
      if ((HEAP32[$171 >> 2] | 0) < ($$2389 | 0)) HEAP32[$171 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($158 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $176 = HEAP16[$66 >> 1] | 0;
     if ($176 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $176;
      $179 = ($176 << 16 >> 16) * 7 | 0;
      $181 = $4 + 1310736 + ($179 + -7 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + 1;
      $185 = $4 + 1310736 + ($179 + -6 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $$2389;
      $189 = $4 + 1310736 + ($179 + -5 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$0384;
      $192 = $179 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($192 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $192;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $196 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $196;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $196 << 16 >> 16;
      $201 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($201 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($201 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($201 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 5 << 2) >> 2] = $$0384;
      $$2374 = $196;
      $$sink = $$0384;
      $$sink3 = $201 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $68 = ($59 << 16 >> 16) + -1 | 0;
    $69 = $4 + 1179664 + ($68 << 2) | 0;
    if ($64) {
     $70 = HEAP32[$69 >> 2] | 0;
     $72 = HEAP32[$4 + 1179664 + ($65 << 2) >> 2] | 0;
     L35 : do if (($70 | 0) > ($72 | 0)) {
      HEAP16[$$3 >> 1] = $72;
      $$0376 = $20;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $87 = $72;
        break L35;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($70 | 0)) HEAP32[$$0376 >> 2] = $72;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $70;
      if (($70 | 0) < ($72 | 0)) {
       $$1377 = $20;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $87 = $70;
         break L35;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($72 | 0)) HEAP32[$$1377 >> 2] = $70;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $87 = $70;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $4 + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $4 + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $$2389;
     $99 = $4 + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($89 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $104 = HEAP16[$66 >> 1] | 0;
    if ($104 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $59;
     $140 = $68 * 7 | 0;
     $141 = $4 + 1310736 + ($140 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 1;
     $145 = $4 + 1310736 + ($140 + 1 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$2389;
     $149 = $4 + 1310736 + ($140 + 2 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$0384;
     $153 = $4 + 1310736 + ($140 + 3 << 2) | 0;
     if ((HEAP32[$153 >> 2] | 0) > ($$2389 | 0)) HEAP32[$153 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($140 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $107 = HEAP32[$69 >> 2] | 0;
    $110 = HEAP32[$4 + 1179664 + (($104 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($107 | 0) > ($110 | 0)) {
     HEAP16[$$3 >> 1] = $110;
     $$2378 = $20;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $125 = $110;
       break L58;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($107 | 0)) HEAP32[$$2378 >> 2] = $110;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $107;
     if (($107 | 0) < ($110 | 0)) {
      $$3379 = $20;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $125 = $107;
        break L58;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($110 | 0)) HEAP32[$$3379 >> 2] = $107;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $125 = $107;
    } while (0);
    $127 = ($125 << 16 >> 16) * 7 | 0;
    $129 = $4 + 1310736 + ($127 + -7 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
    $133 = $4 + 1310736 + ($127 + -6 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$2389;
    $137 = $4 + 1310736 + ($127 + -5 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 8 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $20;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $229 = $$1385;
   } else {
    $$2386 = $$1385;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1385 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4391 = 0;
   $239 = $233;
   while (1) {
    if (($$4391 | 0) >= ($239 | 0)) {
     $$5 = 0;
     break;
    }
    $240 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($240 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($240 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $239 = HEAP32[$232 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $252 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $$5 * 7 | 0;
    $256 = $4 + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $4 + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $4 + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $4 + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$4 + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $4 + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $4 + 12 + ($$6 << 2) | 0;
    $309 = $$6 << 1;
    $310 = $4 + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $4 + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3CA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $104 = 0, $107 = 0, $110 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $133 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $149 = 0, $153 = 0, $158 = 0, $159 = 0, $163 = 0, $167 = 0, $171 = 0, $176 = 0, $179 = 0, $181 = 0, $185 = 0, $189 = 0, $192 = 0, $196 = 0, $20 = 0, $201 = 0, $21 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $25 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0368 = $5;
 $$0370 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($1 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $13 = $3 * 3 | 0;
 $14 = $1 + -1 | 0;
 $$1369 = $5;
 $$1371 = $5 + ($14 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($2 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1371 = $$1371 + ($1 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $20 = $4 + 1179664 | 0;
 $21 = $1 + 1 | 0;
 $25 = 0 - $1 | 0;
 $$0367 = $0 + ($21 << 2) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $5 + ($21 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($6 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($14 | 0)) break;
   do if (((HEAPU8[$$1 + 1 >> 0] | 0) + (HEAPU8[$$1 >> 0] | 0) + (HEAPU8[$$1 + 2 >> 0] | 0) | 0) > ($13 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } else {
    $39 = $$3 + ($25 << 1) | 0;
    $40 = HEAP16[$39 >> 1] | 0;
    if ($40 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $40;
     $43 = ($40 << 16 >> 16) * 7 | 0;
     $45 = $4 + 1310736 + ($43 + -7 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
     $49 = $4 + 1310736 + ($43 + -6 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $$2389;
     $53 = $4 + 1310736 + ($43 + -5 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($43 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $59 = HEAP16[$39 + 2 >> 1] | 0;
    $62 = HEAP16[$39 + -2 >> 1] | 0;
    $64 = $62 << 16 >> 16 > 0;
    $65 = ($62 << 16 >> 16) + -1 | 0;
    $66 = $$3 + -2 | 0;
    if ($59 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$$3 >> 1] = $62;
      $158 = $65 * 7 | 0;
      $159 = $4 + 1310736 + ($158 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + 1;
      $163 = $4 + 1310736 + ($158 + 1 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $$2389;
      $167 = $4 + 1310736 + ($158 + 2 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $$0384;
      $171 = $4 + 1310736 + ($158 + 4 << 2) | 0;
      if ((HEAP32[$171 >> 2] | 0) < ($$2389 | 0)) HEAP32[$171 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($158 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $176 = HEAP16[$66 >> 1] | 0;
     if ($176 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $176;
      $179 = ($176 << 16 >> 16) * 7 | 0;
      $181 = $4 + 1310736 + ($179 + -7 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + 1;
      $185 = $4 + 1310736 + ($179 + -6 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $$2389;
      $189 = $4 + 1310736 + ($179 + -5 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $$0384;
      $192 = $179 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($192 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $192;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $196 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $196;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $196 << 16 >> 16;
      $201 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($201 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($201 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($201 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($201 + 5 << 2) >> 2] = $$0384;
      $$2374 = $196;
      $$sink = $$0384;
      $$sink3 = $201 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $68 = ($59 << 16 >> 16) + -1 | 0;
    $69 = $4 + 1179664 + ($68 << 2) | 0;
    if ($64) {
     $70 = HEAP32[$69 >> 2] | 0;
     $72 = HEAP32[$4 + 1179664 + ($65 << 2) >> 2] | 0;
     L36 : do if (($70 | 0) > ($72 | 0)) {
      HEAP16[$$3 >> 1] = $72;
      $$0376 = $20;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $87 = $72;
        break L36;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($70 | 0)) HEAP32[$$0376 >> 2] = $72;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $70;
      if (($70 | 0) < ($72 | 0)) {
       $$1377 = $20;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $87 = $70;
         break L36;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($72 | 0)) HEAP32[$$1377 >> 2] = $70;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $87 = $70;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $4 + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $4 + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $$2389;
     $99 = $4 + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($89 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $104 = HEAP16[$66 >> 1] | 0;
    if ($104 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $59;
     $140 = $68 * 7 | 0;
     $141 = $4 + 1310736 + ($140 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 1;
     $145 = $4 + 1310736 + ($140 + 1 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$2389;
     $149 = $4 + 1310736 + ($140 + 2 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $$0384;
     $153 = $4 + 1310736 + ($140 + 3 << 2) | 0;
     if ((HEAP32[$153 >> 2] | 0) > ($$2389 | 0)) HEAP32[$153 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($140 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $107 = HEAP32[$69 >> 2] | 0;
    $110 = HEAP32[$4 + 1179664 + (($104 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($107 | 0) > ($110 | 0)) {
     HEAP16[$$3 >> 1] = $110;
     $$2378 = $20;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $125 = $110;
       break L59;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($107 | 0)) HEAP32[$$2378 >> 2] = $110;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $107;
     if (($107 | 0) < ($110 | 0)) {
      $$3379 = $20;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $125 = $107;
        break L59;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($110 | 0)) HEAP32[$$3379 >> 2] = $107;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $125 = $107;
    } while (0);
    $127 = ($125 << 16 >> 16) * 7 | 0;
    $129 = $4 + 1310736 + ($127 + -7 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
    $133 = $4 + 1310736 + ($127 + -6 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$2389;
    $137 = $4 + 1310736 + ($127 + -5 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + 8 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $20;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $223 = HEAP32[$$4 >> 2] | 0;
   if (($223 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $229 = $$1385;
   } else {
    $$2386 = $$1385;
    $229 = HEAP32[$4 + 1179664 + ($223 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $229;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $232 = $4 + 8 | 0;
  $233 = $$1385 + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $$4391 = 0;
   $239 = $233;
   while (1) {
    if (($$4391 | 0) >= ($239 | 0)) {
     $$5 = 0;
     break;
    }
    $240 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($240 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($240 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $239 = HEAP32[$232 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $252 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $$5 * 7 | 0;
    $256 = $4 + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $4 + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $4 + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$4 + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $4 + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$4 + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $4 + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$4 + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $4 + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$4 + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $4 + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$4 + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $4 + 12 + ($$6 << 2) | 0;
    $309 = $$6 << 1;
    $310 = $4 + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $4 + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBICY($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $103 = 0, $106 = 0, $121 = 0, $123 = 0, $125 = 0, $129 = 0, $133 = 0, $136 = 0, $137 = 0, $141 = 0, $145 = 0, $149 = 0, $15 = 0, $154 = 0, $155 = 0, $159 = 0, $163 = 0, $167 = 0, $172 = 0, $175 = 0, $177 = 0, $181 = 0, $185 = 0, $188 = 0, $192 = 0, $197 = 0, $21 = 0, $218 = 0, $220 = 0, $226 = 0, $229 = 0, $230 = 0, $236 = 0, $237 = 0, $24 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $272 = 0, $273 = 0, $277 = 0, $28 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $303 = 0, $306 = 0, $307 = 0, $313 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $55 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $91 = 0, $95 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0368 = $7;
 $$0370 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($5 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1369 = $7;
 $$1371 = $7 + ($15 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($6 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($5 << 1) | 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $24 = $1 << 1;
 $28 = 0 - $5 | 0;
 $$0367 = $0 + (($1 << 2) + 4) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($8 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 + 1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } else {
    $35 = $$3 + ($28 << 1) | 0;
    $36 = HEAP16[$35 >> 1] | 0;
    if ($36 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $36;
     $39 = ($36 << 16 >> 16) * 7 | 0;
     $41 = $4 + 1310736 + ($39 + -7 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
     $45 = $4 + 1310736 + ($39 + -6 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + $$2389;
     $49 = $4 + 1310736 + ($39 + -5 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($39 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $55 = HEAP16[$35 + 2 >> 1] | 0;
    $58 = HEAP16[$35 + -2 >> 1] | 0;
    $60 = $58 << 16 >> 16 > 0;
    $61 = $$3 + -2 | 0;
    $62 = ($58 << 16 >> 16) + -1 | 0;
    if ($55 << 16 >> 16 <= 0) {
     if ($60) {
      HEAP16[$$3 >> 1] = $58;
      $154 = $62 * 7 | 0;
      $155 = $4 + 1310736 + ($154 << 2) | 0;
      HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + 1;
      $159 = $4 + 1310736 + ($154 + 1 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $$2389;
      $163 = $4 + 1310736 + ($154 + 2 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $$0384;
      $167 = $4 + 1310736 + ($154 + 4 << 2) | 0;
      if ((HEAP32[$167 >> 2] | 0) < ($$2389 | 0)) HEAP32[$167 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($154 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $172 = HEAP16[$61 >> 1] | 0;
     if ($172 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $172;
      $175 = ($172 << 16 >> 16) * 7 | 0;
      $177 = $4 + 1310736 + ($175 + -7 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + 1;
      $181 = $4 + 1310736 + ($175 + -6 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $$2389;
      $185 = $4 + 1310736 + ($175 + -5 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $$0384;
      $188 = $175 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($188 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $188;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $192 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $192;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $192 << 16 >> 16;
      $197 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($197 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($197 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($197 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($197 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($197 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($197 + 5 << 2) >> 2] = $$0384;
      $$2374 = $192;
      $$sink = $$0384;
      $$sink3 = $197 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $64 = ($55 << 16 >> 16) + -1 | 0;
    $65 = $4 + 1179664 + ($64 << 2) | 0;
    if ($60) {
     $66 = HEAP32[$65 >> 2] | 0;
     $68 = HEAP32[$4 + 1179664 + ($62 << 2) >> 2] | 0;
     L36 : do if (($66 | 0) > ($68 | 0)) {
      HEAP16[$$3 >> 1] = $68;
      $$0376 = $21;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $83 = $68;
        break L36;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($66 | 0)) HEAP32[$$0376 >> 2] = $68;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $66;
      if (($66 | 0) < ($68 | 0)) {
       $$1377 = $21;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $83 = $66;
         break L36;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($68 | 0)) HEAP32[$$1377 >> 2] = $66;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $83 = $66;
     } while (0);
     $85 = ($83 << 16 >> 16) * 7 | 0;
     $87 = $4 + 1310736 + ($85 + -7 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 1;
     $91 = $4 + 1310736 + ($85 + -6 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $$2389;
     $95 = $4 + 1310736 + ($85 + -5 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($85 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $100 = HEAP16[$61 >> 1] | 0;
    if ($100 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $55;
     $136 = $64 * 7 | 0;
     $137 = $4 + 1310736 + ($136 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 1;
     $141 = $4 + 1310736 + ($136 + 1 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$2389;
     $145 = $4 + 1310736 + ($136 + 2 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$0384;
     $149 = $4 + 1310736 + ($136 + 3 << 2) | 0;
     if ((HEAP32[$149 >> 2] | 0) > ($$2389 | 0)) HEAP32[$149 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($136 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $103 = HEAP32[$65 >> 2] | 0;
    $106 = HEAP32[$4 + 1179664 + (($100 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($103 | 0) > ($106 | 0)) {
     HEAP16[$$3 >> 1] = $106;
     $$2378 = $21;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $121 = $106;
       break L59;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($103 | 0)) HEAP32[$$2378 >> 2] = $106;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $103;
     if (($103 | 0) < ($106 | 0)) {
      $$3379 = $21;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $121 = $103;
        break L59;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($106 | 0)) HEAP32[$$3379 >> 2] = $103;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $121 = $103;
    } while (0);
    $123 = ($121 << 16 >> 16) * 7 | 0;
    $125 = $4 + 1310736 + ($123 + -7 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + 1;
    $129 = $4 + 1310736 + ($123 + -6 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$2389;
    $133 = $4 + 1310736 + ($123 + -5 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + $24 + 8 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $218 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $21;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $220 = HEAP32[$$4 >> 2] | 0;
   if (($220 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $226 = $$1385;
   } else {
    $$2386 = $$1385;
    $226 = HEAP32[$4 + 1179664 + ($220 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $226;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $229 = $4 + 8 | 0;
  $230 = $$1385 + -1 | 0;
  HEAP32[$229 >> 2] = $230;
  if (!$230) $$0 = 0; else {
   _memset($218 | 0, 0, $230 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $230 << 4 | 0) | 0;
   $$4391 = 0;
   $236 = $230;
   while (1) {
    if (($$4391 | 0) >= ($236 | 0)) {
     $$5 = 0;
     break;
    }
    $237 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($237 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($237 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $236 = HEAP32[$229 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $249 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $$5 * 7 | 0;
    $253 = $4 + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $4 + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $4 + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $4 + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$4 + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $4 + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$229 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $303 = $4 + 12 + ($$6 << 2) | 0;
    $306 = $$6 << 1;
    $307 = $4 + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $313 = $4 + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function _arLabelingSubDWICY($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $103 = 0, $106 = 0, $121 = 0, $123 = 0, $125 = 0, $129 = 0, $133 = 0, $136 = 0, $137 = 0, $141 = 0, $145 = 0, $149 = 0, $15 = 0, $154 = 0, $155 = 0, $159 = 0, $163 = 0, $167 = 0, $172 = 0, $175 = 0, $177 = 0, $181 = 0, $185 = 0, $188 = 0, $192 = 0, $197 = 0, $21 = 0, $218 = 0, $220 = 0, $226 = 0, $229 = 0, $230 = 0, $236 = 0, $237 = 0, $24 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $272 = 0, $273 = 0, $277 = 0, $28 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $303 = 0, $306 = 0, $307 = 0, $313 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $55 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $91 = 0, $95 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0368 = $7;
 $$0370 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($5 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1369 = $7;
 $$1371 = $7 + ($15 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($6 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($5 << 1) | 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $24 = $1 << 1;
 $28 = 0 - $5 | 0;
 $$0367 = $0 + (($1 << 2) + 4) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($8 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 + 1 >> 0] | 0 | 0) > ($3 | 0)) {
    $35 = $$3 + ($28 << 1) | 0;
    $36 = HEAP16[$35 >> 1] | 0;
    if ($36 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $36;
     $39 = ($36 << 16 >> 16) * 7 | 0;
     $41 = $4 + 1310736 + ($39 + -7 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
     $45 = $4 + 1310736 + ($39 + -6 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + $$2389;
     $49 = $4 + 1310736 + ($39 + -5 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($39 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $55 = HEAP16[$35 + 2 >> 1] | 0;
    $58 = HEAP16[$35 + -2 >> 1] | 0;
    $60 = $58 << 16 >> 16 > 0;
    $61 = $$3 + -2 | 0;
    $62 = ($58 << 16 >> 16) + -1 | 0;
    if ($55 << 16 >> 16 <= 0) {
     if ($60) {
      HEAP16[$$3 >> 1] = $58;
      $154 = $62 * 7 | 0;
      $155 = $4 + 1310736 + ($154 << 2) | 0;
      HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + 1;
      $159 = $4 + 1310736 + ($154 + 1 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $$2389;
      $163 = $4 + 1310736 + ($154 + 2 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $$0384;
      $167 = $4 + 1310736 + ($154 + 4 << 2) | 0;
      if ((HEAP32[$167 >> 2] | 0) < ($$2389 | 0)) HEAP32[$167 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($154 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $172 = HEAP16[$61 >> 1] | 0;
     if ($172 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $172;
      $175 = ($172 << 16 >> 16) * 7 | 0;
      $177 = $4 + 1310736 + ($175 + -7 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + 1;
      $181 = $4 + 1310736 + ($175 + -6 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $$2389;
      $185 = $4 + 1310736 + ($175 + -5 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $$0384;
      $188 = $175 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($188 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $188;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $192 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $192;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $192 << 16 >> 16;
      $197 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($197 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($197 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($197 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($197 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($197 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($197 + 5 << 2) >> 2] = $$0384;
      $$2374 = $192;
      $$sink = $$0384;
      $$sink3 = $197 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $64 = ($55 << 16 >> 16) + -1 | 0;
    $65 = $4 + 1179664 + ($64 << 2) | 0;
    if ($60) {
     $66 = HEAP32[$65 >> 2] | 0;
     $68 = HEAP32[$4 + 1179664 + ($62 << 2) >> 2] | 0;
     L35 : do if (($66 | 0) > ($68 | 0)) {
      HEAP16[$$3 >> 1] = $68;
      $$0376 = $21;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $83 = $68;
        break L35;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($66 | 0)) HEAP32[$$0376 >> 2] = $68;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $66;
      if (($66 | 0) < ($68 | 0)) {
       $$1377 = $21;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $83 = $66;
         break L35;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($68 | 0)) HEAP32[$$1377 >> 2] = $66;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $83 = $66;
     } while (0);
     $85 = ($83 << 16 >> 16) * 7 | 0;
     $87 = $4 + 1310736 + ($85 + -7 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 1;
     $91 = $4 + 1310736 + ($85 + -6 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $$2389;
     $95 = $4 + 1310736 + ($85 + -5 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($85 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $100 = HEAP16[$61 >> 1] | 0;
    if ($100 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $55;
     $136 = $64 * 7 | 0;
     $137 = $4 + 1310736 + ($136 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 1;
     $141 = $4 + 1310736 + ($136 + 1 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$2389;
     $145 = $4 + 1310736 + ($136 + 2 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $$0384;
     $149 = $4 + 1310736 + ($136 + 3 << 2) | 0;
     if ((HEAP32[$149 >> 2] | 0) > ($$2389 | 0)) HEAP32[$149 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($136 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $103 = HEAP32[$65 >> 2] | 0;
    $106 = HEAP32[$4 + 1179664 + (($100 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($103 | 0) > ($106 | 0)) {
     HEAP16[$$3 >> 1] = $106;
     $$2378 = $21;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $121 = $106;
       break L58;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($103 | 0)) HEAP32[$$2378 >> 2] = $106;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $103;
     if (($103 | 0) < ($106 | 0)) {
      $$3379 = $21;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $121 = $103;
        break L58;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($106 | 0)) HEAP32[$$3379 >> 2] = $103;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $121 = $103;
    } while (0);
    $123 = ($121 << 16 >> 16) * 7 | 0;
    $125 = $4 + 1310736 + ($123 + -7 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + 1;
    $129 = $4 + 1310736 + ($123 + -6 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$2389;
    $133 = $4 + 1310736 + ($123 + -5 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + $24 + 8 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $218 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $21;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $220 = HEAP32[$$4 >> 2] | 0;
   if (($220 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $226 = $$1385;
   } else {
    $$2386 = $$1385;
    $226 = HEAP32[$4 + 1179664 + ($220 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $226;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $229 = $4 + 8 | 0;
  $230 = $$1385 + -1 | 0;
  HEAP32[$229 >> 2] = $230;
  if (!$230) $$0 = 0; else {
   _memset($218 | 0, 0, $230 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $230 << 4 | 0) | 0;
   $$4391 = 0;
   $236 = $230;
   while (1) {
    if (($$4391 | 0) >= ($236 | 0)) {
     $$5 = 0;
     break;
    }
    $237 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($237 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($237 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $236 = HEAP32[$229 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $249 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $$5 * 7 | 0;
    $253 = $4 + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $4 + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $4 + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$4 + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $4 + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$4 + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $4 + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $4 + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$4 + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$229 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $303 = $4 + 12 + ($$6 << 2) | 0;
    $306 = $$6 << 1;
    $307 = $4 + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $313 = $4 + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWIYC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $105 = 0, $120 = 0, $122 = 0, $124 = 0, $128 = 0, $132 = 0, $135 = 0, $136 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $153 = 0, $154 = 0, $158 = 0, $162 = 0, $166 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $187 = 0, $191 = 0, $196 = 0, $21 = 0, $217 = 0, $219 = 0, $225 = 0, $228 = 0, $229 = 0, $235 = 0, $236 = 0, $24 = 0, $248 = 0, $249 = 0, $252 = 0, $259 = 0, $260 = 0, $268 = 0, $271 = 0, $272 = 0, $276 = 0, $279 = 0, $28 = 0, $283 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $302 = 0, $305 = 0, $306 = 0, $312 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $44 = 0, $48 = 0, $5 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $7 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $90 = 0, $94 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0368 = $7;
 $$0370 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($5 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1369 = $7;
 $$1371 = $7 + ($15 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($6 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($5 << 1) | 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $24 = $1 << 1;
 $28 = 0 - $5 | 0;
 $$0367 = $0 + (($1 << 2) + 4) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($8 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    $34 = $$3 + ($28 << 1) | 0;
    $35 = HEAP16[$34 >> 1] | 0;
    if ($35 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $35;
     $38 = ($35 << 16 >> 16) * 7 | 0;
     $40 = $4 + 1310736 + ($38 + -7 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
     $44 = $4 + 1310736 + ($38 + -6 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$2389;
     $48 = $4 + 1310736 + ($38 + -5 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($38 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $54 = HEAP16[$34 + 2 >> 1] | 0;
    $57 = HEAP16[$34 + -2 >> 1] | 0;
    $59 = $57 << 16 >> 16 > 0;
    $60 = ($57 << 16 >> 16) + -1 | 0;
    $61 = $$3 + -2 | 0;
    if ($54 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$$3 >> 1] = $57;
      $153 = $60 * 7 | 0;
      $154 = $4 + 1310736 + ($153 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
      $158 = $4 + 1310736 + ($153 + 1 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2389;
      $162 = $4 + 1310736 + ($153 + 2 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0384;
      $166 = $4 + 1310736 + ($153 + 4 << 2) | 0;
      if ((HEAP32[$166 >> 2] | 0) < ($$2389 | 0)) HEAP32[$166 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($153 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $171 = HEAP16[$61 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $4 + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $4 + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$2389;
      $184 = $4 + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$0384;
      $187 = $174 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($187 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $187;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $191 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $191;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($196 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($196 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($196 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($196 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($196 + 5 << 2) >> 2] = $$0384;
      $$2374 = $191;
      $$sink = $$0384;
      $$sink3 = $196 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $63 = ($54 << 16 >> 16) + -1 | 0;
    $64 = $4 + 1179664 + ($63 << 2) | 0;
    if ($59) {
     $65 = HEAP32[$64 >> 2] | 0;
     $67 = HEAP32[$4 + 1179664 + ($60 << 2) >> 2] | 0;
     L35 : do if (($65 | 0) > ($67 | 0)) {
      HEAP16[$$3 >> 1] = $67;
      $$0376 = $21;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $82 = $67;
        break L35;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($65 | 0)) HEAP32[$$0376 >> 2] = $67;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $65;
      if (($65 | 0) < ($67 | 0)) {
       $$1377 = $21;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $82 = $65;
         break L35;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($67 | 0)) HEAP32[$$1377 >> 2] = $65;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $82 = $65;
     } while (0);
     $84 = ($82 << 16 >> 16) * 7 | 0;
     $86 = $4 + 1310736 + ($84 + -7 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 1;
     $90 = $4 + 1310736 + ($84 + -6 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $$2389;
     $94 = $4 + 1310736 + ($84 + -5 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($84 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $99 = HEAP16[$61 >> 1] | 0;
    if ($99 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $54;
     $135 = $63 * 7 | 0;
     $136 = $4 + 1310736 + ($135 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
     $140 = $4 + 1310736 + ($135 + 1 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$2389;
     $144 = $4 + 1310736 + ($135 + 2 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$0384;
     $148 = $4 + 1310736 + ($135 + 3 << 2) | 0;
     if ((HEAP32[$148 >> 2] | 0) > ($$2389 | 0)) HEAP32[$148 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($135 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $102 = HEAP32[$64 >> 2] | 0;
    $105 = HEAP32[$4 + 1179664 + (($99 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($102 | 0) > ($105 | 0)) {
     HEAP16[$$3 >> 1] = $105;
     $$2378 = $21;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $120 = $105;
       break L58;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($102 | 0)) HEAP32[$$2378 >> 2] = $105;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $102;
     if (($102 | 0) < ($105 | 0)) {
      $$3379 = $21;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $120 = $102;
        break L58;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($105 | 0)) HEAP32[$$3379 >> 2] = $102;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $120 = $102;
    } while (0);
    $122 = ($120 << 16 >> 16) * 7 | 0;
    $124 = $4 + 1310736 + ($122 + -7 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1;
    $128 = $4 + 1310736 + ($122 + -6 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$2389;
    $132 = $4 + 1310736 + ($122 + -5 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + $24 + 8 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $217 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $21;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $219 = HEAP32[$$4 >> 2] | 0;
   if (($219 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $225 = $$1385;
   } else {
    $$2386 = $$1385;
    $225 = HEAP32[$4 + 1179664 + ($219 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $225;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $228 = $4 + 8 | 0;
  $229 = $$1385 + -1 | 0;
  HEAP32[$228 >> 2] = $229;
  if (!$229) $$0 = 0; else {
   _memset($217 | 0, 0, $229 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $229 << 4 | 0) | 0;
   $$4391 = 0;
   $235 = $229;
   while (1) {
    if (($$4391 | 0) >= ($235 | 0)) {
     $$5 = 0;
     break;
    }
    $236 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($236 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($236 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($236 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($236 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $235 = HEAP32[$228 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $248 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $249 = $$5 * 7 | 0;
    $252 = $4 + 12 + ($248 << 2) | 0;
    HEAP32[$252 >> 2] = (HEAP32[$252 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($249 << 2) >> 2] | 0);
    $259 = $248 << 1;
    $260 = $4 + 655376 + ($259 << 3) | 0;
    HEAPF64[$260 >> 3] = +HEAPF64[$260 >> 3] + +(HEAP32[$4 + 1310736 + ($249 + 1 << 2) >> 2] | 0);
    $268 = $4 + 655376 + (($259 | 1) << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$4 + 1310736 + ($249 + 2 << 2) >> 2] | 0);
    $271 = $248 << 2;
    $272 = $4 + 131084 + ($271 << 2) | 0;
    $276 = HEAP32[$4 + 1310736 + ($249 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$272 >> 2] | 0) > ($276 | 0)) HEAP32[$272 >> 2] = $276;
    $279 = $4 + 131084 + (($271 | 1) << 2) | 0;
    $283 = HEAP32[$4 + 1310736 + ($249 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$279 >> 2] | 0) < ($283 | 0)) HEAP32[$279 >> 2] = $283;
    $286 = $4 + 131084 + (($271 | 2) << 2) | 0;
    $290 = HEAP32[$4 + 1310736 + ($249 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $4 + 131084 + (($271 | 3) << 2) | 0;
    $297 = HEAP32[$4 + 1310736 + ($249 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$228 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $302 = $4 + 12 + ($$6 << 2) | 0;
    $305 = $$6 << 1;
    $306 = $4 + 655376 + ($305 << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $312 = $4 + 655376 + (($305 | 1) << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBIYC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $105 = 0, $120 = 0, $122 = 0, $124 = 0, $128 = 0, $132 = 0, $135 = 0, $136 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $153 = 0, $154 = 0, $158 = 0, $162 = 0, $166 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $187 = 0, $191 = 0, $196 = 0, $21 = 0, $217 = 0, $219 = 0, $225 = 0, $228 = 0, $229 = 0, $235 = 0, $236 = 0, $24 = 0, $248 = 0, $249 = 0, $252 = 0, $259 = 0, $260 = 0, $268 = 0, $271 = 0, $272 = 0, $276 = 0, $279 = 0, $28 = 0, $283 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $302 = 0, $305 = 0, $306 = 0, $312 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $44 = 0, $48 = 0, $5 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $7 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $90 = 0, $94 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0368 = $7;
 $$0370 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($5 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1369 = $7;
 $$1371 = $7 + ($15 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($6 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($5 << 1) | 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $24 = $1 << 1;
 $28 = 0 - $5 | 0;
 $$0367 = $0 + (($1 << 2) + 4) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($8 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } else {
    $34 = $$3 + ($28 << 1) | 0;
    $35 = HEAP16[$34 >> 1] | 0;
    if ($35 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $35;
     $38 = ($35 << 16 >> 16) * 7 | 0;
     $40 = $4 + 1310736 + ($38 + -7 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
     $44 = $4 + 1310736 + ($38 + -6 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$2389;
     $48 = $4 + 1310736 + ($38 + -5 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($38 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $54 = HEAP16[$34 + 2 >> 1] | 0;
    $57 = HEAP16[$34 + -2 >> 1] | 0;
    $59 = $57 << 16 >> 16 > 0;
    $60 = ($57 << 16 >> 16) + -1 | 0;
    $61 = $$3 + -2 | 0;
    if ($54 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$$3 >> 1] = $57;
      $153 = $60 * 7 | 0;
      $154 = $4 + 1310736 + ($153 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
      $158 = $4 + 1310736 + ($153 + 1 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$2389;
      $162 = $4 + 1310736 + ($153 + 2 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $$0384;
      $166 = $4 + 1310736 + ($153 + 4 << 2) | 0;
      if ((HEAP32[$166 >> 2] | 0) < ($$2389 | 0)) HEAP32[$166 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($153 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $171 = HEAP16[$61 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $4 + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $4 + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$2389;
      $184 = $4 + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $$0384;
      $187 = $174 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($187 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $187;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $191 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $191;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($196 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($196 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($196 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($196 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($196 + 5 << 2) >> 2] = $$0384;
      $$2374 = $191;
      $$sink = $$0384;
      $$sink3 = $196 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $63 = ($54 << 16 >> 16) + -1 | 0;
    $64 = $4 + 1179664 + ($63 << 2) | 0;
    if ($59) {
     $65 = HEAP32[$64 >> 2] | 0;
     $67 = HEAP32[$4 + 1179664 + ($60 << 2) >> 2] | 0;
     L36 : do if (($65 | 0) > ($67 | 0)) {
      HEAP16[$$3 >> 1] = $67;
      $$0376 = $21;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $82 = $67;
        break L36;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($65 | 0)) HEAP32[$$0376 >> 2] = $67;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $65;
      if (($65 | 0) < ($67 | 0)) {
       $$1377 = $21;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $82 = $65;
         break L36;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($67 | 0)) HEAP32[$$1377 >> 2] = $65;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $82 = $65;
     } while (0);
     $84 = ($82 << 16 >> 16) * 7 | 0;
     $86 = $4 + 1310736 + ($84 + -7 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 1;
     $90 = $4 + 1310736 + ($84 + -6 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $$2389;
     $94 = $4 + 1310736 + ($84 + -5 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($84 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $99 = HEAP16[$61 >> 1] | 0;
    if ($99 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $54;
     $135 = $63 * 7 | 0;
     $136 = $4 + 1310736 + ($135 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
     $140 = $4 + 1310736 + ($135 + 1 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$2389;
     $144 = $4 + 1310736 + ($135 + 2 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $$0384;
     $148 = $4 + 1310736 + ($135 + 3 << 2) | 0;
     if ((HEAP32[$148 >> 2] | 0) > ($$2389 | 0)) HEAP32[$148 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($135 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $102 = HEAP32[$64 >> 2] | 0;
    $105 = HEAP32[$4 + 1179664 + (($99 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($102 | 0) > ($105 | 0)) {
     HEAP16[$$3 >> 1] = $105;
     $$2378 = $21;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $120 = $105;
       break L59;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($102 | 0)) HEAP32[$$2378 >> 2] = $105;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $102;
     if (($102 | 0) < ($105 | 0)) {
      $$3379 = $21;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $120 = $102;
        break L59;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($105 | 0)) HEAP32[$$3379 >> 2] = $102;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $120 = $102;
    } while (0);
    $122 = ($120 << 16 >> 16) * 7 | 0;
    $124 = $4 + 1310736 + ($122 + -7 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1;
    $128 = $4 + 1310736 + ($122 + -6 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$2389;
    $132 = $4 + 1310736 + ($122 + -5 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 4 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + $24 + 8 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $217 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $21;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $219 = HEAP32[$$4 >> 2] | 0;
   if (($219 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $225 = $$1385;
   } else {
    $$2386 = $$1385;
    $225 = HEAP32[$4 + 1179664 + ($219 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $225;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $228 = $4 + 8 | 0;
  $229 = $$1385 + -1 | 0;
  HEAP32[$228 >> 2] = $229;
  if (!$229) $$0 = 0; else {
   _memset($217 | 0, 0, $229 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $229 << 4 | 0) | 0;
   $$4391 = 0;
   $235 = $229;
   while (1) {
    if (($$4391 | 0) >= ($235 | 0)) {
     $$5 = 0;
     break;
    }
    $236 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($236 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($236 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($236 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($236 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $235 = HEAP32[$228 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $248 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $249 = $$5 * 7 | 0;
    $252 = $4 + 12 + ($248 << 2) | 0;
    HEAP32[$252 >> 2] = (HEAP32[$252 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($249 << 2) >> 2] | 0);
    $259 = $248 << 1;
    $260 = $4 + 655376 + ($259 << 3) | 0;
    HEAPF64[$260 >> 3] = +HEAPF64[$260 >> 3] + +(HEAP32[$4 + 1310736 + ($249 + 1 << 2) >> 2] | 0);
    $268 = $4 + 655376 + (($259 | 1) << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$4 + 1310736 + ($249 + 2 << 2) >> 2] | 0);
    $271 = $248 << 2;
    $272 = $4 + 131084 + ($271 << 2) | 0;
    $276 = HEAP32[$4 + 1310736 + ($249 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$272 >> 2] | 0) > ($276 | 0)) HEAP32[$272 >> 2] = $276;
    $279 = $4 + 131084 + (($271 | 1) << 2) | 0;
    $283 = HEAP32[$4 + 1310736 + ($249 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$279 >> 2] | 0) < ($283 | 0)) HEAP32[$279 >> 2] = $283;
    $286 = $4 + 131084 + (($271 | 2) << 2) | 0;
    $290 = HEAP32[$4 + 1310736 + ($249 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $4 + 131084 + (($271 | 3) << 2) | 0;
    $297 = HEAP32[$4 + 1310736 + ($249 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$228 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $302 = $4 + 12 + ($$6 << 2) | 0;
    $305 = $$6 << 1;
    $306 = $4 + 655376 + ($305 << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $312 = $4 + 655376 + (($305 | 1) << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWIC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $104 = 0, $119 = 0, $121 = 0, $123 = 0, $127 = 0, $131 = 0, $134 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $152 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $186 = 0, $190 = 0, $195 = 0, $21 = 0, $216 = 0, $218 = 0, $224 = 0, $227 = 0, $228 = 0, $234 = 0, $235 = 0, $247 = 0, $248 = 0, $251 = 0, $258 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $271 = 0, $275 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $301 = 0, $304 = 0, $305 = 0, $311 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $7 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $93 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0368 = $7;
 $$0370 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($5 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1369 = $7;
 $$1371 = $7 + ($15 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($6 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($5 << 1) | 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $27 = 0 - $5 | 0;
 $$0367 = $0 + (($1 << 1) + 2) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($8 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    $33 = $$3 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2389;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $56 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $56 << 16 >> 16 > 0;
    $59 = ($56 << 16 >> 16) + -1 | 0;
    $60 = $$3 + -2 | 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$$3 >> 1] = $56;
      $152 = $59 * 7 | 0;
      $153 = $4 + 1310736 + ($152 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $4 + 1310736 + ($152 + 1 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$2389;
      $161 = $4 + 1310736 + ($152 + 2 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$0384;
      $165 = $4 + 1310736 + ($152 + 4 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($$2389 | 0)) HEAP32[$165 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($152 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $170 = HEAP16[$60 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $4 + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $4 + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $$2389;
      $183 = $4 + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$0384;
      $186 = $173 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($186 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $186;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $190 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $190;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($195 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($195 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($195 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($195 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($195 + 5 << 2) >> 2] = $$0384;
      $$2374 = $190;
      $$sink = $$0384;
      $$sink3 = $195 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $62 = ($53 << 16 >> 16) + -1 | 0;
    $63 = $4 + 1179664 + ($62 << 2) | 0;
    if ($58) {
     $64 = HEAP32[$63 >> 2] | 0;
     $66 = HEAP32[$4 + 1179664 + ($59 << 2) >> 2] | 0;
     L35 : do if (($64 | 0) > ($66 | 0)) {
      HEAP16[$$3 >> 1] = $66;
      $$0376 = $21;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $81 = $66;
        break L35;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($64 | 0)) HEAP32[$$0376 >> 2] = $66;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $64;
      if (($64 | 0) < ($66 | 0)) {
       $$1377 = $21;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $81 = $64;
         break L35;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($66 | 0)) HEAP32[$$1377 >> 2] = $64;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $81 = $64;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $4 + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $4 + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$2389;
     $93 = $4 + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($83 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $98 = HEAP16[$60 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $53;
     $134 = $62 * 7 | 0;
     $135 = $4 + 1310736 + ($134 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $4 + 1310736 + ($134 + 1 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2389;
     $143 = $4 + 1310736 + ($134 + 2 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0384;
     $147 = $4 + 1310736 + ($134 + 3 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($$2389 | 0)) HEAP32[$147 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($134 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $101 = HEAP32[$63 >> 2] | 0;
    $104 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($101 | 0) > ($104 | 0)) {
     HEAP16[$$3 >> 1] = $104;
     $$2378 = $21;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $119 = $104;
       break L58;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($101 | 0)) HEAP32[$$2378 >> 2] = $104;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $101;
     if (($101 | 0) < ($104 | 0)) {
      $$3379 = $21;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $119 = $101;
        break L58;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($104 | 0)) HEAP32[$$3379 >> 2] = $101;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $119 = $101;
    } while (0);
    $121 = ($119 << 16 >> 16) * 7 | 0;
    $123 = $4 + 1310736 + ($121 + -7 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + 1;
    $127 = $4 + 1310736 + ($121 + -6 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $$2389;
    $131 = $4 + 1310736 + ($121 + -5 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + $1 + 4 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $216 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $21;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $218 = HEAP32[$$4 >> 2] | 0;
   if (($218 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $224 = $$1385;
   } else {
    $$2386 = $$1385;
    $224 = HEAP32[$4 + 1179664 + ($218 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $224;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $227 = $4 + 8 | 0;
  $228 = $$1385 + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $$4391 = 0;
   $234 = $228;
   while (1) {
    if (($$4391 | 0) >= ($234 | 0)) {
     $$5 = 0;
     break;
    }
    $235 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($235 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($235 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($235 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($235 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $234 = HEAP32[$227 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $247 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $248 = $$5 * 7 | 0;
    $251 = $4 + 12 + ($247 << 2) | 0;
    HEAP32[$251 >> 2] = (HEAP32[$251 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($248 << 2) >> 2] | 0);
    $258 = $247 << 1;
    $259 = $4 + 655376 + ($258 << 3) | 0;
    HEAPF64[$259 >> 3] = +HEAPF64[$259 >> 3] + +(HEAP32[$4 + 1310736 + ($248 + 1 << 2) >> 2] | 0);
    $267 = $4 + 655376 + (($258 | 1) << 3) | 0;
    HEAPF64[$267 >> 3] = +HEAPF64[$267 >> 3] + +(HEAP32[$4 + 1310736 + ($248 + 2 << 2) >> 2] | 0);
    $270 = $247 << 2;
    $271 = $4 + 131084 + ($270 << 2) | 0;
    $275 = HEAP32[$4 + 1310736 + ($248 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$271 >> 2] | 0) > ($275 | 0)) HEAP32[$271 >> 2] = $275;
    $278 = $4 + 131084 + (($270 | 1) << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($248 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) < ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($270 | 2) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($248 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) > ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($270 | 3) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($248 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) < ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$227 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $301 = $4 + 12 + ($$6 << 2) | 0;
    $304 = $$6 << 1;
    $305 = $4 + 655376 + ($304 << 3) | 0;
    HEAPF64[$305 >> 3] = +HEAPF64[$305 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $311 = $4 + 655376 + (($304 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBIC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0367 = 0, $$0368 = 0, $$0370 = 0, $$0372 = 0, $$0376 = 0, $$0380 = 0, $$0384 = 0, $$0387 = 0, $$1 = 0, $$1369 = 0, $$1371 = 0, $$1373 = 0, $$1377 = 0, $$1381 = 0, $$1385 = 0, $$1388 = 0, $$2 = 0, $$2374 = 0, $$2378 = 0, $$2382 = 0, $$2386 = 0, $$2389 = 0, $$3 = 0, $$3375 = 0, $$3379 = 0, $$3383 = 0, $$3390 = 0, $$4 = 0, $$4391 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $104 = 0, $119 = 0, $121 = 0, $123 = 0, $127 = 0, $131 = 0, $134 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $152 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $186 = 0, $190 = 0, $195 = 0, $21 = 0, $216 = 0, $218 = 0, $224 = 0, $227 = 0, $228 = 0, $234 = 0, $235 = 0, $247 = 0, $248 = 0, $251 = 0, $258 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $271 = 0, $275 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $301 = 0, $304 = 0, $305 = 0, $311 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $5 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $7 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $93 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = ($1 | 0) / 2 | 0;
 $6 = ($2 | 0) / 2 | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = $6 + -1 | 0;
 $$0368 = $7;
 $$0370 = $7 + ((Math_imul($8, $5) | 0) << 1) | 0;
 $$0387 = 0;
 while (1) {
  if (($$0387 | 0) >= ($5 | 0)) break;
  HEAP16[$$0370 >> 1] = 0;
  HEAP16[$$0368 >> 1] = 0;
  $$0368 = $$0368 + 2 | 0;
  $$0370 = $$0370 + 2 | 0;
  $$0387 = $$0387 + 1 | 0;
 }
 $15 = $5 + -1 | 0;
 $$1369 = $7;
 $$1371 = $7 + ($15 << 1) | 0;
 $$1388 = 0;
 while (1) {
  if (($$1388 | 0) >= ($6 | 0)) break;
  HEAP16[$$1371 >> 1] = 0;
  HEAP16[$$1369 >> 1] = 0;
  $$1369 = $$1369 + ($5 << 1) | 0;
  $$1371 = $$1371 + ($5 << 1) | 0;
  $$1388 = $$1388 + 1 | 0;
 }
 $21 = $4 + 1179664 | 0;
 $27 = 0 - $5 | 0;
 $$0367 = $0 + (($1 << 1) + 2) | 0;
 $$0372 = 0;
 $$0384 = 1;
 $$2 = $7 + ($5 + 1 << 1) | 0;
 L9 : while (1) {
  if (($$0384 | 0) < ($8 | 0)) {
   $$1 = $$0367;
   $$1373 = $$0372;
   $$2389 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2389 | 0) >= ($15 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3375 = $$1373;
   } else {
    $33 = $$3 + ($27 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $4 + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $4 + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$2389;
     $47 = $4 + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($37 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $56 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $56 << 16 >> 16 > 0;
    $59 = ($56 << 16 >> 16) + -1 | 0;
    $60 = $$3 + -2 | 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$$3 >> 1] = $56;
      $152 = $59 * 7 | 0;
      $153 = $4 + 1310736 + ($152 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $4 + 1310736 + ($152 + 1 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$2389;
      $161 = $4 + 1310736 + ($152 + 2 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $$0384;
      $165 = $4 + 1310736 + ($152 + 4 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($$2389 | 0)) HEAP32[$165 >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($152 + 6 << 2) >> 2] = $$0384;
      $$3375 = $$1373;
      break;
     }
     $170 = HEAP16[$60 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $4 + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $4 + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $$2389;
      $183 = $4 + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $$0384;
      $186 = $173 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($186 << 2) >> 2] | 0) < ($$2389 | 0)) {
       $$2374 = $$1373;
       $$sink = $$2389;
       $$sink3 = $186;
      } else {
       $$3375 = $$1373;
       break;
      }
     } else {
      $190 = $$1373 + 1 | 0;
      if (($$1373 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $190;
      HEAP32[$4 + 1179664 + ($$1373 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $$1373 * 7 | 0;
      HEAP32[$4 + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($195 + 1 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($195 + 2 << 2) >> 2] = $$0384;
      HEAP32[$4 + 1310736 + ($195 + 3 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($195 + 4 << 2) >> 2] = $$2389;
      HEAP32[$4 + 1310736 + ($195 + 5 << 2) >> 2] = $$0384;
      $$2374 = $190;
      $$sink = $$0384;
      $$sink3 = $195 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3375 = $$2374;
     break;
    }
    $62 = ($53 << 16 >> 16) + -1 | 0;
    $63 = $4 + 1179664 + ($62 << 2) | 0;
    if ($58) {
     $64 = HEAP32[$63 >> 2] | 0;
     $66 = HEAP32[$4 + 1179664 + ($59 << 2) >> 2] | 0;
     L36 : do if (($64 | 0) > ($66 | 0)) {
      HEAP16[$$3 >> 1] = $66;
      $$0376 = $21;
      $$0380 = 0;
      while (1) {
       if (($$0380 | 0) >= ($$1373 | 0)) {
        $81 = $66;
        break L36;
       }
       if ((HEAP32[$$0376 >> 2] | 0) == ($64 | 0)) HEAP32[$$0376 >> 2] = $66;
       $$0376 = $$0376 + 4 | 0;
       $$0380 = $$0380 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $64;
      if (($64 | 0) < ($66 | 0)) {
       $$1377 = $21;
       $$1381 = 0;
       while (1) {
        if (($$1381 | 0) >= ($$1373 | 0)) {
         $81 = $64;
         break L36;
        }
        if ((HEAP32[$$1377 >> 2] | 0) == ($66 | 0)) HEAP32[$$1377 >> 2] = $64;
        $$1377 = $$1377 + 4 | 0;
        $$1381 = $$1381 + 1 | 0;
       }
      } else $81 = $64;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $4 + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $4 + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$2389;
     $93 = $4 + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $$0384;
     HEAP32[$4 + 1310736 + ($83 + -1 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $98 = HEAP16[$60 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $53;
     $134 = $62 * 7 | 0;
     $135 = $4 + 1310736 + ($134 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $4 + 1310736 + ($134 + 1 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$2389;
     $143 = $4 + 1310736 + ($134 + 2 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $$0384;
     $147 = $4 + 1310736 + ($134 + 3 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($$2389 | 0)) HEAP32[$147 >> 2] = $$2389;
     HEAP32[$4 + 1310736 + ($134 + 6 << 2) >> 2] = $$0384;
     $$3375 = $$1373;
     break;
    }
    $101 = HEAP32[$63 >> 2] | 0;
    $104 = HEAP32[$4 + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($101 | 0) > ($104 | 0)) {
     HEAP16[$$3 >> 1] = $104;
     $$2378 = $21;
     $$2382 = 0;
     while (1) {
      if (($$2382 | 0) >= ($$1373 | 0)) {
       $119 = $104;
       break L59;
      }
      if ((HEAP32[$$2378 >> 2] | 0) == ($101 | 0)) HEAP32[$$2378 >> 2] = $104;
      $$2378 = $$2378 + 4 | 0;
      $$2382 = $$2382 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $101;
     if (($101 | 0) < ($104 | 0)) {
      $$3379 = $21;
      $$3383 = 0;
      while (1) {
       if (($$3383 | 0) >= ($$1373 | 0)) {
        $119 = $101;
        break L59;
       }
       if ((HEAP32[$$3379 >> 2] | 0) == ($104 | 0)) HEAP32[$$3379 >> 2] = $101;
       $$3379 = $$3379 + 4 | 0;
       $$3383 = $$3383 + 1 | 0;
      }
     } else $119 = $101;
    } while (0);
    $121 = ($119 << 16 >> 16) * 7 | 0;
    $123 = $4 + 1310736 + ($121 + -7 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + 1;
    $127 = $4 + 1310736 + ($121 + -6 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $$2389;
    $131 = $4 + 1310736 + ($121 + -5 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $$0384;
    $$3375 = $$1373;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1373 = $$3375;
   $$2389 = $$2389 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0367 = $$1 + $1 + 4 | 0;
  $$0372 = $$1373;
  $$0384 = $$0384 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $216 = $4 + 12 | 0;
  $$1385 = 1;
  $$3390 = 1;
  $$4 = $21;
  while (1) {
   if (($$3390 | 0) > ($$0372 | 0)) break;
   $218 = HEAP32[$$4 >> 2] | 0;
   if (($218 | 0) == ($$3390 | 0)) {
    $$2386 = $$1385 + 1 | 0;
    $224 = $$1385;
   } else {
    $$2386 = $$1385;
    $224 = HEAP32[$4 + 1179664 + ($218 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $224;
   $$1385 = $$2386;
   $$3390 = $$3390 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $227 = $4 + 8 | 0;
  $228 = $$1385 + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $$4391 = 0;
   $234 = $228;
   while (1) {
    if (($$4391 | 0) >= ($234 | 0)) {
     $$5 = 0;
     break;
    }
    $235 = $$4391 << 2;
    HEAP32[$4 + 131084 + ($235 << 2) >> 2] = $5;
    HEAP32[$4 + 131084 + (($235 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($235 | 2) << 2) >> 2] = $6;
    HEAP32[$4 + 131084 + (($235 | 3) << 2) >> 2] = 0;
    $$4391 = $$4391 + 1 | 0;
    $234 = HEAP32[$227 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0372 | 0)) {
     $$6 = 0;
     break;
    }
    $247 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $248 = $$5 * 7 | 0;
    $251 = $4 + 12 + ($247 << 2) | 0;
    HEAP32[$251 >> 2] = (HEAP32[$251 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($248 << 2) >> 2] | 0);
    $258 = $247 << 1;
    $259 = $4 + 655376 + ($258 << 3) | 0;
    HEAPF64[$259 >> 3] = +HEAPF64[$259 >> 3] + +(HEAP32[$4 + 1310736 + ($248 + 1 << 2) >> 2] | 0);
    $267 = $4 + 655376 + (($258 | 1) << 3) | 0;
    HEAPF64[$267 >> 3] = +HEAPF64[$267 >> 3] + +(HEAP32[$4 + 1310736 + ($248 + 2 << 2) >> 2] | 0);
    $270 = $247 << 2;
    $271 = $4 + 131084 + ($270 << 2) | 0;
    $275 = HEAP32[$4 + 1310736 + ($248 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$271 >> 2] | 0) > ($275 | 0)) HEAP32[$271 >> 2] = $275;
    $278 = $4 + 131084 + (($270 | 1) << 2) | 0;
    $282 = HEAP32[$4 + 1310736 + ($248 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) < ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $4 + 131084 + (($270 | 2) << 2) | 0;
    $289 = HEAP32[$4 + 1310736 + ($248 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) > ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $4 + 131084 + (($270 | 3) << 2) | 0;
    $296 = HEAP32[$4 + 1310736 + ($248 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) < ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$227 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $301 = $4 + 12 + ($$6 << 2) | 0;
    $304 = $$6 << 1;
    $305 = $4 + 655376 + ($304 << 3) | 0;
    HEAPF64[$305 >> 3] = +HEAPF64[$305 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $311 = $4 + 655376 + (($304 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWRCY($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0365 = 0, $$0366 = 0, $$0368 = 0, $$0370 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0385 = 0, $$1 = 0, $$1367 = 0, $$1369 = 0, $$1371 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1386 = 0, $$2 = 0, $$2372 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2387 = 0, $$3 = 0, $$3373 = 0, $$3377 = 0, $$3381 = 0, $$3388 = 0, $$4 = 0, $$4389 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $117 = 0, $119 = 0, $121 = 0, $125 = 0, $129 = 0, $13 = 0, $132 = 0, $133 = 0, $137 = 0, $141 = 0, $145 = 0, $150 = 0, $151 = 0, $155 = 0, $159 = 0, $163 = 0, $168 = 0, $171 = 0, $173 = 0, $177 = 0, $181 = 0, $184 = 0, $188 = 0, $19 = 0, $193 = 0, $20 = 0, $213 = 0, $215 = 0, $221 = 0, $224 = 0, $225 = 0, $231 = 0, $232 = 0, $24 = 0, $244 = 0, $245 = 0, $248 = 0, $255 = 0, $256 = 0, $264 = 0, $267 = 0, $268 = 0, $272 = 0, $275 = 0, $279 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $298 = 0, $301 = 0, $302 = 0, $308 = 0, $31 = 0, $32 = 0, $35 = 0, $37 = 0, $41 = 0, $45 = 0, $5 = 0, $51 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $79 = 0, $81 = 0, $83 = 0, $87 = 0, $91 = 0, $96 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0366 = $5;
 $$0368 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0385 = 0;
 while (1) {
  if (($$0385 | 0) >= ($1 | 0)) break;
  HEAP16[$$0368 >> 1] = 0;
  HEAP16[$$0366 >> 1] = 0;
  $$0366 = $$0366 + 2 | 0;
  $$0368 = $$0368 + 2 | 0;
  $$0385 = $$0385 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1367 = $5;
 $$1369 = $5 + ($13 << 1) | 0;
 $$1386 = 0;
 while (1) {
  if (($$1386 | 0) >= ($2 | 0)) break;
  HEAP16[$$1369 >> 1] = 0;
  HEAP16[$$1367 >> 1] = 0;
  $$1367 = $$1367 + ($1 << 1) | 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1386 = $$1386 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $24 = 0 - $1 | 0;
 $$0365 = $0 + ($20 << 1) | 0;
 $$0370 = 0;
 $$0382 = 1;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0382 | 0) < ($6 | 0)) {
   $$1 = $$0365;
   $$1371 = $$0370;
   $$2387 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2387 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 + 1 >> 0] | 0 | 0) > ($3 | 0)) {
    $31 = $$3 + ($24 << 1) | 0;
    $32 = HEAP16[$31 >> 1] | 0;
    if ($32 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $32;
     $35 = ($32 << 16 >> 16) * 7 | 0;
     $37 = $4 + 1310736 + ($35 + -7 << 2) | 0;
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1;
     $41 = $4 + 1310736 + ($35 + -6 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + $$2387;
     $45 = $4 + 1310736 + ($35 + -5 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($35 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $51 = HEAP16[$31 + 2 >> 1] | 0;
    $54 = HEAP16[$31 + -2 >> 1] | 0;
    $56 = $54 << 16 >> 16 > 0;
    $57 = $$3 + -2 | 0;
    $58 = ($54 << 16 >> 16) + -1 | 0;
    if ($51 << 16 >> 16 <= 0) {
     if ($56) {
      HEAP16[$$3 >> 1] = $54;
      $150 = $58 * 7 | 0;
      $151 = $4 + 1310736 + ($150 << 2) | 0;
      HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 1;
      $155 = $4 + 1310736 + ($150 + 1 << 2) | 0;
      HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$2387;
      $159 = $4 + 1310736 + ($150 + 2 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $$0382;
      $163 = $4 + 1310736 + ($150 + 4 << 2) | 0;
      if ((HEAP32[$163 >> 2] | 0) < ($$2387 | 0)) HEAP32[$163 >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($150 + 6 << 2) >> 2] = $$0382;
      $$3373 = $$1371;
      break;
     }
     $168 = HEAP16[$57 >> 1] | 0;
     if ($168 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $168;
      $171 = ($168 << 16 >> 16) * 7 | 0;
      $173 = $4 + 1310736 + ($171 + -7 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + 1;
      $177 = $4 + 1310736 + ($171 + -6 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + $$2387;
      $181 = $4 + 1310736 + ($171 + -5 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $$0382;
      $184 = $171 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($184 << 2) >> 2] | 0) < ($$2387 | 0)) {
       $$2372 = $$1371;
       $$sink = $$2387;
       $$sink3 = $184;
      } else {
       $$3373 = $$1371;
       break;
      }
     } else {
      $188 = $$1371 + 1 | 0;
      if (($$1371 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $188;
      HEAP32[$4 + 1179664 + ($$1371 << 2) >> 2] = $188 << 16 >> 16;
      $193 = $$1371 * 7 | 0;
      HEAP32[$4 + 1310736 + ($193 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($193 + 1 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($193 + 2 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($193 + 3 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($193 + 4 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($193 + 5 << 2) >> 2] = $$0382;
      $$2372 = $188;
      $$sink = $$0382;
      $$sink3 = $193 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3373 = $$2372;
     break;
    }
    $60 = ($51 << 16 >> 16) + -1 | 0;
    $61 = $4 + 1179664 + ($60 << 2) | 0;
    if ($56) {
     $62 = HEAP32[$61 >> 2] | 0;
     $64 = HEAP32[$4 + 1179664 + ($58 << 2) >> 2] | 0;
     L35 : do if (($62 | 0) > ($64 | 0)) {
      HEAP16[$$3 >> 1] = $64;
      $$0374 = $19;
      $$0378 = 0;
      while (1) {
       if (($$0378 | 0) >= ($$1371 | 0)) {
        $79 = $64;
        break L35;
       }
       if ((HEAP32[$$0374 >> 2] | 0) == ($62 | 0)) HEAP32[$$0374 >> 2] = $64;
       $$0374 = $$0374 + 4 | 0;
       $$0378 = $$0378 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $62;
      if (($62 | 0) < ($64 | 0)) {
       $$1375 = $19;
       $$1379 = 0;
       while (1) {
        if (($$1379 | 0) >= ($$1371 | 0)) {
         $79 = $62;
         break L35;
        }
        if ((HEAP32[$$1375 >> 2] | 0) == ($64 | 0)) HEAP32[$$1375 >> 2] = $62;
        $$1375 = $$1375 + 4 | 0;
        $$1379 = $$1379 + 1 | 0;
       }
      } else $79 = $62;
     } while (0);
     $81 = ($79 << 16 >> 16) * 7 | 0;
     $83 = $4 + 1310736 + ($81 + -7 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + 1;
     $87 = $4 + 1310736 + ($81 + -6 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $$2387;
     $91 = $4 + 1310736 + ($81 + -5 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($81 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $96 = HEAP16[$57 >> 1] | 0;
    if ($96 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $51;
     $132 = $60 * 7 | 0;
     $133 = $4 + 1310736 + ($132 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
     $137 = $4 + 1310736 + ($132 + 1 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$2387;
     $141 = $4 + 1310736 + ($132 + 2 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$0382;
     $145 = $4 + 1310736 + ($132 + 3 << 2) | 0;
     if ((HEAP32[$145 >> 2] | 0) > ($$2387 | 0)) HEAP32[$145 >> 2] = $$2387;
     HEAP32[$4 + 1310736 + ($132 + 6 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $99 = HEAP32[$61 >> 2] | 0;
    $102 = HEAP32[$4 + 1179664 + (($96 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($99 | 0) > ($102 | 0)) {
     HEAP16[$$3 >> 1] = $102;
     $$2376 = $19;
     $$2380 = 0;
     while (1) {
      if (($$2380 | 0) >= ($$1371 | 0)) {
       $117 = $102;
       break L58;
      }
      if ((HEAP32[$$2376 >> 2] | 0) == ($99 | 0)) HEAP32[$$2376 >> 2] = $102;
      $$2376 = $$2376 + 4 | 0;
      $$2380 = $$2380 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $99;
     if (($99 | 0) < ($102 | 0)) {
      $$3377 = $19;
      $$3381 = 0;
      while (1) {
       if (($$3381 | 0) >= ($$1371 | 0)) {
        $117 = $99;
        break L58;
       }
       if ((HEAP32[$$3377 >> 2] | 0) == ($102 | 0)) HEAP32[$$3377 >> 2] = $99;
       $$3377 = $$3377 + 4 | 0;
       $$3381 = $$3381 + 1 | 0;
      }
     } else $117 = $99;
    } while (0);
    $119 = ($117 << 16 >> 16) * 7 | 0;
    $121 = $4 + 1310736 + ($119 + -7 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + 1;
    $125 = $4 + 1310736 + ($119 + -6 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $$2387;
    $129 = $4 + 1310736 + ($119 + -5 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$0382;
    $$3373 = $$1371;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3373 = $$1371;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1371 = $$3373;
   $$2387 = $$2387 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0365 = $$1 + 4 | 0;
  $$0370 = $$1371;
  $$0382 = $$0382 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $213 = $4 + 12 | 0;
  $$1383 = 1;
  $$3388 = 1;
  $$4 = $19;
  while (1) {
   if (($$3388 | 0) > ($$0370 | 0)) break;
   $215 = HEAP32[$$4 >> 2] | 0;
   if (($215 | 0) == ($$3388 | 0)) {
    $$2384 = $$1383 + 1 | 0;
    $221 = $$1383;
   } else {
    $$2384 = $$1383;
    $221 = HEAP32[$4 + 1179664 + ($215 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $221;
   $$1383 = $$2384;
   $$3388 = $$3388 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $224 = $4 + 8 | 0;
  $225 = $$1383 + -1 | 0;
  HEAP32[$224 >> 2] = $225;
  if (!$225) $$0 = 0; else {
   _memset($213 | 0, 0, $225 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $225 << 4 | 0) | 0;
   $$4389 = 0;
   $231 = $225;
   while (1) {
    if (($$4389 | 0) >= ($231 | 0)) {
     $$5 = 0;
     break;
    }
    $232 = $$4389 << 2;
    HEAP32[$4 + 131084 + ($232 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($232 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($232 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($232 | 3) << 2) >> 2] = 0;
    $$4389 = $$4389 + 1 | 0;
    $231 = HEAP32[$224 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0370 | 0)) {
     $$6 = 0;
     break;
    }
    $244 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $245 = $$5 * 7 | 0;
    $248 = $4 + 12 + ($244 << 2) | 0;
    HEAP32[$248 >> 2] = (HEAP32[$248 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($245 << 2) >> 2] | 0);
    $255 = $244 << 1;
    $256 = $4 + 655376 + ($255 << 3) | 0;
    HEAPF64[$256 >> 3] = +HEAPF64[$256 >> 3] + +(HEAP32[$4 + 1310736 + ($245 + 1 << 2) >> 2] | 0);
    $264 = $4 + 655376 + (($255 | 1) << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$4 + 1310736 + ($245 + 2 << 2) >> 2] | 0);
    $267 = $244 << 2;
    $268 = $4 + 131084 + ($267 << 2) | 0;
    $272 = HEAP32[$4 + 1310736 + ($245 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$268 >> 2] | 0) > ($272 | 0)) HEAP32[$268 >> 2] = $272;
    $275 = $4 + 131084 + (($267 | 1) << 2) | 0;
    $279 = HEAP32[$4 + 1310736 + ($245 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$275 >> 2] | 0) < ($279 | 0)) HEAP32[$275 >> 2] = $279;
    $282 = $4 + 131084 + (($267 | 2) << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($245 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($267 | 3) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($245 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$224 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $298 = $4 + 12 + ($$6 << 2) | 0;
    $301 = $$6 << 1;
    $302 = $4 + 655376 + ($301 << 3) | 0;
    HEAPF64[$302 >> 3] = +HEAPF64[$302 >> 3] / +(HEAP32[$298 >> 2] | 0);
    $308 = $4 + 655376 + (($301 | 1) << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / +(HEAP32[$298 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBRCY($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0365 = 0, $$0366 = 0, $$0368 = 0, $$0370 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0385 = 0, $$1 = 0, $$1367 = 0, $$1369 = 0, $$1371 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1386 = 0, $$2 = 0, $$2372 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2387 = 0, $$3 = 0, $$3373 = 0, $$3377 = 0, $$3381 = 0, $$3388 = 0, $$4 = 0, $$4389 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $102 = 0, $117 = 0, $119 = 0, $121 = 0, $125 = 0, $129 = 0, $13 = 0, $132 = 0, $133 = 0, $137 = 0, $141 = 0, $145 = 0, $150 = 0, $151 = 0, $155 = 0, $159 = 0, $163 = 0, $168 = 0, $171 = 0, $173 = 0, $177 = 0, $181 = 0, $184 = 0, $188 = 0, $19 = 0, $193 = 0, $20 = 0, $213 = 0, $215 = 0, $221 = 0, $224 = 0, $225 = 0, $231 = 0, $232 = 0, $24 = 0, $244 = 0, $245 = 0, $248 = 0, $255 = 0, $256 = 0, $264 = 0, $267 = 0, $268 = 0, $272 = 0, $275 = 0, $279 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $298 = 0, $301 = 0, $302 = 0, $308 = 0, $31 = 0, $32 = 0, $35 = 0, $37 = 0, $41 = 0, $45 = 0, $5 = 0, $51 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $79 = 0, $81 = 0, $83 = 0, $87 = 0, $91 = 0, $96 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0366 = $5;
 $$0368 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0385 = 0;
 while (1) {
  if (($$0385 | 0) >= ($1 | 0)) break;
  HEAP16[$$0368 >> 1] = 0;
  HEAP16[$$0366 >> 1] = 0;
  $$0366 = $$0366 + 2 | 0;
  $$0368 = $$0368 + 2 | 0;
  $$0385 = $$0385 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1367 = $5;
 $$1369 = $5 + ($13 << 1) | 0;
 $$1386 = 0;
 while (1) {
  if (($$1386 | 0) >= ($2 | 0)) break;
  HEAP16[$$1369 >> 1] = 0;
  HEAP16[$$1367 >> 1] = 0;
  $$1367 = $$1367 + ($1 << 1) | 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1386 = $$1386 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $24 = 0 - $1 | 0;
 $$0365 = $0 + ($20 << 1) | 0;
 $$0370 = 0;
 $$0382 = 1;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0382 | 0) < ($6 | 0)) {
   $$1 = $$0365;
   $$1371 = $$0370;
   $$2387 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2387 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 + 1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3373 = $$1371;
   } else {
    $31 = $$3 + ($24 << 1) | 0;
    $32 = HEAP16[$31 >> 1] | 0;
    if ($32 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $32;
     $35 = ($32 << 16 >> 16) * 7 | 0;
     $37 = $4 + 1310736 + ($35 + -7 << 2) | 0;
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1;
     $41 = $4 + 1310736 + ($35 + -6 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + $$2387;
     $45 = $4 + 1310736 + ($35 + -5 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($35 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $51 = HEAP16[$31 + 2 >> 1] | 0;
    $54 = HEAP16[$31 + -2 >> 1] | 0;
    $56 = $54 << 16 >> 16 > 0;
    $57 = $$3 + -2 | 0;
    $58 = ($54 << 16 >> 16) + -1 | 0;
    if ($51 << 16 >> 16 <= 0) {
     if ($56) {
      HEAP16[$$3 >> 1] = $54;
      $150 = $58 * 7 | 0;
      $151 = $4 + 1310736 + ($150 << 2) | 0;
      HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 1;
      $155 = $4 + 1310736 + ($150 + 1 << 2) | 0;
      HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $$2387;
      $159 = $4 + 1310736 + ($150 + 2 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $$0382;
      $163 = $4 + 1310736 + ($150 + 4 << 2) | 0;
      if ((HEAP32[$163 >> 2] | 0) < ($$2387 | 0)) HEAP32[$163 >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($150 + 6 << 2) >> 2] = $$0382;
      $$3373 = $$1371;
      break;
     }
     $168 = HEAP16[$57 >> 1] | 0;
     if ($168 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $168;
      $171 = ($168 << 16 >> 16) * 7 | 0;
      $173 = $4 + 1310736 + ($171 + -7 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + 1;
      $177 = $4 + 1310736 + ($171 + -6 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + $$2387;
      $181 = $4 + 1310736 + ($171 + -5 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $$0382;
      $184 = $171 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($184 << 2) >> 2] | 0) < ($$2387 | 0)) {
       $$2372 = $$1371;
       $$sink = $$2387;
       $$sink3 = $184;
      } else {
       $$3373 = $$1371;
       break;
      }
     } else {
      $188 = $$1371 + 1 | 0;
      if (($$1371 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $188;
      HEAP32[$4 + 1179664 + ($$1371 << 2) >> 2] = $188 << 16 >> 16;
      $193 = $$1371 * 7 | 0;
      HEAP32[$4 + 1310736 + ($193 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($193 + 1 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($193 + 2 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($193 + 3 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($193 + 4 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($193 + 5 << 2) >> 2] = $$0382;
      $$2372 = $188;
      $$sink = $$0382;
      $$sink3 = $193 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3373 = $$2372;
     break;
    }
    $60 = ($51 << 16 >> 16) + -1 | 0;
    $61 = $4 + 1179664 + ($60 << 2) | 0;
    if ($56) {
     $62 = HEAP32[$61 >> 2] | 0;
     $64 = HEAP32[$4 + 1179664 + ($58 << 2) >> 2] | 0;
     L36 : do if (($62 | 0) > ($64 | 0)) {
      HEAP16[$$3 >> 1] = $64;
      $$0374 = $19;
      $$0378 = 0;
      while (1) {
       if (($$0378 | 0) >= ($$1371 | 0)) {
        $79 = $64;
        break L36;
       }
       if ((HEAP32[$$0374 >> 2] | 0) == ($62 | 0)) HEAP32[$$0374 >> 2] = $64;
       $$0374 = $$0374 + 4 | 0;
       $$0378 = $$0378 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $62;
      if (($62 | 0) < ($64 | 0)) {
       $$1375 = $19;
       $$1379 = 0;
       while (1) {
        if (($$1379 | 0) >= ($$1371 | 0)) {
         $79 = $62;
         break L36;
        }
        if ((HEAP32[$$1375 >> 2] | 0) == ($64 | 0)) HEAP32[$$1375 >> 2] = $62;
        $$1375 = $$1375 + 4 | 0;
        $$1379 = $$1379 + 1 | 0;
       }
      } else $79 = $62;
     } while (0);
     $81 = ($79 << 16 >> 16) * 7 | 0;
     $83 = $4 + 1310736 + ($81 + -7 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + 1;
     $87 = $4 + 1310736 + ($81 + -6 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $$2387;
     $91 = $4 + 1310736 + ($81 + -5 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($81 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $96 = HEAP16[$57 >> 1] | 0;
    if ($96 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $51;
     $132 = $60 * 7 | 0;
     $133 = $4 + 1310736 + ($132 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
     $137 = $4 + 1310736 + ($132 + 1 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $$2387;
     $141 = $4 + 1310736 + ($132 + 2 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $$0382;
     $145 = $4 + 1310736 + ($132 + 3 << 2) | 0;
     if ((HEAP32[$145 >> 2] | 0) > ($$2387 | 0)) HEAP32[$145 >> 2] = $$2387;
     HEAP32[$4 + 1310736 + ($132 + 6 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $99 = HEAP32[$61 >> 2] | 0;
    $102 = HEAP32[$4 + 1179664 + (($96 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($99 | 0) > ($102 | 0)) {
     HEAP16[$$3 >> 1] = $102;
     $$2376 = $19;
     $$2380 = 0;
     while (1) {
      if (($$2380 | 0) >= ($$1371 | 0)) {
       $117 = $102;
       break L59;
      }
      if ((HEAP32[$$2376 >> 2] | 0) == ($99 | 0)) HEAP32[$$2376 >> 2] = $102;
      $$2376 = $$2376 + 4 | 0;
      $$2380 = $$2380 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $99;
     if (($99 | 0) < ($102 | 0)) {
      $$3377 = $19;
      $$3381 = 0;
      while (1) {
       if (($$3381 | 0) >= ($$1371 | 0)) {
        $117 = $99;
        break L59;
       }
       if ((HEAP32[$$3377 >> 2] | 0) == ($102 | 0)) HEAP32[$$3377 >> 2] = $99;
       $$3377 = $$3377 + 4 | 0;
       $$3381 = $$3381 + 1 | 0;
      }
     } else $117 = $99;
    } while (0);
    $119 = ($117 << 16 >> 16) * 7 | 0;
    $121 = $4 + 1310736 + ($119 + -7 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + 1;
    $125 = $4 + 1310736 + ($119 + -6 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $$2387;
    $129 = $4 + 1310736 + ($119 + -5 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $$0382;
    $$3373 = $$1371;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1371 = $$3373;
   $$2387 = $$2387 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0365 = $$1 + 4 | 0;
  $$0370 = $$1371;
  $$0382 = $$0382 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $213 = $4 + 12 | 0;
  $$1383 = 1;
  $$3388 = 1;
  $$4 = $19;
  while (1) {
   if (($$3388 | 0) > ($$0370 | 0)) break;
   $215 = HEAP32[$$4 >> 2] | 0;
   if (($215 | 0) == ($$3388 | 0)) {
    $$2384 = $$1383 + 1 | 0;
    $221 = $$1383;
   } else {
    $$2384 = $$1383;
    $221 = HEAP32[$4 + 1179664 + ($215 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $221;
   $$1383 = $$2384;
   $$3388 = $$3388 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $224 = $4 + 8 | 0;
  $225 = $$1383 + -1 | 0;
  HEAP32[$224 >> 2] = $225;
  if (!$225) $$0 = 0; else {
   _memset($213 | 0, 0, $225 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $225 << 4 | 0) | 0;
   $$4389 = 0;
   $231 = $225;
   while (1) {
    if (($$4389 | 0) >= ($231 | 0)) {
     $$5 = 0;
     break;
    }
    $232 = $$4389 << 2;
    HEAP32[$4 + 131084 + ($232 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($232 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($232 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($232 | 3) << 2) >> 2] = 0;
    $$4389 = $$4389 + 1 | 0;
    $231 = HEAP32[$224 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0370 | 0)) {
     $$6 = 0;
     break;
    }
    $244 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $245 = $$5 * 7 | 0;
    $248 = $4 + 12 + ($244 << 2) | 0;
    HEAP32[$248 >> 2] = (HEAP32[$248 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($245 << 2) >> 2] | 0);
    $255 = $244 << 1;
    $256 = $4 + 655376 + ($255 << 3) | 0;
    HEAPF64[$256 >> 3] = +HEAPF64[$256 >> 3] + +(HEAP32[$4 + 1310736 + ($245 + 1 << 2) >> 2] | 0);
    $264 = $4 + 655376 + (($255 | 1) << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$4 + 1310736 + ($245 + 2 << 2) >> 2] | 0);
    $267 = $244 << 2;
    $268 = $4 + 131084 + ($267 << 2) | 0;
    $272 = HEAP32[$4 + 1310736 + ($245 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$268 >> 2] | 0) > ($272 | 0)) HEAP32[$268 >> 2] = $272;
    $275 = $4 + 131084 + (($267 | 1) << 2) | 0;
    $279 = HEAP32[$4 + 1310736 + ($245 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$275 >> 2] | 0) < ($279 | 0)) HEAP32[$275 >> 2] = $279;
    $282 = $4 + 131084 + (($267 | 2) << 2) | 0;
    $286 = HEAP32[$4 + 1310736 + ($245 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $4 + 131084 + (($267 | 3) << 2) | 0;
    $293 = HEAP32[$4 + 1310736 + ($245 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$224 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $298 = $4 + 12 + ($$6 << 2) | 0;
    $301 = $$6 << 1;
    $302 = $4 + 655376 + ($301 << 3) | 0;
    HEAPF64[$302 >> 3] = +HEAPF64[$302 >> 3] / +(HEAP32[$298 >> 2] | 0);
    $308 = $4 + 655376 + (($301 | 1) << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / +(HEAP32[$298 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWRYC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0365 = 0, $$0366 = 0, $$0368 = 0, $$0370 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0385 = 0, $$1 = 0, $$1367 = 0, $$1369 = 0, $$1371 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1386 = 0, $$2 = 0, $$2372 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2387 = 0, $$3 = 0, $$3373 = 0, $$3377 = 0, $$3381 = 0, $$3388 = 0, $$4 = 0, $$4389 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $167 = 0, $170 = 0, $172 = 0, $176 = 0, $180 = 0, $183 = 0, $187 = 0, $19 = 0, $192 = 0, $20 = 0, $212 = 0, $214 = 0, $220 = 0, $223 = 0, $224 = 0, $230 = 0, $231 = 0, $24 = 0, $243 = 0, $244 = 0, $247 = 0, $254 = 0, $255 = 0, $263 = 0, $266 = 0, $267 = 0, $271 = 0, $274 = 0, $278 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $297 = 0, $30 = 0, $300 = 0, $301 = 0, $307 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $44 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $78 = 0, $80 = 0, $82 = 0, $86 = 0, $90 = 0, $95 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0366 = $5;
 $$0368 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0385 = 0;
 while (1) {
  if (($$0385 | 0) >= ($1 | 0)) break;
  HEAP16[$$0368 >> 1] = 0;
  HEAP16[$$0366 >> 1] = 0;
  $$0366 = $$0366 + 2 | 0;
  $$0368 = $$0368 + 2 | 0;
  $$0385 = $$0385 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1367 = $5;
 $$1369 = $5 + ($13 << 1) | 0;
 $$1386 = 0;
 while (1) {
  if (($$1386 | 0) >= ($2 | 0)) break;
  HEAP16[$$1369 >> 1] = 0;
  HEAP16[$$1367 >> 1] = 0;
  $$1367 = $$1367 + ($1 << 1) | 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1386 = $$1386 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $24 = 0 - $1 | 0;
 $$0365 = $0 + ($20 << 1) | 0;
 $$0370 = 0;
 $$0382 = 1;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0382 | 0) < ($6 | 0)) {
   $$1 = $$0365;
   $$1371 = $$0370;
   $$2387 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2387 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    $30 = $$3 + ($24 << 1) | 0;
    $31 = HEAP16[$30 >> 1] | 0;
    if ($31 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $31;
     $34 = ($31 << 16 >> 16) * 7 | 0;
     $36 = $4 + 1310736 + ($34 + -7 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
     $40 = $4 + 1310736 + ($34 + -6 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $$2387;
     $44 = $4 + 1310736 + ($34 + -5 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($34 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $50 = HEAP16[$30 + 2 >> 1] | 0;
    $53 = HEAP16[$30 + -2 >> 1] | 0;
    $55 = $53 << 16 >> 16 > 0;
    $56 = $$3 + -2 | 0;
    $57 = ($53 << 16 >> 16) + -1 | 0;
    if ($50 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$$3 >> 1] = $53;
      $149 = $57 * 7 | 0;
      $150 = $4 + 1310736 + ($149 << 2) | 0;
      HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
      $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2387;
      $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0382;
      $162 = $4 + 1310736 + ($149 + 4 << 2) | 0;
      if ((HEAP32[$162 >> 2] | 0) < ($$2387 | 0)) HEAP32[$162 >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0382;
      $$3373 = $$1371;
      break;
     }
     $167 = HEAP16[$56 >> 1] | 0;
     if ($167 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $167;
      $170 = ($167 << 16 >> 16) * 7 | 0;
      $172 = $4 + 1310736 + ($170 + -7 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $4 + 1310736 + ($170 + -6 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$2387;
      $180 = $4 + 1310736 + ($170 + -5 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$0382;
      $183 = $170 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($183 << 2) >> 2] | 0) < ($$2387 | 0)) {
       $$2372 = $$1371;
       $$sink = $$2387;
       $$sink3 = $183;
      } else {
       $$3373 = $$1371;
       break;
      }
     } else {
      $187 = $$1371 + 1 | 0;
      if (($$1371 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $187;
      HEAP32[$4 + 1179664 + ($$1371 << 2) >> 2] = $187 << 16 >> 16;
      $192 = $$1371 * 7 | 0;
      HEAP32[$4 + 1310736 + ($192 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($192 + 1 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($192 + 2 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($192 + 3 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($192 + 4 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($192 + 5 << 2) >> 2] = $$0382;
      $$2372 = $187;
      $$sink = $$0382;
      $$sink3 = $192 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3373 = $$2372;
     break;
    }
    $59 = ($50 << 16 >> 16) + -1 | 0;
    $60 = $4 + 1179664 + ($59 << 2) | 0;
    if ($55) {
     $61 = HEAP32[$60 >> 2] | 0;
     $63 = HEAP32[$4 + 1179664 + ($57 << 2) >> 2] | 0;
     L35 : do if (($61 | 0) > ($63 | 0)) {
      HEAP16[$$3 >> 1] = $63;
      $$0374 = $19;
      $$0378 = 0;
      while (1) {
       if (($$0378 | 0) >= ($$1371 | 0)) {
        $78 = $63;
        break L35;
       }
       if ((HEAP32[$$0374 >> 2] | 0) == ($61 | 0)) HEAP32[$$0374 >> 2] = $63;
       $$0374 = $$0374 + 4 | 0;
       $$0378 = $$0378 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $61;
      if (($61 | 0) < ($63 | 0)) {
       $$1375 = $19;
       $$1379 = 0;
       while (1) {
        if (($$1379 | 0) >= ($$1371 | 0)) {
         $78 = $61;
         break L35;
        }
        if ((HEAP32[$$1375 >> 2] | 0) == ($63 | 0)) HEAP32[$$1375 >> 2] = $61;
        $$1375 = $$1375 + 4 | 0;
        $$1379 = $$1379 + 1 | 0;
       }
      } else $78 = $61;
     } while (0);
     $80 = ($78 << 16 >> 16) * 7 | 0;
     $82 = $4 + 1310736 + ($80 + -7 << 2) | 0;
     HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + 1;
     $86 = $4 + 1310736 + ($80 + -6 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + $$2387;
     $90 = $4 + 1310736 + ($80 + -5 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($80 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $95 = HEAP16[$56 >> 1] | 0;
    if ($95 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $50;
     $131 = $59 * 7 | 0;
     $132 = $4 + 1310736 + ($131 << 2) | 0;
     HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
     $136 = $4 + 1310736 + ($131 + 1 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$2387;
     $140 = $4 + 1310736 + ($131 + 2 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$0382;
     $144 = $4 + 1310736 + ($131 + 3 << 2) | 0;
     if ((HEAP32[$144 >> 2] | 0) > ($$2387 | 0)) HEAP32[$144 >> 2] = $$2387;
     HEAP32[$4 + 1310736 + ($131 + 6 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $98 = HEAP32[$60 >> 2] | 0;
    $101 = HEAP32[$4 + 1179664 + (($95 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$$3 >> 1] = $101;
     $$2376 = $19;
     $$2380 = 0;
     while (1) {
      if (($$2380 | 0) >= ($$1371 | 0)) {
       $116 = $101;
       break L58;
      }
      if ((HEAP32[$$2376 >> 2] | 0) == ($98 | 0)) HEAP32[$$2376 >> 2] = $101;
      $$2376 = $$2376 + 4 | 0;
      $$2380 = $$2380 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $$3377 = $19;
      $$3381 = 0;
      while (1) {
       if (($$3381 | 0) >= ($$1371 | 0)) {
        $116 = $98;
        break L58;
       }
       if ((HEAP32[$$3377 >> 2] | 0) == ($101 | 0)) HEAP32[$$3377 >> 2] = $98;
       $$3377 = $$3377 + 4 | 0;
       $$3381 = $$3381 + 1 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $4 + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $4 + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $$2387;
    $128 = $4 + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$0382;
    $$3373 = $$1371;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3373 = $$1371;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1371 = $$3373;
   $$2387 = $$2387 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0365 = $$1 + 4 | 0;
  $$0370 = $$1371;
  $$0382 = $$0382 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $212 = $4 + 12 | 0;
  $$1383 = 1;
  $$3388 = 1;
  $$4 = $19;
  while (1) {
   if (($$3388 | 0) > ($$0370 | 0)) break;
   $214 = HEAP32[$$4 >> 2] | 0;
   if (($214 | 0) == ($$3388 | 0)) {
    $$2384 = $$1383 + 1 | 0;
    $220 = $$1383;
   } else {
    $$2384 = $$1383;
    $220 = HEAP32[$4 + 1179664 + ($214 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $220;
   $$1383 = $$2384;
   $$3388 = $$3388 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $223 = $4 + 8 | 0;
  $224 = $$1383 + -1 | 0;
  HEAP32[$223 >> 2] = $224;
  if (!$224) $$0 = 0; else {
   _memset($212 | 0, 0, $224 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $224 << 4 | 0) | 0;
   $$4389 = 0;
   $230 = $224;
   while (1) {
    if (($$4389 | 0) >= ($230 | 0)) {
     $$5 = 0;
     break;
    }
    $231 = $$4389 << 2;
    HEAP32[$4 + 131084 + ($231 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($231 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($231 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($231 | 3) << 2) >> 2] = 0;
    $$4389 = $$4389 + 1 | 0;
    $230 = HEAP32[$223 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0370 | 0)) {
     $$6 = 0;
     break;
    }
    $243 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $244 = $$5 * 7 | 0;
    $247 = $4 + 12 + ($243 << 2) | 0;
    HEAP32[$247 >> 2] = (HEAP32[$247 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($244 << 2) >> 2] | 0);
    $254 = $243 << 1;
    $255 = $4 + 655376 + ($254 << 3) | 0;
    HEAPF64[$255 >> 3] = +HEAPF64[$255 >> 3] + +(HEAP32[$4 + 1310736 + ($244 + 1 << 2) >> 2] | 0);
    $263 = $4 + 655376 + (($254 | 1) << 3) | 0;
    HEAPF64[$263 >> 3] = +HEAPF64[$263 >> 3] + +(HEAP32[$4 + 1310736 + ($244 + 2 << 2) >> 2] | 0);
    $266 = $243 << 2;
    $267 = $4 + 131084 + ($266 << 2) | 0;
    $271 = HEAP32[$4 + 1310736 + ($244 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$267 >> 2] | 0) > ($271 | 0)) HEAP32[$267 >> 2] = $271;
    $274 = $4 + 131084 + (($266 | 1) << 2) | 0;
    $278 = HEAP32[$4 + 1310736 + ($244 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$274 >> 2] | 0) < ($278 | 0)) HEAP32[$274 >> 2] = $278;
    $281 = $4 + 131084 + (($266 | 2) << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($244 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($266 | 3) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($244 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$223 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $297 = $4 + 12 + ($$6 << 2) | 0;
    $300 = $$6 << 1;
    $301 = $4 + 655376 + ($300 << 3) | 0;
    HEAPF64[$301 >> 3] = +HEAPF64[$301 >> 3] / +(HEAP32[$297 >> 2] | 0);
    $307 = $4 + 655376 + (($300 | 1) << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$297 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBRYC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0365 = 0, $$0366 = 0, $$0368 = 0, $$0370 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0385 = 0, $$1 = 0, $$1367 = 0, $$1369 = 0, $$1371 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1386 = 0, $$2 = 0, $$2372 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2387 = 0, $$3 = 0, $$3373 = 0, $$3377 = 0, $$3381 = 0, $$3388 = 0, $$4 = 0, $$4389 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $167 = 0, $170 = 0, $172 = 0, $176 = 0, $180 = 0, $183 = 0, $187 = 0, $19 = 0, $192 = 0, $20 = 0, $212 = 0, $214 = 0, $220 = 0, $223 = 0, $224 = 0, $230 = 0, $231 = 0, $24 = 0, $243 = 0, $244 = 0, $247 = 0, $254 = 0, $255 = 0, $263 = 0, $266 = 0, $267 = 0, $271 = 0, $274 = 0, $278 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $297 = 0, $30 = 0, $300 = 0, $301 = 0, $307 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $44 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $78 = 0, $80 = 0, $82 = 0, $86 = 0, $90 = 0, $95 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0366 = $5;
 $$0368 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0385 = 0;
 while (1) {
  if (($$0385 | 0) >= ($1 | 0)) break;
  HEAP16[$$0368 >> 1] = 0;
  HEAP16[$$0366 >> 1] = 0;
  $$0366 = $$0366 + 2 | 0;
  $$0368 = $$0368 + 2 | 0;
  $$0385 = $$0385 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1367 = $5;
 $$1369 = $5 + ($13 << 1) | 0;
 $$1386 = 0;
 while (1) {
  if (($$1386 | 0) >= ($2 | 0)) break;
  HEAP16[$$1369 >> 1] = 0;
  HEAP16[$$1367 >> 1] = 0;
  $$1367 = $$1367 + ($1 << 1) | 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1386 = $$1386 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $24 = 0 - $1 | 0;
 $$0365 = $0 + ($20 << 1) | 0;
 $$0370 = 0;
 $$0382 = 1;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0382 | 0) < ($6 | 0)) {
   $$1 = $$0365;
   $$1371 = $$0370;
   $$2387 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2387 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3373 = $$1371;
   } else {
    $30 = $$3 + ($24 << 1) | 0;
    $31 = HEAP16[$30 >> 1] | 0;
    if ($31 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $31;
     $34 = ($31 << 16 >> 16) * 7 | 0;
     $36 = $4 + 1310736 + ($34 + -7 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
     $40 = $4 + 1310736 + ($34 + -6 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $$2387;
     $44 = $4 + 1310736 + ($34 + -5 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($34 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $50 = HEAP16[$30 + 2 >> 1] | 0;
    $53 = HEAP16[$30 + -2 >> 1] | 0;
    $55 = $53 << 16 >> 16 > 0;
    $56 = $$3 + -2 | 0;
    $57 = ($53 << 16 >> 16) + -1 | 0;
    if ($50 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$$3 >> 1] = $53;
      $149 = $57 * 7 | 0;
      $150 = $4 + 1310736 + ($149 << 2) | 0;
      HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
      $154 = $4 + 1310736 + ($149 + 1 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $$2387;
      $158 = $4 + 1310736 + ($149 + 2 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $$0382;
      $162 = $4 + 1310736 + ($149 + 4 << 2) | 0;
      if ((HEAP32[$162 >> 2] | 0) < ($$2387 | 0)) HEAP32[$162 >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($149 + 6 << 2) >> 2] = $$0382;
      $$3373 = $$1371;
      break;
     }
     $167 = HEAP16[$56 >> 1] | 0;
     if ($167 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $167;
      $170 = ($167 << 16 >> 16) * 7 | 0;
      $172 = $4 + 1310736 + ($170 + -7 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $4 + 1310736 + ($170 + -6 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $$2387;
      $180 = $4 + 1310736 + ($170 + -5 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $$0382;
      $183 = $170 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($183 << 2) >> 2] | 0) < ($$2387 | 0)) {
       $$2372 = $$1371;
       $$sink = $$2387;
       $$sink3 = $183;
      } else {
       $$3373 = $$1371;
       break;
      }
     } else {
      $187 = $$1371 + 1 | 0;
      if (($$1371 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $187;
      HEAP32[$4 + 1179664 + ($$1371 << 2) >> 2] = $187 << 16 >> 16;
      $192 = $$1371 * 7 | 0;
      HEAP32[$4 + 1310736 + ($192 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($192 + 1 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($192 + 2 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($192 + 3 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($192 + 4 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($192 + 5 << 2) >> 2] = $$0382;
      $$2372 = $187;
      $$sink = $$0382;
      $$sink3 = $192 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3373 = $$2372;
     break;
    }
    $59 = ($50 << 16 >> 16) + -1 | 0;
    $60 = $4 + 1179664 + ($59 << 2) | 0;
    if ($55) {
     $61 = HEAP32[$60 >> 2] | 0;
     $63 = HEAP32[$4 + 1179664 + ($57 << 2) >> 2] | 0;
     L36 : do if (($61 | 0) > ($63 | 0)) {
      HEAP16[$$3 >> 1] = $63;
      $$0374 = $19;
      $$0378 = 0;
      while (1) {
       if (($$0378 | 0) >= ($$1371 | 0)) {
        $78 = $63;
        break L36;
       }
       if ((HEAP32[$$0374 >> 2] | 0) == ($61 | 0)) HEAP32[$$0374 >> 2] = $63;
       $$0374 = $$0374 + 4 | 0;
       $$0378 = $$0378 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $61;
      if (($61 | 0) < ($63 | 0)) {
       $$1375 = $19;
       $$1379 = 0;
       while (1) {
        if (($$1379 | 0) >= ($$1371 | 0)) {
         $78 = $61;
         break L36;
        }
        if ((HEAP32[$$1375 >> 2] | 0) == ($63 | 0)) HEAP32[$$1375 >> 2] = $61;
        $$1375 = $$1375 + 4 | 0;
        $$1379 = $$1379 + 1 | 0;
       }
      } else $78 = $61;
     } while (0);
     $80 = ($78 << 16 >> 16) * 7 | 0;
     $82 = $4 + 1310736 + ($80 + -7 << 2) | 0;
     HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + 1;
     $86 = $4 + 1310736 + ($80 + -6 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + $$2387;
     $90 = $4 + 1310736 + ($80 + -5 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($80 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $95 = HEAP16[$56 >> 1] | 0;
    if ($95 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $50;
     $131 = $59 * 7 | 0;
     $132 = $4 + 1310736 + ($131 << 2) | 0;
     HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
     $136 = $4 + 1310736 + ($131 + 1 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $$2387;
     $140 = $4 + 1310736 + ($131 + 2 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $$0382;
     $144 = $4 + 1310736 + ($131 + 3 << 2) | 0;
     if ((HEAP32[$144 >> 2] | 0) > ($$2387 | 0)) HEAP32[$144 >> 2] = $$2387;
     HEAP32[$4 + 1310736 + ($131 + 6 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $98 = HEAP32[$60 >> 2] | 0;
    $101 = HEAP32[$4 + 1179664 + (($95 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$$3 >> 1] = $101;
     $$2376 = $19;
     $$2380 = 0;
     while (1) {
      if (($$2380 | 0) >= ($$1371 | 0)) {
       $116 = $101;
       break L59;
      }
      if ((HEAP32[$$2376 >> 2] | 0) == ($98 | 0)) HEAP32[$$2376 >> 2] = $101;
      $$2376 = $$2376 + 4 | 0;
      $$2380 = $$2380 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $$3377 = $19;
      $$3381 = 0;
      while (1) {
       if (($$3381 | 0) >= ($$1371 | 0)) {
        $116 = $98;
        break L59;
       }
       if ((HEAP32[$$3377 >> 2] | 0) == ($101 | 0)) HEAP32[$$3377 >> 2] = $98;
       $$3377 = $$3377 + 4 | 0;
       $$3381 = $$3381 + 1 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $4 + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $4 + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $$2387;
    $128 = $4 + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $$0382;
    $$3373 = $$1371;
   } while (0);
   $$1 = $$1 + 2 | 0;
   $$1371 = $$3373;
   $$2387 = $$2387 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0365 = $$1 + 4 | 0;
  $$0370 = $$1371;
  $$0382 = $$0382 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $212 = $4 + 12 | 0;
  $$1383 = 1;
  $$3388 = 1;
  $$4 = $19;
  while (1) {
   if (($$3388 | 0) > ($$0370 | 0)) break;
   $214 = HEAP32[$$4 >> 2] | 0;
   if (($214 | 0) == ($$3388 | 0)) {
    $$2384 = $$1383 + 1 | 0;
    $220 = $$1383;
   } else {
    $$2384 = $$1383;
    $220 = HEAP32[$4 + 1179664 + ($214 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $220;
   $$1383 = $$2384;
   $$3388 = $$3388 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $223 = $4 + 8 | 0;
  $224 = $$1383 + -1 | 0;
  HEAP32[$223 >> 2] = $224;
  if (!$224) $$0 = 0; else {
   _memset($212 | 0, 0, $224 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $224 << 4 | 0) | 0;
   $$4389 = 0;
   $230 = $224;
   while (1) {
    if (($$4389 | 0) >= ($230 | 0)) {
     $$5 = 0;
     break;
    }
    $231 = $$4389 << 2;
    HEAP32[$4 + 131084 + ($231 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($231 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($231 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($231 | 3) << 2) >> 2] = 0;
    $$4389 = $$4389 + 1 | 0;
    $230 = HEAP32[$223 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0370 | 0)) {
     $$6 = 0;
     break;
    }
    $243 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $244 = $$5 * 7 | 0;
    $247 = $4 + 12 + ($243 << 2) | 0;
    HEAP32[$247 >> 2] = (HEAP32[$247 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($244 << 2) >> 2] | 0);
    $254 = $243 << 1;
    $255 = $4 + 655376 + ($254 << 3) | 0;
    HEAPF64[$255 >> 3] = +HEAPF64[$255 >> 3] + +(HEAP32[$4 + 1310736 + ($244 + 1 << 2) >> 2] | 0);
    $263 = $4 + 655376 + (($254 | 1) << 3) | 0;
    HEAPF64[$263 >> 3] = +HEAPF64[$263 >> 3] + +(HEAP32[$4 + 1310736 + ($244 + 2 << 2) >> 2] | 0);
    $266 = $243 << 2;
    $267 = $4 + 131084 + ($266 << 2) | 0;
    $271 = HEAP32[$4 + 1310736 + ($244 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$267 >> 2] | 0) > ($271 | 0)) HEAP32[$267 >> 2] = $271;
    $274 = $4 + 131084 + (($266 | 1) << 2) | 0;
    $278 = HEAP32[$4 + 1310736 + ($244 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$274 >> 2] | 0) < ($278 | 0)) HEAP32[$274 >> 2] = $278;
    $281 = $4 + 131084 + (($266 | 2) << 2) | 0;
    $285 = HEAP32[$4 + 1310736 + ($244 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $4 + 131084 + (($266 | 3) << 2) | 0;
    $292 = HEAP32[$4 + 1310736 + ($244 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$223 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $297 = $4 + 12 + ($$6 << 2) | 0;
    $300 = $$6 << 1;
    $301 = $4 + 655376 + ($300 << 3) | 0;
    HEAPF64[$301 >> 3] = +HEAPF64[$301 >> 3] / +(HEAP32[$297 >> 2] | 0);
    $307 = $4 + 655376 + (($300 | 1) << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$297 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWRC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0365 = 0, $$0366 = 0, $$0368 = 0, $$0370 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0385 = 0, $$1 = 0, $$1367 = 0, $$1369 = 0, $$1371 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1386 = 0, $$2 = 0, $$2372 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2387 = 0, $$3 = 0, $$3373 = 0, $$3377 = 0, $$3381 = 0, $$3388 = 0, $$4 = 0, $$4389 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $115 = 0, $117 = 0, $119 = 0, $123 = 0, $127 = 0, $13 = 0, $130 = 0, $131 = 0, $135 = 0, $139 = 0, $143 = 0, $148 = 0, $149 = 0, $153 = 0, $157 = 0, $161 = 0, $166 = 0, $169 = 0, $171 = 0, $175 = 0, $179 = 0, $182 = 0, $186 = 0, $19 = 0, $191 = 0, $20 = 0, $211 = 0, $213 = 0, $219 = 0, $222 = 0, $223 = 0, $229 = 0, $23 = 0, $230 = 0, $242 = 0, $243 = 0, $246 = 0, $253 = 0, $254 = 0, $262 = 0, $265 = 0, $266 = 0, $270 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $29 = 0, $291 = 0, $296 = 0, $299 = 0, $30 = 0, $300 = 0, $306 = 0, $33 = 0, $35 = 0, $39 = 0, $43 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $77 = 0, $79 = 0, $81 = 0, $85 = 0, $89 = 0, $94 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0366 = $5;
 $$0368 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0385 = 0;
 while (1) {
  if (($$0385 | 0) >= ($1 | 0)) break;
  HEAP16[$$0368 >> 1] = 0;
  HEAP16[$$0366 >> 1] = 0;
  $$0366 = $$0366 + 2 | 0;
  $$0368 = $$0368 + 2 | 0;
  $$0385 = $$0385 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1367 = $5;
 $$1369 = $5 + ($13 << 1) | 0;
 $$1386 = 0;
 while (1) {
  if (($$1386 | 0) >= ($2 | 0)) break;
  HEAP16[$$1369 >> 1] = 0;
  HEAP16[$$1367 >> 1] = 0;
  $$1367 = $$1367 + ($1 << 1) | 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1386 = $$1386 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $23 = 0 - $1 | 0;
 $$0365 = $0 + $20 | 0;
 $$0370 = 0;
 $$0382 = 1;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0382 | 0) < ($6 | 0)) {
   $$1 = $$0365;
   $$1371 = $$0370;
   $$2387 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2387 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    $29 = $$3 + ($23 << 1) | 0;
    $30 = HEAP16[$29 >> 1] | 0;
    if ($30 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $30;
     $33 = ($30 << 16 >> 16) * 7 | 0;
     $35 = $4 + 1310736 + ($33 + -7 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 1;
     $39 = $4 + 1310736 + ($33 + -6 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $$2387;
     $43 = $4 + 1310736 + ($33 + -5 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($33 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $49 = HEAP16[$29 + 2 >> 1] | 0;
    $52 = HEAP16[$29 + -2 >> 1] | 0;
    $54 = $52 << 16 >> 16 > 0;
    $55 = $$3 + -2 | 0;
    $56 = ($52 << 16 >> 16) + -1 | 0;
    if ($49 << 16 >> 16 <= 0) {
     if ($54) {
      HEAP16[$$3 >> 1] = $52;
      $148 = $56 * 7 | 0;
      $149 = $4 + 1310736 + ($148 << 2) | 0;
      HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
      $153 = $4 + 1310736 + ($148 + 1 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$2387;
      $157 = $4 + 1310736 + ($148 + 2 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$0382;
      $161 = $4 + 1310736 + ($148 + 4 << 2) | 0;
      if ((HEAP32[$161 >> 2] | 0) < ($$2387 | 0)) HEAP32[$161 >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($148 + 6 << 2) >> 2] = $$0382;
      $$3373 = $$1371;
      break;
     }
     $166 = HEAP16[$55 >> 1] | 0;
     if ($166 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $166;
      $169 = ($166 << 16 >> 16) * 7 | 0;
      $171 = $4 + 1310736 + ($169 + -7 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + 1;
      $175 = $4 + 1310736 + ($169 + -6 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $$2387;
      $179 = $4 + 1310736 + ($169 + -5 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $$0382;
      $182 = $169 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($182 << 2) >> 2] | 0) < ($$2387 | 0)) {
       $$2372 = $$1371;
       $$sink = $$2387;
       $$sink3 = $182;
      } else {
       $$3373 = $$1371;
       break;
      }
     } else {
      $186 = $$1371 + 1 | 0;
      if (($$1371 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $186;
      HEAP32[$4 + 1179664 + ($$1371 << 2) >> 2] = $186 << 16 >> 16;
      $191 = $$1371 * 7 | 0;
      HEAP32[$4 + 1310736 + ($191 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($191 + 1 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($191 + 2 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($191 + 3 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($191 + 4 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($191 + 5 << 2) >> 2] = $$0382;
      $$2372 = $186;
      $$sink = $$0382;
      $$sink3 = $191 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3373 = $$2372;
     break;
    }
    $58 = ($49 << 16 >> 16) + -1 | 0;
    $59 = $4 + 1179664 + ($58 << 2) | 0;
    if ($54) {
     $60 = HEAP32[$59 >> 2] | 0;
     $62 = HEAP32[$4 + 1179664 + ($56 << 2) >> 2] | 0;
     L35 : do if (($60 | 0) > ($62 | 0)) {
      HEAP16[$$3 >> 1] = $62;
      $$0374 = $19;
      $$0378 = 0;
      while (1) {
       if (($$0378 | 0) >= ($$1371 | 0)) {
        $77 = $62;
        break L35;
       }
       if ((HEAP32[$$0374 >> 2] | 0) == ($60 | 0)) HEAP32[$$0374 >> 2] = $62;
       $$0374 = $$0374 + 4 | 0;
       $$0378 = $$0378 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $60;
      if (($60 | 0) < ($62 | 0)) {
       $$1375 = $19;
       $$1379 = 0;
       while (1) {
        if (($$1379 | 0) >= ($$1371 | 0)) {
         $77 = $60;
         break L35;
        }
        if ((HEAP32[$$1375 >> 2] | 0) == ($62 | 0)) HEAP32[$$1375 >> 2] = $60;
        $$1375 = $$1375 + 4 | 0;
        $$1379 = $$1379 + 1 | 0;
       }
      } else $77 = $60;
     } while (0);
     $79 = ($77 << 16 >> 16) * 7 | 0;
     $81 = $4 + 1310736 + ($79 + -7 << 2) | 0;
     HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + 1;
     $85 = $4 + 1310736 + ($79 + -6 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + $$2387;
     $89 = $4 + 1310736 + ($79 + -5 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($79 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $94 = HEAP16[$55 >> 1] | 0;
    if ($94 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $49;
     $130 = $58 * 7 | 0;
     $131 = $4 + 1310736 + ($130 << 2) | 0;
     HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
     $135 = $4 + 1310736 + ($130 + 1 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $$2387;
     $139 = $4 + 1310736 + ($130 + 2 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$0382;
     $143 = $4 + 1310736 + ($130 + 3 << 2) | 0;
     if ((HEAP32[$143 >> 2] | 0) > ($$2387 | 0)) HEAP32[$143 >> 2] = $$2387;
     HEAP32[$4 + 1310736 + ($130 + 6 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $97 = HEAP32[$59 >> 2] | 0;
    $100 = HEAP32[$4 + 1179664 + (($94 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($97 | 0) > ($100 | 0)) {
     HEAP16[$$3 >> 1] = $100;
     $$2376 = $19;
     $$2380 = 0;
     while (1) {
      if (($$2380 | 0) >= ($$1371 | 0)) {
       $115 = $100;
       break L58;
      }
      if ((HEAP32[$$2376 >> 2] | 0) == ($97 | 0)) HEAP32[$$2376 >> 2] = $100;
      $$2376 = $$2376 + 4 | 0;
      $$2380 = $$2380 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $97;
     if (($97 | 0) < ($100 | 0)) {
      $$3377 = $19;
      $$3381 = 0;
      while (1) {
       if (($$3381 | 0) >= ($$1371 | 0)) {
        $115 = $97;
        break L58;
       }
       if ((HEAP32[$$3377 >> 2] | 0) == ($100 | 0)) HEAP32[$$3377 >> 2] = $97;
       $$3377 = $$3377 + 4 | 0;
       $$3381 = $$3381 + 1 | 0;
      }
     } else $115 = $97;
    } while (0);
    $117 = ($115 << 16 >> 16) * 7 | 0;
    $119 = $4 + 1310736 + ($117 + -7 << 2) | 0;
    HEAP32[$119 >> 2] = (HEAP32[$119 >> 2] | 0) + 1;
    $123 = $4 + 1310736 + ($117 + -6 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + $$2387;
    $127 = $4 + 1310736 + ($117 + -5 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $$0382;
    $$3373 = $$1371;
   } else {
    HEAP16[$$3 >> 1] = 0;
    $$3373 = $$1371;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1371 = $$3373;
   $$2387 = $$2387 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0365 = $$1 + 2 | 0;
  $$0370 = $$1371;
  $$0382 = $$0382 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $211 = $4 + 12 | 0;
  $$1383 = 1;
  $$3388 = 1;
  $$4 = $19;
  while (1) {
   if (($$3388 | 0) > ($$0370 | 0)) break;
   $213 = HEAP32[$$4 >> 2] | 0;
   if (($213 | 0) == ($$3388 | 0)) {
    $$2384 = $$1383 + 1 | 0;
    $219 = $$1383;
   } else {
    $$2384 = $$1383;
    $219 = HEAP32[$4 + 1179664 + ($213 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $219;
   $$1383 = $$2384;
   $$3388 = $$3388 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $222 = $4 + 8 | 0;
  $223 = $$1383 + -1 | 0;
  HEAP32[$222 >> 2] = $223;
  if (!$223) $$0 = 0; else {
   _memset($211 | 0, 0, $223 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $223 << 4 | 0) | 0;
   $$4389 = 0;
   $229 = $223;
   while (1) {
    if (($$4389 | 0) >= ($229 | 0)) {
     $$5 = 0;
     break;
    }
    $230 = $$4389 << 2;
    HEAP32[$4 + 131084 + ($230 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($230 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($230 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($230 | 3) << 2) >> 2] = 0;
    $$4389 = $$4389 + 1 | 0;
    $229 = HEAP32[$222 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0370 | 0)) {
     $$6 = 0;
     break;
    }
    $242 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $243 = $$5 * 7 | 0;
    $246 = $4 + 12 + ($242 << 2) | 0;
    HEAP32[$246 >> 2] = (HEAP32[$246 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($243 << 2) >> 2] | 0);
    $253 = $242 << 1;
    $254 = $4 + 655376 + ($253 << 3) | 0;
    HEAPF64[$254 >> 3] = +HEAPF64[$254 >> 3] + +(HEAP32[$4 + 1310736 + ($243 + 1 << 2) >> 2] | 0);
    $262 = $4 + 655376 + (($253 | 1) << 3) | 0;
    HEAPF64[$262 >> 3] = +HEAPF64[$262 >> 3] + +(HEAP32[$4 + 1310736 + ($243 + 2 << 2) >> 2] | 0);
    $265 = $242 << 2;
    $266 = $4 + 131084 + ($265 << 2) | 0;
    $270 = HEAP32[$4 + 1310736 + ($243 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$266 >> 2] | 0) > ($270 | 0)) HEAP32[$266 >> 2] = $270;
    $273 = $4 + 131084 + (($265 | 1) << 2) | 0;
    $277 = HEAP32[$4 + 1310736 + ($243 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) < ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $4 + 131084 + (($265 | 2) << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($243 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) > ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($265 | 3) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($243 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) < ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$222 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $296 = $4 + 12 + ($$6 << 2) | 0;
    $299 = $$6 << 1;
    $300 = $4 + 655376 + ($299 << 3) | 0;
    HEAPF64[$300 >> 3] = +HEAPF64[$300 >> 3] / +(HEAP32[$296 >> 2] | 0);
    $306 = $4 + 655376 + (($299 | 1) << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$296 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBRC($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0365 = 0, $$0366 = 0, $$0368 = 0, $$0370 = 0, $$0374 = 0, $$0378 = 0, $$0382 = 0, $$0385 = 0, $$1 = 0, $$1367 = 0, $$1369 = 0, $$1371 = 0, $$1375 = 0, $$1379 = 0, $$1383 = 0, $$1386 = 0, $$2 = 0, $$2372 = 0, $$2376 = 0, $$2380 = 0, $$2384 = 0, $$2387 = 0, $$3 = 0, $$3373 = 0, $$3377 = 0, $$3381 = 0, $$3388 = 0, $$4 = 0, $$4389 = 0, $$5 = 0, $$6 = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $115 = 0, $117 = 0, $119 = 0, $123 = 0, $127 = 0, $13 = 0, $130 = 0, $131 = 0, $135 = 0, $139 = 0, $143 = 0, $148 = 0, $149 = 0, $153 = 0, $157 = 0, $161 = 0, $166 = 0, $169 = 0, $171 = 0, $175 = 0, $179 = 0, $182 = 0, $186 = 0, $19 = 0, $191 = 0, $20 = 0, $211 = 0, $213 = 0, $219 = 0, $222 = 0, $223 = 0, $229 = 0, $23 = 0, $230 = 0, $242 = 0, $243 = 0, $246 = 0, $253 = 0, $254 = 0, $262 = 0, $265 = 0, $266 = 0, $270 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $29 = 0, $291 = 0, $296 = 0, $299 = 0, $30 = 0, $300 = 0, $306 = 0, $33 = 0, $35 = 0, $39 = 0, $43 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $77 = 0, $79 = 0, $81 = 0, $85 = 0, $89 = 0, $94 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + -1 | 0;
 $$0366 = $5;
 $$0368 = $5 + ((Math_imul($6, $1) | 0) << 1) | 0;
 $$0385 = 0;
 while (1) {
  if (($$0385 | 0) >= ($1 | 0)) break;
  HEAP16[$$0368 >> 1] = 0;
  HEAP16[$$0366 >> 1] = 0;
  $$0366 = $$0366 + 2 | 0;
  $$0368 = $$0368 + 2 | 0;
  $$0385 = $$0385 + 1 | 0;
 }
 $13 = $1 + -1 | 0;
 $$1367 = $5;
 $$1369 = $5 + ($13 << 1) | 0;
 $$1386 = 0;
 while (1) {
  if (($$1386 | 0) >= ($2 | 0)) break;
  HEAP16[$$1369 >> 1] = 0;
  HEAP16[$$1367 >> 1] = 0;
  $$1367 = $$1367 + ($1 << 1) | 0;
  $$1369 = $$1369 + ($1 << 1) | 0;
  $$1386 = $$1386 + 1 | 0;
 }
 $19 = $4 + 1179664 | 0;
 $20 = $1 + 1 | 0;
 $23 = 0 - $1 | 0;
 $$0365 = $0 + $20 | 0;
 $$0370 = 0;
 $$0382 = 1;
 $$2 = $5 + ($20 << 1) | 0;
 L9 : while (1) {
  if (($$0382 | 0) < ($6 | 0)) {
   $$1 = $$0365;
   $$1371 = $$0370;
   $$2387 = 1;
   $$3 = $$2;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($$2387 | 0) >= ($13 | 0)) break;
   do if ((HEAPU8[$$1 >> 0] | 0 | 0) > ($3 | 0)) {
    HEAP16[$$3 >> 1] = 0;
    $$3373 = $$1371;
   } else {
    $29 = $$3 + ($23 << 1) | 0;
    $30 = HEAP16[$29 >> 1] | 0;
    if ($30 << 16 >> 16 > 0) {
     HEAP16[$$3 >> 1] = $30;
     $33 = ($30 << 16 >> 16) * 7 | 0;
     $35 = $4 + 1310736 + ($33 + -7 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 1;
     $39 = $4 + 1310736 + ($33 + -6 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $$2387;
     $43 = $4 + 1310736 + ($33 + -5 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($33 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $49 = HEAP16[$29 + 2 >> 1] | 0;
    $52 = HEAP16[$29 + -2 >> 1] | 0;
    $54 = $52 << 16 >> 16 > 0;
    $55 = $$3 + -2 | 0;
    $56 = ($52 << 16 >> 16) + -1 | 0;
    if ($49 << 16 >> 16 <= 0) {
     if ($54) {
      HEAP16[$$3 >> 1] = $52;
      $148 = $56 * 7 | 0;
      $149 = $4 + 1310736 + ($148 << 2) | 0;
      HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
      $153 = $4 + 1310736 + ($148 + 1 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $$2387;
      $157 = $4 + 1310736 + ($148 + 2 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $$0382;
      $161 = $4 + 1310736 + ($148 + 4 << 2) | 0;
      if ((HEAP32[$161 >> 2] | 0) < ($$2387 | 0)) HEAP32[$161 >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($148 + 6 << 2) >> 2] = $$0382;
      $$3373 = $$1371;
      break;
     }
     $166 = HEAP16[$55 >> 1] | 0;
     if ($166 << 16 >> 16 > 0) {
      HEAP16[$$3 >> 1] = $166;
      $169 = ($166 << 16 >> 16) * 7 | 0;
      $171 = $4 + 1310736 + ($169 + -7 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + 1;
      $175 = $4 + 1310736 + ($169 + -6 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $$2387;
      $179 = $4 + 1310736 + ($169 + -5 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $$0382;
      $182 = $169 + -3 | 0;
      if ((HEAP32[$4 + 1310736 + ($182 << 2) >> 2] | 0) < ($$2387 | 0)) {
       $$2372 = $$1371;
       $$sink = $$2387;
       $$sink3 = $182;
      } else {
       $$3373 = $$1371;
       break;
      }
     } else {
      $186 = $$1371 + 1 | 0;
      if (($$1371 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$$3 >> 1] = $186;
      HEAP32[$4 + 1179664 + ($$1371 << 2) >> 2] = $186 << 16 >> 16;
      $191 = $$1371 * 7 | 0;
      HEAP32[$4 + 1310736 + ($191 << 2) >> 2] = 1;
      HEAP32[$4 + 1310736 + ($191 + 1 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($191 + 2 << 2) >> 2] = $$0382;
      HEAP32[$4 + 1310736 + ($191 + 3 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($191 + 4 << 2) >> 2] = $$2387;
      HEAP32[$4 + 1310736 + ($191 + 5 << 2) >> 2] = $$0382;
      $$2372 = $186;
      $$sink = $$0382;
      $$sink3 = $191 + 6 | 0;
     }
     HEAP32[$4 + 1310736 + ($$sink3 << 2) >> 2] = $$sink;
     $$3373 = $$2372;
     break;
    }
    $58 = ($49 << 16 >> 16) + -1 | 0;
    $59 = $4 + 1179664 + ($58 << 2) | 0;
    if ($54) {
     $60 = HEAP32[$59 >> 2] | 0;
     $62 = HEAP32[$4 + 1179664 + ($56 << 2) >> 2] | 0;
     L36 : do if (($60 | 0) > ($62 | 0)) {
      HEAP16[$$3 >> 1] = $62;
      $$0374 = $19;
      $$0378 = 0;
      while (1) {
       if (($$0378 | 0) >= ($$1371 | 0)) {
        $77 = $62;
        break L36;
       }
       if ((HEAP32[$$0374 >> 2] | 0) == ($60 | 0)) HEAP32[$$0374 >> 2] = $62;
       $$0374 = $$0374 + 4 | 0;
       $$0378 = $$0378 + 1 | 0;
      }
     } else {
      HEAP16[$$3 >> 1] = $60;
      if (($60 | 0) < ($62 | 0)) {
       $$1375 = $19;
       $$1379 = 0;
       while (1) {
        if (($$1379 | 0) >= ($$1371 | 0)) {
         $77 = $60;
         break L36;
        }
        if ((HEAP32[$$1375 >> 2] | 0) == ($62 | 0)) HEAP32[$$1375 >> 2] = $60;
        $$1375 = $$1375 + 4 | 0;
        $$1379 = $$1379 + 1 | 0;
       }
      } else $77 = $60;
     } while (0);
     $79 = ($77 << 16 >> 16) * 7 | 0;
     $81 = $4 + 1310736 + ($79 + -7 << 2) | 0;
     HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + 1;
     $85 = $4 + 1310736 + ($79 + -6 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + $$2387;
     $89 = $4 + 1310736 + ($79 + -5 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $$0382;
     HEAP32[$4 + 1310736 + ($79 + -1 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $94 = HEAP16[$55 >> 1] | 0;
    if ($94 << 16 >> 16 <= 0) {
     HEAP16[$$3 >> 1] = $49;
     $130 = $58 * 7 | 0;
     $131 = $4 + 1310736 + ($130 << 2) | 0;
     HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
     $135 = $4 + 1310736 + ($130 + 1 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $$2387;
     $139 = $4 + 1310736 + ($130 + 2 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $$0382;
     $143 = $4 + 1310736 + ($130 + 3 << 2) | 0;
     if ((HEAP32[$143 >> 2] | 0) > ($$2387 | 0)) HEAP32[$143 >> 2] = $$2387;
     HEAP32[$4 + 1310736 + ($130 + 6 << 2) >> 2] = $$0382;
     $$3373 = $$1371;
     break;
    }
    $97 = HEAP32[$59 >> 2] | 0;
    $100 = HEAP32[$4 + 1179664 + (($94 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($97 | 0) > ($100 | 0)) {
     HEAP16[$$3 >> 1] = $100;
     $$2376 = $19;
     $$2380 = 0;
     while (1) {
      if (($$2380 | 0) >= ($$1371 | 0)) {
       $115 = $100;
       break L59;
      }
      if ((HEAP32[$$2376 >> 2] | 0) == ($97 | 0)) HEAP32[$$2376 >> 2] = $100;
      $$2376 = $$2376 + 4 | 0;
      $$2380 = $$2380 + 1 | 0;
     }
    } else {
     HEAP16[$$3 >> 1] = $97;
     if (($97 | 0) < ($100 | 0)) {
      $$3377 = $19;
      $$3381 = 0;
      while (1) {
       if (($$3381 | 0) >= ($$1371 | 0)) {
        $115 = $97;
        break L59;
       }
       if ((HEAP32[$$3377 >> 2] | 0) == ($100 | 0)) HEAP32[$$3377 >> 2] = $97;
       $$3377 = $$3377 + 4 | 0;
       $$3381 = $$3381 + 1 | 0;
      }
     } else $115 = $97;
    } while (0);
    $117 = ($115 << 16 >> 16) * 7 | 0;
    $119 = $4 + 1310736 + ($117 + -7 << 2) | 0;
    HEAP32[$119 >> 2] = (HEAP32[$119 >> 2] | 0) + 1;
    $123 = $4 + 1310736 + ($117 + -6 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + $$2387;
    $127 = $4 + 1310736 + ($117 + -5 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $$0382;
    $$3373 = $$1371;
   } while (0);
   $$1 = $$1 + 1 | 0;
   $$1371 = $$3373;
   $$2387 = $$2387 + 1 | 0;
   $$3 = $$3 + 2 | 0;
  }
  $$0365 = $$1 + 2 | 0;
  $$0370 = $$1371;
  $$0382 = $$0382 + 1 | 0;
  $$2 = $$3 + 4 | 0;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3220, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $211 = $4 + 12 | 0;
  $$1383 = 1;
  $$3388 = 1;
  $$4 = $19;
  while (1) {
   if (($$3388 | 0) > ($$0370 | 0)) break;
   $213 = HEAP32[$$4 >> 2] | 0;
   if (($213 | 0) == ($$3388 | 0)) {
    $$2384 = $$1383 + 1 | 0;
    $219 = $$1383;
   } else {
    $$2384 = $$1383;
    $219 = HEAP32[$4 + 1179664 + ($213 + -1 << 2) >> 2] | 0;
   }
   HEAP32[$$4 >> 2] = $219;
   $$1383 = $$2384;
   $$3388 = $$3388 + 1 | 0;
   $$4 = $$4 + 4 | 0;
  }
  $222 = $4 + 8 | 0;
  $223 = $$1383 + -1 | 0;
  HEAP32[$222 >> 2] = $223;
  if (!$223) $$0 = 0; else {
   _memset($211 | 0, 0, $223 << 2 | 0) | 0;
   _memset($4 + 655376 | 0, 0, $223 << 4 | 0) | 0;
   $$4389 = 0;
   $229 = $223;
   while (1) {
    if (($$4389 | 0) >= ($229 | 0)) {
     $$5 = 0;
     break;
    }
    $230 = $$4389 << 2;
    HEAP32[$4 + 131084 + ($230 << 2) >> 2] = $1;
    HEAP32[$4 + 131084 + (($230 | 1) << 2) >> 2] = 0;
    HEAP32[$4 + 131084 + (($230 | 2) << 2) >> 2] = $2;
    HEAP32[$4 + 131084 + (($230 | 3) << 2) >> 2] = 0;
    $$4389 = $$4389 + 1 | 0;
    $229 = HEAP32[$222 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0370 | 0)) {
     $$6 = 0;
     break;
    }
    $242 = (HEAP32[$4 + 1179664 + ($$5 << 2) >> 2] | 0) + -1 | 0;
    $243 = $$5 * 7 | 0;
    $246 = $4 + 12 + ($242 << 2) | 0;
    HEAP32[$246 >> 2] = (HEAP32[$246 >> 2] | 0) + (HEAP32[$4 + 1310736 + ($243 << 2) >> 2] | 0);
    $253 = $242 << 1;
    $254 = $4 + 655376 + ($253 << 3) | 0;
    HEAPF64[$254 >> 3] = +HEAPF64[$254 >> 3] + +(HEAP32[$4 + 1310736 + ($243 + 1 << 2) >> 2] | 0);
    $262 = $4 + 655376 + (($253 | 1) << 3) | 0;
    HEAPF64[$262 >> 3] = +HEAPF64[$262 >> 3] + +(HEAP32[$4 + 1310736 + ($243 + 2 << 2) >> 2] | 0);
    $265 = $242 << 2;
    $266 = $4 + 131084 + ($265 << 2) | 0;
    $270 = HEAP32[$4 + 1310736 + ($243 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$266 >> 2] | 0) > ($270 | 0)) HEAP32[$266 >> 2] = $270;
    $273 = $4 + 131084 + (($265 | 1) << 2) | 0;
    $277 = HEAP32[$4 + 1310736 + ($243 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) < ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $4 + 131084 + (($265 | 2) << 2) | 0;
    $284 = HEAP32[$4 + 1310736 + ($243 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) > ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $4 + 131084 + (($265 | 3) << 2) | 0;
    $291 = HEAP32[$4 + 1310736 + ($243 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) < ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $$5 = $$5 + 1 | 0;
   }
   while (1) {
    if (($$6 | 0) >= (HEAP32[$222 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $296 = $4 + 12 + ($$6 << 2) | 0;
    $299 = $$6 << 1;
    $300 = $4 + 655376 + ($299 << 3) | 0;
    HEAPF64[$300 >> 3] = +HEAPF64[$300 >> 3] / +(HEAP32[$296 >> 2] | 0);
    $306 = $4 + 655376 + (($299 | 1) << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$296 >> 2] | 0);
    $$6 = $$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $104 = 0, $105 = 0, $113 = 0, $114 = 0, $115 = 0, $122 = 0, $124 = 0, $13 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $141 = 0, $143 = 0, $158 = 0, $16 = 0, $163 = 0, $165 = 0, $168 = 0, $17 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $193 = 0, $194 = 0, $2 = 0, $207 = 0, $21 = 0, $210 = 0, $211 = 0, $217 = 0, $232 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $241 = 0, $242 = 0, $248 = 0, $253 = 0, $254 = 0, $257 = 0, $259 = 0, $26 = 0, $262 = 0, $267 = 0, $273 = 0, $277 = 0, $278 = 0, $28 = 0, $296 = 0, $298 = 0, $3 = 0, $305 = 0, $306 = 0, $307 = 0, $315 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, label = 0;
 if (!$0) return;
 $2 = $0 + -8 | 0;
 $3 = HEAP32[4363] | 0;
 if ($2 >>> 0 < $3 >>> 0) _abort();
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 $7 = $6 & 3;
 if (($7 | 0) == 1) _abort();
 $9 = $6 & -8;
 $10 = $2 + $9 | 0;
 L10 : do if (!($6 & 1)) {
  $13 = HEAP32[$2 >> 2] | 0;
  if (!$7) return;
  $16 = $2 + (0 - $13) | 0;
  $17 = $13 + $9 | 0;
  if ($16 >>> 0 < $3 >>> 0) _abort();
  if (($16 | 0) == (HEAP32[4364] | 0)) {
   $104 = $10 + 4 | 0;
   $105 = HEAP32[$104 >> 2] | 0;
   if (($105 & 3 | 0) != 3) {
    $$1 = $16;
    $$1382 = $17;
    $113 = $16;
    break;
   }
   HEAP32[4361] = $17;
   HEAP32[$104 >> 2] = $105 & -2;
   HEAP32[$16 + 4 >> 2] = $17 | 1;
   HEAP32[$16 + $17 >> 2] = $17;
   return;
  }
  $21 = $13 >>> 3;
  if ($13 >>> 0 < 256) {
   $24 = HEAP32[$16 + 8 >> 2] | 0;
   $26 = HEAP32[$16 + 12 >> 2] | 0;
   $28 = 17476 + ($21 << 1 << 2) | 0;
   if (($24 | 0) != ($28 | 0)) {
    if ($24 >>> 0 < $3 >>> 0) _abort();
    if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) _abort();
   }
   if (($26 | 0) == ($24 | 0)) {
    HEAP32[4359] = HEAP32[4359] & ~(1 << $21);
    $$1 = $16;
    $$1382 = $17;
    $113 = $16;
    break;
   }
   if (($26 | 0) == ($28 | 0)) $$pre$phi445Z2D = $26 + 8 | 0; else {
    if ($26 >>> 0 < $3 >>> 0) _abort();
    $41 = $26 + 8 | 0;
    if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) $$pre$phi445Z2D = $41; else _abort();
   }
   HEAP32[$24 + 12 >> 2] = $26;
   HEAP32[$$pre$phi445Z2D >> 2] = $24;
   $$1 = $16;
   $$1382 = $17;
   $113 = $16;
   break;
  }
  $46 = HEAP32[$16 + 24 >> 2] | 0;
  $48 = HEAP32[$16 + 12 >> 2] | 0;
  do if (($48 | 0) == ($16 | 0)) {
   $59 = $16 + 16 | 0;
   $60 = $59 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if (!$61) {
    $63 = HEAP32[$59 >> 2] | 0;
    if (!$63) {
     $$3 = 0;
     break;
    } else {
     $$1387 = $63;
     $$1390 = $59;
    }
   } else {
    $$1387 = $61;
    $$1390 = $60;
   }
   while (1) {
    $65 = $$1387 + 20 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if ($66 | 0) {
     $$1387 = $66;
     $$1390 = $65;
     continue;
    }
    $68 = $$1387 + 16 | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    if (!$69) break; else {
     $$1387 = $69;
     $$1390 = $68;
    }
   }
   if ($$1390 >>> 0 < $3 >>> 0) _abort(); else {
    HEAP32[$$1390 >> 2] = 0;
    $$3 = $$1387;
    break;
   }
  } else {
   $51 = HEAP32[$16 + 8 >> 2] | 0;
   if ($51 >>> 0 < $3 >>> 0) _abort();
   $53 = $51 + 12 | 0;
   if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) _abort();
   $56 = $48 + 8 | 0;
   if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$53 >> 2] = $48;
    HEAP32[$56 >> 2] = $51;
    $$3 = $48;
    break;
   } else _abort();
  } while (0);
  if (!$46) {
   $$1 = $16;
   $$1382 = $17;
   $113 = $16;
  } else {
   $74 = HEAP32[$16 + 28 >> 2] | 0;
   $75 = 17740 + ($74 << 2) | 0;
   do if (($16 | 0) == (HEAP32[$75 >> 2] | 0)) {
    HEAP32[$75 >> 2] = $$3;
    if (!$$3) {
     HEAP32[4360] = HEAP32[4360] & ~(1 << $74);
     $$1 = $16;
     $$1382 = $17;
     $113 = $16;
     break L10;
    }
   } else if ($46 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
    HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3;
    if (!$$3) {
     $$1 = $16;
     $$1382 = $17;
     $113 = $16;
     break L10;
    } else break;
   } while (0);
   $88 = HEAP32[4363] | 0;
   if ($$3 >>> 0 < $88 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $46;
   $91 = $16 + 16 | 0;
   $92 = HEAP32[$91 >> 2] | 0;
   do if ($92 | 0) if ($92 >>> 0 < $88 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $92;
    HEAP32[$92 + 24 >> 2] = $$3;
    break;
   } while (0);
   $98 = HEAP32[$91 + 4 >> 2] | 0;
   if (!$98) {
    $$1 = $16;
    $$1382 = $17;
    $113 = $16;
   } else if ($98 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $98;
    HEAP32[$98 + 24 >> 2] = $$3;
    $$1 = $16;
    $$1382 = $17;
    $113 = $16;
    break;
   }
  }
 } else {
  $$1 = $2;
  $$1382 = $9;
  $113 = $2;
 } while (0);
 if ($113 >>> 0 >= $10 >>> 0) _abort();
 $114 = $10 + 4 | 0;
 $115 = HEAP32[$114 >> 2] | 0;
 if (!($115 & 1)) _abort();
 if (!($115 & 2)) {
  $122 = HEAP32[4364] | 0;
  if (($10 | 0) == (HEAP32[4365] | 0)) {
   $124 = (HEAP32[4362] | 0) + $$1382 | 0;
   HEAP32[4362] = $124;
   HEAP32[4365] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   if (($$1 | 0) != ($122 | 0)) return;
   HEAP32[4364] = 0;
   HEAP32[4361] = 0;
   return;
  }
  if (($10 | 0) == ($122 | 0)) {
   $130 = (HEAP32[4361] | 0) + $$1382 | 0;
   HEAP32[4361] = $130;
   HEAP32[4364] = $113;
   HEAP32[$$1 + 4 >> 2] = $130 | 1;
   HEAP32[$113 + $130 >> 2] = $130;
   return;
  }
  $135 = ($115 & -8) + $$1382 | 0;
  $136 = $115 >>> 3;
  L108 : do if ($115 >>> 0 < 256) {
   $139 = HEAP32[$10 + 8 >> 2] | 0;
   $141 = HEAP32[$10 + 12 >> 2] | 0;
   $143 = 17476 + ($136 << 1 << 2) | 0;
   if (($139 | 0) != ($143 | 0)) {
    if ($139 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort();
    if ((HEAP32[$139 + 12 >> 2] | 0) != ($10 | 0)) _abort();
   }
   if (($141 | 0) == ($139 | 0)) {
    HEAP32[4359] = HEAP32[4359] & ~(1 << $136);
    break;
   }
   if (($141 | 0) == ($143 | 0)) $$pre$phi443Z2D = $141 + 8 | 0; else {
    if ($141 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort();
    $158 = $141 + 8 | 0;
    if ((HEAP32[$158 >> 2] | 0) == ($10 | 0)) $$pre$phi443Z2D = $158; else _abort();
   }
   HEAP32[$139 + 12 >> 2] = $141;
   HEAP32[$$pre$phi443Z2D >> 2] = $139;
  } else {
   $163 = HEAP32[$10 + 24 >> 2] | 0;
   $165 = HEAP32[$10 + 12 >> 2] | 0;
   do if (($165 | 0) == ($10 | 0)) {
    $177 = $10 + 16 | 0;
    $178 = $177 + 4 | 0;
    $179 = HEAP32[$178 >> 2] | 0;
    if (!$179) {
     $181 = HEAP32[$177 >> 2] | 0;
     if (!$181) {
      $$3400 = 0;
      break;
     } else {
      $$1398 = $181;
      $$1402 = $177;
     }
    } else {
     $$1398 = $179;
     $$1402 = $178;
    }
    while (1) {
     $183 = $$1398 + 20 | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     if ($184 | 0) {
      $$1398 = $184;
      $$1402 = $183;
      continue;
     }
     $186 = $$1398 + 16 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if (!$187) break; else {
      $$1398 = $187;
      $$1402 = $186;
     }
    }
    if ($$1402 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
     HEAP32[$$1402 >> 2] = 0;
     $$3400 = $$1398;
     break;
    }
   } else {
    $168 = HEAP32[$10 + 8 >> 2] | 0;
    if ($168 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort();
    $171 = $168 + 12 | 0;
    if ((HEAP32[$171 >> 2] | 0) != ($10 | 0)) _abort();
    $174 = $165 + 8 | 0;
    if ((HEAP32[$174 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$171 >> 2] = $165;
     HEAP32[$174 >> 2] = $168;
     $$3400 = $165;
     break;
    } else _abort();
   } while (0);
   if ($163 | 0) {
    $193 = HEAP32[$10 + 28 >> 2] | 0;
    $194 = 17740 + ($193 << 2) | 0;
    do if (($10 | 0) == (HEAP32[$194 >> 2] | 0)) {
     HEAP32[$194 >> 2] = $$3400;
     if (!$$3400) {
      HEAP32[4360] = HEAP32[4360] & ~(1 << $193);
      break L108;
     }
    } else if ($163 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
     HEAP32[$163 + 16 + (((HEAP32[$163 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400;
     if (!$$3400) break L108; else break;
    } while (0);
    $207 = HEAP32[4363] | 0;
    if ($$3400 >>> 0 < $207 >>> 0) _abort();
    HEAP32[$$3400 + 24 >> 2] = $163;
    $210 = $10 + 16 | 0;
    $211 = HEAP32[$210 >> 2] | 0;
    do if ($211 | 0) if ($211 >>> 0 < $207 >>> 0) _abort(); else {
     HEAP32[$$3400 + 16 >> 2] = $211;
     HEAP32[$211 + 24 >> 2] = $$3400;
     break;
    } while (0);
    $217 = HEAP32[$210 + 4 >> 2] | 0;
    if ($217 | 0) if ($217 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
     HEAP32[$$3400 + 20 >> 2] = $217;
     HEAP32[$217 + 24 >> 2] = $$3400;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $135 | 1;
  HEAP32[$113 + $135 >> 2] = $135;
  if (($$1 | 0) == (HEAP32[4364] | 0)) {
   HEAP32[4361] = $135;
   return;
  } else $$2 = $135;
 } else {
  HEAP32[$114 >> 2] = $115 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1;
  HEAP32[$113 + $$1382 >> 2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $235 = 17476 + ($232 << 1 << 2) | 0;
  $236 = HEAP32[4359] | 0;
  $237 = 1 << $232;
  if (!($236 & $237)) {
   HEAP32[4359] = $236 | $237;
   $$0403 = $235;
   $$pre$phiZ2D = $235 + 8 | 0;
  } else {
   $241 = $235 + 8 | 0;
   $242 = HEAP32[$241 >> 2] | 0;
   if ($242 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
    $$0403 = $242;
    $$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0403 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0403;
  HEAP32[$$1 + 12 >> 2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 if (!$248) $$0396 = 0; else if ($$2 >>> 0 > 16777215) $$0396 = 31; else {
  $253 = ($248 + 1048320 | 0) >>> 16 & 8;
  $254 = $248 << $253;
  $257 = ($254 + 520192 | 0) >>> 16 & 4;
  $259 = $254 << $257;
  $262 = ($259 + 245760 | 0) >>> 16 & 2;
  $267 = 14 - ($257 | $253 | $262) + ($259 << $262 >>> 15) | 0;
  $$0396 = $$2 >>> ($267 + 7 | 0) & 1 | $267 << 1;
 }
 $273 = 17740 + ($$0396 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0396;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $277 = HEAP32[4360] | 0;
 $278 = 1 << $$0396;
 do if (!($277 & $278)) {
  HEAP32[4360] = $277 | $278;
  HEAP32[$273 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $273;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
 } else {
  $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0);
  $$0384 = HEAP32[$273 >> 2] | 0;
  while (1) {
   if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
    label = 124;
    break;
   }
   $296 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0;
   $298 = HEAP32[$296 >> 2] | 0;
   if (!$298) {
    label = 121;
    break;
   } else {
    $$0383 = $$0383 << 1;
    $$0384 = $298;
   }
  }
  if ((label | 0) == 121) if ($296 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
   HEAP32[$296 >> 2] = $$1;
   HEAP32[$$1 + 24 >> 2] = $$0384;
   HEAP32[$$1 + 12 >> 2] = $$1;
   HEAP32[$$1 + 8 >> 2] = $$1;
   break;
  } else if ((label | 0) == 124) {
   $305 = $$0384 + 8 | 0;
   $306 = HEAP32[$305 >> 2] | 0;
   $307 = HEAP32[4363] | 0;
   if ($306 >>> 0 >= $307 >>> 0 & $$0384 >>> 0 >= $307 >>> 0) {
    HEAP32[$306 + 12 >> 2] = $$1;
    HEAP32[$305 >> 2] = $$1;
    HEAP32[$$1 + 8 >> 2] = $306;
    HEAP32[$$1 + 12 >> 2] = $$0384;
    HEAP32[$$1 + 24 >> 2] = 0;
    break;
   } else _abort();
  }
 } while (0);
 $315 = (HEAP32[4367] | 0) + -1 | 0;
 HEAP32[4367] = $315;
 if (!$315) $$0212$in$i = 17892; else return;
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0;
  if (!$$0212$i) break; else $$0212$in$i = $$0212$i + 8 | 0;
 }
 HEAP32[4367] = -1;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i134 = 0, $$0$i$i$i113 = 0, $$0$i$i$i121 = 0, $$0$i$i$i125 = 0, $$0$i$i$i129 = 0, $$7 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $110 = 0, $114 = 0, $115 = 0, $117 = 0, $125 = 0, $13 = 0, $133 = 0, $134 = 0, $144 = 0, $145 = 0, $146 = 0, $149 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $3 = 0, $35 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $6 = 0, $63 = 0, $67 = 0, $7 = 0, $75 = 0, $76 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 96 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 do if (($0 | 0) == ($1 | 0)) $$7 = $0; else if ((HEAP8[$0 >> 0] | 0) == 65) {
  $13 = $0 + 1 | 0;
  if (($13 | 0) == ($1 | 0)) $$7 = $0; else {
   $15 = HEAP8[$13 >> 0] | 0;
   if ($15 << 24 >> 24 == 95) {
    $17 = $0 + 2 | 0;
    $18 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($17, $1, $2) | 0;
    if (($18 | 0) == ($17 | 0)) {
     $$7 = $0;
     break;
    }
    $21 = $2 + 4 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($22 | 0)) {
     $$7 = $0;
     break;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, $22 + -12 | 0, 2);
    $25 = __ZNSt3__211char_traitsIcE6lengthEPKc(15041) | 0;
    $27 = HEAP8[$3 + 11 >> 0] | 0;
    if (($25 | 0) == (($27 << 24 >> 24 < 0 ? HEAP32[$3 + 4 >> 2] | 0 : $27 & 255) | 0)) {
     $35 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15041, $25) | 0) == 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     if ($35) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$21 >> 2] | 0) + -12 | 0);
    } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$21 >> 2] | 0) + -12 | 0, 0, 16482) | 0;
    $$7 = $18;
    break;
   }
   if (($15 + -49 & 255) < 9) {
    $41 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($13, $1) | 0;
    if (($41 | 0) == ($1 | 0)) {
     $$7 = $0;
     break;
    }
    if ((HEAP8[$41 >> 0] | 0) != 95) {
     $$7 = $0;
     break;
    }
    $45 = $41 + 1 | 0;
    $46 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($45, $1, $2) | 0;
    if (($46 | 0) == ($45 | 0)) {
     $$7 = $0;
     break;
    }
    $49 = $2 + 4 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($50 | 0)) {
     $$7 = $0;
     break;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, $50 + -12 | 0, 2);
    $53 = __ZNSt3__211char_traitsIcE6lengthEPKc(15041) | 0;
    $55 = HEAP8[$3 + 11 >> 0] | 0;
    if (($53 | 0) == (($55 << 24 >> 24 < 0 ? HEAP32[$3 + 4 >> 2] | 0 : $55 & 255) | 0)) {
     $63 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15041, $53) | 0) == 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     if ($63) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$49 >> 2] | 0) + -12 | 0);
    } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $67 = (HEAP32[$49 >> 2] | 0) + -12 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5, $13, $41);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15041) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15096) | 0;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i113 = 0;
    while (1) {
     if (($$0$i$i$i113 | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i113 << 2) >> 2] = 0;
     $$0$i$i$i113 = $$0$i$i$i113 + 1 | 0;
    }
    $75 = HEAP8[$3 + 11 >> 0] | 0;
    $76 = $75 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($67, 0, $76 ? HEAP32[$3 >> 2] | 0 : $3, $76 ? HEAP32[$3 + 4 >> 2] | 0 : $75 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$7 = $46;
    break;
   }
   $83 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
   if (($83 | 0) == ($13 | 0) | ($83 | 0) == ($1 | 0)) $$7 = $0; else if ((HEAP8[$83 >> 0] | 0) == 95) {
    $88 = $83 + 1 | 0;
    $89 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($88, $1, $2) | 0;
    if (($89 | 0) == ($88 | 0)) $$7 = $0; else {
     $91 = $2 + 4 | 0;
     $92 = HEAP32[$91 >> 2] | 0;
     if ((($92 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$7 = $0; else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $92 + -24 | 0);
      $99 = HEAP32[$91 >> 2] | 0;
      $100 = $99 + -24 | 0;
      $102 = $99;
      while (1) {
       if (($102 | 0) == ($100 | 0)) break;
       $103 = $102 + -24 | 0;
       HEAP32[$91 >> 2] = $103;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($103);
       $102 = HEAP32[$91 >> 2] | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $99 + -48 | 0);
      $105 = HEAP32[$91 >> 2] | 0;
      $106 = $105 + -24 | 0;
      $107 = $106 + 11 | 0;
      if ((HEAP8[$107 >> 0] | 0) < 0) {
       $110 = HEAP32[$106 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($110, $3);
       HEAP32[$105 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($106, $3);
       HEAP8[$107 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($106);
      HEAP32[$106 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$106 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$106 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i$i | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
      }
      $114 = $4 + 12 | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3, $114, 2);
      $115 = __ZNSt3__211char_traitsIcE6lengthEPKc(15041) | 0;
      $117 = HEAP8[$3 + 11 >> 0] | 0;
      if (($115 | 0) == (($117 << 24 >> 24 < 0 ? HEAP32[$3 + 4 >> 2] | 0 : $117 & 255) | 0)) {
       $125 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3, 15041, $115) | 0) == 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       if ($125) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($114);
      } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 15041) | 0;
      HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
      HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
      $$0$i$i$i121 = 0;
      while (1) {
       if (($$0$i$i$i121 | 0) == 3) break;
       HEAP32[$9 + ($$0$i$i$i121 << 2) >> 2] = 0;
       $$0$i$i$i121 = $$0$i$i$i121 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15096) | 0;
      HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
      $$0$i$i$i125 = 0;
      while (1) {
       if (($$0$i$i$i125 | 0) == 3) break;
       HEAP32[$8 + ($$0$i$i$i125 << 2) >> 2] = 0;
       $$0$i$i$i125 = $$0$i$i$i125 + 1 | 0;
      }
      $133 = HEAP8[$114 + 11 >> 0] | 0;
      $134 = $133 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $134 ? HEAP32[$114 >> 2] | 0 : $114, $134 ? HEAP32[$4 + 16 >> 2] | 0 : $133 & 255) | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
      $$0$i$i$i129 = 0;
      while (1) {
       if (($$0$i$i$i129 | 0) == 3) break;
       HEAP32[$7 + ($$0$i$i$i129 << 2) >> 2] = 0;
       $$0$i$i$i129 = $$0$i$i$i129 + 1 | 0;
      }
      $144 = HEAP32[$91 >> 2] | 0;
      $145 = $144 + -12 | 0;
      $146 = $145 + 11 | 0;
      if ((HEAP8[$146 >> 0] | 0) < 0) {
       $149 = HEAP32[$145 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($149, $3);
       HEAP32[$144 + -8 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($145, $3);
       HEAP8[$146 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($145);
      HEAP32[$145 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$145 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$145 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i134 = 0;
      while (1) {
       if (($$0$i$i$i$i134 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i134 << 2) >> 2] = 0;
       $$0$i$i$i$i134 = $$0$i$i$i$i134 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $$7 = $89;
     }
    }
   } else $$7 = $0;
  }
 } else $$7 = $0; while (0);
 STACKTOP = sp;
 return $$7 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i$i = 0, $$0105 = 0, $$0105$lcssa = 0, $$0106 = 0, $$0110 = 0, $$0110$lcssa = 0, $$0116 = 0, $$2108 = 0, $$3109 = 0, $$7 = 0, $$byval_copy = 0, $105 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $122 = 0, $123 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $154 = 0, $160 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $94 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $$byval_copy = sp + 56 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 85) {
  $17 = $0 + 2 | 0;
  switch (HEAP8[$0 + 1 >> 0] | 0) {
  case 116:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15850, __ZNSt3__211char_traitsIcE6lengthEPKc(15850) | 0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($$byval_copy, $3);
    $19 = $2 + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    if ($20 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($20, $$byval_copy);
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $$byval_copy);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$byval_copy);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    if (($17 | 0) == ($1 | 0)) {
     $27 = HEAP32[$19 >> 2] | 0;
     $28 = $27 + -24 | 0;
     $30 = $27;
     while (1) {
      if (($30 | 0) == ($28 | 0)) {
       $$7 = $0;
       break L1;
      }
      $31 = $30 + -24 | 0;
      HEAP32[$19 >> 2] = $31;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $30 = HEAP32[$19 >> 2] | 0;
     }
    }
    if (((HEAP8[$17 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
     $$0110 = $0 + 3 | 0;
     while (1) {
      if (($$0110 | 0) == ($1 | 0)) {
       $$0110$lcssa = $1;
       break;
      }
      if (((HEAP8[$$0110 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       $$0110$lcssa = $$0110;
       break;
      }
      $$0110 = $$0110 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueERS7_E4typeESC_SC_((HEAP32[$19 >> 2] | 0) + -24 | 0, $17, $$0110$lcssa);
     $$0116 = $$0110$lcssa;
    } else $$0116 = $17;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$19 >> 2] | 0) + -24 | 0, 39);
    if (($$0116 | 0) != ($1 | 0)) if ((HEAP8[$$0116 >> 0] | 0) == 95) {
     $$7 = $$0116 + 1 | 0;
     break L1;
    }
    $46 = HEAP32[$19 >> 2] | 0;
    $47 = $46 + -24 | 0;
    $49 = $46;
    while (1) {
     if (($49 | 0) == ($47 | 0)) {
      $$7 = $0;
      break L1;
     }
     $50 = $49 + -24 | 0;
     HEAP32[$19 >> 2] = $50;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
     $49 = HEAP32[$19 >> 2] | 0;
    }
    break;
   }
  case 108:
   break;
  default:
   {
    $$7 = $0;
    break L1;
   }
  }
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($4, 15859, __ZNSt3__211char_traitsIcE6lengthEPKc(15859) | 0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($$byval_copy, $4);
  $53 = $2 + 4 | 0;
  $54 = HEAP32[$53 >> 2] | 0;
  if ($54 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54, $$byval_copy);
   HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 24;
  } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $$byval_copy);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$byval_copy);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
  do if ((HEAP8[$17 >> 0] | 0) == 118) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$53 >> 2] | 0) + -24 | 0, 41);
   $$2108 = $0 + 3 | 0;
  } else {
   $65 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($17, $1, $2) | 0;
   if (($65 | 0) == ($17 | 0)) {
    $67 = HEAP32[$53 >> 2] | 0;
    $68 = $67 + -24 | 0;
    $70 = $67;
    while (1) {
     if (($70 | 0) == ($68 | 0)) {
      $$7 = $0;
      break L1;
     }
     $71 = $70 + -24 | 0;
     HEAP32[$53 >> 2] = $71;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($71);
     $70 = HEAP32[$53 >> 2] | 0;
    }
   }
   $72 = HEAP32[$53 >> 2] | 0;
   if ((($72 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$7 = $0;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $72 + -24 | 0);
   $79 = HEAP32[$53 >> 2] | 0;
   $80 = $79 + -24 | 0;
   $82 = $79;
   while (1) {
    if (($82 | 0) == ($80 | 0)) break;
    $83 = $82 + -24 | 0;
    HEAP32[$53 >> 2] = $83;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($83);
    $82 = HEAP32[$53 >> 2] | 0;
   }
   $85 = $5 + 11 | 0;
   $86 = HEAP8[$85 >> 0] | 0;
   $87 = $86 << 24 >> 24 < 0;
   $90 = $5 + 4 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($79 + -48 | 0, $87 ? HEAP32[$5 >> 2] | 0 : $5, $87 ? HEAP32[$90 >> 2] | 0 : $86 & 255) | 0;
   $$0106 = $65;
   while (1) {
    $94 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0106, $1, $2) | 0;
    if (($94 | 0) == ($$0106 | 0)) {
     label = 50;
     break;
    }
    $96 = HEAP32[$53 >> 2] | 0;
    if ((($96 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     label = 75;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $96 + -24 | 0);
    if ((HEAP8[$85 >> 0] | 0) < 0) {
     $105 = HEAP32[$5 >> 2] | 0;
     HEAP8[$$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($105, $$byval_copy);
     HEAP32[$90 >> 2] = 0;
    } else {
     HEAP8[$$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($5, $$byval_copy);
     HEAP8[$85 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($5);
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $108 = HEAP32[$53 >> 2] | 0;
    $109 = $108 + -24 | 0;
    $111 = $108;
    while (1) {
     if (($111 | 0) == ($109 | 0)) break;
     $112 = $111 + -24 | 0;
     HEAP32[$53 >> 2] = $112;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($112);
     $111 = HEAP32[$53 >> 2] | 0;
    }
    $113 = HEAP8[$85 >> 0] | 0;
    if (!(($113 << 24 >> 24 < 0 ? HEAP32[$90 >> 2] | 0 : $113 & 255) | 0)) {
     $$0106 = $94;
     continue;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($108 + -48 | 0, 15271) | 0;
    $122 = HEAP8[$85 >> 0] | 0;
    $123 = $122 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$53 >> 2] | 0) + -24 | 0, $123 ? HEAP32[$5 >> 2] | 0 : $5, $123 ? HEAP32[$90 >> 2] | 0 : $122 & 255) | 0;
    $$0106 = $94;
   }
   if ((label | 0) == 50) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$53 >> 2] | 0) + -24 | 0, 15047) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$2108 = $$0106;
    break;
   } else if ((label | 0) == 75) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$7 = $0;
    break L1;
   }
  } while (0);
  if (($$2108 | 0) != ($1 | 0)) if ((HEAP8[$$2108 >> 0] | 0) == 69) {
   $139 = $$2108 + 1 | 0;
   if (($139 | 0) == ($1 | 0)) {
    $141 = HEAP32[$53 >> 2] | 0;
    $142 = $141 + -24 | 0;
    $144 = $141;
    while (1) {
     if (($144 | 0) == ($142 | 0)) {
      $$7 = $0;
      break L1;
     }
     $145 = $144 + -24 | 0;
     HEAP32[$53 >> 2] = $145;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($145);
     $144 = HEAP32[$53 >> 2] | 0;
    }
   }
   if (((HEAP8[$139 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
    $$0105 = $$2108 + 2 | 0;
    while (1) {
     if (($$0105 | 0) == ($1 | 0)) {
      $$0105$lcssa = $1;
      break;
     }
     if (((HEAP8[$$0105 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
      $$0105$lcssa = $$0105;
      break;
     }
     $$0105 = $$0105 + 1 | 0;
    }
    $154 = (HEAP32[$53 >> 2] | 0) + -24 | 0;
    if ((HEAP8[$154 + 11 >> 0] | 0) < 0) $160 = HEAP32[$154 >> 2] | 0; else $160 = $154;
    HEAP32[$7 >> 2] = $160 + 7;
    HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($154, $$byval_copy, $139, $$0105$lcssa);
    $$3109 = $$0105$lcssa;
   } else $$3109 = $139;
   if (($$3109 | 0) != ($1 | 0)) if ((HEAP8[$$3109 >> 0] | 0) == 95) {
    $$7 = $$3109 + 1 | 0;
    break;
   }
   $165 = HEAP32[$53 >> 2] | 0;
   $166 = $165 + -24 | 0;
   $168 = $165;
   while (1) {
    if (($168 | 0) == ($166 | 0)) {
     $$7 = $0;
     break L1;
    }
    $169 = $168 + -24 | 0;
    HEAP32[$53 >> 2] = $169;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($169);
    $168 = HEAP32[$53 >> 2] | 0;
   }
  }
  $134 = HEAP32[$53 >> 2] | 0;
  $135 = $134 + -24 | 0;
  $137 = $134;
  while (1) {
   if (($137 | 0) == ($135 | 0)) {
    $$7 = $0;
    break L1;
   }
   $138 = $137 + -24 | 0;
   HEAP32[$53 >> 2] = $138;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($138);
   $137 = HEAP32[$53 >> 2] | 0;
  }
 } else $$7 = $0; else $$7 = $0; while (0);
 STACKTOP = sp;
 return $$7 | 0;
}

function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $100 = 0, $101 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $124 = 0, $129 = 0, $13 = 0, $130 = 0, $133 = 0, $135 = 0, $137 = 0, $150 = 0, $155 = 0, $157 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $183 = 0, $184 = 0, $197 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $207 = 0, $22 = 0, $222 = 0, $225 = 0, $226 = 0, $227 = 0, $231 = 0, $232 = 0, $238 = 0, $24 = 0, $243 = 0, $244 = 0, $247 = 0, $249 = 0, $252 = 0, $257 = 0, $263 = 0, $267 = 0, $268 = 0, $286 = 0, $288 = 0, $295 = 0, $296 = 0, $297 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $84 = 0, $87 = 0, $88 = 0, $94 = 0, label = 0;
 $2 = $0 + $1 | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!($4 & 1)) {
  $7 = HEAP32[$0 >> 2] | 0;
  if (!($4 & 3)) return;
  $11 = $0 + (0 - $7) | 0;
  $12 = $7 + $1 | 0;
  $13 = HEAP32[4363] | 0;
  if ($11 >>> 0 < $13 >>> 0) _abort();
  if (($11 | 0) == (HEAP32[4364] | 0)) {
   $100 = $2 + 4 | 0;
   $101 = HEAP32[$100 >> 2] | 0;
   if (($101 & 3 | 0) != 3) {
    $$1 = $11;
    $$1418 = $12;
    break;
   }
   HEAP32[4361] = $12;
   HEAP32[$100 >> 2] = $101 & -2;
   HEAP32[$11 + 4 >> 2] = $12 | 1;
   HEAP32[$11 + $12 >> 2] = $12;
   return;
  }
  $17 = $7 >>> 3;
  if ($7 >>> 0 < 256) {
   $20 = HEAP32[$11 + 8 >> 2] | 0;
   $22 = HEAP32[$11 + 12 >> 2] | 0;
   $24 = 17476 + ($17 << 1 << 2) | 0;
   if (($20 | 0) != ($24 | 0)) {
    if ($20 >>> 0 < $13 >>> 0) _abort();
    if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) _abort();
   }
   if (($22 | 0) == ($20 | 0)) {
    HEAP32[4359] = HEAP32[4359] & ~(1 << $17);
    $$1 = $11;
    $$1418 = $12;
    break;
   }
   if (($22 | 0) == ($24 | 0)) $$pre$phi26Z2D = $22 + 8 | 0; else {
    if ($22 >>> 0 < $13 >>> 0) _abort();
    $37 = $22 + 8 | 0;
    if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) $$pre$phi26Z2D = $37; else _abort();
   }
   HEAP32[$20 + 12 >> 2] = $22;
   HEAP32[$$pre$phi26Z2D >> 2] = $20;
   $$1 = $11;
   $$1418 = $12;
   break;
  }
  $42 = HEAP32[$11 + 24 >> 2] | 0;
  $44 = HEAP32[$11 + 12 >> 2] | 0;
  do if (($44 | 0) == ($11 | 0)) {
   $55 = $11 + 16 | 0;
   $56 = $55 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   if (!$57) {
    $59 = HEAP32[$55 >> 2] | 0;
    if (!$59) {
     $$3 = 0;
     break;
    } else {
     $$1426 = $59;
     $$1429 = $55;
    }
   } else {
    $$1426 = $57;
    $$1429 = $56;
   }
   while (1) {
    $61 = $$1426 + 20 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    if ($62 | 0) {
     $$1426 = $62;
     $$1429 = $61;
     continue;
    }
    $64 = $$1426 + 16 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    if (!$65) break; else {
     $$1426 = $65;
     $$1429 = $64;
    }
   }
   if ($$1429 >>> 0 < $13 >>> 0) _abort(); else {
    HEAP32[$$1429 >> 2] = 0;
    $$3 = $$1426;
    break;
   }
  } else {
   $47 = HEAP32[$11 + 8 >> 2] | 0;
   if ($47 >>> 0 < $13 >>> 0) _abort();
   $49 = $47 + 12 | 0;
   if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) _abort();
   $52 = $44 + 8 | 0;
   if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$49 >> 2] = $44;
    HEAP32[$52 >> 2] = $47;
    $$3 = $44;
    break;
   } else _abort();
  } while (0);
  if (!$42) {
   $$1 = $11;
   $$1418 = $12;
  } else {
   $70 = HEAP32[$11 + 28 >> 2] | 0;
   $71 = 17740 + ($70 << 2) | 0;
   do if (($11 | 0) == (HEAP32[$71 >> 2] | 0)) {
    HEAP32[$71 >> 2] = $$3;
    if (!$$3) {
     HEAP32[4360] = HEAP32[4360] & ~(1 << $70);
     $$1 = $11;
     $$1418 = $12;
     break L1;
    }
   } else if ($42 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
    HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3;
    if (!$$3) {
     $$1 = $11;
     $$1418 = $12;
     break L1;
    } else break;
   } while (0);
   $84 = HEAP32[4363] | 0;
   if ($$3 >>> 0 < $84 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $42;
   $87 = $11 + 16 | 0;
   $88 = HEAP32[$87 >> 2] | 0;
   do if ($88 | 0) if ($88 >>> 0 < $84 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $88;
    HEAP32[$88 + 24 >> 2] = $$3;
    break;
   } while (0);
   $94 = HEAP32[$87 + 4 >> 2] | 0;
   if (!$94) {
    $$1 = $11;
    $$1418 = $12;
   } else if ($94 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $94;
    HEAP32[$94 + 24 >> 2] = $$3;
    $$1 = $11;
    $$1418 = $12;
    break;
   }
  }
 } else {
  $$1 = $0;
  $$1418 = $1;
 } while (0);
 $108 = HEAP32[4363] | 0;
 if ($2 >>> 0 < $108 >>> 0) _abort();
 $110 = $2 + 4 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 if (!($111 & 2)) {
  $116 = HEAP32[4364] | 0;
  if (($2 | 0) == (HEAP32[4365] | 0)) {
   $118 = (HEAP32[4362] | 0) + $$1418 | 0;
   HEAP32[4362] = $118;
   HEAP32[4365] = $$1;
   HEAP32[$$1 + 4 >> 2] = $118 | 1;
   if (($$1 | 0) != ($116 | 0)) return;
   HEAP32[4364] = 0;
   HEAP32[4361] = 0;
   return;
  }
  if (($2 | 0) == ($116 | 0)) {
   $124 = (HEAP32[4361] | 0) + $$1418 | 0;
   HEAP32[4361] = $124;
   HEAP32[4364] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   HEAP32[$$1 + $124 >> 2] = $124;
   return;
  }
  $129 = ($111 & -8) + $$1418 | 0;
  $130 = $111 >>> 3;
  L96 : do if ($111 >>> 0 < 256) {
   $133 = HEAP32[$2 + 8 >> 2] | 0;
   $135 = HEAP32[$2 + 12 >> 2] | 0;
   $137 = 17476 + ($130 << 1 << 2) | 0;
   if (($133 | 0) != ($137 | 0)) {
    if ($133 >>> 0 < $108 >>> 0) _abort();
    if ((HEAP32[$133 + 12 >> 2] | 0) != ($2 | 0)) _abort();
   }
   if (($135 | 0) == ($133 | 0)) {
    HEAP32[4359] = HEAP32[4359] & ~(1 << $130);
    break;
   }
   if (($135 | 0) == ($137 | 0)) $$pre$phi24Z2D = $135 + 8 | 0; else {
    if ($135 >>> 0 < $108 >>> 0) _abort();
    $150 = $135 + 8 | 0;
    if ((HEAP32[$150 >> 2] | 0) == ($2 | 0)) $$pre$phi24Z2D = $150; else _abort();
   }
   HEAP32[$133 + 12 >> 2] = $135;
   HEAP32[$$pre$phi24Z2D >> 2] = $133;
  } else {
   $155 = HEAP32[$2 + 24 >> 2] | 0;
   $157 = HEAP32[$2 + 12 >> 2] | 0;
   do if (($157 | 0) == ($2 | 0)) {
    $168 = $2 + 16 | 0;
    $169 = $168 + 4 | 0;
    $170 = HEAP32[$169 >> 2] | 0;
    if (!$170) {
     $172 = HEAP32[$168 >> 2] | 0;
     if (!$172) {
      $$3435 = 0;
      break;
     } else {
      $$1433 = $172;
      $$1437 = $168;
     }
    } else {
     $$1433 = $170;
     $$1437 = $169;
    }
    while (1) {
     $174 = $$1433 + 20 | 0;
     $175 = HEAP32[$174 >> 2] | 0;
     if ($175 | 0) {
      $$1433 = $175;
      $$1437 = $174;
      continue;
     }
     $177 = $$1433 + 16 | 0;
     $178 = HEAP32[$177 >> 2] | 0;
     if (!$178) break; else {
      $$1433 = $178;
      $$1437 = $177;
     }
    }
    if ($$1437 >>> 0 < $108 >>> 0) _abort(); else {
     HEAP32[$$1437 >> 2] = 0;
     $$3435 = $$1433;
     break;
    }
   } else {
    $160 = HEAP32[$2 + 8 >> 2] | 0;
    if ($160 >>> 0 < $108 >>> 0) _abort();
    $162 = $160 + 12 | 0;
    if ((HEAP32[$162 >> 2] | 0) != ($2 | 0)) _abort();
    $165 = $157 + 8 | 0;
    if ((HEAP32[$165 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$162 >> 2] = $157;
     HEAP32[$165 >> 2] = $160;
     $$3435 = $157;
     break;
    } else _abort();
   } while (0);
   if ($155 | 0) {
    $183 = HEAP32[$2 + 28 >> 2] | 0;
    $184 = 17740 + ($183 << 2) | 0;
    do if (($2 | 0) == (HEAP32[$184 >> 2] | 0)) {
     HEAP32[$184 >> 2] = $$3435;
     if (!$$3435) {
      HEAP32[4360] = HEAP32[4360] & ~(1 << $183);
      break L96;
     }
    } else if ($155 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
     HEAP32[$155 + 16 + (((HEAP32[$155 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435;
     if (!$$3435) break L96; else break;
    } while (0);
    $197 = HEAP32[4363] | 0;
    if ($$3435 >>> 0 < $197 >>> 0) _abort();
    HEAP32[$$3435 + 24 >> 2] = $155;
    $200 = $2 + 16 | 0;
    $201 = HEAP32[$200 >> 2] | 0;
    do if ($201 | 0) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
     HEAP32[$$3435 + 16 >> 2] = $201;
     HEAP32[$201 + 24 >> 2] = $$3435;
     break;
    } while (0);
    $207 = HEAP32[$200 + 4 >> 2] | 0;
    if ($207 | 0) if ($207 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
     HEAP32[$$3435 + 20 >> 2] = $207;
     HEAP32[$207 + 24 >> 2] = $$3435;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $129 | 1;
  HEAP32[$$1 + $129 >> 2] = $129;
  if (($$1 | 0) == (HEAP32[4364] | 0)) {
   HEAP32[4361] = $129;
   return;
  } else $$2 = $129;
 } else {
  HEAP32[$110 >> 2] = $111 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1;
  HEAP32[$$1 + $$1418 >> 2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $225 = 17476 + ($222 << 1 << 2) | 0;
  $226 = HEAP32[4359] | 0;
  $227 = 1 << $222;
  if (!($226 & $227)) {
   HEAP32[4359] = $226 | $227;
   $$0438 = $225;
   $$pre$phiZ2D = $225 + 8 | 0;
  } else {
   $231 = $225 + 8 | 0;
   $232 = HEAP32[$231 >> 2] | 0;
   if ($232 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
    $$0438 = $232;
    $$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0438 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0438;
  HEAP32[$$1 + 12 >> 2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 if (!$238) $$0431 = 0; else if ($$2 >>> 0 > 16777215) $$0431 = 31; else {
  $243 = ($238 + 1048320 | 0) >>> 16 & 8;
  $244 = $238 << $243;
  $247 = ($244 + 520192 | 0) >>> 16 & 4;
  $249 = $244 << $247;
  $252 = ($249 + 245760 | 0) >>> 16 & 2;
  $257 = 14 - ($247 | $243 | $252) + ($249 << $252 >>> 15) | 0;
  $$0431 = $$2 >>> ($257 + 7 | 0) & 1 | $257 << 1;
 }
 $263 = 17740 + ($$0431 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0431;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $267 = HEAP32[4360] | 0;
 $268 = 1 << $$0431;
 if (!($267 & $268)) {
  HEAP32[4360] = $267 | $268;
  HEAP32[$263 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $263;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0);
 $$0420 = HEAP32[$263 >> 2] | 0;
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121;
   break;
  }
  $286 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0;
  $288 = HEAP32[$286 >> 2] | 0;
  if (!$288) {
   label = 118;
   break;
  } else {
   $$0419 = $$0419 << 1;
   $$0420 = $288;
  }
 }
 if ((label | 0) == 118) {
  if ($286 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort();
  HEAP32[$286 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $$0420;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } else if ((label | 0) == 121) {
  $295 = $$0420 + 8 | 0;
  $296 = HEAP32[$295 >> 2] | 0;
  $297 = HEAP32[4363] | 0;
  if (!($296 >>> 0 >= $297 >>> 0 & $$0420 >>> 0 >= $297 >>> 0)) _abort();
  HEAP32[$296 + 12 >> 2] = $$1;
  HEAP32[$295 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $296;
  HEAP32[$$1 + 12 >> 2] = $$0420;
  HEAP32[$$1 + 24 >> 2] = 0;
  return;
 }
}

function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $253 = 0, $263 = 0, $265 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $8 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do if ($1 >>> 0 > 36) {
  $8 = ___errno_location() | 0;
  HEAP32[$8 >> 2] = 22;
  $289 = 0;
  $290 = 0;
 } else {
  $6 = $0 + 4 | 0;
  $7 = $0 + 100 | 0;
  do {
   $9 = HEAP32[$6 >> 2] | 0;
   if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
    HEAP32[$6 >> 2] = $9 + 1;
    $16 = HEAPU8[$9 >> 0] | 0;
   } else $16 = ___shgetc($0) | 0;
  } while ((_isspace($16) | 0) != 0);
  L11 : do switch ($16 | 0) {
  case 43:
  case 45:
   {
    $20 = (($16 | 0) == 45) << 31 >> 31;
    $21 = HEAP32[$6 >> 2] | 0;
    if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $21 + 1;
     $$0157 = $20;
     $$0159 = HEAPU8[$21 >> 0] | 0;
     break L11;
    } else {
     $$0157 = $20;
     $$0159 = ___shgetc($0) | 0;
     break L11;
    }
    break;
   }
  default:
   {
    $$0157 = 0;
    $$0159 = $16;
   }
  } while (0);
  $28 = ($1 | 0) == 0;
  do if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
   $32 = HEAP32[$6 >> 2] | 0;
   if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
    HEAP32[$6 >> 2] = $32 + 1;
    $40 = HEAPU8[$32 >> 0] | 0;
   } else $40 = ___shgetc($0) | 0;
   if (($40 | 32 | 0) != 120) if ($28) {
    $$1160169 = $40;
    $$1165168 = 8;
    label = 46;
    break;
   } else {
    $$1160 = $40;
    $$1165 = $1;
    label = 32;
    break;
   }
   $42 = HEAP32[$6 >> 2] | 0;
   if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
    HEAP32[$6 >> 2] = $42 + 1;
    $50 = HEAPU8[$42 >> 0] | 0;
   } else $50 = ___shgetc($0) | 0;
   if ((HEAPU8[11424 + $50 >> 0] | 0) > 15) {
    $54 = (HEAP32[$7 >> 2] | 0) != 0;
    if ($54) HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1;
    if (!$2) {
     ___shlim($0, 0);
     $289 = 0;
     $290 = 0;
     break L1;
    }
    if (!$54) {
     $289 = 0;
     $290 = 0;
     break L1;
    }
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1;
    $289 = 0;
    $290 = 0;
    break L1;
   } else {
    $$1160169 = $50;
    $$1165168 = 16;
    label = 46;
   }
  } else {
   $$166 = $28 ? 10 : $1;
   if ((HEAPU8[11424 + $$0159 >> 0] | 0) >>> 0 < $$166 >>> 0) {
    $$1160 = $$0159;
    $$1165 = $$166;
    label = 32;
   } else {
    if (HEAP32[$7 >> 2] | 0) HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1;
    ___shlim($0, 0);
    $68 = ___errno_location() | 0;
    HEAP32[$68 >> 2] = 22;
    $289 = 0;
    $290 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($$1165 | 0) == 10) {
   $70 = $$1160 + -48 | 0;
   if ($70 >>> 0 < 10) {
    $$0154222 = 0;
    $74 = $70;
    do {
     $$0154222 = ($$0154222 * 10 | 0) + $74 | 0;
     $75 = HEAP32[$6 >> 2] | 0;
     if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $75 + 1;
      $$2161$be = HEAPU8[$75 >> 0] | 0;
     } else $$2161$be = ___shgetc($0) | 0;
     $74 = $$2161$be + -48 | 0;
    } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
    $$2161$lcssa = $$2161$be;
    $291 = $$0154222;
    $292 = 0;
   } else {
    $$2161$lcssa = $$1160;
    $291 = 0;
    $292 = 0;
   }
   $86 = $$2161$lcssa + -48 | 0;
   if ($86 >>> 0 < 10) {
    $$3162215 = $$2161$lcssa;
    $88 = $291;
    $89 = $292;
    $93 = $86;
    while (1) {
     $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0;
     $91 = tempRet0;
     $94 = (($93 | 0) < 0) << 31 >> 31;
     $96 = ~$94;
     if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
      $$1165167 = 10;
      $$8 = $$3162215;
      $293 = $88;
      $294 = $89;
      label = 72;
      break L43;
     }
     $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0;
     $89 = tempRet0;
     $104 = HEAP32[$6 >> 2] | 0;
     if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $104 + 1;
      $$3162$be = HEAPU8[$104 >> 0] | 0;
     } else $$3162$be = ___shgetc($0) | 0;
     $93 = $$3162$be + -48 | 0;
     if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) break; else $$3162215 = $$3162$be;
    }
    if ($93 >>> 0 > 9) {
     $$1158 = $$0157;
     $263 = $89;
     $265 = $88;
    } else {
     $$1165167 = 10;
     $$8 = $$3162$be;
     $293 = $88;
     $294 = $89;
     label = 72;
    }
   } else {
    $$1158 = $$0157;
    $263 = $292;
    $265 = $291;
   }
  } else {
   $$1160169 = $$1160;
   $$1165168 = $$1165;
   label = 46;
  } while (0);
  L63 : do if ((label | 0) == 46) {
   if (!($$1165168 + -1 & $$1165168)) {
    $131 = HEAP8[11680 + (($$1165168 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $133 = HEAP8[11424 + $$1160169 >> 0] | 0;
    $134 = $133 & 255;
    if ($134 >>> 0 < $$1165168 >>> 0) {
     $$1155192 = 0;
     $138 = $134;
     do {
      $$1155192 = $138 | $$1155192 << $131;
      $139 = HEAP32[$6 >> 2] | 0;
      if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $139 + 1;
       $$4163$be = HEAPU8[$139 >> 0] | 0;
      } else $$4163$be = ___shgetc($0) | 0;
      $147 = HEAP8[11424 + $$4163$be >> 0] | 0;
      $138 = $147 & 255;
     } while ($$1155192 >>> 0 < 134217728 & $138 >>> 0 < $$1165168 >>> 0);
     $$4163$lcssa = $$4163$be;
     $155 = $147;
     $158 = 0;
     $160 = $$1155192;
    } else {
     $$4163$lcssa = $$1160169;
     $155 = $133;
     $158 = 0;
     $160 = 0;
    }
    $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0;
    $153 = tempRet0;
    if (($155 & 255) >>> 0 >= $$1165168 >>> 0 | ($158 >>> 0 > $153 >>> 0 | ($158 | 0) == ($153 | 0) & $160 >>> 0 > $152 >>> 0)) {
     $$1165167 = $$1165168;
     $$8 = $$4163$lcssa;
     $293 = $160;
     $294 = $158;
     label = 72;
     break;
    } else {
     $164 = $160;
     $165 = $158;
     $169 = $155;
    }
    while (1) {
     $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0;
     $167 = tempRet0;
     $170 = $169 & 255 | $166;
     $171 = HEAP32[$6 >> 2] | 0;
     if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $171 + 1;
      $$5$be = HEAPU8[$171 >> 0] | 0;
     } else $$5$be = ___shgetc($0) | 0;
     $169 = HEAP8[11424 + $$5$be >> 0] | 0;
     if (($169 & 255) >>> 0 >= $$1165168 >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
      $$1165167 = $$1165168;
      $$8 = $$5$be;
      $293 = $170;
      $294 = $167;
      label = 72;
      break L63;
     } else {
      $164 = $170;
      $165 = $167;
     }
    }
   }
   $123 = HEAP8[11424 + $$1160169 >> 0] | 0;
   $124 = $123 & 255;
   if ($124 >>> 0 < $$1165168 >>> 0) {
    $$2156210 = 0;
    $189 = $124;
    do {
     $$2156210 = $189 + (Math_imul($$2156210, $$1165168) | 0) | 0;
     $190 = HEAP32[$6 >> 2] | 0;
     if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $190 + 1;
      $$6$be = HEAPU8[$190 >> 0] | 0;
     } else $$6$be = ___shgetc($0) | 0;
     $198 = HEAP8[11424 + $$6$be >> 0] | 0;
     $189 = $198 & 255;
    } while ($$2156210 >>> 0 < 119304647 & $189 >>> 0 < $$1165168 >>> 0);
    $$6$lcssa = $$6$be;
    $204 = $198;
    $295 = $$2156210;
    $296 = 0;
   } else {
    $$6$lcssa = $$1160169;
    $204 = $123;
    $295 = 0;
    $296 = 0;
   }
   if (($204 & 255) >>> 0 < $$1165168 >>> 0) {
    $206 = ___udivdi3(-1, -1, $$1165168 | 0, 0) | 0;
    $207 = tempRet0;
    $$7198 = $$6$lcssa;
    $209 = $296;
    $211 = $295;
    $218 = $204;
    while (1) {
     if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
      $$1165167 = $$1165168;
      $$8 = $$7198;
      $293 = $211;
      $294 = $209;
      label = 72;
      break L63;
     }
     $215 = ___muldi3($211 | 0, $209 | 0, $$1165168 | 0, 0) | 0;
     $216 = tempRet0;
     $217 = $218 & 255;
     if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
      $$1165167 = $$1165168;
      $$8 = $$7198;
      $293 = $211;
      $294 = $209;
      label = 72;
      break L63;
     }
     $225 = _i64Add($217 | 0, 0, $215 | 0, $216 | 0) | 0;
     $226 = tempRet0;
     $227 = HEAP32[$6 >> 2] | 0;
     if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $227 + 1;
      $$7$be = HEAPU8[$227 >> 0] | 0;
     } else $$7$be = ___shgetc($0) | 0;
     $218 = HEAP8[11424 + $$7$be >> 0] | 0;
     if (($218 & 255) >>> 0 >= $$1165168 >>> 0) {
      $$1165167 = $$1165168;
      $$8 = $$7$be;
      $293 = $225;
      $294 = $226;
      label = 72;
      break;
     } else {
      $$7198 = $$7$be;
      $209 = $226;
      $211 = $225;
     }
    }
   } else {
    $$1165167 = $$1165168;
    $$8 = $$6$lcssa;
    $293 = $295;
    $294 = $296;
    label = 72;
   }
  } while (0);
  if ((label | 0) == 72) if ((HEAPU8[11424 + $$8 >> 0] | 0) >>> 0 < $$1165167 >>> 0) {
   do {
    $242 = HEAP32[$6 >> 2] | 0;
    if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $242 + 1;
     $$9$be = HEAPU8[$242 >> 0] | 0;
    } else $$9$be = ___shgetc($0) | 0;
   } while ((HEAPU8[11424 + $$9$be >> 0] | 0) >>> 0 < $$1165167 >>> 0);
   $253 = ___errno_location() | 0;
   HEAP32[$253 >> 2] = 34;
   $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0;
   $263 = $4;
   $265 = $3;
  } else {
   $$1158 = $$0157;
   $263 = $294;
   $265 = $293;
  }
  if (HEAP32[$7 >> 2] | 0) HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1;
  if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
   if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
    $274 = ___errno_location() | 0;
    HEAP32[$274 >> 2] = 34;
    $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0;
    $289 = tempRet0;
    $290 = $275;
    break;
   }
   if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
    $282 = ___errno_location() | 0;
    HEAP32[$282 >> 2] = 34;
    $289 = $4;
    $290 = $3;
    break;
   }
  }
  $284 = (($$1158 | 0) < 0) << 31 >> 31;
  $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0;
  $289 = tempRet0;
  $290 = $287;
 } while (0);
 tempRet0 = $289;
 return $290 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i158 = 0, $$0$i$i$i161 = 0, $$11 = 0, $$4156 = 0, $$8 = 0, $$8151 = 0, $101 = 0, $102 = 0, $103 = 0, $106 = 0, $110 = 0, $112 = 0, $116 = 0, $120 = 0, $123 = 0, $127 = 0, $130 = 0, $134 = 0, $15 = 0, $16 = 0, $19 = 0, $23 = 0, $26 = 0, $3 = 0, $30 = 0, $33 = 0, $37 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $58 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 60 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 L1 : do if (($1 - $0 | 0) > 2) {
  $15 = $0 + 2 | 0;
  $16 = $0 + 1 | 0;
  switch (HEAP8[$0 >> 0] | 0) {
  case 84:
   break;
  case 71:
   {
    switch (HEAP8[$16 >> 0] | 0) {
    case 86:
     {
      $123 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
      if (($123 | 0) == ($15 | 0)) {
       $$11 = $0;
       label = 60;
       break L1;
      }
      $127 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($127 | 0)) {
       $$8 = $0;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($127 + -24 | 0, 0, 16879) | 0;
      $$11 = $123;
      label = 60;
      break L1;
      break;
     }
    case 82:
     {
      $130 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
      if (($130 | 0) == ($15 | 0)) {
       $$11 = $0;
       label = 60;
       break L1;
      }
      $134 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($134 | 0)) {
       $$8 = $0;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($134 + -24 | 0, 0, 16899) | 0;
      $$11 = $130;
      label = 60;
      break L1;
      break;
     }
    default:
     {
      $$11 = $0;
      label = 60;
      break L1;
     }
    }
    break;
   }
  default:
   {
    $$11 = $0;
    label = 60;
    break L1;
   }
  }
  switch (HEAP8[$16 >> 0] | 0) {
  case 86:
   {
    $19 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
    if (($19 | 0) == ($15 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $23 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($23 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($23 + -24 | 0, 0, 16728) | 0;
    $$11 = $19;
    label = 60;
    break L1;
    break;
   }
  case 84:
   {
    $26 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
    if (($26 | 0) == ($15 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $30 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($30 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($30 + -24 | 0, 0, 16740) | 0;
    $$11 = $26;
    label = 60;
    break L1;
    break;
   }
  case 73:
   {
    $33 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
    if (($33 | 0) == ($15 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $37 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($37 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($37 + -24 | 0, 0, 16749) | 0;
    $$11 = $33;
    label = 60;
    break L1;
    break;
   }
  case 83:
   {
    $40 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
    if (($40 | 0) == ($15 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $44 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($44 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($44 + -24 | 0, 0, 16763) | 0;
    $$11 = $40;
    label = 60;
    break L1;
    break;
   }
  case 99:
   {
    $47 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($15, $1) | 0;
    if (($47 | 0) == ($15 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $49 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($47, $1) | 0;
    if (($49 | 0) == ($47 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $51 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($49, $1, $2) | 0;
    if (($51 | 0) == ($49 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $55 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($55 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($55 + -24 | 0, 0, 16782) | 0;
    $$11 = $51;
    label = 60;
    break L1;
    break;
   }
  case 67:
   {
    $58 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
    if (($58 | 0) == ($15 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $60 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($58, $1) | 0;
    if (($60 | 0) == ($58 | 0) | ($60 | 0) == ($1 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    if ((HEAP8[$60 >> 0] | 0) != 95) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $65 = $60 + 1 | 0;
    $66 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($65, $1, $2) | 0;
    if (($66 | 0) == ($65 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $68 = $2 + 4 | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    if ((($69 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$8 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $69 + -24 | 0);
    $76 = HEAP32[$68 >> 2] | 0;
    $77 = $76 + -24 | 0;
    $79 = $76;
    while (1) {
     if (($79 | 0) == ($77 | 0)) break;
     $80 = $79 + -24 | 0;
     HEAP32[$68 >> 2] = $80;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($80);
     $79 = HEAP32[$68 >> 2] | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($4, 0, 16809) | 0;
    HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i161 = 0;
    while (1) {
     if (($$0$i$i$i161 | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i161 << 2) >> 2] = 0;
     $$0$i$i$i161 = $$0$i$i$i161 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 16834) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i158 = 0;
    while (1) {
     if (($$0$i$i$i158 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i158 << 2) >> 2] = 0;
     $$0$i$i$i158 = $$0$i$i$i158 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, (HEAP32[$68 >> 2] | 0) + -24 | 0);
    $90 = HEAP8[$8 + 11 >> 0] | 0;
    $91 = $90 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6, $91 ? HEAP32[$8 >> 2] | 0 : $8, $91 ? HEAP32[$8 + 4 >> 2] | 0 : $90 & 255) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    $101 = HEAP32[$68 >> 2] | 0;
    $102 = $101 + -24 | 0;
    $103 = $102 + 11 | 0;
    if ((HEAP8[$103 >> 0] | 0) < 0) {
     $106 = HEAP32[$102 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($106, $3);
     HEAP32[$101 + -20 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($102, $3);
     HEAP8[$103 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($102);
    HEAP32[$102 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$102 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$102 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    $$11 = $66;
    label = 60;
    break L1;
    break;
   }
  default:
   {
    $110 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($16, $1) | 0;
    do if (($110 | 0) == ($16 | 0)) {
     $$4156 = 3;
     $$8151 = $0;
    } else {
     $112 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($110, $1, $2) | 0;
     if (($112 | 0) == ($110 | 0)) {
      $$4156 = 0;
      $$8151 = $0;
     } else {
      $116 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($116 | 0)) {
       $$4156 = 1;
       $$8151 = $0;
      } else {
       $120 = $116 + -24 | 0;
       if ((HEAP8[$15 >> 0] | 0) == 118) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($120, 0, 16839) | 0;
        $$4156 = 0;
        $$8151 = $112;
        break;
       } else {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($120, 0, 16857) | 0;
        $$4156 = 0;
        $$8151 = $112;
        break;
       }
      }
     }
    } while (0);
    switch ($$4156 & 3) {
    case 3:
    case 0:
     {
      $$11 = $$8151;
      label = 60;
      break L1;
      break;
     }
    default:
     {}
    }
    if (!$$4156) {
     $$11 = $$8151;
     label = 60;
     break L1;
    } else {
     $$8 = $0;
     break L1;
    }
   }
  }
 } else {
  $$11 = $0;
  label = 60;
 } while (0);
 if ((label | 0) == 60) $$8 = $$11;
 STACKTOP = sp;
 return $$8 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i63 = 0, $$0$i$i$i$i80 = 0, $$0$i$i$i$i85 = 0, $$0$i$i$i51 = 0, $$0$i$i$i54 = 0, $$0$i$i$i58 = 0, $$0$i$i$i66 = 0, $$0$i$i$i70 = 0, $$0$i$i$i74 = 0, $$345 = 0, $102 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $4 = 0, $44 = 0, $45 = 0, $5 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $75 = 0, $8 = 0, $83 = 0, $84 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 96 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($0 | 0) == ($1 | 0)) $$345 = $0; else if ((HEAP8[$0 >> 0] | 0) == 77) {
  $13 = $0 + 1 | 0;
  $14 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
  if (($14 | 0) == ($13 | 0)) $$345 = $0; else {
   $16 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
   if (($16 | 0) == ($14 | 0)) $$345 = $0; else {
    $18 = $2 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    if ((($19 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$345 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $19 + -24 | 0);
     $26 = HEAP32[$18 >> 2] | 0;
     $27 = $26 + -24 | 0;
     $29 = $26;
     while (1) {
      if (($29 | 0) == ($27 | 0)) break;
      $30 = $29 + -24 | 0;
      HEAP32[$18 >> 2] = $30;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $29 = HEAP32[$18 >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $26 + -48 | 0);
     $32 = $4 + 12 | 0;
     L11 : do if ((HEAP8[((HEAP8[$32 + 11 >> 0] | 0) < 0 ? HEAP32[$32 >> 2] | 0 : $32) >> 0] | 0) == 40) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15049) | 0;
      HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$8 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$8 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $5);
      $44 = HEAP8[$9 + 11 >> 0] | 0;
      $45 = $44 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8, $45 ? HEAP32[$9 >> 2] | 0 : $9, $45 ? HEAP32[$9 + 4 >> 2] | 0 : $44 & 255) | 0;
      HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
      $$0$i$i$i51 = 0;
      while (1) {
       if (($$0$i$i$i51 | 0) == 3) break;
       HEAP32[$8 + ($$0$i$i$i51 << 2) >> 2] = 0;
       $$0$i$i$i51 = $$0$i$i$i51 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 16471) | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
      $$0$i$i$i54 = 0;
      while (1) {
       if (($$0$i$i$i54 | 0) == 3) break;
       HEAP32[$7 + ($$0$i$i$i54 << 2) >> 2] = 0;
       $$0$i$i$i54 = $$0$i$i$i54 + 1 | 0;
      }
      $58 = HEAP32[$18 >> 2] | 0;
      $59 = $58 + -24 | 0;
      $60 = $59 + 11 | 0;
      if ((HEAP8[$60 >> 0] | 0) < 0) {
       $63 = HEAP32[$59 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($63, $3);
       HEAP32[$58 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($59, $3);
       HEAP8[$60 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($59);
      HEAP32[$59 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$59 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$59 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i$i | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($32, 0, 15047) | 0;
      HEAP32[$6 >> 2] = HEAP32[$32 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
      $$0$i$i$i58 = 0;
      while (1) {
       if (($$0$i$i$i58 | 0) == 3) break;
       HEAP32[$32 + ($$0$i$i$i58 << 2) >> 2] = 0;
       $$0$i$i$i58 = $$0$i$i$i58 + 1 | 0;
      }
      $70 = HEAP32[$18 >> 2] | 0;
      $71 = $70 + -12 | 0;
      $72 = $71 + 11 | 0;
      if ((HEAP8[$72 >> 0] | 0) < 0) {
       $75 = HEAP32[$71 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($75, $3);
       HEAP32[$70 + -8 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($71, $3);
       HEAP8[$72 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($71);
      HEAP32[$71 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$71 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$71 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i63 = 0;
      while (1) {
       if (($$0$i$i$i$i63 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i63 << 2) >> 2] = 0;
       $$0$i$i$i$i63 = $$0$i$i$i$i63 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15081) | 0;
      HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$8 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$8 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i66 = 0;
      while (1) {
       if (($$0$i$i$i66 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i66 << 2) >> 2] = 0;
       $$0$i$i$i66 = $$0$i$i$i66 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $5);
      $83 = HEAP8[$9 + 11 >> 0] | 0;
      $84 = $83 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8, $84 ? HEAP32[$9 >> 2] | 0 : $9, $84 ? HEAP32[$9 + 4 >> 2] | 0 : $83 & 255) | 0;
      HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
      $$0$i$i$i70 = 0;
      while (1) {
       if (($$0$i$i$i70 | 0) == 3) break;
       HEAP32[$8 + ($$0$i$i$i70 << 2) >> 2] = 0;
       $$0$i$i$i70 = $$0$i$i$i70 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 16471) | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
      $$0$i$i$i74 = 0;
      while (1) {
       if (($$0$i$i$i74 | 0) == 3) break;
       HEAP32[$7 + ($$0$i$i$i74 << 2) >> 2] = 0;
       $$0$i$i$i74 = $$0$i$i$i74 + 1 | 0;
      }
      $97 = HEAP32[$18 >> 2] | 0;
      $98 = $97 + -24 | 0;
      $99 = $98 + 11 | 0;
      if ((HEAP8[$99 >> 0] | 0) < 0) {
       $102 = HEAP32[$98 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($102, $3);
       HEAP32[$97 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($98, $3);
       HEAP8[$99 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($98);
      HEAP32[$98 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$98 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$98 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i80 = 0;
      while (1) {
       if (($$0$i$i$i$i80 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i80 << 2) >> 2] = 0;
       $$0$i$i$i$i80 = $$0$i$i$i$i80 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      $106 = HEAP32[$18 >> 2] | 0;
      $107 = $106 + -12 | 0;
      $108 = $107 + 11 | 0;
      if ((HEAP8[$108 >> 0] | 0) < 0) {
       $111 = HEAP32[$107 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($111, $3);
       HEAP32[$106 + -8 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($107, $3);
       HEAP8[$108 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($107);
      HEAP32[$107 >> 2] = HEAP32[$32 >> 2];
      HEAP32[$107 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
      HEAP32[$107 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
      $$0$i$i$i$i85 = 0;
      while (1) {
       if (($$0$i$i$i$i85 | 0) == 3) break L11;
       HEAP32[$32 + ($$0$i$i$i$i85 << 2) >> 2] = 0;
       $$0$i$i$i$i85 = $$0$i$i$i$i85 + 1 | 0;
      }
     } while (0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $$345 = $16;
    }
   }
  }
 } else $$345 = $0;
 STACKTOP = sp;
 return $$345 | 0;
}

function _decode_bch($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$0 = 0, $$0232 = 0, $$0234 = 0, $$0235 = 0, $$0237 = 0, $$0239 = 0, $$0242 = 0, $$0248 = 0, $$0249 = 0, $$0250 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0257 = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1240 = 0, $$1243 = 0, $$1251 = 0, $$1255 = 0, $$2 = 0, $$2241 = 0, $$2244 = 0, $$3 = 0, $$3245 = 0, $$4 = 0, $$4246 = 0, $$5 = 0, $$5247 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$sink5 = 0, $10 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $113 = 0, $118 = 0, $12 = 0, $122 = 0, $126 = 0, $129 = 0, $137 = 0, $138 = 0, $14 = 0, $144 = 0, $156 = 0, $157 = 0, $160 = 0, $17 = 0, $174 = 0, $178 = 0, $18 = 0, $187 = 0, $188 = 0, $189 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $199 = 0, $204 = 0, $205 = 0, $21 = 0, $23 = 0, $30 = 0, $32 = 0, $33 = 0, $39 = 0, $41 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $66 = 0, $7 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $92 = 0, label = 0, sp = 0, $$1240$looptemp = 0, $$0237$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2320);
 $5 = sp + 2304 | 0;
 $6 = sp + 864 | 0;
 $7 = sp + 784 | 0;
 $8 = sp + 704 | 0;
 $9 = sp + 624 | 0;
 $10 = sp + 548 | 0;
 $11 = sp + 40 | 0;
 $12 = sp;
 switch ($0 | 0) {
 case 772:
  {
   $$0250 = 9;
   $$0254 = 1;
   label = 3;
   break;
  }
 case 1028:
  {
   $$0250 = 5;
   $$0254 = 2;
   label = 3;
   break;
  }
 case 2830:
  {
   $$0248 = 1056;
   $$0249 = 488;
   $$0252 = 120;
   $$0253 = 127;
   $$0257 = $3;
   $$1251 = 64;
   $$1255 = 9;
   label = 6;
   break;
  }
 default:
  $$0234 = -1;
 }
 L3 : do if ((label | 0) == 3) {
  $$0242 = 0;
  $14 = $1;
  $17 = $2;
  while (1) {
   if (($$0242 | 0) == 13) {
    $$0248 = 1568;
    $$0249 = 996;
    $$0252 = 13;
    $$0253 = 15;
    $$0257 = $5;
    $$1251 = $$0250;
    $$1255 = $$0254;
    label = 6;
    break L3;
   }
   HEAP8[$5 + $$0242 >> 0] = $14 & 1;
   $18 = _bitshift64Lshr($14 | 0, $17 | 0, 1) | 0;
   $$0242 = $$0242 + 1 | 0;
   $14 = $18;
   $17 = tempRet0;
  }
 } while (0);
 L8 : do if ((label | 0) == 6) {
  $21 = $$1255 << 1;
  $$0 = 0;
  $$1243 = 1;
  while (1) {
   if (($$1243 | 0) > ($21 | 0)) break;
   $23 = $10 + ($$1243 << 2) | 0;
   HEAP32[$23 >> 2] = 0;
   $$0239 = 0;
   $33 = 0;
   while (1) {
    if (($$0239 | 0) >= ($$0252 | 0)) break;
    if (!(HEAP8[$$0257 + $$0239 >> 0] | 0)) $204 = $33; else {
     $30 = $$0249 + (((Math_imul($$0239, $$1243) | 0) % ($$0253 | 0) | 0) << 2) | 0;
     $32 = $33 ^ HEAP32[$30 >> 2];
     HEAP32[$23 >> 2] = $32;
     $204 = $32;
    }
    $$0239 = $$0239 + 1 | 0;
    $33 = $204;
   }
   HEAP32[$23 >> 2] = HEAP32[$$0248 + ($33 << 2) >> 2];
   $$0 = ($33 | 0) == 0 ? $$0 : 1;
   $$1243 = $$1243 + 1 | 0;
  }
  $39 = ($$0 | 0) != 0;
  L21 : do if ($39) {
   HEAP32[$7 >> 2] = 0;
   $41 = HEAP32[$10 + 4 >> 2] | 0;
   HEAP32[$7 + 4 >> 2] = $41;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 72 >> 2] = 1;
   $$2244 = 1;
   while (1) {
    if (($$2244 | 0) >= ($21 | 0)) break;
    HEAP32[$6 + ($$2244 << 2) >> 2] = -1;
    HEAP32[$6 + 72 + ($$2244 << 2) >> 2] = 0;
    $$2244 = $$2244 + 1 | 0;
   }
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$9 >> 2] = -1;
   HEAP32[$9 + 4 >> 2] = 0;
   $$0237 = 0;
   $52 = $41;
   $55 = 0;
   while (1) {
    $$0237$looptemp = $$0237;
    $$0237 = $$0237 + 1 | 0;
    $53 = $$0237$looptemp + 2 | 0;
    $54 = $8 + ($53 << 2) | 0;
    L29 : do if (($52 | 0) == -1) {
     HEAP32[$54 >> 2] = $55;
     $$3245 = 0;
     while (1) {
      if (($$3245 | 0) > ($55 | 0)) {
       $113 = $55;
       break L29;
      }
      $57 = $6 + ($$0237 * 72 | 0) + ($$3245 << 2) | 0;
      $58 = HEAP32[$57 >> 2] | 0;
      HEAP32[$6 + ($53 * 72 | 0) + ($$3245 << 2) >> 2] = $58;
      HEAP32[$57 >> 2] = HEAP32[$$0248 + ($58 << 2) >> 2];
      $$3245 = $$3245 + 1 | 0;
     }
    } else {
     $$0235 = $$0237$looptemp;
     while (1) {
      $66 = ($$0235 | 0) > 0;
      if ($66 & (HEAP32[$7 + ($$0235 << 2) >> 2] | 0) == -1) $$0235 = $$0235 + -1 | 0; else break;
     }
     if ($66) {
      $$1236 = $$0235;
      $$1240 = $$0235;
      while (1) {
       $$1240$looptemp = $$1240;
       $$1240 = $$1240 + -1 | 0;
       if ((HEAP32[$7 + ($$1240 << 2) >> 2] | 0) == -1) $$2 = $$1236; else $$2 = (HEAP32[$9 + ($$1236 << 2) >> 2] | 0) < (HEAP32[$9 + ($$1240 << 2) >> 2] | 0) ? $$1240 : $$1236;
       if (($$1240$looptemp | 0) <= 1) {
        $$3 = $$2;
        break;
       } else $$1236 = $$2;
      }
     } else $$3 = $$0235;
     $79 = $8 + ($$3 << 2) | 0;
     $81 = $$0237 - $$3 | 0;
     $82 = $81 + (HEAP32[$79 >> 2] | 0) | 0;
     $$ = ($55 | 0) > ($82 | 0) ? $55 : $82;
     HEAP32[$54 >> 2] = $$;
     $$4246 = 0;
     while (1) {
      if (($$4246 | 0) >= ($21 | 0)) break;
      HEAP32[$6 + ($53 * 72 | 0) + ($$4246 << 2) >> 2] = 0;
      $$4246 = $$4246 + 1 | 0;
     }
     $85 = HEAP32[$79 >> 2] | 0;
     $86 = $52 + $$0253 | 0;
     $87 = $7 + ($$3 << 2) | 0;
     $$5247 = 0;
     while (1) {
      if (($$5247 | 0) > ($85 | 0)) {
       $$6 = 0;
       break;
      }
      $92 = HEAP32[$6 + ($$3 * 72 | 0) + ($$5247 << 2) >> 2] | 0;
      if (($92 | 0) != -1) HEAP32[$6 + ($53 * 72 | 0) + ($81 + $$5247 << 2) >> 2] = HEAP32[$$0249 + ((($86 + $92 - (HEAP32[$87 >> 2] | 0) | 0) % ($$0253 | 0) | 0) << 2) >> 2];
      $$5247 = $$5247 + 1 | 0;
     }
     while (1) {
      if (($$6 | 0) > ($55 | 0)) {
       $113 = $$;
       break L29;
      }
      $104 = $6 + ($$0237 * 72 | 0) + ($$6 << 2) | 0;
      $105 = HEAP32[$104 >> 2] | 0;
      $106 = $6 + ($53 * 72 | 0) + ($$6 << 2) | 0;
      HEAP32[$106 >> 2] = HEAP32[$106 >> 2] ^ $105;
      HEAP32[$104 >> 2] = HEAP32[$$0248 + ($105 << 2) >> 2];
      $$6 = $$6 + 1 | 0;
     }
    } while (0);
    HEAP32[$9 + ($53 << 2) >> 2] = $$0237 - $113;
    if (($$0237 | 0) >= ($21 | 0)) break;
    $118 = HEAP32[$10 + ($53 << 2) >> 2] | 0;
    if (($118 | 0) == -1) $$sink5 = 0; else $$sink5 = HEAP32[$$0249 + ($118 << 2) >> 2] | 0;
    $122 = $7 + ($53 << 2) | 0;
    HEAP32[$122 >> 2] = $$sink5;
    $$7 = 1;
    $138 = $$sink5;
    while (1) {
     if (($$7 | 0) > ($113 | 0)) break;
     $126 = HEAP32[$10 + ($53 - $$7 << 2) >> 2] | 0;
     if (($126 | 0) == -1) $205 = $138; else {
      $129 = HEAP32[$6 + ($53 * 72 | 0) + ($$7 << 2) >> 2] | 0;
      if (!$129) $205 = $138; else {
       $137 = $138 ^ HEAP32[$$0249 + ((((HEAP32[$$0248 + ($129 << 2) >> 2] | 0) + $126 | 0) % ($$0253 | 0) | 0) << 2) >> 2];
       HEAP32[$122 >> 2] = $137;
       $205 = $137;
      }
     }
     $$7 = $$7 + 1 | 0;
     $138 = $205;
    }
    $52 = HEAP32[$$0248 + ($138 << 2) >> 2] | 0;
    HEAP32[$122 >> 2] = $52;
    if (($113 | 0) > ($$1255 | 0)) {
     $$0234 = -1;
     break L8;
    } else $55 = $113;
   }
   if (($113 | 0) > ($$1255 | 0)) {
    $$0234 = -1;
    break L8;
   } else $$8 = 0;
   while (1) {
    if (($$8 | 0) > ($113 | 0)) {
     $$9 = 1;
     break;
    }
    $144 = $6 + ($53 * 72 | 0) + ($$8 << 2) | 0;
    HEAP32[$144 >> 2] = HEAP32[$$0248 + (HEAP32[$144 >> 2] << 2) >> 2];
    $$8 = $$8 + 1 | 0;
   }
   while (1) {
    if (($$9 | 0) > ($113 | 0)) {
     $$0232 = 0;
     $$10 = 1;
     break;
    }
    HEAP32[$12 + ($$9 << 2) >> 2] = HEAP32[$6 + ($53 * 72 | 0) + ($$9 << 2) >> 2];
    $$9 = $$9 + 1 | 0;
   }
   while (1) {
    if (($$0253 | 0) < ($$10 | 0)) break; else {
     $$2241 = 1;
     $$4 = 1;
    }
    while (1) {
     if (($$2241 | 0) > ($113 | 0)) break;
     $156 = $12 + ($$2241 << 2) | 0;
     $157 = HEAP32[$156 >> 2] | 0;
     if (($157 | 0) == -1) $$5 = $$4; else {
      $160 = ($157 + $$2241 | 0) % ($$0253 | 0) | 0;
      HEAP32[$156 >> 2] = $160;
      $$5 = HEAP32[$$0249 + ($160 << 2) >> 2] ^ $$4;
     }
     $$2241 = $$2241 + 1 | 0;
     $$4 = $$5;
    }
    if (!$$4) {
     HEAP32[$11 + ($$0232 << 2) >> 2] = $$0253 - $$10;
     $$1233 = $$0232 + 1 | 0;
    } else $$1233 = $$0232;
    $$0232 = $$1233;
    $$10 = $$10 + 1 | 0;
   }
   if (($$0232 | 0) == ($113 | 0)) $$11 = 0; else {
    $$0234 = -1;
    break L8;
   }
   while (1) {
    if (($$11 | 0) >= ($113 | 0)) {
     $$1238 = $53;
     break L21;
    }
    $174 = $$0257 + (HEAP32[$11 + ($$11 << 2) >> 2] | 0) | 0;
    HEAP8[$174 >> 0] = HEAP8[$174 >> 0] ^ 1;
    $$11 = $$11 + 1 | 0;
   }
  } else $$1238 = 0; while (0);
  $178 = $4;
  HEAP32[$178 >> 2] = 0;
  HEAP32[$178 + 4 >> 2] = 0;
  $$12 = $$0252 - $$1251 | 0;
  $187 = 1;
  $188 = 0;
  $191 = 0;
  $192 = 0;
  while (1) {
   if (($$12 | 0) >= ($$0252 | 0)) break;
   $189 = ___muldi3(HEAPU8[$$0257 + $$12 >> 0] | 0, 0, $187 | 0, $188 | 0) | 0;
   $193 = _i64Add($189 | 0, tempRet0 | 0, $191 | 0, $192 | 0) | 0;
   $194 = tempRet0;
   $195 = $4;
   HEAP32[$195 >> 2] = $193;
   HEAP32[$195 + 4 >> 2] = $194;
   $199 = _bitshift64Shl($187 | 0, $188 | 0, 1) | 0;
   $$12 = $$12 + 1 | 0;
   $187 = $199;
   $188 = tempRet0;
   $191 = $193;
   $192 = $194;
  }
  if ($39) $$0234 = HEAP32[$8 + ($$1238 << 2) >> 2] | 0; else $$0234 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0234 | 0;
}

function _arLabeling($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0;
 $10 = ($9 | 0) != 0;
 $11 = ($3 | 0) == 9;
 $12 = ($7 | 0) == 1;
 $13 = ($3 | 0) == 8;
 $14 = ($5 | 0) == 0;
 $15 = ($7 | 0) == 0;
 $16 = ($5 | 0) == 1;
 $17 = ($3 | 0) == 11;
 $18 = ($3 | 0) == 7;
 $19 = ($3 | 0) == 10;
 $20 = $3 | 1;
 $21 = ($20 | 0) == 1;
 $22 = ($20 | 0) == 3;
 $24 = ($3 | 2 | 0) == 6;
 L1 : do switch ($4 | 0) {
 case 0:
  {
   if ($16) {
    if ($10) {
     $$0 = _arLabelingSubDBZ($0, $1, $2, $9, $8) | 0;
     break L1;
    }
    if ($15) {
     if ($21) {
      $$0 = _arLabelingSubDBR3C($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($22) {
      $$0 = _arLabelingSubDBR3CA($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($24) {
      $$0 = _arLabelingSubDBRA3C($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     switch ($3 | 0) {
     case 5:
     case 12:
     case 13:
     case 14:
      {
       $$0 = _arLabelingSubDBRC($0, $1, $2, $6, $8) | 0;
       break L1;
       break;
      }
     default:
      {}
     }
     if ($13) {
      $$0 = _arLabelingSubDBRYC($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($18) {
      $$0 = _arLabelingSubDBRCY($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($11) {
      $$0 = _arLabelingSubDBR3C565($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($19) {
      $$0 = _arLabelingSubDBR3CA5551($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($17) {
      $$0 = _arLabelingSubDBR3CA4444($0, $1, $2, $6, $8) | 0;
      break L1;
     } else _exit(0);
    }
    if (!$12) _exit(0);
    if ($21) {
     $$0 = _arLabelingSubDBI3C($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($22) {
     $$0 = _arLabelingSubDBI3CA($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($24) {
     $$0 = _arLabelingSubDBIA3C($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    switch ($3 | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $$0 = _arLabelingSubDBIC($0, $1, $2, $6, $8) | 0;
      break L1;
      break;
     }
    default:
     {}
    }
    if ($13) {
     $$0 = _arLabelingSubDBIYC($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($18) {
     $$0 = _arLabelingSubDBICY($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($11) {
     $$0 = _arLabelingSubDBI3C565($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($19) {
     $$0 = _arLabelingSubDBI3CA5551($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($17) {
     $$0 = _arLabelingSubDBI3CA4444($0, $1, $2, $6, $8) | 0;
     break L1;
    } else _exit(0);
   }
   if (!$14) _exit(0);
   if ($10) {
    $$0 = _arLabelingSubDWZ($0, $1, $2, $9, $8) | 0;
    break L1;
   }
   if ($15) {
    if ($21) {
     $$0 = _arLabelingSubDWR3C($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($22) {
     $$0 = _arLabelingSubDWR3CA($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($24) {
     $$0 = _arLabelingSubDWRA3C($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    switch ($3 | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $$0 = _arLabelingSubDWRC($0, $1, $2, $6, $8) | 0;
      break L1;
      break;
     }
    default:
     {}
    }
    if ($13) {
     $$0 = _arLabelingSubDWRYC($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($18) {
     $$0 = _arLabelingSubDWRCY($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($11) {
     $$0 = _arLabelingSubDWR3C565($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($19) {
     $$0 = _arLabelingSubDWR3CA5551($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($17) {
     $$0 = _arLabelingSubDWR3CA4444($0, $1, $2, $6, $8) | 0;
     break L1;
    } else _exit(0);
   }
   if (!$12) _exit(0);
   if ($21) {
    $$0 = _arLabelingSubDWI3C($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($22) {
    $$0 = _arLabelingSubDWI3CA($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($24) {
    $$0 = _arLabelingSubDWIA3C($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   switch ($3 | 0) {
   case 5:
   case 12:
   case 13:
   case 14:
    {
     $$0 = _arLabelingSubDWIC($0, $1, $2, $6, $8) | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if ($13) {
    $$0 = _arLabelingSubDWIYC($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($18) {
    $$0 = _arLabelingSubDWICY($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($11) {
    $$0 = _arLabelingSubDWI3C565($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($19) {
    $$0 = _arLabelingSubDWI3CA5551($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($17) {
    $$0 = _arLabelingSubDWI3CA4444($0, $1, $2, $6, $8) | 0;
    break L1;
   } else _exit(0);
   break;
  }
 case 1:
  {
   if ($16) {
    if ($10) {
     $$0 = _arLabelingSubEBZ($0, $1, $2, $9, $8) | 0;
     break L1;
    }
    if ($15) {
     if ($21) {
      $$0 = _arLabelingSubEBR3C($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($22) {
      $$0 = _arLabelingSubEBR3CA($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($24) {
      $$0 = _arLabelingSubEBRA3C($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     switch ($3 | 0) {
     case 5:
     case 12:
     case 13:
     case 14:
      {
       $$0 = _arLabelingSubEBRC($0, $1, $2, $6, $8) | 0;
       break L1;
       break;
      }
     default:
      {}
     }
     if ($13) {
      $$0 = _arLabelingSubEBRYC($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($18) {
      $$0 = _arLabelingSubEBRCY($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($11) {
      $$0 = _arLabelingSubEBR3C565($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($19) {
      $$0 = _arLabelingSubEBR3CA5551($0, $1, $2, $6, $8) | 0;
      break L1;
     }
     if ($17) {
      $$0 = _arLabelingSubEBR3CA4444($0, $1, $2, $6, $8) | 0;
      break L1;
     } else _exit(0);
    }
    if (!$12) _exit(0);
    if ($21) {
     $$0 = _arLabelingSubEBI3C($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($22) {
     $$0 = _arLabelingSubEBI3CA($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($24) {
     $$0 = _arLabelingSubEBIA3C($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    switch ($3 | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $$0 = _arLabelingSubEBIC($0, $1, $2, $6, $8) | 0;
      break L1;
      break;
     }
    default:
     {}
    }
    if ($13) {
     $$0 = _arLabelingSubEBIYC($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($18) {
     $$0 = _arLabelingSubEBICY($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($11) {
     $$0 = _arLabelingSubEBI3C565($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($19) {
     $$0 = _arLabelingSubEBI3CA5551($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($17) {
     $$0 = _arLabelingSubEBI3CA4444($0, $1, $2, $6, $8) | 0;
     break L1;
    } else _exit(0);
   }
   if (!$14) _exit(0);
   if ($10) {
    $$0 = _arLabelingSubEWZ($0, $1, $2, $9, $8) | 0;
    break L1;
   }
   if ($15) {
    if ($21) {
     $$0 = _arLabelingSubEWR3C($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($22) {
     $$0 = _arLabelingSubEWR3CA($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($24) {
     $$0 = _arLabelingSubEWRA3C($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    switch ($3 | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $$0 = _arLabelingSubEWRC($0, $1, $2, $6, $8) | 0;
      break L1;
      break;
     }
    default:
     {}
    }
    if ($13) {
     $$0 = _arLabelingSubEWRYC($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($18) {
     $$0 = _arLabelingSubEWRCY($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($11) {
     $$0 = _arLabelingSubEWR3C565($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($19) {
     $$0 = _arLabelingSubEWR3CA5551($0, $1, $2, $6, $8) | 0;
     break L1;
    }
    if ($17) {
     $$0 = _arLabelingSubEWR3CA4444($0, $1, $2, $6, $8) | 0;
     break L1;
    } else _exit(0);
   }
   if (!$12) _exit(0);
   if ($21) {
    $$0 = _arLabelingSubEWI3C($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($22) {
    $$0 = _arLabelingSubEWI3CA($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($24) {
    $$0 = _arLabelingSubEWIA3C($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   switch ($3 | 0) {
   case 5:
   case 12:
   case 13:
   case 14:
    {
     $$0 = _arLabelingSubEWIC($0, $1, $2, $6, $8) | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if ($13) {
    $$0 = _arLabelingSubEWIYC($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($18) {
    $$0 = _arLabelingSubEWICY($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($11) {
    $$0 = _arLabelingSubEWI3C565($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($19) {
    $$0 = _arLabelingSubEWI3CA5551($0, $1, $2, $6, $8) | 0;
    break L1;
   }
   if ($17) {
    $$0 = _arLabelingSubEWI3CA4444($0, $1, $2, $6, $8) | 0;
    break L1;
   } else _exit(0);
   break;
  }
 default:
  _exit(0);
 } while (0);
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i128 = 0, $$0$i$i$i132 = 0, $$0$i$i$i136 = 0, $$0$i$i$i141 = 0, $$2103 = 0, $$899$ph = 0, $$9 = 0, $106 = 0, $107 = 0, $16 = 0, $17 = 0, $19 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $74 = 0, $77 = 0, $80 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $92 = 0, $94 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 $6 = sp + 24 | 0;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 68) if ((HEAP8[$0 + 1 >> 0] | 0) == 118) {
  $16 = $0 + 2 | 0;
  $17 = HEAP8[$16 >> 0] | 0;
  if (($17 + -49 & 255) < 9) {
   $19 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16, $1) | 0;
   if (($19 | 0) == ($1 | 0)) {
    $$9 = $0;
    break;
   }
   if ((HEAP8[$19 >> 0] | 0) != 95) {
    $$9 = $0;
    break;
   }
   $25 = $19 - $16 | 0;
   $26 = $19 + 1 | 0;
   if (($26 | 0) == ($1 | 0)) {
    $$9 = $0;
    break;
   }
   if ((HEAP8[$26 >> 0] | 0) != 112) {
    $30 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26, $1, $2) | 0;
    if (($30 | 0) == ($26 | 0)) {
     $$9 = $0;
     break;
    }
    $33 = $2 + 4 | 0;
    if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$33 >> 2] | 0)) {
     $$9 = $0;
     break;
    };
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $16, $25);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15087) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15096) | 0;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i128 = 0;
    while (1) {
     if (($$0$i$i$i128 | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i128 << 2) >> 2] = 0;
     $$0$i$i$i128 = $$0$i$i$i128 + 1 | 0;
    }
    $45 = HEAP8[$3 + 11 >> 0] | 0;
    $46 = $45 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$33 >> 2] | 0) + -24 | 0, $46 ? HEAP32[$3 >> 2] | 0 : $3, $46 ? HEAP32[$3 + 4 >> 2] | 0 : $45 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$9 = $30;
    break;
   }
   $53 = $19 + 2 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $16, $25);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15098) | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i132 = 0;
   while (1) {
    if (($$0$i$i$i132 | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i132 << 2) >> 2] = 0;
    $$0$i$i$i132 = $$0$i$i$i132 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15096) | 0;
   HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   $$0$i$i$i136 = 0;
   while (1) {
    if (($$0$i$i$i136 | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i$i136 << 2) >> 2] = 0;
    $$0$i$i$i136 = $$0$i$i$i136 + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $6);
   $60 = $2 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if ($61 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($61, $3);
    HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $$9 = $53;
   break;
  };
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  $$0$i$i = 0;
  while (1) {
   if (($$0$i$i | 0) == 3) break;
   HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
   $$0$i$i = $$0$i$i + 1 | 0;
  }
  L40 : do if ($17 << 24 >> 24 == 95) {
   $$2103 = $16;
   label = 43;
  } else {
   $70 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
   if (($70 | 0) == ($16 | 0)) {
    $$2103 = $16;
    label = 43;
   } else {
    $73 = $2 + 4 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) != ($74 | 0)) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $74 + -24 | 0);
     $77 = $4 + 11 | 0;
     if ((HEAP8[$77 >> 0] | 0) < 0) {
      $80 = HEAP32[$4 >> 2] | 0;
      HEAP8[$3 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($80, $3);
      HEAP32[$4 + 4 >> 2] = 0;
     } else {
      HEAP8[$3 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($4, $3);
      HEAP8[$77 >> 0] = 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($4);
     HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     $$0$i$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i$i | 0) == 3) break;
      HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     $84 = HEAP32[$73 >> 2] | 0;
     $85 = $84 + -24 | 0;
     $87 = $84;
     while (1) {
      if (($87 | 0) == ($85 | 0)) {
       $$2103 = $70;
       label = 43;
       break L40;
      }
      $88 = $87 + -24 | 0;
      HEAP32[$73 >> 2] = $88;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($88);
      $87 = HEAP32[$73 >> 2] | 0;
     }
    }
   }
  } while (0);
  do if ((label | 0) == 43) {
   if (($$2103 | 0) == ($1 | 0)) $$899$ph = $0; else if ((HEAP8[$$2103 >> 0] | 0) == 95) {
    $92 = $$2103 + 1 | 0;
    if (($92 | 0) == ($1 | 0)) $$899$ph = $0; else {
     $94 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($92, $1, $2) | 0;
     if (($94 | 0) == ($92 | 0)) $$899$ph = $0; else {
      $97 = $2 + 4 | 0;
      if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$97 >> 2] | 0)) break;
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 15087, $4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15096) | 0;
      HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i141 = 0;
      while (1) {
       if (($$0$i$i$i141 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i141 << 2) >> 2] = 0;
       $$0$i$i$i141 = $$0$i$i$i141 + 1 | 0;
      }
      $106 = HEAP8[$3 + 11 >> 0] | 0;
      $107 = $106 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$97 >> 2] | 0) + -24 | 0, $107 ? HEAP32[$3 >> 2] | 0 : $3, $107 ? HEAP32[$3 + 4 >> 2] | 0 : $106 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$899$ph = $94;
     }
    }
   } else $$899$ph = $0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   $$9 = $$899$ph;
   break L1;
  } while (0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
  $$9 = $0;
 } else $$9 = $0; else $$9 = $0; else $$9 = $0; while (0);
 STACKTOP = sp;
 return $$9 | 0;
}

function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre$phiZ2D = 0.0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $109 = 0, $119 = 0, $120 = 0, $133 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $144 = 0, $146 = 0, $152 = 0, $156 = 0, $158 = 0, $165 = 0, $169 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $179 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $196 = 0.0, $197 = 0, $21 = 0, $210 = 0.0, $212 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $53 = 0, $55 = 0, $6 = 0, $67 = 0.0, $7 = 0, $74 = 0, $76 = 0, $84 = 0, $85 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond168 = 0, label = 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0 + 100 | 0;
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1;
  $$0 = HEAPU8[$6 >> 0] | 0;
  $$0142 = 0;
 } else {
  $$0 = ___shgetc($0) | 0;
  $$0142 = 0;
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8;
    break L4;
    break;
   }
  case 48:
   break;
  default:
   {
    $$0146 = 0;
    $$0148 = 0;
    $$0152 = 1.0;
    $$0155 = 0.0;
    $$0159 = 0;
    $$2 = $$0;
    $$2144 = $$0142;
    $101 = 0;
    $53 = 0;
    $55 = 0;
    $99 = 0;
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0;
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1;
   $$0 = HEAPU8[$14 >> 0] | 0;
   $$0142 = 1;
   continue;
  } else {
   $$0 = ___shgetc($0) | 0;
   $$0142 = 1;
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0;
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1;
   $$1$ph = HEAPU8[$21 >> 0] | 0;
  } else $$1$ph = ___shgetc($0) | 0;
  if (($$1$ph | 0) == 48) {
   $36 = 0;
   $37 = 0;
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1;
     $41 = HEAPU8[$29 >> 0] | 0;
    } else $41 = ___shgetc($0) | 0;
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0;
    $39 = tempRet0;
    if (($41 | 0) == 48) {
     $36 = $38;
     $37 = $39;
    } else {
     $$0146 = 1;
     $$0148 = 0;
     $$0152 = 1.0;
     $$0155 = 0.0;
     $$0159 = 0;
     $$2 = $41;
     $$2144 = 1;
     $101 = $39;
     $53 = 0;
     $55 = 0;
     $99 = $38;
     break;
    }
   }
  } else {
   $$0146 = 1;
   $$0148 = 0;
   $$0152 = 1.0;
   $$0155 = 0.0;
   $$0159 = 0;
   $$2 = $$1$ph;
   $$2144 = $$0142;
   $101 = 0;
   $53 = 0;
   $55 = 0;
   $99 = 0;
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0;
  $44 = ($$2 | 0) == 46;
  if ($42 >>> 0 >= 10) if (!($44 | (($$2 | 32) + -97 | 0) >>> 0 < 6)) {
   $$2$lcssa = $$2;
   break;
  }
  if ($44) if (!$$0146) {
   $$1147 = 1;
   $$2150 = $$0148;
   $$2154 = $$0152;
   $$2157 = $$0155;
   $$2161 = $$0159;
   $$3145 = $$2144;
   $214 = $55;
   $215 = $53;
   $216 = $55;
   $217 = $53;
  } else {
   $$2$lcssa = 46;
   break;
  } else {
   $$0133 = ($$2 | 0) > 57 ? ($$2 | 32) + -87 | 0 : $42;
   do if (($53 | 0) < 0 | ($53 | 0) == 0 & $55 >>> 0 < 8) {
    $$1149 = $$0148;
    $$1153 = $$0152;
    $$1156 = $$0155;
    $$1160 = $$0133 + ($$0159 << 4) | 0;
   } else if (($53 | 0) < 0 | ($53 | 0) == 0 & $55 >>> 0 < 14) {
    $67 = $$0152 * .0625;
    $$1149 = $$0148;
    $$1153 = $67;
    $$1156 = $$0155 + $67 * +($$0133 | 0);
    $$1160 = $$0159;
    break;
   } else {
    $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0;
    $$1149 = $or$cond ? $$0148 : 1;
    $$1153 = $$0152;
    $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5;
    $$1160 = $$0159;
    break;
   } while (0);
   $74 = _i64Add($55 | 0, $53 | 0, 1, 0) | 0;
   $$1147 = $$0146;
   $$2150 = $$1149;
   $$2154 = $$1153;
   $$2157 = $$1156;
   $$2161 = $$1160;
   $$3145 = 1;
   $214 = $99;
   $215 = $101;
   $216 = $74;
   $217 = tempRet0;
  }
  $76 = HEAP32[$5 >> 2] | 0;
  if ($76 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $76 + 1;
   $$0146 = $$1147;
   $$0148 = $$2150;
   $$0152 = $$2154;
   $$0155 = $$2157;
   $$0159 = $$2161;
   $$2 = HEAPU8[$76 >> 0] | 0;
   $$2144 = $$3145;
   $101 = $215;
   $53 = $217;
   $55 = $216;
   $99 = $214;
   continue;
  } else {
   $$0146 = $$1147;
   $$0148 = $$2150;
   $$0152 = $$2154;
   $$0155 = $$2157;
   $$0159 = $$2161;
   $$2 = ___shgetc($0) | 0;
   $$2144 = $$3145;
   $101 = $215;
   $53 = $217;
   $55 = $216;
   $99 = $214;
   continue;
  }
 }
 do if (!$$2144) {
  $84 = HEAP32[$7 >> 2] | 0;
  $85 = ($84 | 0) != 0;
  if ($85) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  if (!$4) ___shlim($0, 0); else {
   if ($85) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
   if (!(($$0146 | 0) == 0 | ($84 | 0) == 0)) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  }
  $$0165 = +($3 | 0) * 0.0;
 } else {
  $97 = ($$0146 | 0) == 0;
  $98 = $97 ? $55 : $99;
  $100 = $97 ? $53 : $101;
  if (($53 | 0) < 0 | ($53 | 0) == 0 & $55 >>> 0 < 8) {
   $$3162183 = $$0159;
   $108 = $55;
   $109 = $53;
   while (1) {
    $107 = $$3162183 << 4;
    $108 = _i64Add($108 | 0, $109 | 0, 1, 0) | 0;
    $109 = tempRet0;
    if (!(($109 | 0) < 0 | ($109 | 0) == 0 & $108 >>> 0 < 8)) {
     $$3162$lcssa = $107;
     break;
    } else $$3162183 = $107;
   }
  } else $$3162$lcssa = $$0159;
  if (($$2$lcssa | 32 | 0) == 112) {
   $119 = _scanexp($0, $4) | 0;
   $120 = tempRet0;
   if (($119 | 0) == 0 & ($120 | 0) == -2147483648) {
    if (!$4) {
     ___shlim($0, 0);
     $$0165 = 0.0;
     break;
    }
    if (!(HEAP32[$7 >> 2] | 0)) {
     $137 = 0;
     $138 = 0;
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
     $137 = 0;
     $138 = 0;
    }
   } else {
    $137 = $119;
    $138 = $120;
   }
  } else if (!(HEAP32[$7 >> 2] | 0)) {
   $137 = 0;
   $138 = 0;
  } else {
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
   $137 = 0;
   $138 = 0;
  }
  $133 = _bitshift64Shl($98 | 0, $100 | 0, 2) | 0;
  $135 = _i64Add($133 | 0, tempRet0 | 0, -32, -1) | 0;
  $139 = _i64Add($135 | 0, tempRet0 | 0, $137 | 0, $138 | 0) | 0;
  $140 = tempRet0;
  if (!$$3162$lcssa) {
   $$0165 = +($3 | 0) * 0.0;
   break;
  }
  $144 = 0 - $2 | 0;
  $146 = (($144 | 0) < 0) << 31 >> 31;
  if (($140 | 0) > ($146 | 0) | ($140 | 0) == ($146 | 0) & $139 >>> 0 > $144 >>> 0) {
   $152 = ___errno_location() | 0;
   HEAP32[$152 >> 2] = 34;
   $$0165 = +($3 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $156 = $2 + -106 | 0;
  $158 = (($156 | 0) < 0) << 31 >> 31;
  if (($140 | 0) < ($158 | 0) | ($140 | 0) == ($158 | 0) & $139 >>> 0 < $156 >>> 0) {
   $165 = ___errno_location() | 0;
   HEAP32[$165 >> 2] = 34;
   $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (($$3162$lcssa | 0) > -1) {
   $$3158179 = $$0155;
   $$4163178 = $$3162$lcssa;
   $173 = $139;
   $174 = $140;
   while (1) {
    $169 = !($$3158179 >= .5);
    $$5164 = $$4163178 << 1 | ($169 ^ 1) & 1;
    $$4 = $$3158179 + ($169 ? $$3158179 : $$3158179 + -1.0);
    $175 = _i64Add($173 | 0, $174 | 0, -1, -1) | 0;
    $176 = tempRet0;
    if (($$5164 | 0) > -1) {
     $$3158179 = $$4;
     $$4163178 = $$5164;
     $173 = $175;
     $174 = $176;
    } else {
     $$3158$lcssa = $$4;
     $$4163$lcssa = $$5164;
     $184 = $175;
     $185 = $176;
     break;
    }
   }
  } else {
   $$3158$lcssa = $$0155;
   $$4163$lcssa = $$3162$lcssa;
   $184 = $139;
   $185 = $140;
  }
  $179 = (($1 | 0) < 0) << 31 >> 31;
  $182 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0;
  $186 = _i64Add($182 | 0, tempRet0 | 0, $184 | 0, $185 | 0) | 0;
  $187 = tempRet0;
  if (($179 | 0) > ($187 | 0) | ($179 | 0) == ($187 | 0) & $1 >>> 0 > $186 >>> 0) if (($186 | 0) > 0) {
   $$0166 = $186;
   label = 59;
  } else {
   $$0166170 = 0;
   $197 = 84;
   label = 61;
  } else {
   $$0166 = $1;
   label = 59;
  }
  if ((label | 0) == 59) if (($$0166 | 0) < 53) {
   $$0166170 = $$0166;
   $197 = 84 - $$0166 | 0;
   label = 61;
  } else {
   $$0151 = 0.0;
   $$0166169 = $$0166;
   $$pre$phiZ2D = +($3 | 0);
  }
  if ((label | 0) == 61) {
   $196 = +($3 | 0);
   $$0151 = +_copysignl(+_scalbn(1.0, $197), $196);
   $$0166169 = $$0166170;
   $$pre$phiZ2D = $196;
  }
  $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32);
  $210 = $$pre$phiZ2D * ($or$cond168 ? 0.0 : $$3158$lcssa) + ($$0151 + $$pre$phiZ2D * +((($or$cond168 & 1) + $$4163$lcssa | 0) >>> 0)) - $$0151;
  if (!($210 != 0.0)) {
   $212 = ___errno_location() | 0;
   HEAP32[$212 >> 2] = 34;
  }
  $$0165 = +_scalbnl($210, $184);
 } while (0);
 return +$$0165;
}

function _get_matrix_code($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$ = 0, $$0206 = 0, $$0207 = 0, $$0211 = 0, $$0219 = 0, $$0222 = 0, $$0224 = 0, $$1208 = 0, $$1212 = 0, $$2209 = 0, $$2213 = 0, $$3210 = 0, $$3214 = 0, $$4215 = 0, $$5216 = 0, $$6217 = 0, $$7218 = 0, $$not226 = 0, $$not231 = 0, $$not232 = 0, $101 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $118 = 0, $119 = 0, $12 = 0, $125 = 0, $126 = 0, $127 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $147 = 0, $152 = 0, $154 = 0, $155 = 0, $158 = 0, $166 = 0, $167 = 0, $170 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $21 = 0, $25 = 0, $26 = 0, $30 = 0, $44 = 0, $56 = 0, $58 = 0, $59 = 0, $68 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $83 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $92 = 0, $or$cond7248 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $7 = sp + 24 | 0;
 $8 = sp + 8 | 0;
 $9 = sp;
 L1 : do if (($1 + -3 | 0) >>> 0 > 5) {
  HEAP32[$2 >> 2] = -1;
  HEAP32[$3 >> 2] = 0;
  HEAPF64[$4 >> 3] = -1.0;
  $$0206 = -1;
 } else {
  HEAP32[$8 >> 2] = 0;
  $11 = $1 + -1 | 0;
  $12 = Math_imul($11, $1) | 0;
  HEAP32[$8 + 4 >> 2] = $12;
  $14 = Math_imul($1, $1) | 0;
  HEAP32[$8 + 8 >> 2] = $14 + -1;
  HEAP32[$8 + 12 >> 2] = $11;
  $$0211 = 0;
  $$0222 = 0;
  $$0224 = -1;
  while (1) {
   if (($$0211 | 0) == 4) break;
   $21 = HEAP8[$0 + (HEAP32[$8 + ($$0211 << 2) >> 2] | 0) >> 0] | 0;
   $$0211 = $$0211 + 1 | 0;
   $$0222 = ($21 & 255) > ($$0222 & 255) ? $21 : $$0222;
   $$0224 = ($21 & 255) < ($$0224 & 255) ? $21 : $$0224;
  }
  $25 = $$0224 & 255;
  $26 = $$0222 & 255;
  if (($26 - $25 | 0) < 30) {
   HEAP32[$2 >> 2] = -1;
   HEAP32[$3 >> 2] = 0;
   HEAPF64[$4 >> 3] = -1.0;
   $$0206 = -2;
   break;
  }
  $30 = ($26 + $25 | 0) >>> 1;
  $$1212 = 0;
  while (1) {
   if (($$1212 | 0) == 4) {
    $$2213 = 0;
    break;
   }
   HEAP8[$7 + $$1212 >> 0] = (HEAPU8[$0 + (HEAP32[$8 + ($$1212 << 2) >> 2] | 0) >> 0] | 0) >>> 0 < $30 >>> 0 & 1;
   $$1212 = $$1212 + 1 | 0;
  }
  while (1) {
   if (($$2213 | 0) >= 4) {
    label = 16;
    break;
   }
   $44 = $$2213 + 1 | 0;
   if ((HEAP8[$7 + $$2213 >> 0] | 0) != 1) {
    $$2213 = $44;
    continue;
   }
   if ((HEAP8[$7 + (($44 | 0) % 4 | 0) >> 0] | 0) != 1) {
    $$2213 = $44;
    continue;
   }
   if (!(HEAP8[$7 + (($$2213 + 2 | 0) % 4 | 0) >> 0] | 0)) {
    label = 15;
    break;
   } else $$2213 = $44;
  }
  if ((label | 0) == 15) {
   HEAP32[$3 >> 2] = $$2213;
   $$0219 = 255;
   $$3214 = 0;
  } else if ((label | 0) == 16) if (($$2213 | 0) == 4) {
   HEAP32[$2 >> 2] = -1;
   HEAP32[$3 >> 2] = 0;
   HEAPF64[$4 >> 3] = -1.0;
   $$0206 = -3;
   break;
  } else {
   $$0219 = 255;
   $$3214 = 0;
  }
  while (1) {
   if (($$3214 | 0) >= ($14 | 0)) break;
   $56 = $0 + $$3214 | 0;
   $58 = HEAPU8[$56 >> 0] | 0;
   $59 = $58 - $30 | 0;
   $$ = ($59 | 0) < 0 ? 0 - $59 | 0 : $59;
   HEAP8[$56 >> 0] = $58 >>> 0 < $30 >>> 0 & 1;
   $$0219 = ($$ | 0) < ($$0219 | 0) ? $$ : $$0219;
   $$3214 = $$3214 + 1 | 0;
  }
  L27 : do switch (HEAP32[$3 >> 2] | 0) {
  case 0:
   {
    $$0207 = 0;
    $180 = 0;
    $181 = 0;
    while (1) {
     if (($$0207 | 0) >= ($1 | 0)) {
      $142 = $180;
      $166 = $181;
      break L27;
     }
     $$not226 = ($$0207 | 0) != ($11 | 0);
     $68 = Math_imul($$0207, $1) | 0;
     $$4215 = 0;
     $71 = $180;
     $72 = $181;
     while (1) {
      if (($$4215 | 0) == ($1 | 0)) break;
      if (!($$4215 | $$0207)) {
       $188 = $71;
       $189 = $72;
      } else if ($$not226 | ($$4215 | 0) != 0 & ($$4215 | 0) != ($11 | 0)) {
       $73 = _bitshift64Shl($71 | 0, $72 | 0, 1) | 0;
       $188 = (HEAP8[$0 + ($$4215 + $68) >> 0] | 0) != 0 | $73;
       $189 = tempRet0;
      } else {
       $188 = $71;
       $189 = $72;
      }
      $$4215 = $$4215 + 1 | 0;
      $71 = $188;
      $72 = $189;
     }
     $$0207 = $$0207 + 1 | 0;
     $180 = $71;
     $181 = $72;
    }
    break;
   }
  case 1:
   {
    $$5216 = 0;
    $182 = 0;
    $183 = 0;
    while (1) {
     if (($$5216 | 0) >= ($1 | 0)) {
      $142 = $182;
      $166 = $183;
      break L27;
     }
     $$not231 = ($$5216 | 0) != 0;
     $83 = ($$5216 | 0) == ($11 | 0);
     $$1208 = $11;
     $86 = $182;
     $87 = $183;
     while (1) {
      if (($$1208 | 0) <= -1) break;
      $$not232 = ($$1208 | 0) != ($11 | 0);
      if ($$not231 | $$not232) if ($83 & (($$1208 | 0) == 0 | $$not232 ^ 1)) {
       $190 = $86;
       $191 = $87;
      } else {
       $88 = _bitshift64Shl($86 | 0, $87 | 0, 1) | 0;
       $92 = $0 + ((Math_imul($$1208, $1) | 0) + $$5216) | 0;
       $190 = (HEAP8[$92 >> 0] | 0) != 0 | $88;
       $191 = tempRet0;
      } else {
       $190 = $86;
       $191 = $87;
      }
      $$1208 = $$1208 + -1 | 0;
      $86 = $190;
      $87 = $191;
     }
     $$5216 = $$5216 + 1 | 0;
     $182 = $86;
     $183 = $87;
    }
    break;
   }
  case 2:
   {
    $$2209 = $11;
    $184 = 0;
    $185 = 0;
    while (1) {
     if (($$2209 | 0) <= -1) {
      $142 = $184;
      $166 = $185;
      break L27;
     }
     $or$cond7248 = ($$2209 | 0) == ($11 | 0) | ($$2209 | 0) == 0;
     $101 = Math_imul($$2209, $1) | 0;
     $$6217 = $11;
     $106 = $184;
     $107 = $185;
     while (1) {
      if (($$6217 | 0) <= -1) break;
      if ($or$cond7248 & ($$6217 | 0) == ($11 | 0) | ($$6217 | $$2209 | 0) == 0) {
       $192 = $106;
       $193 = $107;
      } else {
       $108 = _bitshift64Shl($106 | 0, $107 | 0, 1) | 0;
       $192 = (HEAP8[$0 + ($$6217 + $101) >> 0] | 0) != 0 | $108;
       $193 = tempRet0;
      }
      $$6217 = $$6217 + -1 | 0;
      $106 = $192;
      $107 = $193;
     }
     $$2209 = $$2209 + -1 | 0;
     $184 = $106;
     $185 = $107;
    }
    break;
   }
  case 3:
   {
    $$7218 = $11;
    $186 = 0;
    $187 = 0;
    while (1) {
     if (($$7218 | 0) <= -1) {
      $142 = $186;
      $166 = $187;
      break L27;
     }
     $118 = ($$7218 | 0) == ($11 | 0);
     $119 = ($$7218 | 0) == 0;
     $$3210 = 0;
     $125 = $186;
     $126 = $187;
     while (1) {
      if (($$3210 | 0) >= ($1 | 0)) break;
      if ($118 & ($$3210 | 0) == 0 | ($$3210 | $$7218 | 0) == 0 | $119 & ($$3210 | 0) == ($11 | 0)) {
       $194 = $125;
       $195 = $126;
      } else {
       $127 = _bitshift64Shl($125 | 0, $126 | 0, 1) | 0;
       $131 = $0 + ((Math_imul($$3210, $1) | 0) + $$7218) | 0;
       $194 = (HEAP8[$131 >> 0] | 0) != 0 | $127;
       $195 = tempRet0;
      }
      $$3210 = $$3210 + 1 | 0;
      $125 = $194;
      $126 = $195;
     }
     $$7218 = $$7218 + -1 | 0;
     $186 = $125;
     $187 = $126;
    }
    break;
   }
  default:
   {
    $142 = 0;
    $166 = 0;
   }
  } while (0);
  HEAPF64[$4 >> 3] = ($$0219 | 0) > 30 ? 1.0 : +($$0219 | 0) / 30.0;
  L71 : do if (($5 | 0) == 259) {
   $143 = HEAP8[3867 + $142 >> 0] | 0;
   $144 = $143 << 24 >> 24;
   $147 = $9;
   HEAP32[$147 >> 2] = $144;
   HEAP32[$147 + 4 >> 2] = (($144 | 0) < 0) << 31 >> 31;
   if ($143 << 24 >> 24 < 0) {
    HEAP32[$2 >> 2] = -1;
    HEAPF64[$4 >> 3] = -1.0;
    $$0206 = -4;
    break L1;
   }
  } else {
   $152 = ($6 | 0) != 0;
   switch ($5 | 0) {
   case 515:
    {
     $154 = HEAP8[3739 + $142 >> 0] | 0;
     $155 = $154 << 24 >> 24;
     $158 = $9;
     HEAP32[$158 >> 2] = $155;
     HEAP32[$158 + 4 >> 2] = (($155 | 0) < 0) << 31 >> 31;
     if ($152) HEAP32[$6 >> 2] = HEAPU8[3803 + $142 >> 0];
     if ($154 << 24 >> 24 >= 0) break L71;
     HEAP32[$2 >> 2] = -1;
     HEAPF64[$4 >> 3] = -1.0;
     $$0206 = -4;
     break L1;
     break;
    }
   case 772:
   case 1028:
    {
     $167 = _decode_bch($5, $142, $166, 0, $9) | 0;
     if (($167 | 0) < 0) {
      HEAP32[$2 >> 2] = -1;
      HEAPF64[$4 >> 3] = -1.0;
      $$0206 = -4;
      break L1;
     }
     if (!($152 & ($167 | 0) != 0)) break L71;
     HEAP32[$6 >> 2] = $167;
     break L71;
     break;
    }
   default:
    {
     $170 = $9;
     HEAP32[$170 >> 2] = $142;
     HEAP32[$170 + 4 >> 2] = $166;
     break L71;
    }
   }
  } while (0);
  HEAP32[$2 >> 2] = HEAP32[$9 >> 2];
  $$0206 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0206 | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _check_rotation($0) {
 $0 = $0 | 0;
 var $$$11 = 0.0, $$$13 = 0.0, $$$19 = 0.0, $$$21 = 0.0, $$0 = 0, $$0478 = 0.0, $$0479 = 0.0, $$0480 = 0.0, $$0481 = 0.0, $$0485$sink = 0.0, $$0498 = 0.0, $$10 = 0.0, $$11 = 0.0, $$11$ = 0.0, $$12 = 0.0, $$13 = 0.0, $$13$ = 0.0, $$18 = 0.0, $$19 = 0.0, $$19$ = 0.0, $$2 = 0, $$20 = 0.0, $$20$sink = 0.0, $$21 = 0.0, $$21$ = 0.0, $$sink14$sink$sink = 0.0, $$sroa$0$0 = 0.0, $$sroa$0$0$$sroa$33$0$$sroa$62$0 = 0.0, $$sroa$0$2 = 0.0, $$sroa$0354$0 = 0.0, $$sroa$0391$0 = 0.0, $$sroa$18$0 = 0.0, $$sroa$18405$0 = 0.0, $$sroa$33$0 = 0.0, $$sroa$33$0$$sroa$62$0 = 0.0, $$sroa$33$0$$sroa$62$0$$sroa$0$0 = 0.0, $$sroa$33$2 = 0.0, $$sroa$33380$0 = 0.0, $$sroa$33418$0 = 0.0, $$sroa$62$0 = 0.0, $$sroa$62$0$$sroa$33$0 = 0.0, $$sroa$62$3 = 0.0, $1 = 0.0, $10 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $115 = 0.0, $117 = 0.0, $121 = 0.0, $122 = 0.0, $124 = 0.0, $128 = 0.0, $131 = 0.0, $138 = 0.0, $14 = 0.0, $141 = 0.0, $143 = 0.0, $145 = 0.0, $147 = 0.0, $149 = 0.0, $151 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $160 = 0.0, $167 = 0.0, $17 = 0.0, $174 = 0.0, $181 = 0.0, $185 = 0, $2 = 0, $20 = 0.0, $26 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $35 = 0.0, $4 = 0, $43 = 0.0, $5 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $59 = 0.0, $6 = 0, $61 = 0.0, $65 = 0.0, $66 = 0.0, $68 = 0.0, $7 = 0.0, $72 = 0.0, $75 = 0.0, $8 = 0, $82 = 0.0, $85 = 0.0, $87 = 0.0, $89 = 0.0, $9 = 0.0, $91 = 0.0, $93 = 0.0, $95 = 0.0, $97 = 0.0, $98 = 0, $99 = 0;
 $1 = +HEAPF64[$0 >> 3];
 $2 = $0 + 8 | 0;
 $3 = +HEAPF64[$2 >> 3];
 $4 = $0 + 16 | 0;
 $5 = +HEAPF64[$4 >> 3];
 $6 = $0 + 24 | 0;
 $7 = +HEAPF64[$6 >> 3];
 $8 = $0 + 32 | 0;
 $9 = +HEAPF64[$8 >> 3];
 $10 = $0 + 40 | 0;
 $11 = +HEAPF64[$10 >> 3];
 $14 = $3 * $11 - $5 * $9;
 $17 = $5 * $7 - $1 * $11;
 $20 = $1 * $9 - $3 * $7;
 $26 = +Math_sqrt(+($20 * $20 + ($14 * $14 + $17 * $17)));
 if (!($26 == 0.0)) {
  $28 = $14 / $26;
  $29 = $17 / $26;
  $30 = $20 / $26;
  $35 = $1 * $7 + $3 * $9 + $5 * $11;
  $$0498 = $35 < 0.0 ? -$35 : $35;
  $43 = (+Math_sqrt(+($$0498 + 1.0)) + +Math_sqrt(+(1.0 - $$0498))) * .5;
  if ($1 * $29 - $3 * $28 != 0.0) {
   $$0 = 0;
   $$sroa$0$0 = $28;
   $$sroa$0391$0 = $1;
   $$sroa$18405$0 = $3;
   $$sroa$33$0 = $29;
   $$sroa$33418$0 = $5;
   $$sroa$62$0 = $30;
  } else {
   $51 = $1 * $30 - $5 * $28 != 0.0;
   $$0 = $51 ? 1 : 2;
   $$sroa$0$0 = $51 ? $28 : $30;
   $$sroa$0391$0 = $51 ? $1 : $5;
   $$sroa$18405$0 = $51 ? $5 : $3;
   $$sroa$33$0 = $51 ? $30 : $29;
   $$sroa$33418$0 = $51 ? $3 : $1;
   $$sroa$62$0 = $51 ? $29 : $28;
  }
  $52 = $$sroa$0391$0 * $$sroa$33$0;
  $53 = $$sroa$18405$0 * $$sroa$0$0;
  $54 = $52 - $53;
  if (!($54 == 0.0)) {
   $59 = ($$sroa$18405$0 * $$sroa$62$0 - $$sroa$33418$0 * $$sroa$33$0) / $54;
   $61 = $43 * $$sroa$33$0 / $54;
   $65 = $53 - $52;
   $66 = ($$sroa$0391$0 * $$sroa$62$0 - $$sroa$33418$0 * $$sroa$0$0) / $65;
   $68 = $43 * $$sroa$0$0 / $65;
   $72 = $59 * $59 + $66 * $66 + 1.0;
   $75 = $59 * $61 + $66 * $68;
   $82 = $75 * $75 - $72 * ($61 * $61 + $68 * $68 + -1.0);
   if (!($82 < 0.0)) {
    $85 = +Math_sqrt(+$82);
    $87 = ($85 - $75) / $72;
    $89 = $61 + $59 * $87;
    $91 = $68 + $66 * $87;
    $93 = (-$75 - $85) / $72;
    $95 = $61 + $59 * $93;
    $97 = $68 + $66 * $93;
    $98 = ($$0 | 0) == 1;
    $$sroa$33$0$$sroa$62$0 = $98 ? $$sroa$33$0 : $$sroa$62$0;
    $$sroa$62$0$$sroa$33$0 = $98 ? $$sroa$62$0 : $$sroa$33$0;
    $$10 = $98 ? $87 : $91;
    $$11 = $98 ? $91 : $87;
    $$12 = $98 ? $93 : $97;
    $$13 = $98 ? $97 : $93;
    $99 = ($$0 | 0) == 2;
    $$sroa$0$0$$sroa$33$0$$sroa$62$0 = $99 ? $$sroa$0$0 : $$sroa$33$0$$sroa$62$0;
    $$sroa$33$0$$sroa$62$0$$sroa$0$0 = $99 ? $$sroa$33$0$$sroa$62$0 : $$sroa$0$0;
    $$11$ = $99 ? $$11 : $89;
    $$$11 = $99 ? $89 : $$11;
    $$13$ = $99 ? $$13 : $95;
    $$$13 = $99 ? $95 : $$13;
    if ($7 * $$sroa$62$0$$sroa$33$0 - $9 * $$sroa$33$0$$sroa$62$0$$sroa$0$0 != 0.0) {
     $$2 = 0;
     $$sroa$0$2 = $$sroa$33$0$$sroa$62$0$$sroa$0$0;
     $$sroa$0354$0 = $7;
     $$sroa$18$0 = $9;
     $$sroa$33$2 = $$sroa$62$0$$sroa$33$0;
     $$sroa$33380$0 = $11;
     $$sroa$62$3 = $$sroa$0$0$$sroa$33$0$$sroa$62$0;
    } else {
     $107 = $7 * $$sroa$0$0$$sroa$33$0$$sroa$62$0 - $11 * $$sroa$33$0$$sroa$62$0$$sroa$0$0 != 0.0;
     $$2 = $107 ? 1 : 2;
     $$sroa$0$2 = $107 ? $$sroa$33$0$$sroa$62$0$$sroa$0$0 : $$sroa$0$0$$sroa$33$0$$sroa$62$0;
     $$sroa$0354$0 = $107 ? $7 : $11;
     $$sroa$18$0 = $107 ? $11 : $9;
     $$sroa$33$2 = $107 ? $$sroa$0$0$$sroa$33$0$$sroa$62$0 : $$sroa$62$0$$sroa$33$0;
     $$sroa$33380$0 = $107 ? $9 : $7;
     $$sroa$62$3 = $107 ? $$sroa$62$0$$sroa$33$0 : $$sroa$33$0$$sroa$62$0$$sroa$0$0;
    }
    $108 = $$sroa$0354$0 * $$sroa$33$2;
    $109 = $$sroa$18$0 * $$sroa$0$2;
    $110 = $108 - $109;
    if (!($110 == 0.0)) {
     $115 = ($$sroa$18$0 * $$sroa$62$3 - $$sroa$33380$0 * $$sroa$33$2) / $110;
     $117 = $43 * $$sroa$33$2 / $110;
     $121 = $109 - $108;
     $122 = ($$sroa$0354$0 * $$sroa$62$3 - $$sroa$33380$0 * $$sroa$0$2) / $121;
     $124 = $43 * $$sroa$0$2 / $121;
     $128 = $115 * $115 + $122 * $122 + 1.0;
     $131 = $115 * $117 + $122 * $124;
     $138 = $131 * $131 - $128 * ($117 * $117 + $124 * $124 + -1.0);
     if (!($138 < 0.0)) {
      $141 = +Math_sqrt(+$138);
      $143 = ($141 - $131) / $128;
      $145 = $117 + $115 * $143;
      $147 = $124 + $122 * $143;
      $149 = (-$131 - $141) / $128;
      $151 = $117 + $115 * $149;
      $153 = $124 + $122 * $149;
      $154 = ($$2 | 0) == 1;
      $$18 = $154 ? $143 : $147;
      $$19 = $154 ? $147 : $143;
      $$20 = $154 ? $149 : $153;
      $$21 = $154 ? $153 : $149;
      $155 = ($$2 | 0) == 2;
      $$19$ = $155 ? $$19 : $145;
      $$$19 = $155 ? $145 : $$19;
      $$21$ = $155 ? $$21 : $151;
      $$$21 = $155 ? $151 : $$21;
      $160 = $$$11 * $$$19 + ($$10 * $$18 + $$11$ * $$19$);
      $$0481 = $160 < 0.0 ? -$160 : $160;
      $167 = $$$11 * $$$21 + ($$10 * $$20 + $$11$ * $$21$);
      $$0480 = $167 < 0.0 ? -$167 : $167;
      $174 = $$$13 * $$$19 + ($$12 * $$18 + $$13$ * $$19$);
      $$0479 = $174 < 0.0 ? -$174 : $174;
      $181 = $$$13 * $$$21 + ($$12 * $$20 + $$13$ * $$21$);
      $$0478 = $181 < 0.0 ? -$181 : $181;
      $185 = $$0479 < $$0478;
      do if ($$0481 < $$0480) {
       if (!($$0481 < $$0479)) {
        HEAPF64[$0 >> 3] = $$13$;
        HEAPF64[$2 >> 3] = $$12;
        HEAPF64[$4 >> 3] = $$$13;
        $$0485$sink = $185 ? $$19$ : $$21$;
        $$20$sink = $185 ? $$18 : $$20;
        $$sink14$sink$sink = $185 ? $$$19 : $$$21;
        break;
       }
       if ($$0481 < $$0478) {
        HEAPF64[$0 >> 3] = $$11$;
        HEAPF64[$2 >> 3] = $$10;
        HEAPF64[$4 >> 3] = $$$11;
        $$0485$sink = $$19$;
        $$20$sink = $$18;
        $$sink14$sink$sink = $$$19;
        break;
       } else {
        HEAPF64[$0 >> 3] = $$13$;
        HEAPF64[$2 >> 3] = $$12;
        HEAPF64[$4 >> 3] = $$$13;
        $$0485$sink = $$21$;
        $$20$sink = $$20;
        $$sink14$sink$sink = $$$21;
        break;
       }
      } else {
       if (!($$0480 < $$0479)) {
        HEAPF64[$0 >> 3] = $$13$;
        HEAPF64[$2 >> 3] = $$12;
        HEAPF64[$4 >> 3] = $$$13;
        $$0485$sink = $185 ? $$19$ : $$21$;
        $$20$sink = $185 ? $$18 : $$20;
        $$sink14$sink$sink = $185 ? $$$19 : $$$21;
        break;
       }
       if ($$0480 < $$0478) {
        HEAPF64[$0 >> 3] = $$11$;
        HEAPF64[$2 >> 3] = $$10;
        HEAPF64[$4 >> 3] = $$$11;
        $$0485$sink = $$21$;
        $$20$sink = $$20;
        $$sink14$sink$sink = $$$21;
        break;
       } else {
        HEAPF64[$0 >> 3] = $$13$;
        HEAPF64[$2 >> 3] = $$12;
        HEAPF64[$4 >> 3] = $$$13;
        $$0485$sink = $$21$;
        $$20$sink = $$20;
        $$sink14$sink$sink = $$$21;
        break;
       }
      } while (0);
      HEAPF64[$6 >> 3] = $$0485$sink;
      HEAPF64[$8 >> 3] = $$20$sink;
      HEAPF64[$10 >> 3] = $$sink14$sink$sink;
     }
    }
   }
  }
 }
 return;
}

function _icpGetInitXw2Xc_from_PlanarData($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0204 = 0, $$1 = 0, $$sroa$0$0 = 0.0, $$sroa$8$0 = 0.0, $101 = 0, $102 = 0, $108 = 0, $110 = 0, $112 = 0, $116 = 0, $118 = 0, $120 = 0.0, $121 = 0, $125 = 0.0, $128 = 0.0, $129 = 0.0, $130 = 0, $133 = 0.0, $137 = 0.0, $140 = 0.0, $141 = 0.0, $143 = 0.0, $144 = 0, $149 = 0.0, $150 = 0, $157 = 0.0, $158 = 0, $162 = 0.0, $168 = 0.0, $17 = 0, $174 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $188 = 0.0, $189 = 0.0, $191 = 0.0, $201 = 0.0, $202 = 0.0, $204 = 0.0, $205 = 0.0, $207 = 0.0, $209 = 0.0, $211 = 0.0, $213 = 0.0, $217 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $38 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $61 = 0, $88 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $vararg_buffer11 = sp + 120 | 0;
 $vararg_buffer9 = sp + 112 | 0;
 $vararg_buffer7 = sp + 104 | 0;
 $vararg_buffer5 = sp + 96 | 0;
 $vararg_buffer3 = sp + 88 | 0;
 $vararg_buffer1 = sp + 80 | 0;
 $vararg_buffer = sp + 72 | 0;
 $5 = sp;
 L1 : do if (($3 | 0) < 4) $$0204 = -1; else {
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= ($3 | 0)) break;
   if (+HEAPF64[$2 + ($$0 * 24 | 0) + 16 >> 3] != 0.0) {
    $$0204 = -1;
    break L1;
   } else $$0 = $$0 + 1 | 0;
  }
  if (+HEAPF64[$0 >> 3] == 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 32 >> 3] != 0.0) $$0204 = -1; else {
   $17 = $0 + 40 | 0;
   if (+HEAPF64[$17 >> 3] == 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 64 >> 3] != 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 72 >> 3] != 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 80 >> 3] != 1.0) $$0204 = -1; else if (+HEAPF64[$0 + 24 >> 3] != 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 56 >> 3] != 0.0) $$0204 = -1; else if (+HEAPF64[$0 + 88 >> 3] != 0.0) $$0204 = -1; else {
    $38 = $3 << 1;
    $39 = _arMatrixAlloc($38, 8) | 0;
    if (!$39) {
     _arLog(3, 4440, $vararg_buffer);
     $$0204 = -1;
     break;
    }
    $41 = _arMatrixAlloc($38, 1) | 0;
    if (!$41) {
     _arMatrixFree($39) | 0;
     _arLog(3, 4466, $vararg_buffer1);
     $$0204 = -1;
     break;
    }
    $$1 = 0;
    while (1) {
     if (($$1 | 0) == ($3 | 0)) break;
     $43 = $2 + ($$1 * 24 | 0) | 0;
     $45 = HEAP32[$39 >> 2] | 0;
     $46 = $$1 << 4;
     HEAPF64[$45 + ($46 << 3) >> 3] = +HEAPF64[$43 >> 3];
     $48 = $2 + ($$1 * 24 | 0) + 8 | 0;
     HEAPF64[$45 + (($46 | 1) << 3) >> 3] = +HEAPF64[$48 >> 3];
     HEAPF64[$45 + (($46 | 2) << 3) >> 3] = 1.0;
     HEAPF64[$45 + (($46 | 3) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 4) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 5) << 3) >> 3] = 0.0;
     $61 = $1 + ($$1 << 4) | 0;
     HEAPF64[$45 + (($46 | 6) << 3) >> 3] = -(+HEAPF64[$43 >> 3] * +HEAPF64[$61 >> 3]);
     HEAPF64[$45 + (($46 | 7) << 3) >> 3] = -(+HEAPF64[$48 >> 3] * +HEAPF64[$61 >> 3]);
     HEAPF64[$45 + (($46 | 8) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 9) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 10) << 3) >> 3] = 0.0;
     HEAPF64[$45 + (($46 | 11) << 3) >> 3] = +HEAPF64[$43 >> 3];
     HEAPF64[$45 + (($46 | 12) << 3) >> 3] = +HEAPF64[$48 >> 3];
     HEAPF64[$45 + (($46 | 13) << 3) >> 3] = 1.0;
     $88 = $1 + ($$1 << 4) + 8 | 0;
     HEAPF64[$45 + (($46 | 14) << 3) >> 3] = -(+HEAPF64[$43 >> 3] * +HEAPF64[$88 >> 3]);
     HEAPF64[$45 + (($46 | 15) << 3) >> 3] = -(+HEAPF64[$48 >> 3] * +HEAPF64[$88 >> 3]);
     $101 = HEAP32[$41 >> 2] | 0;
     $102 = $$1 << 1;
     HEAPF64[$101 + ($102 << 3) >> 3] = +HEAPF64[$61 >> 3];
     HEAPF64[$101 + (($102 | 1) << 3) >> 3] = +HEAPF64[$88 >> 3];
     $$1 = $$1 + 1 | 0;
    }
    $108 = _arMatrixAllocTrans($39) | 0;
    if (!$108) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arLog(3, 4492, $vararg_buffer3);
     $$0204 = -1;
     break;
    }
    $110 = _arMatrixAllocMul($108, $39) | 0;
    if (!$110) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arMatrixFree($108) | 0;
     _arLog(3, 4518, $vararg_buffer5);
     $$0204 = -1;
     break;
    }
    $112 = _arMatrixAllocMul($108, $41) | 0;
    if (!$112) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arMatrixFree($108) | 0;
     _arMatrixFree($110) | 0;
     _arLog(3, 4544, $vararg_buffer7);
     $$0204 = -1;
     break;
    }
    if ((_arMatrixSelfInv($110) | 0) < 0) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arMatrixFree($108) | 0;
     _arMatrixFree($110) | 0;
     _arMatrixFree($112) | 0;
     _arLog(3, 4570, $vararg_buffer9);
     $$0204 = -1;
     break;
    }
    $116 = _arMatrixAllocMul($110, $112) | 0;
    if (!$116) {
     _arMatrixFree($39) | 0;
     _arMatrixFree($41) | 0;
     _arMatrixFree($108) | 0;
     _arMatrixFree($110) | 0;
     _arMatrixFree($112) | 0;
     _arLog(3, 4596, $vararg_buffer11);
     $$0204 = -1;
     break;
    }
    $118 = HEAP32[$116 >> 2] | 0;
    $120 = +HEAPF64[$118 + 48 >> 3];
    $121 = $5 + 16 | 0;
    $125 = +HEAPF64[$0 + 48 >> 3];
    $128 = +HEAPF64[$17 >> 3];
    $129 = (+HEAPF64[$118 + 24 >> 3] - $120 * $125) / $128;
    $130 = $5 + 8 | 0;
    $133 = +HEAPF64[$0 + 16 >> 3];
    $137 = +HEAPF64[$0 + 8 >> 3];
    $140 = +HEAPF64[$0 >> 3];
    $141 = (+HEAPF64[$118 >> 3] - $133 * $120 - $129 * $137) / $140;
    $143 = +HEAPF64[$118 + 56 >> 3];
    $144 = $5 + 40 | 0;
    $149 = (+HEAPF64[$118 + 32 >> 3] - $125 * $143) / $128;
    $150 = $5 + 32 | 0;
    $157 = (+HEAPF64[$118 + 8 >> 3] - $133 * $143 - $137 * $149) / $140;
    $158 = $5 + 24 | 0;
    $162 = (+HEAPF64[$118 + 40 >> 3] - $125) / $128;
    $168 = (+HEAPF64[$118 + 16 >> 3] - $133 - $137 * $162) / $140;
    _arMatrixFree($39) | 0;
    _arMatrixFree($41) | 0;
    _arMatrixFree($108) | 0;
    _arMatrixFree($110) | 0;
    _arMatrixFree($112) | 0;
    _arMatrixFree($116) | 0;
    $174 = +Math_sqrt(+($141 * $141 + $129 * $129 + $120 * $120));
    $180 = +Math_sqrt(+($157 * $157 + $149 * $149 + $143 * $143));
    $181 = $141 / $174;
    HEAPF64[$5 >> 3] = $181;
    $182 = $129 / $174;
    HEAPF64[$130 >> 3] = $182;
    $183 = $120 / $174;
    HEAPF64[$121 >> 3] = $183;
    $184 = $157 / $180;
    HEAPF64[$158 >> 3] = $184;
    $185 = $149 / $180;
    HEAPF64[$150 >> 3] = $185;
    $186 = $143 / $180;
    HEAPF64[$144 >> 3] = $186;
    $188 = ($174 + $180) * .5;
    $189 = $168 / $188;
    $191 = 1.0 / $188;
    if ($191 < 0.0) {
     HEAPF64[$5 >> 3] = -$181;
     HEAPF64[$130 >> 3] = -$182;
     HEAPF64[$121 >> 3] = -$183;
     HEAPF64[$158 >> 3] = -$184;
     HEAPF64[$150 >> 3] = -$185;
     HEAPF64[$144 >> 3] = -$186;
     $$sroa$0$0 = -$189;
     $$sroa$8$0 = -$191;
    } else {
     $$sroa$0$0 = $189;
     $$sroa$8$0 = $162 / $188;
    }
    _check_rotation($5);
    $201 = +HEAPF64[$130 >> 3];
    $202 = +HEAPF64[$144 >> 3];
    $204 = +HEAPF64[$121 >> 3];
    $205 = +HEAPF64[$150 >> 3];
    $207 = $201 * $202 - $204 * $205;
    $209 = +HEAPF64[$158 >> 3];
    $211 = +HEAPF64[$5 >> 3];
    $213 = $204 * $209 - $202 * $211;
    $217 = $205 * $211 - $201 * $209;
    $224 = +Math_sqrt(+($217 * $217 + ($207 * $207 + $213 * $213)));
    $225 = $207 / $224;
    HEAPF64[$5 + 48 >> 3] = $225;
    $226 = $213 / $224;
    HEAPF64[$5 + 56 >> 3] = $226;
    $227 = $217 / $224;
    HEAPF64[$5 + 64 >> 3] = $227;
    HEAPF64[$4 >> 3] = $211;
    HEAPF64[$4 + 32 >> 3] = $201;
    HEAPF64[$4 + 64 >> 3] = $204;
    HEAPF64[$4 + 8 >> 3] = $209;
    HEAPF64[$4 + 40 >> 3] = $205;
    HEAPF64[$4 + 72 >> 3] = $202;
    HEAPF64[$4 + 16 >> 3] = $225;
    HEAPF64[$4 + 48 >> 3] = $226;
    HEAPF64[$4 + 80 >> 3] = $227;
    HEAPF64[$4 + 24 >> 3] = $$sroa$0$0;
    HEAPF64[$4 + 56 >> 3] = $$sroa$8$0;
    HEAPF64[$4 + 88 >> 3] = $191;
    $$0204 = 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0204 | 0;
}

function _get_global_id_code($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0177 = 0, $$0178 = 0, $$0178$off = 0, $$0182 = 0, $$0189 = 0, $$0202 = 0, $$0204 = 0, $$1 = 0, $$10 = 0, $$10199 = 0, $$11 = 0, $$11200 = 0, $$1179 = 0, $$1183 = 0, $$1190 = 0, $$12 = 0, $$2 = 0, $$2180 = 0, $$2180$off = 0, $$2184 = 0, $$2191 = 0, $$3 = 0, $$3181 = 0, $$3185 = 0, $$3192 = 0, $$4 = 0, $$4186 = 0, $$4186$off = 0, $$4193 = 0, $$5 = 0, $$5187 = 0, $$5194 = 0, $$6 = 0, $$6188 = 0, $$6188$off = 0, $$6195 = 0, $$7 = 0, $$7196 = 0, $$8 = 0, $$8197 = 0, $$9 = 0, $$9198 = 0, $$not215 = 0, $$not219 = 0, $$not220 = 0, $$not228 = 0, $$not233 = 0, $$not234 = 0, $102 = 0, $106 = 0, $111 = 0, $112 = 0, $115 = 0, $122 = 0, $126 = 0, $133 = 0.0, $134 = 0, $137 = 0, $142 = 0, $143 = 0, $15 = 0, $19 = 0, $20 = 0, $24 = 0, $38 = 0, $49 = 0, $5 = 0, $52 = 0, $59 = 0, $6 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $72 = 0, $79 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $90 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $5 = sp + 152 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 $8 = sp + 24 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 182;
 HEAP32[$6 + 8 >> 2] = 195;
 HEAP32[$6 + 12 >> 2] = 13;
 $$0182 = 0;
 $$0202 = 0;
 $$0204 = -1;
 while (1) {
  if (($$0182 | 0) == 4) break;
  $15 = HEAP8[$0 + (HEAP32[$6 + ($$0182 << 2) >> 2] | 0) >> 0] | 0;
  $$0182 = $$0182 + 1 | 0;
  $$0202 = ($15 & 255) > ($$0202 & 255) ? $15 : $$0202;
  $$0204 = ($15 & 255) < ($$0204 & 255) ? $15 : $$0204;
 }
 $19 = $$0204 & 255;
 $20 = $$0202 & 255;
 L5 : do if (($20 - $19 | 0) < 30) {
  HEAP32[$2 >> 2] = 0;
  HEAPF64[$3 >> 3] = -1.0;
  $$0177 = -2;
 } else {
  $24 = ($20 + $19 | 0) >>> 1;
  $$1183 = 0;
  while (1) {
   if (($$1183 | 0) == 4) {
    $$2184 = 0;
    break;
   }
   HEAP8[$5 + $$1183 >> 0] = (HEAPU8[$0 + (HEAP32[$6 + ($$1183 << 2) >> 2] | 0) >> 0] | 0) >>> 0 < $24 >>> 0 & 1;
   $$1183 = $$1183 + 1 | 0;
  }
  while (1) {
   if (($$2184 | 0) >= 4) break;
   $38 = $$2184 + 1 | 0;
   if ((HEAP8[$5 + $$2184 >> 0] | 0) != 1) {
    $$2184 = $38;
    continue;
   }
   if ((HEAP8[$5 + (($38 | 0) % 4 | 0) >> 0] | 0) != 1) {
    $$2184 = $38;
    continue;
   }
   if (!(HEAP8[$5 + (($$2184 + 2 | 0) % 4 | 0) >> 0] | 0)) break; else $$2184 = $38;
  }
  L17 : do switch ($$2184 | 0) {
  case 4:
   {
    HEAP32[$2 >> 2] = 0;
    HEAPF64[$3 >> 3] = -1.0;
    $$0177 = -3;
    break L5;
    break;
   }
  case 0:
   {
    $$0 = 119;
    $$0178 = 0;
    $$0189 = 255;
    while (1) {
     if (($$0178 | 0) == 14) {
      $$12 = $$0189;
      label = 52;
      break L17;
     }
     $$0178$off = $$0178 + -3 | 0;
     $$not215 = ($$0178 & -2 | 0) != 12;
     $49 = $$0178 * 14 | 0;
     $$1 = $$0;
     $$1190 = $$0189;
     $$3185 = 0;
     while (1) {
      if (($$3185 | 0) == 14) break;
      if (($$3185 + -3 | $$0178$off) >>> 0 < 8) {
       $$2 = $$1;
       $$2191 = $$1190;
      } else {
       $52 = $$3185 & -2;
       if (($$3185 | $$0178) >>> 0 < 2) {
        $$2 = $$1;
        $$2191 = $$1190;
       } else if ($$not215 | ($52 | 0) != 0 & ($52 | 0) != 12) {
        $59 = (HEAPU8[$0 + ($$3185 + $49) >> 0] | 0) - $24 | 0;
        HEAP8[$8 + $$1 >> 0] = $59 >>> 31;
        $63 = ($59 | 0) > -1 ? $59 : 0 - $59 | 0;
        $$2 = $$1 + -1 | 0;
        $$2191 = ($63 | 0) < ($$1190 | 0) ? $63 : $$1190;
       } else {
        $$2 = $$1;
        $$2191 = $$1190;
       }
      }
      $$1 = $$2;
      $$1190 = $$2191;
      $$3185 = $$3185 + 1 | 0;
     }
     $$0 = $$1;
     $$0178 = $$0178 + 1 | 0;
     $$0189 = $$1190;
    }
    break;
   }
  case 1:
   {
    $$3 = 119;
    $$3192 = 255;
    $$4186 = 0;
    while (1) {
     if (($$4186 | 0) == 14) {
      $$12 = $$3192;
      label = 52;
      break L17;
     }
     $$4186$off = $$4186 + -3 | 0;
     $67 = $$4186 & -2;
     $$not219 = ($67 | 0) != 0;
     $68 = ($67 | 0) == 12;
     $$1179 = 13;
     $$4 = $$3;
     $$4193 = $$3192;
     while (1) {
      if (($$1179 | 0) <= -1) break;
      if (($$1179 + -3 | $$4186$off) >>> 0 < 8) {
       $$5 = $$4;
       $$5194 = $$4193;
      } else {
       $72 = $$1179 & -2;
       $$not220 = ($72 | 0) != 12;
       if ($$not219 | $$not220) if ($68 & (($72 | 0) == 0 | $$not220 ^ 1)) {
        $$5 = $$4;
        $$5194 = $$4193;
       } else {
        $79 = (HEAPU8[$0 + (($$1179 * 14 | 0) + $$4186) >> 0] | 0) - $24 | 0;
        HEAP8[$8 + $$4 >> 0] = $79 >>> 31;
        $83 = ($79 | 0) > -1 ? $79 : 0 - $79 | 0;
        $$5 = $$4 + -1 | 0;
        $$5194 = ($83 | 0) < ($$4193 | 0) ? $83 : $$4193;
       } else {
        $$5 = $$4;
        $$5194 = $$4193;
       }
      }
      $$1179 = $$1179 + -1 | 0;
      $$4 = $$5;
      $$4193 = $$5194;
     }
     $$3 = $$4;
     $$3192 = $$4193;
     $$4186 = $$4186 + 1 | 0;
    }
    break;
   }
  case 2:
   {
    $$2180 = 13;
    $$6 = 119;
    $$6195 = 255;
    while (1) {
     if (($$2180 | 0) <= -1) {
      $$12 = $$6195;
      label = 52;
      break L17;
     }
     $$2180$off = $$2180 + -3 | 0;
     $88 = $$2180 & -2;
     $89 = ($88 | 0) == 12;
     $$not228 = ($88 | 0) != 0;
     $90 = $$2180 * 14 | 0;
     $$5187 = 13;
     $$7 = $$6;
     $$7196 = $$6195;
     while (1) {
      if (($$5187 | 0) <= -1) break;
      if (($$5187 + -3 | $$2180$off) >>> 0 < 8) {
       $$8 = $$7;
       $$8197 = $$7196;
      } else {
       $95 = ($$5187 & -2 | 0) == 12;
       if ($89 & $95) {
        $$8 = $$7;
        $$8197 = $$7196;
       } else if (($$5187 | $$2180) >>> 0 > 1 & ($$not228 | $95 ^ 1)) {
        $102 = (HEAPU8[$0 + ($$5187 + $90) >> 0] | 0) - $24 | 0;
        HEAP8[$8 + $$7 >> 0] = $102 >>> 31;
        $106 = ($102 | 0) > -1 ? $102 : 0 - $102 | 0;
        $$8 = $$7 + -1 | 0;
        $$8197 = ($106 | 0) < ($$7196 | 0) ? $106 : $$7196;
       } else {
        $$8 = $$7;
        $$8197 = $$7196;
       }
      }
      $$5187 = $$5187 + -1 | 0;
      $$7 = $$8;
      $$7196 = $$8197;
     }
     $$2180 = $$2180 + -1 | 0;
     $$6 = $$7;
     $$6195 = $$7196;
    }
    break;
   }
  case 3:
   {
    $$6188 = 13;
    $$9 = 119;
    $$9198 = 255;
    while (1) {
     if (($$6188 | 0) <= -1) {
      $$12 = $$9198;
      label = 52;
      break L17;
     }
     $$6188$off = $$6188 + -3 | 0;
     $111 = $$6188 & -2;
     $$not233 = ($111 | 0) != 12;
     $112 = ($111 | 0) == 0;
     $$10 = $$9;
     $$10199 = $$9198;
     $$3181 = 0;
     while (1) {
      if (($$3181 | 0) == 14) break;
      if (($$3181 + -3 | $$6188$off) >>> 0 < 8) {
       $$11 = $$10;
       $$11200 = $$10199;
      } else {
       $115 = $$3181 & -2;
       $$not234 = ($115 | 0) != 0;
       if ($$not233 | $$not234) if ($112 & (($115 | 0) == 12 | $$not234 ^ 1)) {
        $$11 = $$10;
        $$11200 = $$10199;
       } else {
        $122 = (HEAPU8[$0 + (($$3181 * 14 | 0) + $$6188) >> 0] | 0) - $24 | 0;
        HEAP8[$8 + $$10 >> 0] = $122 >>> 31;
        $126 = ($122 | 0) > -1 ? $122 : 0 - $122 | 0;
        $$11 = $$10 + -1 | 0;
        $$11200 = ($126 | 0) < ($$10199 | 0) ? $126 : $$10199;
       } else {
        $$11 = $$10;
        $$11200 = $$10199;
       }
      }
      $$10 = $$11;
      $$10199 = $$11200;
      $$3181 = $$3181 + 1 | 0;
     }
     $$6188 = $$6188 + -1 | 0;
     $$9 = $$10;
     $$9198 = $$10199;
    }
    break;
   }
  default:
   {
    HEAP32[$2 >> 2] = $$2184;
    $133 = 1.0;
   }
  } while (0);
  if ((label | 0) == 52) {
   HEAP32[$2 >> 2] = $$2184;
   $133 = ($$12 | 0) > 30 ? 1.0 : +($$12 | 0) / 30.0;
  }
  HEAPF64[$3 >> 3] = $133;
  $134 = _decode_bch(2830, 0, 0, $8, $7) | 0;
  if (($134 | 0) < 0) $$0177 = -4; else {
   if ($4 | 0) HEAP32[$4 >> 2] = $134;
   $137 = $7;
   $142 = HEAP32[$137 + 4 >> 2] | 0;
   $143 = $1;
   HEAP32[$143 >> 2] = HEAP32[$137 >> 2];
   HEAP32[$143 + 4 >> 2] = $142;
   $$0177 = 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0177 | 0;
}

function _arMultiReadConfigFile($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0152 = 0, $$0153 = 0, $$0154 = 0, $$0156 = 0, $$1 = 0, $$sink157 = 0, $$sink158 = 0, $10 = 0, $111 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $4 = 0, $42 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $7 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0.0, $88 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2528);
 $vararg_buffer59 = sp + 208 | 0;
 $vararg_buffer55 = sp + 200 | 0;
 $vararg_buffer49 = sp + 184 | 0;
 $vararg_buffer45 = sp + 176 | 0;
 $vararg_buffer41 = sp + 168 | 0;
 $vararg_buffer35 = sp + 152 | 0;
 $vararg_buffer31 = sp + 144 | 0;
 $vararg_buffer28 = sp + 136 | 0;
 $vararg_buffer24 = sp + 128 | 0;
 $vararg_buffer21 = sp + 120 | 0;
 $vararg_buffer17 = sp + 112 | 0;
 $vararg_buffer13 = sp + 104 | 0;
 $vararg_buffer11 = sp + 96 | 0;
 $vararg_buffer8 = sp + 88 | 0;
 $vararg_buffer5 = sp + 80 | 0;
 $vararg_buffer1 = sp + 72 | 0;
 $vararg_buffer = sp + 64 | 0;
 $2 = sp;
 $3 = sp + 2272 | 0;
 $4 = sp + 224 | 0;
 $5 = sp + 220 | 0;
 $6 = sp + 216 | 0;
 $7 = sp + 212 | 0;
 $8 = _fopen($0, 4622) | 0;
 do if (!$8) {
  HEAP32[$vararg_buffer >> 2] = $0;
  _arLog(3, 4624, $vararg_buffer);
  $10 = ___errno_location() | 0;
  $12 = _strerror(HEAP32[$10 >> 2] | 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 18985;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $12;
  _arLog(3, 4677, $vararg_buffer1);
  $$0156 = 0;
 } else {
  _get_buff($3, $8);
  HEAP32[$vararg_buffer5 >> 2] = $6;
  if ((_sscanf($3, 4683, $vararg_buffer5) | 0) != 1) {
   HEAP32[$vararg_buffer8 >> 2] = $0;
   _arLog(3, 4686, $vararg_buffer8);
   _fclose($8) | 0;
   $$0156 = 0;
   break;
  }
  $15 = HEAP32[$6 >> 2] | 0;
  $17 = _malloc($15 * 320 | 0) | 0;
  if (!$17) {
   _arLog(3, 4787, $vararg_buffer11);
   _exit(1);
  }
  $19 = $2 + 8 | 0;
  $20 = $2 + 16 | 0;
  $21 = $2 + 24 | 0;
  $22 = $2 + 32 | 0;
  $23 = $2 + 40 | 0;
  $24 = $2 + 48 | 0;
  $25 = $2 + 56 | 0;
  $26 = ($1 | 0) == 0;
  $$0153 = 0;
  $$0154 = 0;
  $28 = $15;
  L10 : while (1) {
   if (($$0153 | 0) >= ($28 | 0)) {
    label = 30;
    break;
   }
   _get_buff($3, $8);
   $29 = $17 + ($$0153 * 320 | 0) | 0;
   $30 = $17 + ($$0153 * 320 | 0) + 312 | 0;
   HEAP32[$vararg_buffer13 >> 2] = $30;
   HEAP32[$vararg_buffer13 + 4 >> 2] = $5;
   $33 = $17 + ($$0153 * 320 | 0) + 4 | 0;
   if ((_sscanf($3, 4804, $vararg_buffer13) | 0) == 1) {
    $42 = HEAP32[$30 >> 2] | 0;
    HEAP32[$29 >> 2] = ($42 & -32768 | 0) == 0 & 0 == 0 ? $42 & 32767 : 0;
    $$sink157 = 2;
    $$sink158 = 1;
   } else {
    if ($26) {
     label = 12;
     break;
    }
    if (!(_arUtilGetDirectoryNameFromPath($4, $0, 2048, 1) | 0)) {
     label = 14;
     break;
    }
    _strncat($4, $3, 2047 - (_strlen($4) | 0) | 0) | 0;
    $38 = _arPattLoad($1, $4) | 0;
    HEAP32[$29 >> 2] = $38;
    if (($38 | 0) < 0) {
     label = 16;
     break;
    } else {
     $$sink157 = 1;
     $$sink158 = 0;
    }
   }
   HEAP32[$33 >> 2] = $$sink158;
   $51 = $$sink157 | $$0154;
   _get_buff($3, $8);
   $52 = $17 + ($$0153 * 320 | 0) + 8 | 0;
   HEAP32[$vararg_buffer28 >> 2] = $52;
   $55 = $$0153 + 1 | 0;
   if ((_sscanf($3, 5100, $vararg_buffer28) | 0) != 1) {
    label = 19;
    break;
   }
   _get_buff($3, $8);
   $56 = $17 + ($$0153 * 320 | 0) + 16 | 0;
   $57 = $17 + ($$0153 * 320 | 0) + 24 | 0;
   $59 = $17 + ($$0153 * 320 | 0) + 40 | 0;
   HEAP32[$vararg_buffer35 >> 2] = $56;
   HEAP32[$vararg_buffer35 + 4 >> 2] = $57;
   HEAP32[$vararg_buffer35 + 8 >> 2] = $17 + ($$0153 * 320 | 0) + 32;
   HEAP32[$vararg_buffer35 + 12 >> 2] = $59;
   if ((_sscanf($3, 5209, $vararg_buffer35) | 0) == 4) $$0152 = 1; else {
    HEAP32[$vararg_buffer41 >> 2] = $vararg_buffer5;
    HEAP32[$vararg_buffer41 + 4 >> 2] = $7;
    if ((_sscanf($3, 5225, $vararg_buffer41) | 0) != 2) {
     label = 23;
     break;
    }
    $$0152 = 0;
   }
   do {
    _get_buff($3, $8);
    HEAP32[$vararg_buffer49 >> 2] = $17 + ($$0153 * 320 | 0) + 16 + ($$0152 << 5);
    HEAP32[$vararg_buffer49 + 4 >> 2] = $17 + ($$0153 * 320 | 0) + 16 + ($$0152 << 5) + 8;
    HEAP32[$vararg_buffer49 + 8 >> 2] = $17 + ($$0153 * 320 | 0) + 16 + ($$0152 << 5) + 16;
    HEAP32[$vararg_buffer49 + 12 >> 2] = $17 + ($$0153 * 320 | 0) + 16 + ($$0152 << 5) + 24;
    if ((_sscanf($3, 5209, $vararg_buffer49) | 0) != 4) {
     label = 25;
     break L10;
    }
    $$0152 = $$0152 + 1 | 0;
   } while (($$0152 | 0) < 3);
   _arUtilMatInv($56, $17 + ($$0153 * 320 | 0) + 112 | 0) | 0;
   $73 = +HEAPF64[$52 >> 3];
   $74 = $73 * -.5;
   HEAPF64[$2 >> 3] = $74;
   $75 = $73 * .5;
   HEAPF64[$19 >> 3] = $75;
   HEAPF64[$20 >> 3] = $75;
   HEAPF64[$21 >> 3] = $75;
   HEAPF64[$22 >> 3] = $75;
   HEAPF64[$23 >> 3] = $74;
   HEAPF64[$24 >> 3] = $74;
   HEAPF64[$25 >> 3] = $74;
   $76 = $17 + ($$0153 * 320 | 0) + 48 | 0;
   $77 = $17 + ($$0153 * 320 | 0) + 56 | 0;
   $78 = $17 + ($$0153 * 320 | 0) + 72 | 0;
   $79 = $17 + ($$0153 * 320 | 0) + 80 | 0;
   $80 = $17 + ($$0153 * 320 | 0) + 88 | 0;
   $81 = $17 + ($$0153 * 320 | 0) + 104 | 0;
   $$1 = 0;
   while (1) {
    if (($$1 | 0) == 4) break;
    $84 = +HEAPF64[$2 + ($$1 << 4) >> 3];
    $88 = +HEAPF64[$2 + ($$1 << 4) + 8 >> 3];
    HEAPF64[$17 + ($$0153 * 320 | 0) + 208 + ($$1 * 24 | 0) >> 3] = +HEAPF64[$59 >> 3] + (+HEAPF64[$56 >> 3] * $84 + +HEAPF64[$57 >> 3] * $88);
    HEAPF64[$17 + ($$0153 * 320 | 0) + 208 + ($$1 * 24 | 0) + 8 >> 3] = +HEAPF64[$78 >> 3] + ($84 * +HEAPF64[$76 >> 3] + $88 * +HEAPF64[$77 >> 3]);
    HEAPF64[$17 + ($$0153 * 320 | 0) + 208 + ($$1 * 24 | 0) + 16 >> 3] = +HEAPF64[$81 >> 3] + ($84 * +HEAPF64[$79 >> 3] + $88 * +HEAPF64[$80 >> 3]);
    $$1 = $$1 + 1 | 0;
   }
   $$0153 = $55;
   $$0154 = $51;
   $28 = HEAP32[$6 >> 2] | 0;
  }
  if ((label | 0) == 12) {
   HEAP32[$vararg_buffer17 >> 2] = $0;
   HEAP32[$vararg_buffer17 + 4 >> 2] = $3;
   _arLog(3, 4811, $vararg_buffer17);
  } else if ((label | 0) == 14) {
   HEAP32[$vararg_buffer21 >> 2] = $0;
   _arLog(3, 4939, $vararg_buffer21);
  } else if ((label | 0) == 16) {
   HEAP32[$vararg_buffer24 >> 2] = $0;
   HEAP32[$vararg_buffer24 + 4 >> 2] = $4;
   _arLog(3, 5023, $vararg_buffer24);
  } else if ((label | 0) == 19) {
   HEAP32[$vararg_buffer31 >> 2] = $0;
   HEAP32[$vararg_buffer31 + 4 >> 2] = $55;
   _arLog(3, 5104, $vararg_buffer31);
  } else if ((label | 0) == 23) {
   HEAP32[$vararg_buffer45 >> 2] = $0;
   HEAP32[$vararg_buffer45 + 4 >> 2] = $55;
   _arLog(3, 5231, $vararg_buffer45);
  } else if ((label | 0) == 25) {
   HEAP32[$vararg_buffer55 >> 2] = $0;
   HEAP32[$vararg_buffer55 + 4 >> 2] = $55;
   _arLog(3, 5231, $vararg_buffer55);
  } else if ((label | 0) == 30) {
   _fclose($8) | 0;
   $111 = _malloc(136) | 0;
   if (!$111) {
    _arLog(3, 4787, $vararg_buffer59);
    _exit(1);
   } else {
    HEAP32[$111 >> 2] = $17;
    HEAP32[$111 + 4 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$111 + 104 >> 2] = 0;
    HEAP32[$111 + 108 >> 2] = ($$0154 & 3 | 0) == 3 ? 2 : $$0154 & 1 ^ 1;
    HEAPF64[$111 + 112 >> 3] = .5;
    HEAPF64[$111 + 120 >> 3] = .5;
    $$0156 = $111;
    break;
   }
  }
  _fclose($8) | 0;
  _free($17);
  $$0156 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0156 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$067 = 0, $$069 = 0, $$083 = 0, $$3 = 0, $$pre = 0, $$sroa$0$0$$sroa_idx$i85 = 0, $$sroa$0$0$copyload$i86100 = 0, $101 = 0, $102 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $13 = 0, $130 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $36 = 0, $4 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $67 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 do if (($1 - $0 | 0) > 1) if ((HEAP8[$0 >> 0] | 0) == 73) {
  $13 = $2 + 61 | 0;
  $16 = $2 + 32 | 0;
  $$pre = $2 + 36 | 0;
  L4 : do if (HEAP8[$13 >> 0] | 0) {
   $17 = HEAP32[$$pre >> 2] | 0;
   $19 = HEAP32[$17 + -16 >> 2] | 0;
   $20 = $17 + -12 | 0;
   while (1) {
    $21 = HEAP32[$20 >> 2] | 0;
    if (($21 | 0) == ($19 | 0)) break L4;
    $23 = $21 + -16 | 0;
    HEAP32[$20 >> 2] = $23;
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($23);
   }
  } while (0);
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($4, 15083, __ZNSt3__211char_traitsIcE6lengthEPKc(15083) | 0);
  $26 = $2 + 4 | 0;
  $$sroa$0$0$$sroa_idx$i85 = $2 + 12 | 0;
  $27 = $4 + 11 | 0;
  $28 = $4 + 4 | 0;
  $29 = $3 + 11 | 0;
  $30 = $3 + 4 | 0;
  $31 = $2 + 40 | 0;
  $$083 = $0 + 1 | 0;
  L10 : while (1) {
   if ((HEAP8[$$083 >> 0] | 0) == 69) break;
   if (HEAP8[$13 >> 0] | 0) {
    HEAP32[$5 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i85 >> 2];
    $36 = HEAP32[$$pre >> 2] | 0;
    if ($36 >>> 0 < (HEAP32[$31 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($3, $5);
     HEAP32[$36 >> 2] = 0;
     HEAP32[$36 + 4 >> 2] = 0;
     $41 = HEAP32[$3 >> 2] | 0;
     HEAP32[$36 + 8 >> 2] = 0;
     HEAP32[$36 + 12 >> 2] = $41;
     HEAP32[$$pre >> 2] = (HEAP32[$$pre >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($16, $5);
   }
   $48 = ((HEAP32[$26 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $49 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$083, $1, $2) | 0;
   $53 = ((HEAP32[$26 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   L20 : do if (HEAP8[$13 >> 0] | 0) {
    $56 = HEAP32[$$pre >> 2] | 0;
    $57 = $56 + -16 | 0;
    $59 = $56;
    while (1) {
     if (($59 | 0) == ($57 | 0)) break L20;
     $60 = $59 + -16 | 0;
     HEAP32[$$pre >> 2] = $60;
     __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($60);
     $59 = HEAP32[$$pre >> 2] | 0;
    }
   } while (0);
   if (($49 | 0) == ($$083 | 0) | ($49 | 0) == ($1 | 0)) {
    label = 48;
    break;
   }
   L27 : do if (!(HEAP8[$13 >> 0] | 0)) $$0 = $48; else {
    $65 = HEAP32[$$pre >> 2] | 0;
    $$sroa$0$0$copyload$i86100 = HEAP32[$$sroa$0$0$$sroa_idx$i85 >> 2] | 0;
    HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i86100;
    $66 = $65 + -12 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    if ($67 >>> 0 < (HEAP32[$65 + -8 >> 2] | 0) >>> 0) {
     HEAP32[$67 >> 2] = 0;
     HEAP32[$67 + 4 >> 2] = 0;
     HEAP32[$67 + 8 >> 2] = 0;
     HEAP32[$67 + 12 >> 2] = $$sroa$0$0$copyload$i86100;
     HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($65 + -16 | 0, $3);
    $$067 = $48;
    while (1) {
     if ($$067 >>> 0 >= $53 >>> 0) {
      $$0 = $48;
      break L27;
     }
     $80 = HEAP32[(HEAP32[$$pre >> 2] | 0) + -12 >> 2] | 0;
     $82 = (HEAP32[$2 >> 2] | 0) + ($$067 * 24 | 0) | 0;
     $83 = $80 + -12 | 0;
     $84 = HEAP32[$83 >> 2] | 0;
     if (($84 | 0) == (HEAP32[$80 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($80 + -16 | 0, $82); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($84, $82);
      HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + 24;
     }
     $$067 = $$067 + 1 | 0;
    }
   } while (0);
   while (1) {
    if ($$0 >>> 0 >= $53 >>> 0) {
     $$069 = $53;
     break;
    }
    $93 = HEAP8[$27 >> 0] | 0;
    if (($93 << 24 >> 24 < 0 ? HEAP32[$28 >> 2] | 0 : $93 & 255) >>> 0 > 1) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15271) | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, (HEAP32[$2 >> 2] | 0) + ($$0 * 24 | 0) | 0);
    $101 = HEAP8[$29 >> 0] | 0;
    $102 = $101 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, $102 ? HEAP32[$3 >> 2] | 0 : $3, $102 ? HEAP32[$30 >> 2] | 0 : $101 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$0 = $$0 + 1 | 0;
   }
   while (1) {
    if (($$069 | 0) == ($48 | 0)) {
     $$083 = $49;
     continue L10;
    }
    $110 = HEAP32[$26 >> 2] | 0;
    $111 = $110 + -24 | 0;
    $113 = $110;
    while (1) {
     if (($113 | 0) == ($111 | 0)) break;
     $114 = $113 + -24 | 0;
     HEAP32[$26 >> 2] = $114;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($114);
     $113 = HEAP32[$26 >> 2] | 0;
    }
    $$069 = $$069 + -1 | 0;
   }
  }
  if ((label | 0) == 48) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   $$3 = $0;
   break;
  }
  $116 = $$083 + 1 | 0;
  $117 = HEAP8[$27 >> 0] | 0;
  $118 = $117 << 24 >> 24 < 0;
  if ((HEAP8[($118 ? HEAP32[$4 >> 2] | 0 : $4) + ($118 ? HEAP32[$28 >> 2] | 0 : $117 & 255) + -1 >> 0] | 0) == 62) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 16462) | 0; else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15085) | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $$0$i$i = 0;
  while (1) {
   if (($$0$i$i | 0) == 3) break;
   HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
   $$0$i$i = $$0$i$i + 1 | 0;
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $6);
  $130 = HEAP32[$26 >> 2] | 0;
  if ($130 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($130, $3);
   HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + 24;
  } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
  $$3 = $116;
 } else $$3 = $0; else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _pattern_match($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0.0, $$0173 = 0, $$0175 = 0, $$0179 = 0, $$0181 = 0, $$0187 = 0, $$0195 = 0, $$0203 = 0, $$0205 = 0, $$0209 = 0, $$1 = 0.0, $$1174 = 0, $$1176 = 0, $$1176$in = 0, $$1180 = 0, $$1182 = 0, $$1188 = 0, $$1196 = 0, $$1204 = 0, $$1206 = 0, $$2177 = 0, $$2183 = 0, $$2197 = 0, $$2207 = 0, $$3 = 0.0, $$3178 = 0, $$3178$in = 0, $$3184 = 0, $$3190 = 0, $$3198 = 0, $$3208 = 0, $$4 = 0.0, $$4185 = 0, $$4191 = 0, $$4199 = 0, $$5 = 0.0, $$5186 = 0, $$5192 = 0, $$5200 = 0, $$6201 = 0, $$7 = 0.0, $$7194 = 0, $$7202 = 0, $10 = 0.0, $100 = 0, $11 = 0, $117 = 0.0, $118 = 0, $13 = 0, $20 = 0, $22 = 0, $28 = 0, $34 = 0.0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $63 = 0.0, $64 = 0, $68 = 0, $77 = 0, $8 = 0, $83 = 0, $89 = 0.0, $9 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (!$0) {
  HEAP32[$4 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  HEAPF64[$6 >> 3] = -1.0;
  $$0209 = -1;
 } else {
  $8 = Math_imul($3, $3) | 0;
  $9 = $0 + 8 | 0;
  $10 = +($3 | 0);
  switch ($1 | 0) {
  case 0:
   {
    $11 = $8 * 3 | 0;
    $13 = _malloc($8 * 12 | 0) | 0;
    if (!$13) {
     _arLog(3, 4787, $vararg_buffer);
     _exit(1);
    } else {
     $$0181 = 0;
     $$0203 = 0;
    }
    while (1) {
     if (($$0181 | 0) >= ($11 | 0)) break;
     $20 = (~HEAP8[$2 + $$0181 >> 0] & 255) + $$0203 | 0;
     $$0181 = $$0181 + 1 | 0;
     $$0203 = $20;
    }
    $22 = ($$0203 | 0) / ($11 | 0) | 0;
    $$0205 = 0;
    $$1182 = 0;
    while (1) {
     if (($$1182 | 0) >= ($11 | 0)) break;
     $28 = (~HEAP8[$2 + $$1182 >> 0] & 255) - $22 | 0;
     HEAP32[$13 + ($$1182 << 2) >> 2] = $28;
     $$0205 = (Math_imul($28, $28) | 0) + $$0205 | 0;
     $$1182 = $$1182 + 1 | 0;
    }
    $34 = +Math_sqrt(+(+($$0205 | 0)));
    if ($34 / ($10 * 1.7320508) < 15.0) {
     HEAP32[$4 >> 2] = 0;
     HEAP32[$5 >> 2] = 0;
     HEAPF64[$6 >> 3] = -1.0;
     _free($13);
     $$0209 = -2;
     break L1;
    }
    $38 = HEAP32[$0 >> 2] | 0;
    $39 = $0 + 12 | 0;
    $40 = $0 + 16 | 0;
    $$0 = 0.0;
    $$0173 = 0;
    $$0175 = -1;
    $$0187 = -1;
    $$0195 = -1;
    while (1) {
     if (($$0173 | 0) >= ($38 | 0)) break;
     $42 = HEAP32[$9 >> 2] | 0;
     $$1176$in = $$0175;
     L22 : while (1) {
      $$1176 = $$1176$in + 1 | 0;
      switch (HEAP32[$42 + ($$1176 << 2) >> 2] | 0) {
      case 0:
       {
        $$1176$in = $$1176;
        break;
       }
      case 2:
       {
        $$3 = $$0;
        $$3190 = $$0187;
        $$3198 = $$0195;
        break L22;
        break;
       }
      default:
       {
        label = 17;
        break L22;
       }
      }
     }
     L24 : do if ((label | 0) == 17) {
      label = 0;
      $45 = $$1176 << 2;
      $$0179 = 0;
      $$1 = $$0;
      $$1188 = $$0187;
      $$1196 = $$0195;
      while (1) {
       if (($$0179 | 0) == 4) {
        $$3 = $$1;
        $$3190 = $$1188;
        $$3198 = $$1196;
        break L24;
       }
       $46 = $$0179 + $45 | 0;
       $$1206 = 0;
       $$2183 = 0;
       while (1) {
        if (($$2183 | 0) >= ($11 | 0)) break;
        $$1206 = (Math_imul(HEAP32[(HEAP32[(HEAP32[$39 >> 2] | 0) + ($46 << 2) >> 2] | 0) + ($$2183 << 2) >> 2] | 0, HEAP32[$13 + ($$2183 << 2) >> 2] | 0) | 0) + $$1206 | 0;
        $$2183 = $$2183 + 1 | 0;
       }
       $63 = +($$1206 | 0) / +HEAPF64[(HEAP32[$40 >> 2] | 0) + ($46 << 3) >> 3] / $34;
       $64 = $63 > $$1;
       $$2197 = $64 ? $$0179 : $$1196;
       $$0179 = $$0179 + 1 | 0;
       $$1 = $64 ? $63 : $$1;
       $$1188 = $64 ? $$1176 : $$1188;
       $$1196 = $$2197;
      }
     } while (0);
     $$0 = $$3;
     $$0173 = $$0173 + 1 | 0;
     $$0175 = $$1176;
     $$0187 = $$3190;
     $$0195 = $$3198;
    }
    HEAP32[$5 >> 2] = $$0195;
    HEAP32[$4 >> 2] = $$0187;
    HEAPF64[$6 >> 3] = $$0;
    _free($13);
    $$0209 = 0;
    break L1;
    break;
   }
  case 1:
   {
    $68 = _malloc($8 << 2) | 0;
    if (!$68) {
     _arLog(3, 4787, $vararg_buffer1);
     _exit(1);
    } else {
     $$1204 = 0;
     $$3184 = 0;
    }
    while (1) {
     if (($$3184 | 0) >= ($8 | 0)) break;
     $$1204 = (~HEAP8[$2 + $$3184 >> 0] & 255) + $$1204 | 0;
     $$3184 = $$3184 + 1 | 0;
    }
    $77 = ($$1204 | 0) / ($8 | 0) | 0;
    $$2207 = 0;
    $$4185 = 0;
    while (1) {
     if (($$4185 | 0) >= ($8 | 0)) break;
     $83 = (~HEAP8[$2 + $$4185 >> 0] & 255) - $77 | 0;
     HEAP32[$68 + ($$4185 << 2) >> 2] = $83;
     $$2207 = (Math_imul($83, $83) | 0) + $$2207 | 0;
     $$4185 = $$4185 + 1 | 0;
    }
    $89 = +Math_sqrt(+(+($$2207 | 0)));
    if ($89 / $10 < 15.0) {
     HEAP32[$4 >> 2] = 0;
     HEAP32[$5 >> 2] = 0;
     HEAPF64[$6 >> 3] = -1.0;
     _free($68);
     $$0209 = -2;
     break L1;
    }
    $92 = HEAP32[$0 >> 2] | 0;
    $93 = $0 + 20 | 0;
    $94 = $0 + 24 | 0;
    $$1174 = 0;
    $$2177 = -1;
    $$4 = 0.0;
    $$4191 = -1;
    $$4199 = -1;
    while (1) {
     if (($$1174 | 0) >= ($92 | 0)) break;
     $96 = HEAP32[$9 >> 2] | 0;
     $$3178$in = $$2177;
     L52 : while (1) {
      $$3178 = $$3178$in + 1 | 0;
      switch (HEAP32[$96 + ($$3178 << 2) >> 2] | 0) {
      case 0:
       {
        $$3178$in = $$3178;
        break;
       }
      case 2:
       {
        $$7 = $$4;
        $$7194 = $$4191;
        $$7202 = $$4199;
        break L52;
        break;
       }
      default:
       {
        label = 38;
        break L52;
       }
      }
     }
     L54 : do if ((label | 0) == 38) {
      label = 0;
      $99 = $$3178 << 2;
      $$1180 = 0;
      $$5 = $$4;
      $$5192 = $$4191;
      $$5200 = $$4199;
      while (1) {
       if (($$1180 | 0) == 4) {
        $$7 = $$5;
        $$7194 = $$5192;
        $$7202 = $$5200;
        break L54;
       }
       $100 = $$1180 + $99 | 0;
       $$3208 = 0;
       $$5186 = 0;
       while (1) {
        if (($$5186 | 0) >= ($8 | 0)) break;
        $$3208 = (Math_imul(HEAP32[(HEAP32[(HEAP32[$93 >> 2] | 0) + ($100 << 2) >> 2] | 0) + ($$5186 << 2) >> 2] | 0, HEAP32[$68 + ($$5186 << 2) >> 2] | 0) | 0) + $$3208 | 0;
        $$5186 = $$5186 + 1 | 0;
       }
       $117 = +($$3208 | 0) / +HEAPF64[(HEAP32[$94 >> 2] | 0) + ($100 << 3) >> 3] / $89;
       $118 = $117 > $$5;
       $$6201 = $118 ? $$1180 : $$5200;
       $$1180 = $$1180 + 1 | 0;
       $$5 = $118 ? $117 : $$5;
       $$5192 = $118 ? $$3178 : $$5192;
       $$5200 = $$6201;
      }
     } while (0);
     $$1174 = $$1174 + 1 | 0;
     $$2177 = $$3178;
     $$4 = $$7;
     $$4191 = $$7194;
     $$4199 = $$7202;
    }
    HEAP32[$5 >> 2] = $$4199;
    HEAP32[$4 >> 2] = $$4191;
    HEAPF64[$6 >> 3] = $$4;
    _free($68);
    $$0209 = 0;
    break L1;
    break;
   }
  default:
   {
    $$0209 = -1;
    break L1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0209 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$i57 = 0, $$0$i$i$i61 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $80 = 0, $81 = 0, $88 = 0, $89 = 0, $9 = 0, $97 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $4 = sp + 84 | 0;
 $5 = sp + 72 | 0;
 $6 = sp + 60 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 $12 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $3) | 0;
 L1 : do if (($12 | 0) == ($0 | 0)) $$1 = $0; else {
  $14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12, $1, $3) | 0;
  $16 = $3 + 4 | 0;
  if (($14 | 0) == ($12 | 0)) {
   $97 = HEAP32[$16 >> 2] | 0;
   $98 = $97 + -24 | 0;
   $100 = $97;
   while (1) {
    if (($100 | 0) == ($98 | 0)) {
     $$1 = $0;
     break L1;
    }
    $101 = $100 + -24 | 0;
    HEAP32[$16 >> 2] = $101;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($101);
    $100 = HEAP32[$16 >> 2] | 0;
   }
  }
  $17 = HEAP32[$16 >> 2] | 0;
  if ((($17 - (HEAP32[$3 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$1 = $0; else {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $17 + -24 | 0);
   $24 = HEAP32[$16 >> 2] | 0;
   $25 = $24 + -24 | 0;
   $27 = $24;
   while (1) {
    if (($27 | 0) == ($25 | 0)) break;
    $28 = $27 + -24 | 0;
    HEAP32[$16 >> 2] = $28;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
    $27 = HEAP32[$16 >> 2] | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $24 + -48 | 0);
   $30 = HEAP32[$16 >> 2] | 0;
   $31 = $30 + -24 | 0;
   $32 = $31 + 11 | 0;
   if ((HEAP8[$32 >> 0] | 0) < 0) {
    $35 = HEAP32[$31 >> 2] | 0;
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($35, $4);
    HEAP32[$30 + -20 >> 2] = 0;
   } else {
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($31, $4);
    HEAP8[$32 >> 0] = 0;
   }
   $37 = __ZNSt3__211char_traitsIcE6lengthEPKc(15085) | 0;
   $38 = $2 + 11 | 0;
   $39 = HEAP8[$38 >> 0] | 0;
   $41 = $2 + 4 | 0;
   if (($37 | 0) == (($39 << 24 >> 24 < 0 ? HEAP32[$41 >> 2] | 0 : $39 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($2, 15085, $37) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($31, 40);
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($11, 15049, $6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($11, 15335) | 0;
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   $51 = HEAP8[$38 >> 0] | 0;
   $52 = $51 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($10, $52 ? HEAP32[$2 >> 2] | 0 : $2, $52 ? HEAP32[$41 >> 2] | 0 : $51 & 255) | 0;
   HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
   HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
   $$0$i$i$i50 = 0;
   while (1) {
    if (($$0$i$i$i50 | 0) == 3) break;
    HEAP32[$10 + ($$0$i$i$i50 << 2) >> 2] = 0;
    $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9, 15044) | 0;
   HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   $$0$i$i$i53 = 0;
   while (1) {
    if (($$0$i$i$i53 | 0) == 3) break;
    HEAP32[$9 + ($$0$i$i$i53 << 2) >> 2] = 0;
    $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
   }
   $65 = HEAP8[$5 + 11 >> 0] | 0;
   $66 = $65 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8, $66 ? HEAP32[$5 >> 2] | 0 : $5, $66 ? HEAP32[$5 + 4 >> 2] | 0 : $65 & 255) | 0;
   HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
   $$0$i$i$i57 = 0;
   while (1) {
    if (($$0$i$i$i57 | 0) == 3) break;
    HEAP32[$8 + ($$0$i$i$i57 << 2) >> 2] = 0;
    $$0$i$i$i57 = $$0$i$i$i57 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 15047) | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $$0$i$i$i61 = 0;
   while (1) {
    if (($$0$i$i$i61 | 0) == 3) break;
    HEAP32[$7 + ($$0$i$i$i61 << 2) >> 2] = 0;
    $$0$i$i$i61 = $$0$i$i$i61 + 1 | 0;
   }
   $80 = HEAP8[$4 + 11 >> 0] | 0;
   $81 = $80 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($31, $81 ? HEAP32[$4 >> 2] | 0 : $4, $81 ? HEAP32[$4 + 4 >> 2] | 0 : $80 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
   $88 = __ZNSt3__211char_traitsIcE6lengthEPKc(15085) | 0;
   $89 = HEAP8[$38 >> 0] | 0;
   if (($88 | 0) == (($89 << 24 >> 24 < 0 ? HEAP32[$41 >> 2] | 0 : $89 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($2, 15085, $88) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($31, 41);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $$1 = $14;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5408, 7);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5414, 3);
 __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5423, 2);
 __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5434, 3);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5450, 4);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5468, 4);
 __ZN10emscripten8functionIiJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5488, 5);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5500, 8);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5517, 5);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5537, 9);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5555, 10);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5577, 6);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5600, 7);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5629, 6);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5642, 7);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5655, 11);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5674, 8);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5684, 9);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5697, 8);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5710, 9);
 __ZN10emscripten8functionIvJiEJEEEvPKcPFT_DpT0_EDpT1_(5729, 12);
 __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_(5741, 1);
 __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_(5753, 1);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(5776, 1);
 __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_(5799, 2);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(5821, 2);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(5843, 1);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5860, 10);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(5877, 2);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5890, 11);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(5903, 3);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5927, 12);
 __ZN10emscripten8functionIvJifEJEEEvPKcPFT_DpT0_EDpT1_(5951, 3);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(5964, 3);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(5977, 4);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5995, 13);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6013, 5);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6029, 14);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6045, 6);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6062, 15);
 __ZN10emscripten8constantIiEEvPKcRKT_(6079, 1668);
 __ZN10emscripten8constantIiEEvPKcRKT_(6108, 1672);
 __ZN10emscripten8constantIiEEvPKcRKT_(6136, 1676);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6169, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6186, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6202, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6224, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6249, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6274, $1);
 HEAP32[$1 >> 2] = 100;
 __ZN10emscripten8constantIiEEvPKcRKT_(6299, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6326, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6352, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6378, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6405, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6432, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6458, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(6483, $1);
 HEAP32[$1 >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(6521, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6558, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6592, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6616, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6642, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6669, $1);
 HEAP32[$1 >> 2] = 5;
 __ZN10emscripten8constantIiEEvPKcRKT_(6703, $1);
 HEAPF64[$1 >> 3] = .5;
 __ZN10emscripten8constantIdEEvPKcRKT_(6721, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6742, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6761, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6779, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(6797, $1);
 HEAP32[$1 >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(6816, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(6838, $1);
 HEAP32[$1 >> 2] = 515;
 __ZN10emscripten8constantIiEEvPKcRKT_(6857, $1);
 HEAP32[$1 >> 2] = 259;
 __ZN10emscripten8constantIiEEvPKcRKT_(6886, $1);
 HEAP32[$1 >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(6914, $1);
 HEAP32[$1 >> 2] = 772;
 __ZN10emscripten8constantIiEEvPKcRKT_(6933, $1);
 HEAP32[$1 >> 2] = 1028;
 __ZN10emscripten8constantIiEEvPKcRKT_(6963, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6993, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(7024, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(7060, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(7094, $1);
 HEAP32[$1 >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(7132, $1);
 HEAP32[$1 >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(7165, $1);
 HEAP32[$1 >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(7212, $1);
 HEAP32[$1 >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(7254, $1);
 HEAP32[$1 >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(7297, $1);
 HEAP32[$1 >> 2] = 5;
 __ZN10emscripten8constantIiEEvPKcRKT_(7349, $1);
 HEAP32[$1 >> 2] = 6;
 __ZN10emscripten8constantIiEEvPKcRKT_(7400, $1);
 HEAP32[$1 >> 2] = 7;
 __ZN10emscripten8constantIiEEvPKcRKT_(7445, $1);
 HEAP32[$1 >> 2] = 8;
 __ZN10emscripten8constantIiEEvPKcRKT_(7484, $1);
 HEAP32[$1 >> 2] = 9;
 __ZN10emscripten8constantIiEEvPKcRKT_(7529, $1);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$072 = 0, $$1 = 0, $$174 = 0, $$sroa$0103$0 = 0, $$sroa$097$0 = 0, $100 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $43 = 0, $44 = 0, $50 = 0, $51 = 0, $57 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $77 = 0, $78 = 0, $79 = 0, $85 = 0, $88 = 0, $92 = 0, $96 = 0, $97 = 0, $98 = 0, $isdigit = 0, $isdigit81 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp;
 L1 : do if (($1 - $0 | 0) > 1) if ((HEAP8[$0 >> 0] | 0) == 83) {
  $12 = HEAP8[$0 + 1 >> 0] | 0;
  $13 = $0 + 2 | 0;
  $14 = $2 + 16 | 0;
  switch ($12 | 0) {
  case 97:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3, 16375);
    $15 = $2 + 4 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    if ($16 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16, $3);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $13;
    break L1;
    break;
   }
  case 98:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($3, 16390);
    $22 = $2 + 4 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    if ($23 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($23, $3);
     HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $13;
    break L1;
    break;
   }
  case 115:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3, 15869);
    $29 = $2 + 4 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    if ($30 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($30, $3);
     HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $13;
    break L1;
    break;
   }
  case 105:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 15965);
    $36 = $2 + 4 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    if ($37 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($37, $3);
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $13;
    break L1;
    break;
   }
  case 111:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 16042);
    $43 = $2 + 4 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    if ($44 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($44, $3);
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $13;
    break L1;
    break;
   }
  case 100:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($3, 16119);
    $50 = $2 + 4 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    if ($51 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($51, $3);
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $13;
    break L1;
    break;
   }
  case 95:
   {
    $57 = HEAP32[$14 >> 2] | 0;
    if (($57 | 0) == (HEAP32[$2 + 20 >> 2] | 0)) {
     $$1 = $0;
     break L1;
    }
    $63 = HEAP32[$57 + 4 >> 2] | 0;
    $64 = $2 + 4 | 0;
    $65 = $2 + 8 | 0;
    $$sroa$0103$0 = HEAP32[$57 >> 2] | 0;
    while (1) {
     if (($$sroa$0103$0 | 0) == ($63 | 0)) {
      $$1 = $13;
      break L1;
     }
     $67 = HEAP32[$64 >> 2] | 0;
     if (($67 | 0) == (HEAP32[$65 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$0103$0); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($67, $$sroa$0103$0);
      HEAP32[$64 >> 2] = (HEAP32[$64 >> 2] | 0) + 24;
     }
     $$sroa$0103$0 = $$sroa$0103$0 + 24 | 0;
    }
    break;
   }
  default:
   {
    $isdigit = ($12 + -48 | 0) >>> 0 < 10;
    if (!$isdigit) if (!(_isupper($12) | 0)) {
     $$1 = $0;
     break L1;
    }
    $$072 = $13;
    $$174 = ($isdigit ? -48 : -55) + $12 | 0;
    while (1) {
     $77 = $$072 + 1 | 0;
     if (($$072 | 0) == ($1 | 0)) {
      $$1 = $0;
      break L1;
     }
     $78 = HEAP8[$$072 >> 0] | 0;
     $79 = $78 << 24 >> 24;
     $isdigit81 = ($79 + -48 | 0) >>> 0 < 10;
     if (!$isdigit81) if (!(_isupper($79) | 0)) break;
     $$072 = $77;
     $$174 = $79 + ($$174 * 36 | 0) + ($isdigit81 ? -48 : -55) | 0;
    }
    if ($78 << 24 >> 24 != 95) {
     $$1 = $0;
     break L1;
    }
    $85 = $$174 + 1 | 0;
    $88 = HEAP32[$14 >> 2] | 0;
    $92 = $88;
    if ($85 >>> 0 >= (HEAP32[$2 + 20 >> 2] | 0) - $88 >> 4 >>> 0) {
     $$1 = $0;
     break L1;
    }
    $96 = HEAP32[$92 + ($85 << 4) + 4 >> 2] | 0;
    $97 = $2 + 4 | 0;
    $98 = $2 + 8 | 0;
    $$sroa$097$0 = HEAP32[$92 + ($85 << 4) >> 2] | 0;
    while (1) {
     if (($$sroa$097$0 | 0) == ($96 | 0)) {
      $$1 = $77;
      break L1;
     }
     $100 = HEAP32[$97 >> 2] | 0;
     if (($100 | 0) == (HEAP32[$98 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$097$0); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($100, $$sroa$097$0);
      HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + 24;
     }
     $$sroa$097$0 = $$sroa$097$0 + 24 | 0;
    }
   }
  }
 } else $$1 = $0; else $$1 = $0; while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _icpPointRobust($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$0 = 0, $$0205 = 0, $$0207 = 0, $$0209 = 0.0, $$0211 = 0.0, $$0212 = 0, $$0213 = 0.0, $$1 = 0, $$1206 = 0, $$1208 = 0, $$2 = 0, $$3 = 0, $$pn = 0.0, $$pre = 0, $100 = 0, $106 = 0.0, $107 = 0.0, $111 = 0, $115 = 0, $119 = 0, $123 = 0, $127 = 0, $131 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $151 = 0, $154 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $41 = 0, $47 = 0, $5 = 0, $51 = 0.0, $55 = 0.0, $56 = 0, $6 = 0, $62 = 0.0, $67 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $73 = 0.0, $76 = 0.0, $8 = 0, $83 = 0.0, $9 = 0, $95 = 0, $97 = 0.0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $vararg_buffer5 = sp + 184 | 0;
 $vararg_buffer3 = sp + 176 | 0;
 $vararg_buffer1 = sp + 168 | 0;
 $vararg_buffer = sp + 160 | 0;
 $5 = sp + 144 | 0;
 $6 = sp + 48 | 0;
 $7 = sp;
 $8 = $1 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 do if (($9 | 0) < 4) $$0212 = -1; else {
  $16 = ~~(+($9 | 0) * +HEAPF64[$0 + 128 >> 3]) + -1 | 0;
  $$ = ($16 | 0) > 3 ? $16 : 3;
  $19 = _malloc($9 * 96 | 0) | 0;
  if (!$19) {
   _arLog(3, 4425, $vararg_buffer);
   $$0212 = -1;
   break;
  }
  $22 = _malloc($9 << 4) | 0;
  if (!$22) {
   _arLog(3, 4425, $vararg_buffer1);
   _free($19);
   $$0212 = -1;
   break;
  }
  $24 = $9 << 3;
  $25 = _malloc($24) | 0;
  if (!$25) {
   _arLog(3, 4425, $vararg_buffer3);
   _free($19);
   _free($22);
   $$0212 = -1;
   break;
  }
  $27 = _malloc($24) | 0;
  if (!$27) {
   _arLog(3, 4425, $vararg_buffer5);
   _free($19);
   _free($22);
   _free($25);
   $$0212 = -1;
   break;
  } else $$0205 = 0;
  while (1) {
   if (($$0205 | 0) == 3) break; else $$0207 = 0;
   while (1) {
    if (($$0207 | 0) == 4) break;
    HEAPF64[$3 + ($$0205 << 5) + ($$0207 << 3) >> 3] = +HEAPF64[$2 + ($$0205 << 5) + ($$0207 << 3) >> 3];
    $$0207 = $$0207 + 1 | 0;
   }
   $$0205 = $$0205 + 1 | 0;
  }
  $29 = $1 + 4 | 0;
  $30 = $5 + 8 | 0;
  $31 = $27 + ($$ << 3) | 0;
  $32 = $0 + 104 | 0;
  $33 = $0 + 120 | 0;
  $34 = $0 + 112 | 0;
  $35 = $0 + 96 | 0;
  $$0211 = 0.0;
  $$1208 = 0;
  L21 : while (1) {
   _arUtilMatMul($0, $3, $6) | 0;
   $$1206 = 0;
   while (1) {
    $41 = HEAP32[$8 >> 2] | 0;
    if (($$1206 | 0) >= ($41 | 0)) break;
    if ((_icpGetU_from_X_by_MatX2U($5, $6, (HEAP32[$29 >> 2] | 0) + ($$1206 * 24 | 0) | 0) | 0) < 0) {
     label = 18;
     break L21;
    }
    $47 = HEAP32[$1 >> 2] | 0;
    $51 = +HEAPF64[$47 + ($$1206 << 4) >> 3] - +HEAPF64[$5 >> 3];
    $55 = +HEAPF64[$47 + ($$1206 << 4) + 8 >> 3] - +HEAPF64[$30 >> 3];
    $56 = $$1206 << 1;
    HEAPF64[$22 + ($56 << 3) >> 3] = $51;
    HEAPF64[$22 + (($56 | 1) << 3) >> 3] = $55;
    $62 = $51 * $51 + $55 * $55;
    HEAPF64[$27 + ($$1206 << 3) >> 3] = $62;
    HEAPF64[$25 + ($$1206 << 3) >> 3] = $62;
    $$1206 = $$1206 + 1 | 0;
   }
   _qsort($27, $41, 8, 1);
   $67 = +HEAPF64[$31 >> 3] * 4.0;
   $$0213 = $67 < 16.0 ? 16.0 : $67;
   $69 = HEAP32[$8 >> 2] | 0;
   $70 = $$0213 / 6.0;
   $$0209 = 0.0;
   $$2 = 0;
   while (1) {
    if (($$2 | 0) >= ($69 | 0)) break;
    $73 = +HEAPF64[$27 + ($$2 << 3) >> 3];
    if ($73 > $$0213) $$pn = $70; else {
     $76 = 1.0 - $73 / $$0213;
     $$pn = $70 * (1.0 - $76 * ($76 * $76));
    }
    $$0209 = $$0209 + $$pn;
    $$2 = $$2 + 1 | 0;
   }
   $83 = $$0209 / +($69 | 0);
   if ($83 < +HEAPF64[$32 >> 3]) {
    label = 41;
    break;
   }
   if (($$1208 | 0) > 0) if ($83 < +HEAPF64[$33 >> 3]) if ($83 / $$0211 > +HEAPF64[$34 >> 3]) {
    label = 41;
    break;
   }
   if (($$1208 | 0) == (HEAP32[$35 >> 2] | 0)) {
    label = 41;
    break;
   } else {
    $$0 = 0;
    $$3 = 0;
    $95 = $69;
   }
   while (1) {
    if (($$3 | 0) >= ($95 | 0)) break;
    $97 = +HEAPF64[$25 + ($$3 << 3) >> 3];
    if (!($97 <= $$0213)) {
     $$1 = $$0;
     $$pre = $95;
    } else {
     $99 = $$0 * 6 | 0;
     $100 = $19 + ($99 << 3) | 0;
     if ((_icpGetJ_U_S($100, $0, $3, (HEAP32[$29 >> 2] | 0) + ($$3 * 24 | 0) | 0) | 0) < 0) {
      label = 33;
      break L21;
     }
     $106 = 1.0 - $97 / $$0213;
     $107 = $106 * $106;
     HEAPF64[$100 >> 3] = +HEAPF64[$100 >> 3] * $107;
     $111 = $19 + (($99 | 1) << 3) | 0;
     HEAPF64[$111 >> 3] = +HEAPF64[$111 >> 3] * $107;
     $115 = $19 + ($99 + 2 << 3) | 0;
     HEAPF64[$115 >> 3] = $107 * +HEAPF64[$115 >> 3];
     $119 = $19 + ($99 + 3 << 3) | 0;
     HEAPF64[$119 >> 3] = $107 * +HEAPF64[$119 >> 3];
     $123 = $19 + ($99 + 4 << 3) | 0;
     HEAPF64[$123 >> 3] = $107 * +HEAPF64[$123 >> 3];
     $127 = $19 + ($99 + 5 << 3) | 0;
     HEAPF64[$127 >> 3] = $107 * +HEAPF64[$127 >> 3];
     $131 = $19 + ($99 + 6 << 3) | 0;
     HEAPF64[$131 >> 3] = $107 * +HEAPF64[$131 >> 3];
     $135 = $19 + ($99 + 7 << 3) | 0;
     HEAPF64[$135 >> 3] = $107 * +HEAPF64[$135 >> 3];
     $139 = $19 + ($99 + 8 << 3) | 0;
     HEAPF64[$139 >> 3] = $107 * +HEAPF64[$139 >> 3];
     $143 = $19 + ($99 + 9 << 3) | 0;
     HEAPF64[$143 >> 3] = $107 * +HEAPF64[$143 >> 3];
     $147 = $19 + ($99 + 10 << 3) | 0;
     HEAPF64[$147 >> 3] = $107 * +HEAPF64[$147 >> 3];
     $151 = $19 + ($99 + 11 << 3) | 0;
     HEAPF64[$151 >> 3] = $107 * +HEAPF64[$151 >> 3];
     $154 = $$3 << 1;
     HEAPF64[$22 + ($$0 << 3) >> 3] = $107 * +HEAPF64[$22 + ($154 << 3) >> 3];
     HEAPF64[$22 + ($$0 + 1 << 3) >> 3] = $107 * +HEAPF64[$22 + (($154 | 1) << 3) >> 3];
     $$1 = $$0 + 2 | 0;
     $$pre = HEAP32[$8 >> 2] | 0;
    }
    $$0 = $$1;
    $$3 = $$3 + 1 | 0;
    $95 = $$pre;
   }
   if (($$0 | 0) < 6) {
    label = 37;
    break;
   }
   if ((_icpGetDeltaS($7, $22, $19, $$0) | 0) < 0) {
    label = 39;
    break;
   }
   _icpUpdateMat($3, $7) | 0;
   $$0211 = $83;
   $$1208 = $$1208 + 1 | 0;
  }
  if ((label | 0) == 18) {
   _icpGetXw2XcCleanup_295($19, $22, $25, $27);
   $$0212 = -1;
   break;
  } else if ((label | 0) == 33) {
   _icpGetXw2XcCleanup_295($19, $22, $25, $27);
   $$0212 = -1;
   break;
  } else if ((label | 0) == 37) {
   _icpGetXw2XcCleanup_295($19, $22, $25, $27);
   $$0212 = -1;
   break;
  } else if ((label | 0) == 39) {
   _icpGetXw2XcCleanup_295($19, $22, $25, $27);
   $$0212 = -1;
   break;
  } else if ((label | 0) == 41) {
   HEAPF64[$4 >> 3] = $83;
   _free($19);
   _free($22);
   _free($25);
   _free($27);
   $$0212 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0212 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i107 = 0, $$0$i$i$i110 = 0, $$0$i$i$i113 = 0, $$10 = 0, $$1100 = 0, $$4103 = 0, $$5104 = 0, $$pre = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $5 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond106 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 99) if ((HEAP8[$0 + 1 >> 0] | 0) == 118) {
  $19 = $2 + 63 | 0;
  $20 = HEAP8[$19 >> 0] | 0;
  HEAP8[$19 >> 0] = 0;
  $21 = $0 + 2 | 0;
  $22 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($21, $1, $2) | 0;
  HEAP8[$19 >> 0] = $20;
  if (($22 | 0) == ($21 | 0) | ($22 | 0) == ($1 | 0)) $$10 = $0; else {
   if ((HEAP8[$22 >> 0] | 0) == 95) {
    $29 = $22 + 1 | 0;
    if (($29 | 0) == ($1 | 0)) {
     $$10 = $0;
     break;
    }
    $31 = HEAP8[$29 >> 0] | 0;
    L9 : do if ($31 << 24 >> 24 == 69) {
     $33 = $2 + 4 | 0;
     $34 = HEAP32[$33 >> 2] | 0;
     if ($34 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      HEAP32[$34 >> 2] = 0;
      HEAP32[$34 + 4 >> 2] = 0;
      HEAP32[$34 + 8 >> 2] = 0;
      HEAP32[$34 + 12 >> 2] = 0;
      HEAP32[$34 + 16 >> 2] = 0;
      HEAP32[$34 + 20 >> 2] = 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($34);
      HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 24;
      $$4103 = $29;
      break;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
      $$4103 = $29;
      break;
     }
    } else {
     $$1100 = $29;
     $41 = $31;
     while (1) {
      if ($41 << 24 >> 24 == 69) {
       $$4103 = $$1100;
       break L9;
      }
      $42 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1100, $1, $2) | 0;
      $or$cond106 = ($42 | 0) == ($$1100 | 0) | ($42 | 0) == ($1 | 0);
      if ($or$cond106) {
       $$10 = $0;
       break L1;
      }
      $$pre = HEAP8[($or$cond106 ? $$1100 : $42) >> 0] | 0;
      $$1100 = $42;
      $41 = $$pre;
     }
    } while (0);
    $$5104 = $$4103 + 1 | 0;
   } else {
    $27 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($22, $1, $2) | 0;
    if (($27 | 0) == ($22 | 0)) {
     $$10 = $0;
     break;
    } else $$5104 = $27;
   }
   $46 = $2 + 4 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   if ((($47 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$10 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $47 + -24 | 0);
    $54 = HEAP32[$46 >> 2] | 0;
    $55 = $54 + -24 | 0;
    $57 = $54;
    while (1) {
     if (($57 | 0) == ($55 | 0)) break;
     $58 = $57 + -24 | 0;
     HEAP32[$46 >> 2] = $58;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($58);
     $57 = HEAP32[$46 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $54 + -48 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 15049) | 0;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 16213) | 0;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
    $$0$i$i$i107 = 0;
    while (1) {
     if (($$0$i$i$i107 | 0) == 3) break;
     HEAP32[$8 + ($$0$i$i$i107 << 2) >> 2] = 0;
     $$0$i$i$i107 = $$0$i$i$i107 + 1 | 0;
    }
    $67 = HEAP8[$3 + 11 >> 0] | 0;
    $68 = $67 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $68 ? HEAP32[$3 >> 2] | 0 : $3, $68 ? HEAP32[$3 + 4 >> 2] | 0 : $67 & 255) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i110 = 0;
    while (1) {
     if (($$0$i$i$i110 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i110 << 2) >> 2] = 0;
     $$0$i$i$i110 = $$0$i$i$i110 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15047) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i113 = 0;
    while (1) {
     if (($$0$i$i$i113 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i113 << 2) >> 2] = 0;
     $$0$i$i$i113 = $$0$i$i$i113 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$46 >> 2] | 0) + -24 | 0, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$10 = $$5104;
   }
  }
 } else $$10 = $0; else $$10 = $0; else $$10 = $0; while (0);
 STACKTOP = sp;
 return $$10 | 0;
}

function _QRM($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0213 = 0, $$0215 = 0, $$0216 = 0, $$0219 = 0, $$0220 = 0, $$0221 = 0, $$0222 = 0, $$0223 = 0.0, $$0224 = 0.0, $$0227 = 0.0, $$0232 = 0.0, $$1 = 0, $$1214 = 0, $$1217 = 0, $$1225 = 0.0, $$1228 = 0.0, $$1231 = 0.0, $$2218 = 0, $$pre = 0, $106 = 0.0, $111 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $128 = 0.0, $130 = 0, $131 = 0.0, $136 = 0.0, $138 = 0.0, $14 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $150 = 0.0, $151 = 0, $154 = 0, $159 = 0.0, $2 = 0, $20 = 0, $25 = 0.0, $26 = 0, $27 = 0, $30 = 0.0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $54 = 0.0, $65 = 0.0, $70 = 0.0, $74 = 0.0, $77 = 0.0, $81 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $91 = 0, $95 = 0.0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 do if (($4 | 0) < 2 ? 1 : ($4 | 0) != (HEAP32[$0 + 8 >> 2] | 0)) $$0220 = -1; else if ((HEAP32[$1 + 4 >> 2] | 0) == ($4 | 0)) {
  $12 = _arVecAlloc($4) | 0;
  if (!$12) $$0220 = -1; else {
   $14 = $4 + -1 | 0;
   HEAP32[$2 + 4 >> 2] = $14;
   HEAP32[$2 >> 2] = (HEAP32[$12 >> 2] | 0) + 8;
   if ((_arVecTridiagonalize($0, $1, $2) | 0) < 0) {
    _arVecFree($12) | 0;
    $$0220 = -1;
    break;
   }
   $20 = HEAP32[$12 >> 2] | 0;
   HEAPF64[$20 >> 3] = 0.0;
   $$0 = $14;
   L8 : while (1) {
    if (($$0 | 0) > 0) $$0215 = $$0; else {
     $$1214 = 0;
     break;
    }
    while (1) {
     if (($$0215 | 0) <= 0) break;
     $25 = +Math_abs(+(+HEAPF64[$20 + ($$0215 << 3) >> 3]));
     $26 = HEAP32[$1 >> 2] | 0;
     $27 = $$0215 + -1 | 0;
     $30 = +Math_abs(+(+HEAPF64[$26 + ($27 << 3) >> 3]));
     if ($25 > ($30 + +Math_abs(+(+HEAPF64[$26 + ($$0215 << 3) >> 3]))) * 1.0e-06) $$0215 = $27; else break;
    }
    $$pre = $$0 + -1 | 0;
    if (($$0215 | 0) == ($$0 | 0)) {
     $$0 = $$pre;
     continue;
    }
    $38 = $20 + ($$0 << 3) | 0;
    $40 = $20 + ($$0215 + 1 << 3) | 0;
    $$0219 = 0;
    while (1) {
     $41 = $$0219 + 1 | 0;
     if (($$0219 | 0) > 99) {
      $$0 = $$pre;
      continue L8;
     }
     $43 = HEAP32[$1 >> 2] | 0;
     $44 = $43 + ($$pre << 3) | 0;
     $46 = $43 + ($$0 << 3) | 0;
     $47 = +HEAPF64[$46 >> 3];
     $49 = (+HEAPF64[$44 >> 3] - $47) * .5;
     $50 = +HEAPF64[$38 >> 3];
     $51 = $50 * $50;
     $54 = +Math_sqrt(+($51 + $49 * $49));
     $$0213 = $$0215;
     $$0224 = +HEAPF64[$40 >> 3];
     $$0227 = +HEAPF64[$43 + ($$0215 << 3) >> 3] - $47 + $51 / ($49 + ($49 < 0.0 ? -$54 : $54));
     while (1) {
      if (($$0213 | 0) >= ($$0 | 0)) break;
      $65 = +Math_abs(+$$0227);
      if (!($65 >= +Math_abs(+$$0224))) {
       $77 = -$$0227 / $$0224;
       $81 = 1.0 / +Math_sqrt(+($77 * $77 + 1.0));
       $$0223 = $77 * $81;
       $$1231 = $81;
      } else {
       $70 = -$$0224 / $$0227;
       if ($65 > 1.0e-16) {
        $74 = 1.0 / +Math_sqrt(+($70 * $70 + 1.0));
        $$0223 = $74;
        $$1231 = $70 * $74;
       } else {
        $$0223 = 1.0;
        $$1231 = 0.0;
       }
      }
      $83 = $43 + ($$0213 << 3) | 0;
      $84 = +HEAPF64[$83 >> 3];
      $85 = $$0213 + 1 | 0;
      $86 = $43 + ($85 << 3) | 0;
      $87 = +HEAPF64[$86 >> 3];
      $88 = $84 - $87;
      $91 = $20 + ($85 << 3) | 0;
      $95 = $$1231 * ($$1231 * $88 + $$0223 * 2.0 * +HEAPF64[$91 >> 3]);
      HEAPF64[$83 >> 3] = $84 - $95;
      HEAPF64[$86 >> 3] = $87 + $95;
      $99 = $20 + ($$0213 << 3) | 0;
      if (($$0213 | 0) > ($$0215 | 0)) HEAPF64[$99 >> 3] = $$0223 * +HEAPF64[$99 >> 3] - $$0224 * $$1231;
      $106 = +HEAPF64[$91 >> 3];
      HEAPF64[$91 >> 3] = $106 + $$1231 * ($$0223 * $88 - $$1231 * 2.0 * $106);
      $111 = Math_imul($$0213, $4) | 0;
      $112 = Math_imul($85, $4) | 0;
      $$0216 = 0;
      $$1225 = $$0224;
      $$1228 = $$0227;
      while (1) {
       if (($$0216 | 0) == ($4 | 0)) break;
       $113 = HEAP32[$0 >> 2] | 0;
       $115 = $113 + ($$0216 + $111 << 3) | 0;
       $116 = +HEAPF64[$115 >> 3];
       $118 = $113 + ($$0216 + $112 << 3) | 0;
       $119 = +HEAPF64[$118 >> 3];
       HEAPF64[$115 >> 3] = $$0223 * $116 - $$1231 * $119;
       HEAPF64[$118 >> 3] = $$1231 * $116 + $$0223 * $119;
       $$0216 = $$0216 + 1 | 0;
       $$1225 = $119;
       $$1228 = $116;
      }
      if (($$0213 | 0) >= ($$pre | 0)) {
       $$0213 = $85;
       $$0224 = $$1225;
       $$0227 = $$1228;
       continue;
      }
      $128 = +HEAPF64[$91 >> 3];
      $130 = $20 + ($$0213 + 2 << 3) | 0;
      $131 = +HEAPF64[$130 >> 3];
      HEAPF64[$130 >> 3] = $$0223 * $131;
      $$0213 = $85;
      $$0224 = -($$1231 * $131);
      $$0227 = $128;
     }
     $136 = +Math_abs(+(+HEAPF64[$38 >> 3]));
     $138 = +Math_abs(+(+HEAPF64[$44 >> 3]));
     if ($136 > ($138 + +Math_abs(+(+HEAPF64[$46 >> 3]))) * 1.0e-06) $$0219 = $41; else {
      $$0 = $$pre;
      continue L8;
     }
    }
   }
   L35 : while (1) {
    if (($$1214 | 0) == ($14 | 0)) break;
    $144 = HEAP32[$1 >> 2] | 0;
    $145 = $144 + ($$1214 << 3) | 0;
    $146 = +HEAPF64[$145 >> 3];
    $147 = $$1214 + 1 | 0;
    $$0232 = $146;
    $$1 = $$1214;
    $$1217 = $147;
    while (1) {
     if (($$1217 | 0) >= ($4 | 0)) break;
     $150 = +HEAPF64[$144 + ($$1217 << 3) >> 3];
     $151 = $150 > $$0232;
     $$0232 = $151 ? $150 : $$0232;
     $$1 = $151 ? $$1217 : $$1;
     $$1217 = $$1217 + 1 | 0;
    }
    HEAPF64[$144 + ($$1 << 3) >> 3] = $146;
    HEAPF64[$145 >> 3] = $$0232;
    $154 = HEAP32[$0 >> 2] | 0;
    $$0221 = $154 + ((Math_imul($$1214, $4) | 0) << 3) | 0;
    $$0222 = $154 + ((Math_imul($$1, $4) | 0) << 3) | 0;
    $$2218 = 0;
    while (1) {
     if (($$2218 | 0) == ($4 | 0)) {
      $$1214 = $147;
      continue L35;
     }
     $159 = +HEAPF64[$$0222 >> 3];
     HEAPF64[$$0222 >> 3] = +HEAPF64[$$0221 >> 3];
     HEAPF64[$$0221 >> 3] = $159;
     $$0221 = $$0221 + 8 | 0;
     $$0222 = $$0222 + 8 | 0;
     $$2218 = $$2218 + 1 | 0;
    }
   }
   _arVecFree($12) | 0;
   $$0220 = 0;
  }
 } else $$0220 = -1; while (0);
 STACKTOP = sp;
 return $$0220 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$067 = 0, $$1 = 0, $101 = 0, $104 = 0, $106 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $37 = 0, $4 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $53 = 0, $56 = 0, $57 = 0, $62 = 0, $64 = 0, $67 = 0, $69 = 0, $74 = 0, $8 = 0, $83 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $92 = 0, $93 = 0, $94 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 8 | 0;
 $4 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else {
  $8 = $2 + 16 | 0;
  switch (HEAP8[$0 >> 0] | 0) {
  case 84:
   {
    $9 = $2 + 4 | 0;
    $13 = ((HEAP32[$9 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
    $14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    $15 = HEAP32[$9 >> 2] | 0;
    $18 = ($15 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
    $22 = $15;
    if (($14 | 0) != ($0 | 0) & ($18 | 0) == ($13 + 1 | 0)) {
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $22 + -24 | 0, $4);
     $24 = $2 + 20 | 0;
     $25 = HEAP32[$24 >> 2] | 0;
     if ($25 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$25 >> 2] = 0;
      $30 = $25 + 4 | 0;
      HEAP32[$30 >> 2] = 0;
      $32 = HEAP32[$3 + 12 >> 2] | 0;
      HEAP32[$25 + 8 >> 2] = 0;
      HEAP32[$25 + 12 >> 2] = $32;
      HEAP32[$25 >> 2] = HEAP32[$3 >> 2];
      $35 = $3 + 4 | 0;
      HEAP32[$30 >> 2] = HEAP32[$35 >> 2];
      $37 = $3 + 8 | 0;
      HEAP32[$25 + 8 >> 2] = HEAP32[$37 >> 2];
      HEAP32[$37 >> 2] = 0;
      HEAP32[$35 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($8, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$1 = $14;
     break L1;
    } else {
     $$067 = $18;
     $44 = $22;
    }
    while (1) {
     if (($$067 | 0) == ($13 | 0)) {
      $$1 = $0;
      break L1;
     }
     $43 = $44 + -24 | 0;
     $46 = $44;
     while (1) {
      if (($46 | 0) == ($43 | 0)) break;
      $47 = $46 + -24 | 0;
      HEAP32[$9 >> 2] = $47;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
      $46 = HEAP32[$9 >> 2] | 0;
     }
     $$067 = $$067 + -1 | 0;
     $44 = $43;
    }
    break;
   }
  case 68:
   {
    $49 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    if (($49 | 0) == ($0 | 0)) {
     $$1 = $0;
     break L1;
    }
    $53 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($53 | 0)) {
     $$1 = $0;
     break L1;
    }
    HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $53 + -24 | 0, $4);
    $56 = $2 + 20 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    if ($57 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
     HEAP32[$57 >> 2] = 0;
     $62 = $57 + 4 | 0;
     HEAP32[$62 >> 2] = 0;
     $64 = HEAP32[$3 + 12 >> 2] | 0;
     HEAP32[$57 + 8 >> 2] = 0;
     HEAP32[$57 + 12 >> 2] = $64;
     HEAP32[$57 >> 2] = HEAP32[$3 >> 2];
     $67 = $3 + 4 | 0;
     HEAP32[$62 >> 2] = HEAP32[$67 >> 2];
     $69 = $3 + 8 | 0;
     HEAP32[$57 + 8 >> 2] = HEAP32[$69 >> 2];
     HEAP32[$69 >> 2] = 0;
     HEAP32[$67 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($8, $3);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
    $$1 = $49;
    break L1;
    break;
   }
  case 83:
   {
    $74 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    if (($74 | 0) != ($0 | 0)) {
     $$1 = $74;
     break L1;
    }
    if (($1 - $0 | 0) <= 2) {
     $$1 = $0;
     break L1;
    }
    if ((HEAP8[$0 + 1 >> 0] | 0) != 116) {
     $$1 = $0;
     break L1;
    }
    $83 = $0 + 2 | 0;
    $84 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($83, $1, $2) | 0;
    if (($84 | 0) == ($83 | 0)) {
     $$1 = $0;
     break L1;
    }
    $87 = $2 + 4 | 0;
    $88 = HEAP32[$87 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($88 | 0)) {
     $$1 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($88 + -24 | 0, 0, 15343) | 0;
    $92 = (HEAP32[$87 >> 2] | 0) + -24 | 0;
    HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $92, $4);
    $93 = $2 + 20 | 0;
    $94 = HEAP32[$93 >> 2] | 0;
    if ($94 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
     HEAP32[$94 >> 2] = 0;
     $99 = $94 + 4 | 0;
     HEAP32[$99 >> 2] = 0;
     $101 = HEAP32[$3 + 12 >> 2] | 0;
     HEAP32[$94 + 8 >> 2] = 0;
     HEAP32[$94 + 12 >> 2] = $101;
     HEAP32[$94 >> 2] = HEAP32[$3 >> 2];
     $104 = $3 + 4 | 0;
     HEAP32[$99 >> 2] = HEAP32[$104 >> 2];
     $106 = $3 + 8 | 0;
     HEAP32[$94 + 8 >> 2] = HEAP32[$106 >> 2];
     HEAP32[$106 >> 2] = 0;
     HEAP32[$104 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($8, $3);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
    $$1 = $84;
    break L1;
    break;
   }
  default:
   {
    $$1 = $0;
    break L1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _arParamObserv2Ideal($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0342 = 0.0, $$0343 = 0.0, $$0345 = 0, $$0346 = 0.0, $$0348 = 0.0, $$0350 = 0.0, $$0351 = 0.0, $$0352 = 0, $$0353 = 0.0, $$0355 = 0.0, $$0357 = 0.0, $$0358 = 0.0, $$0359 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0362 = 0.0, $$0363 = 0, $$0364 = 0.0, $$0365 = 0.0, $$0367 = 0.0, $$1 = 0.0, $$1344 = 0.0, $$1347 = 0.0, $$1349 = 0.0, $$1354 = 0.0, $$1356 = 0.0, $$1366 = 0.0, $$1368 = 0.0, $$sink = 0.0, $10 = 0, $104 = 0.0, $106 = 0.0, $108 = 0.0, $11 = 0.0, $110 = 0.0, $113 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $13 = 0.0, $134 = 0.0, $136 = 0.0, $138 = 0.0, $14 = 0.0, $142 = 0.0, $15 = 0.0, $152 = 0.0, $153 = 0.0, $155 = 0.0, $157 = 0.0, $16 = 0.0, $160 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $18 = 0.0, $181 = 0.0, $183 = 0.0, $185 = 0.0, $189 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $202 = 0.0, $204 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $218 = 0.0, $22 = 0.0, $220 = 0.0, $222 = 0.0, $226 = 0.0, $24 = 0.0, $26 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $35 = 0.0, $40 = 0.0, $50 = 0.0, $56 = 0.0, $6 = 0, $67 = 0.0, $7 = 0, $73 = 0.0, $8 = 0, $9 = 0, $92 = 0.0, label = 0;
 $6 = $0 + 24 | 0;
 $7 = $0 + 40 | 0;
 $8 = $0 + 8 | 0;
 $9 = $0 + 16 | 0;
 $10 = $0 + 32 | 0;
 switch ($5 | 0) {
 case 4:
  {
   $11 = +HEAPF64[$0 >> 3];
   $12 = +HEAPF64[$8 >> 3];
   $13 = +HEAPF64[$9 >> 3];
   $14 = +HEAPF64[$6 >> 3];
   $15 = +HEAPF64[$10 >> 3];
   $16 = +HEAPF64[$7 >> 3];
   $18 = +HEAPF64[$0 + 48 >> 3];
   $20 = +HEAPF64[$0 + 56 >> 3];
   $22 = +HEAPF64[$0 + 64 >> 3];
   $24 = ($1 - $18) / $15;
   $26 = ($2 - $20) / $16;
   $29 = $13 * 2.0;
   $30 = $14 * 6.0;
   $31 = $14 * 2.0;
   $32 = $13 * 6.0;
   $$0346 = $24;
   $$0348 = $26;
   $$0357 = $24 * $24;
   $$0358 = $26 * $26;
   $$0359 = 1;
   while (1) {
    if (!($$0358 != 0.0 | $$0357 != 0.0)) {
     $$1347 = 0.0;
     $$1349 = 0.0;
     break;
    }
    $35 = $$0358 + $$0357;
    $40 = $11 * $35 + 1.0 + $35 * ($12 * $35);
    $50 = $$0357 * 3.0;
    $56 = $$0358 * $50;
    $67 = $$0346 - ($14 * ($35 + $$0357 * 2.0) + ($$0348 * ($29 * $$0346) + $$0346 * $40) - $24) / ($30 * $$0346 + ($29 * $$0348 + ($11 * ($$0358 + $50) + 1.0 + $12 * ($$0358 * $$0358 + ($$0357 * ($$0357 * 5.0) + $56)))));
    $73 = $31 * $67;
    $92 = $$0348 - ($13 * ($$0358 * 2.0 + $35) + $$0348 * $40 + $$0348 * $73 - $26) / ($32 * $$0348 + ($11 * ($$0357 + $$0358 * 3.0) + 1.0 + $12 * ($$0358 * ($$0358 * 5.0) + ($$0357 * $$0357 + $56))) + $73);
    if (($$0359 | 0) == 4) {
     $$1347 = $67;
     $$1349 = $92;
     break;
    }
    $$0346 = $67;
    $$0348 = $92;
    $$0357 = $67 * $67;
    $$0358 = $92 * $92;
    $$0359 = $$0359 + 1 | 0;
   }
   HEAPF64[$3 >> 3] = $18 + $15 * $$1347 / $22;
   $$sink = $20 + $16 * $$1349 / $22;
   label = 22;
   break;
  }
 case 3:
  {
   $104 = +HEAPF64[$0 >> 3];
   $106 = ($1 - $104) / +HEAPF64[$6 >> 3];
   $108 = $2 - +HEAPF64[$8 >> 3];
   $110 = +HEAPF64[$10 >> 3] / 1.0e8;
   $113 = +HEAPF64[$7 >> 3] / 1.0e8 / 1.0e5;
   $116 = $106 * $106 + $108 * $108;
   $117 = +Math_sqrt(+$116);
   $118 = $110 * 3.0;
   $119 = $113 * 5.0;
   $$0360 = $116;
   $$0363 = 1;
   $$0364 = $117;
   $$0365 = $108;
   $$0367 = $106;
   while (1) {
    if (!($$0364 != 0.0)) {
     $$1366 = 0.0;
     $$1368 = 0.0;
     break;
    }
    $134 = $$0364 - ($$0364 * (1.0 - $110 * $$0360 - $$0360 * ($113 * $$0360)) - $117) / (1.0 - $118 * $$0360 - $$0360 * ($119 * $$0360));
    $136 = $$0367 * $134 / $$0364;
    $138 = $$0365 * $134 / $$0364;
    if (($$0363 | 0) == 3) {
     $$1366 = $138;
     $$1368 = $136;
     break;
    }
    $142 = $136 * $136 + $138 * $138;
    $$0360 = $142;
    $$0363 = $$0363 + 1 | 0;
    $$0364 = +Math_sqrt(+$142);
    $$0365 = $138;
    $$0367 = $136;
   }
   HEAPF64[$3 >> 3] = $104 + $$1368 / +HEAPF64[$9 >> 3];
   $$sink = $$1366 / +HEAPF64[$9 >> 3] + +HEAPF64[$8 >> 3];
   label = 22;
   break;
  }
 case 2:
  {
   $152 = +HEAPF64[$0 >> 3];
   $153 = $1 - $152;
   $155 = $2 - +HEAPF64[$8 >> 3];
   $157 = +HEAPF64[$6 >> 3] / 1.0e8;
   $160 = +HEAPF64[$10 >> 3] / 1.0e8 / 1.0e5;
   $163 = $153 * $153 + $155 * $155;
   $164 = +Math_sqrt(+$163);
   $165 = $157 * 3.0;
   $166 = $160 * 5.0;
   $$0352 = 1;
   $$0353 = $155;
   $$0355 = $153;
   $$0361 = $164;
   $$0362 = $163;
   while (1) {
    if (!($$0361 != 0.0)) {
     $$1354 = 0.0;
     $$1356 = 0.0;
     break;
    }
    $181 = $$0361 - ($$0361 * (1.0 - $157 * $$0362 - $$0362 * ($160 * $$0362)) - $164) / (1.0 - $165 * $$0362 - $$0362 * ($166 * $$0362));
    $183 = $$0355 * $181 / $$0361;
    $185 = $$0353 * $181 / $$0361;
    if (($$0352 | 0) == 3) {
     $$1354 = $185;
     $$1356 = $183;
     break;
    }
    $189 = $183 * $183 + $185 * $185;
    $$0352 = $$0352 + 1 | 0;
    $$0353 = $185;
    $$0355 = $183;
    $$0361 = +Math_sqrt(+$189);
    $$0362 = $189;
   }
   HEAPF64[$3 >> 3] = $152 + $$1356 / +HEAPF64[$9 >> 3];
   $$sink = $$1354 / +HEAPF64[$9 >> 3] + +HEAPF64[$8 >> 3];
   label = 22;
   break;
  }
 case 1:
  {
   $199 = +HEAPF64[$0 >> 3];
   $200 = $1 - $199;
   $202 = $2 - +HEAPF64[$8 >> 3];
   $204 = +HEAPF64[$6 >> 3] / 1.0e8;
   $207 = $200 * $200 + $202 * $202;
   $208 = +Math_sqrt(+$207);
   $209 = $204 * 3.0;
   $$0 = 1;
   $$0342 = $202;
   $$0343 = $200;
   $$0350 = $208;
   $$0351 = $207;
   while (1) {
    if (!($$0350 != 0.0)) {
     $$1 = 0.0;
     $$1344 = 0.0;
     break;
    }
    $218 = $$0350 - ($$0350 * (1.0 - $204 * $$0351) - $208) / (1.0 - $209 * $$0351);
    $220 = $$0343 * $218 / $$0350;
    $222 = $$0342 * $218 / $$0350;
    if (($$0 | 0) == 3) {
     $$1 = $222;
     $$1344 = $220;
     break;
    }
    $226 = $220 * $220 + $222 * $222;
    $$0 = $$0 + 1 | 0;
    $$0342 = $222;
    $$0343 = $220;
    $$0350 = +Math_sqrt(+$226);
    $$0351 = $226;
   }
   HEAPF64[$3 >> 3] = $199 + $$1344 / +HEAPF64[$9 >> 3];
   $$sink = $$1 / +HEAPF64[$9 >> 3] + +HEAPF64[$8 >> 3];
   label = 22;
   break;
  }
 default:
  $$0345 = -1;
 }
 if ((label | 0) == 22) {
  HEAPF64[$4 >> 3] = $$sink;
  $$0345 = 0;
 }
 return $$0345 | 0;
}

function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $106 = 0, $116 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149;
   $$0106$ph = 24;
   label = 4;
   break;
  }
 case 1:
  {
   $$0105$ph = -1074;
   $$0106$ph = 53;
   label = 4;
   break;
  }
 case 2:
  {
   $$0105$ph = -1074;
   $$0106$ph = 53;
   label = 4;
   break;
  }
 default:
  $$0114 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $3 = $0 + 4 | 0;
  $4 = $0 + 100 | 0;
  do {
   $5 = HEAP32[$3 >> 2] | 0;
   if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $5 + 1;
    $12 = HEAPU8[$5 >> 0] | 0;
   } else $12 = ___shgetc($0) | 0;
  } while ((_isspace($12) | 0) != 0);
  L13 : do switch ($12 | 0) {
  case 43:
  case 45:
   {
    $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0;
    $19 = HEAP32[$3 >> 2] | 0;
    if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $19 + 1;
     $$0 = HEAPU8[$19 >> 0] | 0;
     $$0113 = $18;
     break L13;
    } else {
     $$0 = ___shgetc($0) | 0;
     $$0113 = $18;
     break L13;
    }
    break;
   }
  default:
   {
    $$0 = $12;
    $$0113 = 1;
   }
  } while (0);
  $$0107127 = 0;
  $$1128 = $$0;
  while (1) {
   if (($$1128 | 32 | 0) != (HEAP8[14109 + $$0107127 >> 0] | 0)) {
    $$0107$lcssa = $$0107127;
    $$1$lcssa = $$1128;
    break;
   }
   do if ($$0107127 >>> 0 < 7) {
    $32 = HEAP32[$3 >> 2] | 0;
    if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $32 + 1;
     $$2 = HEAPU8[$32 >> 0] | 0;
     break;
    } else {
     $$2 = ___shgetc($0) | 0;
     break;
    }
   } else $$2 = $$1128; while (0);
   $39 = $$0107127 + 1 | 0;
   if ($39 >>> 0 < 8) {
    $$0107127 = $39;
    $$1128 = $$2;
   } else {
    $$0107$lcssa = $39;
    $$1$lcssa = $$2;
    break;
   }
  }
  L29 : do switch ($$0107$lcssa | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $42 = ($2 | 0) != 0;
    if ($42 & $$0107$lcssa >>> 0 > 3) if (($$0107$lcssa | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$$0107$lcssa) {
     $$2109125 = 0;
     $$3126 = $$1$lcssa;
     while (1) {
      if (($$3126 | 32 | 0) != (HEAP8[14118 + $$2109125 >> 0] | 0)) {
       $$3110 = $$2109125;
       $$5 = $$3126;
       break L34;
      }
      do if ($$2109125 >>> 0 < 2) {
       $63 = HEAP32[$3 >> 2] | 0;
       if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $63 + 1;
        $$4 = HEAPU8[$63 >> 0] | 0;
        break;
       } else {
        $$4 = ___shgetc($0) | 0;
        break;
       }
      } else $$4 = $$3126; while (0);
      $70 = $$2109125 + 1 | 0;
      if ($70 >>> 0 < 3) {
       $$2109125 = $70;
       $$3126 = $$4;
      } else {
       $$3110 = $70;
       $$5 = $$4;
       break;
      }
     }
    } else {
     $$3110 = $$0107$lcssa;
     $$5 = $$1$lcssa;
    } while (0);
    switch ($$3110 | 0) {
    case 3:
     {
      $72 = HEAP32[$3 >> 2] | 0;
      if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $72 + 1;
       $80 = HEAPU8[$72 >> 0] | 0;
      } else $80 = ___shgetc($0) | 0;
      if (($80 | 0) == 40) $$4111 = 1; else {
       if (!(HEAP32[$4 >> 2] | 0)) {
        $$0114 = nan;
        break L4;
       }
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
       $$0114 = nan;
       break L4;
      }
      while (1) {
       $85 = HEAP32[$3 >> 2] | 0;
       if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $85 + 1;
        $93 = HEAPU8[$85 >> 0] | 0;
       } else $93 = ___shgetc($0) | 0;
       if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) break;
       $$4111 = $$4111 + 1 | 0;
      }
      if (($93 | 0) == 41) {
       $$0114 = nan;
       break L4;
      }
      $102 = (HEAP32[$4 >> 2] | 0) == 0;
      if (!$102) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
      if (!$42) {
       $106 = ___errno_location() | 0;
       HEAP32[$106 >> 2] = 22;
       ___shlim($0, 0);
       $$0114 = 0.0;
       break L4;
      }
      if (!$$4111) {
       $$0114 = nan;
       break L4;
      } else $$in = $$4111;
      while (1) {
       $$in = $$in + -1 | 0;
       if (!$102) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
       if (!$$in) {
        $$0114 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      if (($$5 | 0) == 48) {
       $118 = HEAP32[$3 >> 2] | 0;
       if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $118 + 1;
        $126 = HEAPU8[$118 >> 0] | 0;
       } else $126 = ___shgetc($0) | 0;
       if (($126 | 32 | 0) == 120) {
        $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2);
        break L4;
       }
       if (!(HEAP32[$4 >> 2] | 0)) $$6 = 48; else {
        HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
        $$6 = 48;
       }
      } else $$6 = $$5;
      $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2);
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
      $116 = ___errno_location() | 0;
      HEAP32[$116 >> 2] = 22;
      ___shlim($0, 0);
      $$0114 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $45 = (HEAP32[$4 >> 2] | 0) == 0;
   if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
    $$1108 = $$0107$lcssa;
    do {
     if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
     $$1108 = $$1108 + -1 | 0;
    } while ($$1108 >>> 0 > 3);
   }
  }
  $$0114 = +($$0113 | 0) * inf;
 } while (0);
 return +$$0114;
}

function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $128 = 0, $129 = 0, $142 = 0, $145 = 0, $146 = 0, $152 = 0, $159 = 0, $163 = 0, $166 = 0, $172 = 0, $2 = 0, $22 = 0, $24 = 0, $3 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $66 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $78 = 0, $80 = 0, $82 = 0, $95 = 0, $storemerge = 0, $storemerge1 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 & -8;
 $5 = $0 + $4 | 0;
 $6 = HEAP32[4363] | 0;
 $7 = $3 & 3;
 if (!(($7 | 0) != 1 & $0 >>> 0 >= $6 >>> 0 & $0 >>> 0 < $5 >>> 0)) _abort();
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 if (!($10 & 1)) _abort();
 if (!$7) {
  if ($1 >>> 0 < 256) {
   $$2 = 0;
   return $$2 | 0;
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) if (($4 - $1 | 0) >>> 0 <= HEAP32[4479] << 1 >>> 0) {
   $$2 = $0;
   return $$2 | 0;
  }
  $$2 = 0;
  return $$2 | 0;
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $22 = $4 - $1 | 0;
  if ($22 >>> 0 <= 15) {
   $$2 = $0;
   return $$2 | 0;
  }
  $24 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$24 + 4 >> 2] = $22 | 3;
  $31 = $24 + $22 + 4 | 0;
  HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1;
  _dispose_chunk($24, $22);
  $$2 = $0;
  return $$2 | 0;
 }
 if (($5 | 0) == (HEAP32[4365] | 0)) {
  $37 = (HEAP32[4362] | 0) + $4 | 0;
  $39 = $37 - $1 | 0;
  $40 = $0 + $1 | 0;
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$40 + 4 >> 2] = $39 | 1;
  HEAP32[4365] = $40;
  HEAP32[4362] = $39;
  $$2 = $0;
  return $$2 | 0;
 }
 if (($5 | 0) == (HEAP32[4364] | 0)) {
  $49 = (HEAP32[4361] | 0) + $4 | 0;
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  $51 = $49 - $1 | 0;
  $53 = $3 & 1;
  if ($51 >>> 0 > 15) {
   $54 = $0 + $1 | 0;
   $55 = $54 + $51 | 0;
   HEAP32[$2 >> 2] = $53 | $1 | 2;
   HEAP32[$54 + 4 >> 2] = $51 | 1;
   HEAP32[$55 >> 2] = $51;
   $60 = $55 + 4 | 0;
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2;
   $storemerge = $54;
   $storemerge1 = $51;
  } else {
   HEAP32[$2 >> 2] = $53 | $49 | 2;
   $66 = $0 + $49 + 4 | 0;
   HEAP32[$66 >> 2] = HEAP32[$66 >> 2] | 1;
   $storemerge = 0;
   $storemerge1 = 0;
  }
  HEAP32[4361] = $storemerge1;
  HEAP32[4364] = $storemerge;
  $$2 = $0;
  return $$2 | 0;
 }
 if ($10 & 2 | 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $72 = ($10 & -8) + $4 | 0;
 if ($72 >>> 0 < $1 >>> 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $74 = $72 - $1 | 0;
 $75 = $10 >>> 3;
 L49 : do if ($10 >>> 0 < 256) {
  $78 = HEAP32[$5 + 8 >> 2] | 0;
  $80 = HEAP32[$5 + 12 >> 2] | 0;
  $82 = 17476 + ($75 << 1 << 2) | 0;
  if (($78 | 0) != ($82 | 0)) {
   if ($78 >>> 0 < $6 >>> 0) _abort();
   if ((HEAP32[$78 + 12 >> 2] | 0) != ($5 | 0)) _abort();
  }
  if (($80 | 0) == ($78 | 0)) {
   HEAP32[4359] = HEAP32[4359] & ~(1 << $75);
   break;
  }
  if (($80 | 0) == ($82 | 0)) $$pre$phiZ2D = $80 + 8 | 0; else {
   if ($80 >>> 0 < $6 >>> 0) _abort();
   $95 = $80 + 8 | 0;
   if ((HEAP32[$95 >> 2] | 0) == ($5 | 0)) $$pre$phiZ2D = $95; else _abort();
  }
  HEAP32[$78 + 12 >> 2] = $80;
  HEAP32[$$pre$phiZ2D >> 2] = $78;
 } else {
  $100 = HEAP32[$5 + 24 >> 2] | 0;
  $102 = HEAP32[$5 + 12 >> 2] | 0;
  do if (($102 | 0) == ($5 | 0)) {
   $113 = $5 + 16 | 0;
   $114 = $113 + 4 | 0;
   $115 = HEAP32[$114 >> 2] | 0;
   if (!$115) {
    $117 = HEAP32[$113 >> 2] | 0;
    if (!$117) {
     $$3 = 0;
     break;
    } else {
     $$1272 = $117;
     $$1275 = $113;
    }
   } else {
    $$1272 = $115;
    $$1275 = $114;
   }
   while (1) {
    $119 = $$1272 + 20 | 0;
    $120 = HEAP32[$119 >> 2] | 0;
    if ($120 | 0) {
     $$1272 = $120;
     $$1275 = $119;
     continue;
    }
    $122 = $$1272 + 16 | 0;
    $123 = HEAP32[$122 >> 2] | 0;
    if (!$123) break; else {
     $$1272 = $123;
     $$1275 = $122;
    }
   }
   if ($$1275 >>> 0 < $6 >>> 0) _abort(); else {
    HEAP32[$$1275 >> 2] = 0;
    $$3 = $$1272;
    break;
   }
  } else {
   $105 = HEAP32[$5 + 8 >> 2] | 0;
   if ($105 >>> 0 < $6 >>> 0) _abort();
   $107 = $105 + 12 | 0;
   if ((HEAP32[$107 >> 2] | 0) != ($5 | 0)) _abort();
   $110 = $102 + 8 | 0;
   if ((HEAP32[$110 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$107 >> 2] = $102;
    HEAP32[$110 >> 2] = $105;
    $$3 = $102;
    break;
   } else _abort();
  } while (0);
  if ($100 | 0) {
   $128 = HEAP32[$5 + 28 >> 2] | 0;
   $129 = 17740 + ($128 << 2) | 0;
   do if (($5 | 0) == (HEAP32[$129 >> 2] | 0)) {
    HEAP32[$129 >> 2] = $$3;
    if (!$$3) {
     HEAP32[4360] = HEAP32[4360] & ~(1 << $128);
     break L49;
    }
   } else if ($100 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
    HEAP32[$100 + 16 + (((HEAP32[$100 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3;
    if (!$$3) break L49; else break;
   } while (0);
   $142 = HEAP32[4363] | 0;
   if ($$3 >>> 0 < $142 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $100;
   $145 = $5 + 16 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   do if ($146 | 0) if ($146 >>> 0 < $142 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $146;
    HEAP32[$146 + 24 >> 2] = $$3;
    break;
   } while (0);
   $152 = HEAP32[$145 + 4 >> 2] | 0;
   if ($152 | 0) if ($152 >>> 0 < (HEAP32[4363] | 0) >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $152;
    HEAP32[$152 + 24 >> 2] = $$3;
    break;
   }
  }
 } while (0);
 $159 = $3 & 1;
 if ($74 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $72 | $159 | 2;
  $163 = $0 + $72 + 4 | 0;
  HEAP32[$163 >> 2] = HEAP32[$163 >> 2] | 1;
  $$2 = $0;
  return $$2 | 0;
 } else {
  $166 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $159 | $1 | 2;
  HEAP32[$166 + 4 >> 2] = $74 | 3;
  $172 = $166 + $74 + 4 | 0;
  HEAP32[$172 >> 2] = HEAP32[$172 >> 2] | 1;
  _dispose_chunk($166, $74);
  $$2 = $0;
  return $$2 | 0;
 }
 return 0;
}

function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $4 = HEAP32[tempDoublePtr >> 2] | 0;
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $8 = $6 & 2047;
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0;
 $14 = tempRet0;
 L1 : do if (($13 | 0) == 0 & ($14 | 0) == 0) label = 3; else {
  $18 = ___DOUBLE_BITS_272($1) | 0;
  $20 = tempRet0 & 2147483647;
  if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) label = 3; else {
   $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
   $30 = tempRet0;
   if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
   if (!$8) {
    $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $42 = tempRet0;
    if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
     $$073100 = 0;
     $49 = $41;
     $50 = $42;
     while (1) {
      $48 = $$073100 + -1 | 0;
      $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0;
      $50 = tempRet0;
      if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
       $$073$lcssa = $48;
       break;
      } else $$073100 = $48;
     }
    } else $$073$lcssa = 0;
    $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0;
    $$174 = $$073$lcssa;
    $87 = $59;
    $88 = tempRet0;
   } else {
    $$174 = $8;
    $87 = $2;
    $88 = $3 & 1048575 | 1048576;
   }
   if (!$11) {
    $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0;
    $65 = tempRet0;
    if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
     $$07194 = 0;
     $72 = $64;
     $73 = $65;
     while (1) {
      $71 = $$07194 + -1 | 0;
      $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0;
      $73 = tempRet0;
      if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
       $$071$lcssa = $71;
       break;
      } else $$07194 = $71;
     }
    } else $$071$lcssa = 0;
    $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0;
    $$172$ph = $$071$lcssa;
    $89 = $82;
    $90 = tempRet0;
   } else {
    $$172$ph = $11;
    $89 = $4;
    $90 = $5 & 1048575 | 1048576;
   }
   $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0;
   $92 = tempRet0;
   $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295;
   L23 : do if (($$174 | 0) > ($$172$ph | 0)) {
    $$27586 = $$174;
    $101 = $92;
    $156 = $97;
    $157 = $87;
    $158 = $88;
    $99 = $91;
    while (1) {
     if ($156) if (($99 | 0) == 0 & ($101 | 0) == 0) break; else {
      $104 = $99;
      $105 = $101;
     } else {
      $104 = $157;
      $105 = $158;
     }
     $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0;
     $107 = tempRet0;
     $108 = $$27586 + -1 | 0;
     $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0;
     $111 = tempRet0;
     $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295;
     if (($108 | 0) > ($$172$ph | 0)) {
      $$27586 = $108;
      $101 = $111;
      $156 = $116;
      $157 = $106;
      $158 = $107;
      $99 = $110;
     } else {
      $$275$lcssa = $108;
      $$lcssa = $116;
      $118 = $110;
      $120 = $111;
      $159 = $106;
      $160 = $107;
      break L23;
     }
    }
    $$070 = $0 * 0.0;
    break L1;
   } else {
    $$275$lcssa = $$174;
    $$lcssa = $97;
    $118 = $91;
    $120 = $92;
    $159 = $87;
    $160 = $88;
   } while (0);
   if ($$lcssa) if (($118 | 0) == 0 & ($120 | 0) == 0) {
    $$070 = $0 * 0.0;
    break;
   } else {
    $123 = $120;
    $125 = $118;
   } else {
    $123 = $160;
    $125 = $159;
   }
   if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
    $$37683 = $$275$lcssa;
    $130 = $125;
    $131 = $123;
    while (1) {
     $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0;
     $133 = tempRet0;
     $134 = $$37683 + -1 | 0;
     if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
      $$37683 = $134;
      $130 = $132;
      $131 = $133;
     } else {
      $$376$lcssa = $134;
      $141 = $132;
      $142 = $133;
      break;
     }
    }
   } else {
    $$376$lcssa = $$275$lcssa;
    $141 = $125;
    $142 = $123;
   }
   if (($$376$lcssa | 0) > 0) {
    $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0;
    $144 = tempRet0;
    $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0;
    $153 = $144 | tempRet0;
    $154 = $143 | $145;
   } else {
    $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0;
    $153 = tempRet0;
    $154 = $150;
   }
   HEAP32[tempDoublePtr >> 2] = $154;
   HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12;
   $$070 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1;
  $$070 = $27 / $27;
 }
 return +$$070;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0111 = 0, $$088 = 0, $$1112 = 0, $$1112$ph = 0, $$8 = 0, $$not114 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $46 = 0, $54 = 0, $55 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$8 = $0; else if ((HEAP8[$0 >> 0] | 0) == 70) {
  $8 = $0 + 1 | 0;
  if (($8 | 0) == ($1 | 0)) $$8 = $0; else {
   if ((HEAP8[$8 >> 0] | 0) == 89) {
    $12 = $0 + 2 | 0;
    if (($12 | 0) == ($1 | 0)) {
     $$8 = $0;
     break;
    } else $$0111 = $12;
   } else $$0111 = $8;
   $14 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0111, $1, $2) | 0;
   if (($14 | 0) == ($$0111 | 0)) $$8 = $0; else {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15049, __ZNSt3__211char_traitsIcE6lengthEPKc(15049) | 0);
    $17 = $2 + 4 | 0;
    $18 = $3 + 11 | 0;
    $19 = $3 + 4 | 0;
    $20 = $4 + 11 | 0;
    $21 = $4 + 4 | 0;
    $$0105$ph = 0;
    $$1112$ph = $14;
    L9 : while (1) {
     $$1112 = $$1112$ph;
     L11 : while (1) {
      if (($$1112 | 0) == ($1 | 0)) {
       label = 10;
       break L9;
      }
      $28 = HEAP8[$$1112 >> 0] | 0;
      $29 = $$1112 + 1 | 0;
      switch ($28 << 24 >> 24) {
      case 69:
       {
        label = 14;
        break L9;
        break;
       }
      case 118:
       {
        $$1112 = $29;
        continue L11;
        break;
       }
      default:
       {}
      }
      $$not114 = ($29 | 0) == ($1 | 0);
      if (!($$not114 | $28 << 24 >> 24 != 82)) if ((HEAP8[$29 >> 0] | 0) == 69) {
       $$0105$ph = 1;
       $$1112$ph = $29;
       continue L9;
      }
      if (!($$not114 | $28 << 24 >> 24 != 79)) if ((HEAP8[$29 >> 0] | 0) == 69) {
       $$0105$ph = 2;
       $$1112$ph = $29;
       continue L9;
      }
      $37 = ((HEAP32[$17 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
      $38 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1112, $1, $2) | 0;
      $42 = ((HEAP32[$17 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
      if (($38 | 0) == ($$1112 | 0) | ($38 | 0) == ($1 | 0)) break L9; else $$088 = $37;
      while (1) {
       if ($$088 >>> 0 >= $42 >>> 0) {
        $$0 = $37;
        break;
       }
       $46 = HEAP8[$18 >> 0] | 0;
       if (($46 << 24 >> 24 < 0 ? HEAP32[$19 >> 2] | 0 : $46 & 255) >>> 0 > 1) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15271) | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$2 >> 2] | 0) + ($$088 * 24 | 0) | 0);
       $54 = HEAP8[$20 >> 0] | 0;
       $55 = $54 << 24 >> 24 < 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $55 ? HEAP32[$4 >> 2] | 0 : $4, $55 ? HEAP32[$21 >> 2] | 0 : $54 & 255) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       $$088 = $$088 + 1 | 0;
      }
      while (1) {
       if ($$0 >>> 0 >= $42 >>> 0) {
        $$1112 = $38;
        continue L11;
       }
       $63 = HEAP32[$17 >> 2] | 0;
       $64 = $63 + -24 | 0;
       $66 = $63;
       while (1) {
        if (($66 | 0) == ($64 | 0)) break;
        $67 = $66 + -24 | 0;
        HEAP32[$17 >> 2] = $67;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($67);
        $66 = HEAP32[$17 >> 2] | 0;
       }
       $$0 = $$0 + 1 | 0;
      }
     }
    }
    L34 : do if ((label | 0) == 10) {
     $23 = HEAP32[$17 >> 2] | 0;
     $24 = $23 + -24 | 0;
     $26 = $23;
     while (1) {
      if (($26 | 0) == ($24 | 0)) break L34;
      $27 = $26 + -24 | 0;
      HEAP32[$17 >> 2] = $27;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $26 = HEAP32[$17 >> 2] | 0;
     }
    } else if ((label | 0) == 14) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15047) | 0;
     switch ($$0105$ph & 3) {
     case 1:
      {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 16475) | 0;
       break;
      }
     case 2:
      {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 16478) | 0;
       break;
      }
     default:
      {}
     }
     $70 = HEAP32[$17 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) != ($70 | 0)) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($70 + -24 | 0, 15081) | 0;
      $75 = HEAP8[$18 >> 0] | 0;
      $76 = $75 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$17 >> 2] | 0) + -12 | 0, 0, $76 ? HEAP32[$3 >> 2] | 0 : $3, $76 ? HEAP32[$19 >> 2] | 0 : $75 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$8 = $29;
      break L1;
     }
    } while (0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$8 = $0;
   }
  }
 } else $$8 = $0; while (0);
 STACKTOP = sp;
 return $$8 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i$i = 0, $$032$ph = 0, $$033 = 0, $$033$ph = 0, $$1 = 0, $$2 = 0, $$2$pn = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $61 = 0, $65 = 0, $67 = 0, label = 0;
 $2 = $1 + 11 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $5 = $1 + 4 | 0;
 L1 : do if (!(($3 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $3 & 255) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0, $1); else {
  $10 = __ZNSt3__211char_traitsIcE6lengthEPKc(15869) | 0;
  $11 = HEAP8[$2 >> 0] | 0;
  if (($10 | 0) == (($11 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $11 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1, 15869, $10) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 15881);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 15952, __ZNSt3__211char_traitsIcE6lengthEPKc(15952) | 0);
   break;
  }
  $20 = __ZNSt3__211char_traitsIcE6lengthEPKc(15965) | 0;
  $21 = HEAP8[$2 >> 0] | 0;
  if (($20 | 0) == (($21 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $21 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1, 15965, $20) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 15978);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16028, __ZNSt3__211char_traitsIcE6lengthEPKc(16028) | 0);
   break;
  }
  $30 = __ZNSt3__211char_traitsIcE6lengthEPKc(16042) | 0;
  $31 = HEAP8[$2 >> 0] | 0;
  if (($30 | 0) == (($31 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $31 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1, 16042, $30) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 16055);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16105, __ZNSt3__211char_traitsIcE6lengthEPKc(16105) | 0);
   break;
  }
  $40 = __ZNSt3__211char_traitsIcE6lengthEPKc(16119) | 0;
  $41 = HEAP8[$2 >> 0] | 0;
  $43 = HEAP32[$5 >> 2] | 0;
  do if (($40 | 0) == (($41 << 24 >> 24 < 0 ? $43 : $41 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1, 16119, $40) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 16133);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16184, __ZNSt3__211char_traitsIcE6lengthEPKc(16184) | 0);
   break L1;
  } else {
   $51 = HEAP8[$2 >> 0] | 0;
   $56 = HEAP32[$5 >> 2] | 0;
   break;
  } else {
   $51 = $41;
   $56 = $43;
  } while (0);
  $50 = $51 << 24 >> 24 < 0;
  $53 = $50 ? HEAP32[$1 >> 2] | 0 : $1;
  $57 = $53 + ($50 ? $56 : $51 & 255) | 0;
  L22 : do if ((HEAP8[$57 + -1 >> 0] | 0) == 62) {
   $$032$ph = 1;
   $$033$ph = $57;
   L23 : while (1) {
    $$033 = $$033$ph;
    L25 : while (1) {
     $61 = $$033 + -1 | 0;
     if (($61 | 0) == ($53 | 0)) break L23;
     $65 = $$033 + -2 | 0;
     switch (HEAP8[$65 >> 0] | 0) {
     case 60:
      {
       label = 23;
       break L25;
       break;
      }
     case 62:
      {
       label = 24;
       break L25;
       break;
      }
     default:
      $$033 = $61;
     }
    }
    if ((label | 0) == 23) {
     label = 0;
     $67 = $$032$ph + -1 | 0;
     if (!$67) {
      $$2 = $65;
      break L22;
     } else {
      $$032$ph = $67;
      $$033$ph = $61;
      continue;
     }
    } else if ((label | 0) == 24) {
     label = 0;
     $$032$ph = $$032$ph + 1 | 0;
     $$033$ph = $61;
     continue;
    }
   }
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break L1;
    HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
  } else $$2 = $57; while (0);
  $$2$pn = $$2;
  while (1) {
   $$0 = $$2$pn + -1 | 0;
   if (($$0 | 0) == ($53 | 0)) {
    $$1 = $53;
    break;
   }
   if ((HEAP8[$$0 >> 0] | 0) == 58) {
    $$1 = $$2$pn;
    break;
   } else $$2$pn = $$0;
  }
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0, $$1, $$2);
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$4 = 0, $13 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $49 = 0, $50 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$4 = $0; else if ((HEAP8[$0 >> 0] | 0) == 90) {
  $7 = $0 + 1 | 0;
  $8 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($7, $1, $2) | 0;
  if (($8 | 0) == ($7 | 0) | ($8 | 0) == ($1 | 0)) $$4 = $0; else if ((HEAP8[$8 >> 0] | 0) == 69) {
   $13 = $8 + 1 | 0;
   if (($13 | 0) == ($1 | 0)) $$4 = $0; else {
    $17 = $8 + 2 | 0;
    switch (HEAP8[$13 >> 0] | 0) {
    case 115:
     {
      $18 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($17, $1) | 0;
      $21 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) {
       $$4 = $18;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($21 + -24 | 0, 16408) | 0;
      $$4 = $18;
      break L1;
      break;
     }
    case 100:
     {
      if (($17 | 0) == ($1 | 0)) {
       $$4 = $0;
       break L1;
      }
      $25 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($17, $1) | 0;
      if (($25 | 0) == ($1 | 0)) {
       $$4 = $0;
       break L1;
      }
      if ((HEAP8[$25 >> 0] | 0) != 95) {
       $$4 = $0;
       break L1;
      }
      $29 = $25 + 1 | 0;
      $30 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($29, $1, $2) | 0;
      $32 = $2 + 4 | 0;
      if (($30 | 0) == ($29 | 0)) {
       $57 = HEAP32[$32 >> 2] | 0;
       $58 = $57 + -24 | 0;
       $60 = $57;
       while (1) {
        if (($60 | 0) == ($58 | 0)) {
         $$4 = $0;
         break L1;
        }
        $61 = $60 + -24 | 0;
        HEAP32[$32 >> 2] = $61;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($61);
        $60 = HEAP32[$32 >> 2] | 0;
       }
      }
      $33 = HEAP32[$32 >> 2] | 0;
      if ((($33 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
       $$4 = $0;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $33 + -24 | 0);
      $40 = HEAP32[$32 >> 2] | 0;
      $41 = $40 + -24 | 0;
      $43 = $40;
      while (1) {
       if (($43 | 0) == ($41 | 0)) break;
       $44 = $43 + -24 | 0;
       HEAP32[$32 >> 2] = $44;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
       $43 = HEAP32[$32 >> 2] | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($40 + -48 | 0, 15121) | 0;
      $49 = HEAP8[$3 + 11 >> 0] | 0;
      $50 = $49 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$32 >> 2] | 0) + -24 | 0, $50 ? HEAP32[$3 >> 2] | 0 : $3, $50 ? HEAP32[$3 + 4 >> 2] | 0 : $49 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$4 = $30;
      break L1;
      break;
     }
    default:
     {
      $62 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
      if (($62 | 0) == ($13 | 0)) {
       $90 = $2 + 4 | 0;
       $91 = HEAP32[$90 >> 2] | 0;
       $92 = $91 + -24 | 0;
       $94 = $91;
       while (1) {
        if (($94 | 0) == ($92 | 0)) {
         $$4 = $0;
         break L1;
        }
        $95 = $94 + -24 | 0;
        HEAP32[$90 >> 2] = $95;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($95);
        $94 = HEAP32[$90 >> 2] | 0;
       }
      }
      $64 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($62, $1) | 0;
      $65 = $2 + 4 | 0;
      $66 = HEAP32[$65 >> 2] | 0;
      if ((($66 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
       $$4 = $64;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $66 + -24 | 0);
      $73 = HEAP32[$65 >> 2] | 0;
      $74 = $73 + -24 | 0;
      $76 = $73;
      while (1) {
       if (($76 | 0) == ($74 | 0)) break;
       $77 = $76 + -24 | 0;
       HEAP32[$65 >> 2] = $77;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($77);
       $76 = HEAP32[$65 >> 2] | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($73 + -48 | 0, 15121) | 0;
      $82 = HEAP8[$3 + 11 >> 0] | 0;
      $83 = $82 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$65 >> 2] | 0) + -24 | 0, $83 ? HEAP32[$3 >> 2] | 0 : $3, $83 ? HEAP32[$3 + 4 >> 2] | 0 : $82 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$4 = $64;
      break L1;
     }
    }
   }
  } else $$4 = $0;
 } else $$4 = $0; while (0);
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$3 = 0, $14 = 0, $16 = 0, $18 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $47 = 0, $49 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $71 = 0, $76 = 0, $78 = 0, $79 = 0, $86 = 0, $87 = 0, $89 = 0, $90 = 0, $93 = 0, $94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 8 | 0;
 $4 = sp;
 L1 : do if (($1 - $0 | 0) > 1) {
  $$ = (HEAP8[$0 >> 0] | 0) == 76 ? $0 + 1 | 0 : $0;
  switch (HEAP8[$$ >> 0] | 0) {
  case 78:
   {
    $14 = __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($$, $1, $2) | 0;
    $$3 = ($14 | 0) == ($$ | 0) ? $0 : $14;
    break L1;
    break;
   }
  case 90:
   {
    $16 = __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($$, $1, $2) | 0;
    $$3 = ($16 | 0) == ($$ | 0) ? $0 : $16;
    break L1;
    break;
   }
  default:
   {
    $18 = __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($$, $1, $2) | 0;
    if (($18 | 0) == ($$ | 0)) {
     $71 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$, $1, $2) | 0;
     if (($71 | 0) == ($$ | 0) | ($71 | 0) == ($1 | 0)) {
      $$3 = $0;
      break L1;
     }
     if ((HEAP8[$71 >> 0] | 0) != 73) {
      $$3 = $0;
      break L1;
     }
     $76 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($71, $1, $2) | 0;
     if (($76 | 0) == ($71 | 0)) {
      $$3 = $0;
      break L1;
     }
     $78 = $2 + 4 | 0;
     $79 = HEAP32[$78 >> 2] | 0;
     if ((($79 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$3 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $79 + -24 | 0);
     $86 = HEAP32[$78 >> 2] | 0;
     $87 = $86 + -24 | 0;
     $89 = $86;
     while (1) {
      if (($89 | 0) == ($87 | 0)) break;
      $90 = $89 + -24 | 0;
      HEAP32[$78 >> 2] = $90;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($90);
      $89 = HEAP32[$78 >> 2] | 0;
     }
     $93 = HEAP8[$3 + 11 >> 0] | 0;
     $94 = $93 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($86 + -48 | 0, $94 ? HEAP32[$3 >> 2] | 0 : $3, $94 ? HEAP32[$3 + 4 >> 2] | 0 : $93 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $76;
     break L1;
    }
    if (($18 | 0) == ($1 | 0)) {
     $$3 = $1;
     break L1;
    }
    if ((HEAP8[$18 >> 0] | 0) != 73) {
     $$3 = $18;
     break L1;
    }
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($25 | 0)) {
     $$3 = $0;
     break L1;
    }
    HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3, $25 + -24 | 0, $4);
    $28 = $2 + 20 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
     HEAP32[$29 >> 2] = 0;
     $34 = $29 + 4 | 0;
     HEAP32[$34 >> 2] = 0;
     $36 = HEAP32[$3 + 12 >> 2] | 0;
     HEAP32[$29 + 8 >> 2] = 0;
     HEAP32[$29 + 12 >> 2] = $36;
     HEAP32[$29 >> 2] = HEAP32[$3 >> 2];
     $39 = $3 + 4 | 0;
     HEAP32[$34 >> 2] = HEAP32[$39 >> 2];
     $41 = $3 + 8 | 0;
     HEAP32[$29 + 8 >> 2] = HEAP32[$41 >> 2];
     HEAP32[$41 >> 2] = 0;
     HEAP32[$39 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
    $47 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($18, $1, $2) | 0;
    if (($47 | 0) == ($18 | 0)) {
     $$3 = $0;
     break L1;
    }
    $49 = HEAP32[$24 >> 2] | 0;
    if ((($49 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$3 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $49 + -24 | 0);
    $56 = HEAP32[$24 >> 2] | 0;
    $57 = $56 + -24 | 0;
    $59 = $56;
    while (1) {
     if (($59 | 0) == ($57 | 0)) break;
     $60 = $59 + -24 | 0;
     HEAP32[$24 >> 2] = $60;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($60);
     $59 = HEAP32[$24 >> 2] | 0;
    }
    $63 = HEAP8[$3 + 11 >> 0] | 0;
    $64 = $63 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($56 + -48 | 0, $64 ? HEAP32[$3 >> 2] | 0 : $3, $64 ? HEAP32[$3 + 4 >> 2] | 0 : $63 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = $47;
    break L1;
   }
  }
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _arVecTridiagonalize($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0158 = 0, $$0160 = 0, $$0164 = 0, $$0165 = 0.0, $$1 = 0, $$1159 = 0, $$1161 = 0, $$1161$in = 0, $$1166 = 0.0, $$2 = 0, $$2162 = 0, $$3 = 0, $$3163 = 0, $105 = 0, $106 = 0, $109 = 0, $113 = 0, $115 = 0, $117 = 0, $118 = 0, $121 = 0, $124 = 0.0, $131 = 0, $17 = 0, $18 = 0, $19 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $36 = 0, $39 = 0, $4 = 0, $43 = 0, $48 = 0.0, $58 = 0.0, $6 = 0, $64 = 0.0, $67 = 0.0, $69 = 0, $70 = 0, $72 = 0.0, $73 = 0, $84 = 0, $89 = 0, $90 = 0, $91 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp + 8 | 0;
 $4 = sp;
 $6 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if (($6 | 0) == (HEAP32[$0 + 4 >> 2] | 0)) if (($6 | 0) == (HEAP32[$1 + 4 >> 2] | 0)) if (($6 | 0) == ((HEAP32[$2 + 4 >> 2] | 0) + 1 | 0)) {
  $17 = $6 + -2 | 0;
  $18 = $3 + 4 | 0;
  $19 = $4 + 4 | 0;
  $$0 = 0;
  L5 : while (1) {
   if (($$0 | 0) >= ($17 | 0)) break;
   $23 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($$0, $6) | 0) << 3) | 0;
   HEAPF64[(HEAP32[$1 >> 2] | 0) + ($$0 << 3) >> 3] = +HEAPF64[$23 + ($$0 << 3) >> 3];
   $29 = $6 - $$0 + -1 | 0;
   HEAP32[$18 >> 2] = $29;
   $30 = $$0 + 1 | 0;
   $31 = $23 + ($30 << 3) | 0;
   HEAP32[$3 >> 2] = $31;
   $32 = +_arVecHousehold($3);
   HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$0 << 3) >> 3] = $32;
   if ($32 == 0.0) {
    $$0 = $30;
    continue;
   }
   $36 = HEAP32[$1 >> 2] | 0;
   $$0160 = $30;
   while (1) {
    if (($$0160 | 0) < ($6 | 0)) {
     $$0158 = $30;
     $$0165 = 0.0;
    } else break;
    while (1) {
     if (($$0158 | 0) >= ($$0160 | 0)) break;
     $43 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($$0158, $6) | 0) + $$0160 << 3) | 0;
     $48 = $$0165 + +HEAPF64[$43 >> 3] * +HEAPF64[$23 + ($$0158 << 3) >> 3];
     $$0158 = $$0158 + 1 | 0;
     $$0165 = $48;
    }
    $39 = Math_imul($$0160, $6) | 0;
    $$1159 = $$0160;
    $$1166 = $$0165;
    while (1) {
     if (($$1159 | 0) >= ($6 | 0)) break;
     $58 = $$1166 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + ($$1159 + $39 << 3) >> 3] * +HEAPF64[$23 + ($$1159 << 3) >> 3];
     $$1159 = $$1159 + 1 | 0;
     $$1166 = $58;
    }
    HEAPF64[$36 + ($$0160 << 3) >> 3] = $$1166;
    $$0160 = $$0160 + 1 | 0;
   }
   HEAP32[$19 >> 2] = $29;
   HEAP32[$18 >> 2] = $29;
   HEAP32[$3 >> 2] = $31;
   HEAP32[$4 >> 2] = $36 + ($30 << 3);
   $64 = +_arVecInnerproduct($3, $4) * .5;
   $$1161$in = $6;
   L20 : while (1) {
    $$1161 = $$1161$in + -1 | 0;
    if (($$1161 | 0) <= ($$0 | 0)) {
     $$0 = $30;
     continue L5;
    }
    $67 = +HEAPF64[$23 + ($$1161 << 3) >> 3];
    $69 = HEAP32[$1 >> 2] | 0;
    $70 = $69 + ($$1161 << 3) | 0;
    $72 = +HEAPF64[$70 >> 3] - $64 * $67;
    HEAPF64[$70 >> 3] = $72;
    $73 = Math_imul($$1161, $6) | 0;
    $$2 = $$1161;
    while (1) {
     if (($$2 | 0) >= ($6 | 0)) {
      $$1161$in = $$1161;
      continue L20;
     }
     $84 = (HEAP32[$0 >> 2] | 0) + ($$2 + $73 << 3) | 0;
     HEAPF64[$84 >> 3] = +HEAPF64[$84 >> 3] - ($67 * +HEAPF64[$69 + ($$2 << 3) >> 3] + $72 * +HEAPF64[$23 + ($$2 << 3) >> 3]);
     $$2 = $$2 + 1 | 0;
    }
   }
  }
  $89 = $6 + -1 | 0;
  if (($6 | 0) > 1) {
   $90 = HEAP32[$0 >> 2] | 0;
   $91 = Math_imul($17, $6) | 0;
   $95 = HEAP32[$1 >> 2] | 0;
   HEAPF64[$95 + ($17 << 3) >> 3] = +HEAPF64[$90 + ($91 + $17 << 3) >> 3];
   HEAPF64[(HEAP32[$2 >> 2] | 0) + ($17 << 3) >> 3] = +HEAPF64[$90 + ($91 + $89 << 3) >> 3];
   $106 = $90;
   $109 = $95;
   label = 24;
  } else if (($6 | 0) == 1) {
   $106 = HEAP32[$0 >> 2] | 0;
   $109 = HEAP32[$1 >> 2] | 0;
   label = 24;
  } else $$1 = $89;
  if ((label | 0) == 24) {
   $105 = $106 + ((Math_imul($89, $6) | 0) + $89 << 3) | 0;
   HEAPF64[$109 + ($89 << 3) >> 3] = +HEAPF64[$105 >> 3];
   $$1 = $89;
  }
  while (1) {
   if (($$1 | 0) <= -1) {
    $$0164 = 0;
    break L1;
   }
   $113 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($$1, $6) | 0) << 3) | 0;
   L36 : do if (($$1 | 0) < ($17 | 0)) {
    $115 = $$1 + 1 | 0;
    $117 = $6 - $$1 + -1 | 0;
    $118 = $113 + ($115 << 3) | 0;
    $$2162 = $115;
    while (1) {
     if (($$2162 | 0) >= ($6 | 0)) {
      $$3163 = 0;
      break L36;
     }
     HEAP32[$19 >> 2] = $117;
     HEAP32[$18 >> 2] = $117;
     HEAP32[$3 >> 2] = $118;
     $121 = Math_imul($$2162, $6) | 0;
     HEAP32[$4 >> 2] = (HEAP32[$0 >> 2] | 0) + ($115 + $121 << 3);
     $124 = +_arVecInnerproduct($3, $4);
     $$3 = $115;
     while (1) {
      if (($$3 | 0) >= ($6 | 0)) break;
      $131 = (HEAP32[$0 >> 2] | 0) + ($$3 + $121 << 3) | 0;
      HEAPF64[$131 >> 3] = +HEAPF64[$131 >> 3] - $124 * +HEAPF64[$113 + ($$3 << 3) >> 3];
      $$3 = $$3 + 1 | 0;
     }
     $$2162 = $$2162 + 1 | 0;
    }
   } else $$3163 = 0; while (0);
   while (1) {
    if (($$3163 | 0) >= ($6 | 0)) break;
    HEAPF64[$113 + ($$3163 << 3) >> 3] = 0.0;
    $$3163 = $$3163 + 1 | 0;
   }
   HEAPF64[$113 + ($$1 << 3) >> 3] = 1.0;
   $$1 = $$1 + -1 | 0;
  }
 } else $$0164 = -1; else $$0164 = -1; else $$0164 = -1; while (0);
 STACKTOP = sp;
 return $$0164 | 0;
}

function _arGetContour($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0135 = 0, $$0136 = 0, $$0138 = 0, $$0139 = 0, $$0141 = 0, $$1 = 0, $$1142 = 0, $$1142$in = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $10 = 0, $102 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $50 = 0, $52 = 0, $53 = 0, $58 = 0, $60 = 0, $61 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $90 = 0, $93 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80032 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80032);
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $7 = sp + 40024 | 0;
 $8 = sp + 24 | 0;
 $10 = HEAP32[$5 + 8 >> 2] | 0;
 $11 = Math_imul($10, $1) | 0;
 $12 = HEAP32[$5 >> 2] | 0;
 $16 = HEAP32[$5 + 4 >> 2] | 0;
 $$0135 = $12;
 $$0138 = $0 + ($11 + $12 << 1) | 0;
 while (1) {
  if (($$0135 | 0) > ($16 | 0)) {
   label = 6;
   break;
  }
  $18 = HEAP16[$$0138 >> 1] | 0;
  if ($18 << 16 >> 16 > 0) if ((HEAP32[$3 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0) == ($4 | 0)) {
   label = 7;
   break;
  }
  $$0135 = $$0135 + 1 | 0;
  $$0138 = $$0138 + 2 | 0;
 }
 do if ((label | 0) == 6) {
  _arLog(3, 3656, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 7) {
  $27 = $6 + 24 | 0;
  HEAP32[$27 >> 2] = 1;
  $28 = $6 + 28 | 0;
  HEAP32[$28 >> 2] = $$0135;
  $29 = $6 + 40028 | 0;
  HEAP32[$29 >> 2] = $10;
  $$0141 = 5;
  $31 = $10;
  $33 = $$0135;
  $52 = 1;
  while (1) {
   $34 = $0 + ((Math_imul($31, $1) | 0) + $33 << 1) | 0;
   $$1 = 0;
   $$1142$in = $$0141 + 5 | 0;
   while (1) {
    $$1142 = ($$1142$in | 0) % 8 | 0;
    $37 = 424 + ($$1142 << 2) | 0;
    $38 = 456 + ($$1142 << 2) | 0;
    if (($$1 | 0) >= 8) {
     label = 12;
     break;
    }
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = Math_imul($39, $1) | 0;
    $41 = HEAP32[$37 >> 2] | 0;
    if ((HEAP16[$34 + ($40 + $41 << 1) >> 1] | 0) > 0) {
     $50 = $41;
     $58 = $39;
     break;
    }
    $$1 = $$1 + 1 | 0;
    $$1142$in = $$1142 + 1 | 0;
   }
   if ((label | 0) == 12) {
    label = 0;
    if (($$1 | 0) == 8) {
     label = 14;
     break;
    }
    $50 = HEAP32[$37 >> 2] | 0;
    $58 = HEAP32[$38 >> 2] | 0;
   }
   HEAP32[$6 + 28 + ($52 << 2) >> 2] = $50 + $33;
   $53 = HEAP32[$27 >> 2] | 0;
   HEAP32[$6 + 40028 + ($53 << 2) >> 2] = $58 + (HEAP32[$6 + 40028 + ($53 + -1 << 2) >> 2] | 0);
   $60 = HEAP32[$27 >> 2] | 0;
   $61 = $6 + 28 + ($60 << 2) | 0;
   if ((HEAP32[$61 >> 2] | 0) == ($$0135 | 0)) if ((HEAP32[$6 + 40028 + ($60 << 2) >> 2] | 0) == ($10 | 0)) {
    $$0136 = 0;
    $$0139 = 0;
    $$2 = 1;
    label = 20;
    break;
   }
   $67 = $60 + 1 | 0;
   HEAP32[$27 >> 2] = $67;
   if (($67 | 0) == 9999) {
    label = 19;
    break;
   }
   $$0141 = $$1142;
   $31 = HEAP32[$6 + 40028 + ($60 << 2) >> 2] | 0;
   $33 = HEAP32[$61 >> 2] | 0;
   $52 = $67;
  }
  if ((label | 0) == 14) {
   _arLog(3, 3663, $vararg_buffer1);
   $$0 = -1;
   break;
  } else if ((label | 0) == 19) {
   _arLog(3, 3670, $vararg_buffer3);
   $$0 = -1;
   break;
  } else if ((label | 0) == 20) {
   while (1) {
    label = 0;
    if (($$2 | 0) >= ($60 | 0)) {
     $$3 = 0;
     break;
    }
    $72 = (HEAP32[$6 + 28 + ($$2 << 2) >> 2] | 0) - $$0135 | 0;
    $73 = Math_imul($72, $72) | 0;
    $76 = (HEAP32[$6 + 40028 + ($$2 << 2) >> 2] | 0) - $10 | 0;
    $78 = (Math_imul($76, $76) | 0) + $73 | 0;
    $79 = ($78 | 0) > ($$0139 | 0);
    $$0136 = $79 ? $$2 : $$0136;
    $$0139 = $79 ? $78 : $$0139;
    $$2 = $$2 + 1 | 0;
    label = 20;
   }
   while (1) {
    if (($$3 | 0) >= ($$0136 | 0)) {
     $$4 = $$0136;
     $90 = $60;
     break;
    }
    HEAP32[$7 + ($$3 << 2) >> 2] = HEAP32[$6 + 28 + ($$3 << 2) >> 2];
    HEAP32[$8 + ($$3 << 2) >> 2] = HEAP32[$6 + 40028 + ($$3 << 2) >> 2];
    $$3 = $$3 + 1 | 0;
   }
   while (1) {
    if (($$4 | 0) >= ($90 | 0)) {
     $$5 = 0;
     break;
    }
    $93 = $$4 - $$0136 | 0;
    HEAP32[$6 + 28 + ($93 << 2) >> 2] = HEAP32[$6 + 28 + ($$4 << 2) >> 2];
    HEAP32[$6 + 40028 + ($93 << 2) >> 2] = HEAP32[$6 + 40028 + ($$4 << 2) >> 2];
    $$4 = $$4 + 1 | 0;
    $90 = HEAP32[$27 >> 2] | 0;
   }
   while (1) {
    if (($$5 | 0) >= ($$0136 | 0)) break;
    $102 = $$5 - $$0136 | 0;
    HEAP32[$6 + 28 + ((HEAP32[$27 >> 2] | 0) + $102 << 2) >> 2] = HEAP32[$7 + ($$5 << 2) >> 2];
    HEAP32[$6 + 40028 + ((HEAP32[$27 >> 2] | 0) + $102 << 2) >> 2] = HEAP32[$8 + ($$5 << 2) >> 2];
    $$5 = $$5 + 1 | 0;
   }
   HEAP32[$6 + 28 + (HEAP32[$27 >> 2] << 2) >> 2] = HEAP32[$28 >> 2];
   HEAP32[$6 + 40028 + (HEAP32[$27 >> 2] << 2) >> 2] = HEAP32[$29 >> 2];
   HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
   $$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arPattLoadFromBuffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0140 = 0, $$0141 = 0, $$0143 = 0, $$0146 = 0, $$0149 = 0, $$0150 = 0, $$0151 = 0, $$0152 = 0, $$1 = 0, $$1142 = 0, $$1144 = 0, $$1147 = 0, $$2 = 0, $$2145 = 0, $$2148 = 0, $$3 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $47 = 0, $51 = 0, $57 = 0, $6 = 0, $64 = 0, $67 = 0, $69 = 0, $75 = 0, $77 = 0, $79 = 0, $82 = 0.0, $87 = 0, $92 = 0, $94 = 0, $96 = 0, $99 = 0.0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 do if (!$0) {
  _arLog(3, 3965, sp);
  $$0 = -1;
 } else {
  if (!$1) {
   _arLog(3, 3990, $vararg_buffer1);
   $$0 = -1;
   break;
  }
  $4 = $0 + 8 | 0;
  $6 = HEAP32[$0 + 4 >> 2] | 0;
  $$0146 = 0;
  while (1) {
   if (($$0146 | 0) >= ($6 | 0)) break;
   if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + ($$0146 << 2) >> 2] | 0)) break;
   $$0146 = $$0146 + 1 | 0;
  }
  if (($$0146 | 0) == ($6 | 0)) $$0 = -1; else {
   $14 = ___strdup($1) | 0;
   if (!$14) {
    _arLog(3, 4035, $vararg_buffer3);
    $$0 = -1;
    break;
   }
   $17 = $0 + 28 | 0;
   $18 = $0 + 12 | 0;
   $19 = $$0146 << 2;
   $20 = $0 + 20 | 0;
   $21 = $0 + 16 | 0;
   $22 = $0 + 24 | 0;
   $$0140 = _strtok($14, 4058) | 0;
   $$0152 = 0;
   L16 : while (1) {
    if (($$0152 | 0) >= 4) {
     label = 35;
     break;
    }
    $24 = $$0152 + $19 | 0;
    $$0143 = 0;
    $$0149 = 0;
    $$1 = $$0140;
    while (1) {
     if (($$0149 | 0) >= 3) break;
     $26 = ($$0149 | 0) == 0;
     $27 = ($$0149 | 0) == 2;
     $$0150 = 0;
     $$1144 = $$0143;
     $$2 = $$1;
     $29 = HEAP32[$17 >> 2] | 0;
     while (1) {
      if (($$0150 | 0) < ($29 | 0)) {
       $$0151 = 0;
       $$2145 = $$1144;
       $$3 = $$2;
       $31 = $29;
      } else break;
      while (1) {
       if (($$0151 | 0) >= ($31 | 0)) break;
       if (!$$3) {
        label = 20;
        break L16;
       }
       $33 = _atoi($$3) | 0;
       $34 = _strtok(0, 4058) | 0;
       $35 = 255 - $33 | 0;
       $44 = (HEAP32[(HEAP32[$18 >> 2] | 0) + ($24 << 2) >> 2] | 0) + ((((Math_imul(HEAP32[$17 >> 2] | 0, $$0150) | 0) + $$0151 | 0) * 3 | 0) + $$0149 << 2) | 0;
       HEAP32[$44 >> 2] = $35;
       $47 = HEAP32[(HEAP32[$20 >> 2] | 0) + ($24 << 2) >> 2] | 0;
       $51 = $47 + ((Math_imul(HEAP32[$17 >> 2] | 0, $$0150) | 0) + $$0151 << 2) | 0;
       if ($26) HEAP32[$51 >> 2] = $35; else {
        HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $35;
        if ($27) {
         $57 = $47 + ((Math_imul(HEAP32[$17 >> 2] | 0, $$0150) | 0) + $$0151 << 2) | 0;
         HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) / 3 | 0;
        }
       }
       $$0151 = $$0151 + 1 | 0;
       $$2145 = $35 + $$2145 | 0;
       $$3 = $34;
       $31 = HEAP32[$17 >> 2] | 0;
      }
      $$0150 = $$0150 + 1 | 0;
      $$1144 = $$2145;
      $$2 = $$3;
      $29 = $31;
     }
     $$0143 = $$1144;
     $$0149 = $$0149 + 1 | 0;
     $$1 = $$2;
    }
    $64 = HEAP32[$17 >> 2] | 0;
    $67 = ($$0143 | 0) / (Math_imul($64 * 3 | 0, $64) | 0) | 0;
    $$0141 = 0;
    $$1147 = 0;
    $69 = $64;
    while (1) {
     if (($$1147 | 0) >= (Math_imul($69 * 3 | 0, $69) | 0)) break;
     $75 = (HEAP32[(HEAP32[$18 >> 2] | 0) + ($24 << 2) >> 2] | 0) + ($$1147 << 2) | 0;
     $77 = (HEAP32[$75 >> 2] | 0) - $67 | 0;
     HEAP32[$75 >> 2] = $77;
     $79 = (Math_imul($77, $77) | 0) + $$0141 | 0;
     $$0141 = $79;
     $$1147 = $$1147 + 1 | 0;
     $69 = HEAP32[$17 >> 2] | 0;
    }
    $82 = +Math_sqrt(+(+($$0141 | 0)));
    HEAPF64[(HEAP32[$21 >> 2] | 0) + ($24 << 3) >> 3] = $82 == 0.0 ? 1.0e-07 : $82;
    $$1142 = 0;
    $$2148 = 0;
    $87 = $69;
    while (1) {
     if (($$2148 | 0) >= (Math_imul($87, $87) | 0)) break;
     $92 = (HEAP32[(HEAP32[$20 >> 2] | 0) + ($24 << 2) >> 2] | 0) + ($$2148 << 2) | 0;
     $94 = (HEAP32[$92 >> 2] | 0) - $67 | 0;
     HEAP32[$92 >> 2] = $94;
     $96 = (Math_imul($94, $94) | 0) + $$1142 | 0;
     $$1142 = $96;
     $$2148 = $$2148 + 1 | 0;
     $87 = HEAP32[$17 >> 2] | 0;
    }
    $99 = +Math_sqrt(+(+($$1142 | 0)));
    HEAPF64[(HEAP32[$22 >> 2] | 0) + ($24 << 3) >> 3] = $99 == 0.0 ? 1.0e-07 : $99;
    $$0140 = $$1;
    $$0152 = $$0152 + 1 | 0;
   }
   if ((label | 0) == 20) {
    _arLog(3, 4063, $vararg_buffer5);
    _free($14);
    $$0 = -1;
    break;
   } else if ((label | 0) == 35) {
    _free($14);
    HEAP32[(HEAP32[$4 >> 2] | 0) + ($$0146 << 2) >> 2] = 1;
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
    $$0 = $$0146;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function _arDetectMarker2($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $$0127 = 0, $$0128 = 0, $$0131 = 0, $$0132 = 0, $$0133 = 0, $$0134 = 0, $$1 = 0, $$1129 = 0, $$2 = 0, $$2130 = 0, $$2130$ph = 0, $$3 = 0, $$ph = 0, $100 = 0, $102 = 0, $105 = 0, $108 = 0, $111 = 0, $114 = 0, $117 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $25 = 0, $52 = 0, $57 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $70 = 0.0, $75 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $9 = 0, $93 = 0, $95 = 0, label = 0, $$0128$looptemp = 0;
 $9 = ($3 | 0) == 1;
 if ($9) {
  $$0 = ($0 | 0) / 2 | 0;
  $$0132 = ($1 | 0) / 2 | 0;
  $$0133 = ($4 | 0) / 4 | 0;
  $$0134 = ($5 | 0) / 4 | 0;
 } else {
  $$0 = $0;
  $$0132 = $1;
  $$0133 = $4;
  $$0134 = $5;
 }
 HEAP32[$8 >> 2] = 0;
 $14 = $2 + 8 | 0;
 $15 = $$0 + -2 | 0;
 $16 = $$0132 + -2 | 0;
 $17 = $2 + 1179664 | 0;
 $$0128 = 0;
 while (1) {
  if (($$0128 | 0) >= (HEAP32[$14 >> 2] | 0)) {
   label = 5;
   break;
  }
  $20 = $2 + 12 + ($$0128 << 2) | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  $$0128$looptemp = $$0128;
  $$0128 = $$0128 + 1 | 0;
  if (($21 | 0) < ($$0134 | 0) | ($21 | 0) > ($$0133 | 0)) {
   $$0128 = $$0128;
   continue;
  }
  $25 = $2 + 131084 + ($$0128$looptemp << 4) | 0;
  if ((HEAP32[$25 >> 2] | 0) == 1) {
   $$0128 = $$0128;
   continue;
  }
  if ((HEAP32[$2 + 131084 + ($$0128$looptemp << 4) + 4 >> 2] | 0) == ($15 | 0)) {
   $$0128 = $$0128;
   continue;
  }
  if ((HEAP32[$2 + 131084 + ($$0128$looptemp << 4) + 8 >> 2] | 0) == 1) {
   $$0128 = $$0128;
   continue;
  }
  if ((HEAP32[$2 + 131084 + ($$0128$looptemp << 4) + 12 >> 2] | 0) == ($16 | 0)) {
   $$0128 = $$0128;
   continue;
  }
  if ((_arGetContour(HEAP32[$2 >> 2] | 0, $$0, 0, $17, $$0128, $25, $7 + ((HEAP32[$8 >> 2] | 0) * 80048 | 0) | 0) | 0) < 0) {
   $$0128 = $$0128;
   continue;
  }
  if ((_check_square(HEAP32[$20 >> 2] | 0, $7 + ((HEAP32[$8 >> 2] | 0) * 80048 | 0) | 0, $6) | 0) < 0) {
   $$0128 = $$0128;
   continue;
  }
  HEAP32[$7 + ((HEAP32[$8 >> 2] | 0) * 80048 | 0) >> 2] = HEAP32[$20 >> 2];
  $52 = HEAP32[$8 >> 2] | 0;
  HEAPF64[$7 + ($52 * 80048 | 0) + 8 >> 3] = +HEAPF64[$2 + 655376 + ($$0128$looptemp << 4) >> 3];
  HEAPF64[$7 + ($52 * 80048 | 0) + 16 >> 3] = +HEAPF64[$2 + 655376 + ($$0128$looptemp << 4) + 8 >> 3];
  $57 = $52 + 1 | 0;
  HEAP32[$8 >> 2] = $57;
  if (($57 | 0) == 60) {
   $$1129 = 0;
   $60 = 60;
   break;
  }
 }
 if ((label | 0) == 5) {
  $$1129 = 0;
  $60 = HEAP32[$8 >> 2] | 0;
 }
 L16 : while (1) {
  if (($$1129 | 0) >= ($60 | 0)) {
   $$2130$ph = 0;
   $$ph = $60;
   break;
  }
  $61 = $$1129 + 1 | 0;
  $62 = $7 + ($$1129 * 80048 | 0) + 8 | 0;
  $63 = $7 + ($$1129 * 80048 | 0) + 16 | 0;
  $64 = $7 + ($$1129 * 80048 | 0) | 0;
  $$0127 = $61;
  $66 = $60;
  while (1) {
   if (($$0127 | 0) >= ($66 | 0)) {
    $$1129 = $61;
    $60 = $66;
    continue L16;
   }
   $70 = +HEAPF64[$62 >> 3] - +HEAPF64[$7 + ($$0127 * 80048 | 0) + 8 >> 3];
   $75 = +HEAPF64[$63 >> 3] - +HEAPF64[$7 + ($$0127 * 80048 | 0) + 16 >> 3];
   $77 = $70 * $70 + $75 * $75;
   $78 = HEAP32[$64 >> 2] | 0;
   $79 = $7 + ($$0127 * 80048 | 0) | 0;
   $80 = HEAP32[$79 >> 2] | 0;
   if (($78 | 0) > ($80 | 0)) {
    if ($77 < +(($78 | 0) / 4 | 0 | 0)) HEAP32[$79 >> 2] = 0;
   } else if ($77 < +(($80 | 0) / 4 | 0 | 0)) HEAP32[$64 >> 2] = 0;
   $$0127 = $$0127 + 1 | 0;
   $66 = HEAP32[$8 >> 2] | 0;
  }
 }
 L28 : while (1) {
  $$2130 = $$2130$ph;
  while (1) {
   if (($$2130 | 0) >= ($$ph | 0)) break L28;
   $93 = $$2130 + 1 | 0;
   if (!(HEAP32[$7 + ($$2130 * 80048 | 0) >> 2] | 0)) {
    $$1 = $93;
    $95 = $$ph;
    break;
   } else $$2130 = $93;
  }
  while (1) {
   if (($$1 | 0) >= ($95 | 0)) break;
   _memcpy($7 + (($$1 + -1 | 0) * 80048 | 0) | 0, $7 + ($$1 * 80048 | 0) | 0, 80048) | 0;
   $$1 = $$1 + 1 | 0;
   $95 = HEAP32[$8 >> 2] | 0;
  }
  $100 = $95 + -1 | 0;
  HEAP32[$8 >> 2] = $100;
  $$2130$ph = $93;
  $$ph = $100;
 }
 L38 : do if ($9) {
  $$0131 = $7;
  $$3 = 0;
  $102 = $$ph;
  while (1) {
   if (($$3 | 0) >= ($102 | 0)) break L38;
   HEAP32[$$0131 >> 2] = HEAP32[$$0131 >> 2] << 2;
   $105 = $$0131 + 8 | 0;
   HEAPF64[$105 >> 3] = +HEAPF64[$105 >> 3] * 2.0;
   $108 = $$0131 + 16 | 0;
   HEAPF64[$108 >> 3] = +HEAPF64[$108 >> 3] * 2.0;
   $111 = $$0131 + 24 | 0;
   $$2 = 0;
   while (1) {
    if (($$2 | 0) >= (HEAP32[$111 >> 2] | 0)) break;
    $114 = $$0131 + 28 + ($$2 << 2) | 0;
    HEAP32[$114 >> 2] = HEAP32[$114 >> 2] << 1;
    $117 = $$0131 + 40028 + ($$2 << 2) | 0;
    HEAP32[$117 >> 2] = HEAP32[$117 >> 2] << 1;
    $$2 = $$2 + 1 | 0;
   }
   $$0131 = $$0131 + 80048 | 0;
   $$3 = $$3 + 1 | 0;
   $102 = HEAP32[$8 >> 2] | 0;
  }
 } while (0);
 return 0;
}

function ___cxa_demangle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$157 = 0, $$2 = 0, $$pr = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $26 = 0, $29 = 0, $30 = 0, $34 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $69 = 0, $70 = 0, $78 = 0, $8 = 0, $83 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4192);
 $4 = sp + 4176 | 0;
 $5 = sp;
 $6 = sp + 4112 | 0;
 $8 = ($3 | 0) != 0;
 if (!$0) label = 3; else {
  $9 = ($1 | 0) != 0;
  $10 = ($2 | 0) == 0;
  if ($9 & $10) label = 3; else {
   if ($9) $61 = HEAP32[$2 >> 2] | 0; else $61 = 0;
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($5);
   __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE($6, $5);
   $12 = $6 + 48 | 0;
   $13 = $6 + 61 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   HEAP32[$12 + 8 >> 2] = 0;
   HEAP8[$12 + 12 >> 0] = 0;
   HEAP8[$13 >> 0] = 1;
   $14 = $6 + 32 | 0;
   $15 = $6 + 36 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   if ($16 >>> 0 < (HEAP32[$6 + 40 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($4, $5);
    HEAP32[$16 >> 2] = 0;
    HEAP32[$16 + 4 >> 2] = 0;
    $22 = HEAP32[$4 >> 2] | 0;
    HEAP32[$16 + 8 >> 2] = 0;
    HEAP32[$16 + 12 >> 2] = $22;
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_($14, $5);
   $26 = $6 + 62 | 0;
   HEAP8[$26 >> 0] = 0;
   HEAP8[$6 + 63 >> 0] = 1;
   HEAP32[$4 >> 2] = 0;
   $29 = $0 + (_strlen($0) | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0, $29, $6, $4);
   $30 = HEAP32[$4 >> 2] | 0;
   do if (($30 | 0) != 0 | (HEAP8[$26 >> 0] | 0) == 0) {
    $$pr = $30;
    label = 22;
   } else {
    $34 = HEAP32[$14 >> 2] | 0;
    if (($34 | 0) == (HEAP32[$15 >> 2] | 0)) label = 23; else if ((HEAP32[$34 >> 2] | 0) == (HEAP32[$34 + 4 >> 2] | 0)) label = 23; else {
     HEAP8[$26 >> 0] = 0;
     HEAP8[$13 >> 0] = 0;
     $41 = HEAP32[$6 >> 2] | 0;
     $42 = $6 + 4 | 0;
     while (1) {
      $43 = HEAP32[$42 >> 2] | 0;
      if (($43 | 0) == ($41 | 0)) break;
      $45 = $43 + -24 | 0;
      HEAP32[$42 >> 2] = $45;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
     }
     $47 = HEAP32[$6 + 16 >> 2] | 0;
     $48 = $6 + 20 | 0;
     while (1) {
      $49 = HEAP32[$48 >> 2] | 0;
      if (($49 | 0) == ($47 | 0)) break;
      $51 = $49 + -16 | 0;
      HEAP32[$48 >> 2] = $51;
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($51);
     }
     __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0, $29, $6, $4);
     if (!(HEAP8[$26 >> 0] | 0)) {
      $$pr = HEAP32[$4 >> 2] | 0;
      label = 22;
      break;
     } else {
      HEAP32[$4 >> 2] = -2;
      $$2 = 0;
      $85 = -2;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 22) if (!$$pr) label = 23; else {
    $$2 = 0;
    $85 = $$pr;
   }
   do if ((label | 0) == 23) {
    $55 = $6 + 4 | 0;
    $58 = __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv((HEAP32[$55 >> 2] | 0) + -24 | 0) | 0;
    $59 = $58 + 1 | 0;
    if ($59 >>> 0 > $61 >>> 0) {
     $62 = _realloc($1, $59) | 0;
     if (!$62) {
      HEAP32[$4 >> 2] = -1;
      $$2 = 0;
      $85 = -1;
      break;
     }
     if ($10) $$157 = $62; else {
      HEAP32[$2 >> 2] = $59;
      $$157 = $62;
     }
    } else if (!$1) {
     $$2 = 0;
     $85 = 0;
     break;
    } else $$157 = $1;
    $65 = HEAP32[$55 >> 2] | 0;
    $66 = $65 + -12 | 0;
    $69 = HEAP8[$66 + 11 >> 0] | 0;
    $70 = $69 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($65 + -24 | 0, $70 ? HEAP32[$66 >> 2] | 0 : $66, $70 ? HEAP32[$65 + -8 >> 2] | 0 : $69 & 255) | 0;
    $78 = (HEAP32[$55 >> 2] | 0) + -24 | 0;
    if ((HEAP8[$78 + 11 >> 0] | 0) < 0) $83 = HEAP32[$78 >> 2] | 0; else $83 = $78;
    _memcpy($$157 | 0, $83 | 0, $58 | 0) | 0;
    HEAP8[$$157 + $58 >> 0] = 0;
    $$2 = $$157;
    $85 = 0;
   } while (0);
   if ($8) HEAP32[$3 >> 2] = $85;
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($6);
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($5);
   $$0 = $$2;
  }
 }
 if ((label | 0) == 3) if ($8) {
  HEAP32[$3 >> 2] = -3;
  $$0 = 0;
 } else $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$045 = 0, $$045$in = 0, $$046 = 0, $$148 = 0, $16 = 0, $19 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $51 = 0, $52 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $67 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 48 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 90) {
  $16 = $0 + 2 | 0;
  if ((HEAP8[$16 >> 0] | 0) == 84) {
   $19 = $2 + 4 | 0;
   $23 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $24 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
   $28 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   if (($24 | 0) == ($16 | 0)) $$148 = $0; else {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15260, __ZNSt3__211char_traitsIcE6lengthEPKc(15260) | 0);
    L7 : do if (($23 | 0) != ($28 | 0)) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$2 >> 2] | 0) + ($23 * 24 | 0) | 0);
     $35 = HEAP8[$4 + 11 >> 0] | 0;
     $36 = $35 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $36 ? HEAP32[$4 >> 2] | 0 : $4, $36 ? HEAP32[$4 + 4 >> 2] | 0 : $35 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $43 = $4 + 11 | 0;
     $44 = $4 + 4 | 0;
     $$045$in = $23;
     while (1) {
      $$045 = $$045$in + 1 | 0;
      if (($$045 | 0) == ($28 | 0)) break L7;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, (HEAP32[$2 >> 2] | 0) + ($$045 * 24 | 0) | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15271) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      $51 = HEAP8[$43 >> 0] | 0;
      $52 = $51 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $52 ? HEAP32[$4 >> 2] | 0 : $4, $52 ? HEAP32[$44 >> 2] | 0 : $51 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$045$in = $$045;
     }
    } while (0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 15047) | 0;
    $$046 = $28;
    while (1) {
     if (($$046 | 0) == ($23 | 0)) break;
     $59 = HEAP32[$19 >> 2] | 0;
     $60 = $59 + -24 | 0;
     $62 = $59;
     while (1) {
      if (($62 | 0) == ($60 | 0)) break;
      $63 = $62 + -24 | 0;
      HEAP32[$19 >> 2] = $63;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($63);
      $62 = HEAP32[$19 >> 2] | 0;
     }
     $$046 = $$046 + -1 | 0;
    }
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $$0$i$i = 0;
    while (1) {
     if (($$0$i$i | 0) == 3) break;
     HEAP32[$3 + ($$0$i$i << 2) >> 2] = 0;
     $$0$i$i = $$0$i$i + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $6);
    $67 = HEAP32[$19 >> 2] | 0;
    if ($67 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($67, $4);
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$148 = $24;
   }
  } else $$148 = $0;
 } else $$148 = $0; else $$148 = $0; else $$148 = $0;
 STACKTOP = sp;
 return $$148 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$067 = 0, $$068 = 0, $$1 = 0, $$sroa$077$0 = 0, $$sroa$083$0 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $56 = 0, $58 = 0, $62 = 0, $66 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $80 = 0, $81 = 0, $isdigittmp = 0, $isdigittmp71 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 16 | 0;
 $4 = sp;
 L1 : do if (($1 - $0 | 0) > 1) if ((HEAP8[$0 >> 0] | 0) == 84) {
  $12 = HEAP8[$0 + 1 >> 0] | 0;
  $14 = $2 + 62 | 0;
  $15 = $2 + 32 | 0;
  if ($12 << 24 >> 24 == 95) {
   $18 = HEAP32[$2 + 36 >> 2] | 0;
   if ((HEAP32[$15 >> 2] | 0) == ($18 | 0)) {
    $$1 = $0;
    break;
   }
   $21 = HEAP32[$18 + -16 >> 2] | 0;
   $25 = $0 + 2 | 0;
   if (($21 | 0) == (HEAP32[$18 + -12 >> 2] | 0)) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($3);
    $38 = $2 + 4 | 0;
    $39 = HEAP32[$38 >> 2] | 0;
    if ($39 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($39, $3);
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    HEAP8[$14 >> 0] = 1;
    $$1 = $25;
    break;
   }
   $28 = HEAP32[$21 + 4 >> 2] | 0;
   $29 = $2 + 4 | 0;
   $30 = $2 + 8 | 0;
   $$sroa$083$0 = HEAP32[$21 >> 2] | 0;
   while (1) {
    if (($$sroa$083$0 | 0) == ($28 | 0)) {
     $$1 = $25;
     break L1;
    }
    $32 = HEAP32[$29 >> 2] | 0;
    if (($32 | 0) == (HEAP32[$30 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$083$0); else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($32, $$sroa$083$0);
     HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 24;
    }
    $$sroa$083$0 = $$sroa$083$0 + 24 | 0;
   }
  }
  $isdigittmp = ($12 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $$067 = $isdigittmp;
   $$068 = $0 + 2 | 0;
   while (1) {
    $48 = $$068 + 1 | 0;
    if (($$068 | 0) == ($1 | 0)) {
     $$1 = $0;
     break L1;
    }
    $49 = HEAP8[$$068 >> 0] | 0;
    $isdigittmp71 = ($49 << 24 >> 24) + -48 | 0;
    if ($isdigittmp71 >>> 0 >= 10) break;
    $$067 = $isdigittmp71 + ($$067 * 10 | 0) | 0;
    $$068 = $48;
   }
   if ($49 << 24 >> 24 == 95) {
    $56 = HEAP32[$2 + 36 >> 2] | 0;
    if ((HEAP32[$15 >> 2] | 0) == ($56 | 0)) $$1 = $0; else {
     $58 = $$067 + 1 | 0;
     $62 = HEAP32[$56 + -16 >> 2] | 0;
     $66 = $62;
     if ($58 >>> 0 >= (HEAP32[$56 + -12 >> 2] | 0) - $62 >> 4 >>> 0) {
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$4 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($4, $0, $48);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
      $80 = $2 + 4 | 0;
      $81 = HEAP32[$80 >> 2] | 0;
      if ($81 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($81, $3);
       HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      HEAP8[$14 >> 0] = 1;
      $$1 = $48;
      break;
     }
     $70 = HEAP32[$66 + ($58 << 4) + 4 >> 2] | 0;
     $71 = $2 + 4 | 0;
     $72 = $2 + 8 | 0;
     $$sroa$077$0 = HEAP32[$66 + ($58 << 4) >> 2] | 0;
     while (1) {
      if (($$sroa$077$0 | 0) == ($70 | 0)) {
       $$1 = $48;
       break L1;
      }
      $74 = HEAP32[$71 >> 2] | 0;
      if (($74 | 0) == (HEAP32[$72 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$077$0); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($74, $$sroa$077$0);
       HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + 24;
      }
      $$sroa$077$0 = $$sroa$077$0 + 24 | 0;
     }
    }
   } else $$1 = $0;
  } else $$1 = $0;
 } else $$1 = $0; else $$1 = $0; while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _arImageProcLuma($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0139 = 0, $$0140 = 0, $$1 = 0, $$1141 = 0, $$2 = 0, $$2142 = 0, $$3 = 0, $$3143 = 0, $$4 = 0, $$4144 = 0, $$5 = 0, $$5145 = 0, $$6 = 0, $$6146 = 0, $$7 = 0, $$7147 = 0, $115 = 0, $122 = 0, $13 = 0, $143 = 0, $150 = 0, $171 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $3 = HEAP32[$0 + 2068 >> 2] | 0;
 $4 = $0 + 12 | 0;
 $5 = $0 + 8 | 0;
 L1 : do switch ($3 | 0) {
 case 5:
 case 12:
 case 13:
 case 14:
  {
   if (!(HEAP32[$0 + 2072 >> 2] | 0)) {
    HEAP32[$0 >> 2] = $1;
    $$0 = 0;
    break L1;
   } else {
    _memcpy(HEAP32[$0 >> 2] | 0, $1 | 0, Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) | 0;
    $$0 = 0;
    break L1;
   }
   break;
  }
 default:
  {
   $13 = $3 | 1;
   if (($13 | 0) == 3) {
    $$0139 = 0;
    $$0140 = 0;
    while (1) {
     if ($$0140 >>> 0 >= (Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) >>> 0) {
      $$0 = 0;
      break L1;
     }
     HEAP8[(HEAP32[$0 >> 2] | 0) + $$0140 >> 0] = (((HEAPU8[$1 + ($$0139 | 1) >> 0] | 0) + (HEAPU8[$1 + $$0139 >> 0] | 0) + (HEAPU8[$1 + ($$0139 | 2) >> 0] | 0) | 0) >>> 0) / 3 | 0;
     $$0139 = $$0139 + 4 | 0;
     $$0140 = $$0140 + 1 | 0;
    }
   }
   if (($3 | 2 | 0) == 6) {
    $$1 = 0;
    $$1141 = 0;
    while (1) {
     if ($$1141 >>> 0 >= (Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) >>> 0) {
      $$0 = 0;
      break L1;
     }
     HEAP8[(HEAP32[$0 >> 2] | 0) + $$1141 >> 0] = (((HEAPU8[$1 + ($$1 | 2) >> 0] | 0) + (HEAPU8[$1 + ($$1 | 1) >> 0] | 0) + (HEAPU8[$1 + ($$1 | 3) >> 0] | 0) | 0) >>> 0) / 3 | 0;
     $$1 = $$1 + 4 | 0;
     $$1141 = $$1141 + 1 | 0;
    }
   }
   if (($13 | 0) == 1) {
    $$2 = 0;
    $$2142 = 0;
    while (1) {
     if ($$2142 >>> 0 >= (Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) >>> 0) {
      $$0 = 0;
      break L1;
     }
     HEAP8[(HEAP32[$0 >> 2] | 0) + $$2142 >> 0] = (((HEAPU8[$1 + ($$2 + 1) >> 0] | 0) + (HEAPU8[$1 + $$2 >> 0] | 0) + (HEAPU8[$1 + ($$2 + 2) >> 0] | 0) | 0) >>> 0) / 3 | 0;
     $$2 = $$2 + 3 | 0;
     $$2142 = $$2142 + 1 | 0;
    }
   }
   switch ($3 | 0) {
   case 8:
    {
     $$3 = 0;
     $$3143 = 0;
     while (1) {
      if ($$3143 >>> 0 >= (Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) >>> 0) {
       $$0 = 0;
       break L1;
      }
      HEAP8[(HEAP32[$0 >> 2] | 0) + $$3143 >> 0] = HEAP8[$1 + $$3 >> 0] | 0;
      $$3 = $$3 + 2 | 0;
      $$3143 = $$3143 + 1 | 0;
     }
     break;
    }
   case 7:
    {
     $$4 = 0;
     $$4144 = 0;
     while (1) {
      if ($$4144 >>> 0 >= (Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) >>> 0) {
       $$0 = 0;
       break L1;
      }
      HEAP8[(HEAP32[$0 >> 2] | 0) + $$4144 >> 0] = HEAP8[$1 + ($$4 | 1) >> 0] | 0;
      $$4 = $$4 + 2 | 0;
      $$4144 = $$4144 + 1 | 0;
     }
     break;
    }
   case 9:
    {
     $$5 = 0;
     $$5145 = 0;
     while (1) {
      if ($$5145 >>> 0 >= (Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) >>> 0) {
       $$0 = 0;
       break L1;
      }
      $115 = HEAPU8[$1 + $$5 >> 0] | 0;
      $122 = HEAPU8[$1 + ($$5 | 1) >> 0] | 0;
      HEAP8[(HEAP32[$0 >> 2] | 0) + $$5145 >> 0] = ((($115 & 248) + 10 + ($115 << 5 & 224) + ($122 >>> 3 & 28) + ($122 << 3 & 248) | 0) >>> 0) / 3 | 0;
      $$5 = $$5 + 2 | 0;
      $$5145 = $$5145 + 1 | 0;
     }
     break;
    }
   case 10:
    {
     $$6 = 0;
     $$6146 = 0;
     while (1) {
      if ($$6146 >>> 0 >= (Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) >>> 0) {
       $$0 = 0;
       break L1;
      }
      $143 = HEAPU8[$1 + $$6 >> 0] | 0;
      $150 = HEAPU8[$1 + ($$6 | 1) >> 0] | 0;
      HEAP8[(HEAP32[$0 >> 2] | 0) + $$6146 >> 0] = ((($143 & 248) + 12 + ($143 << 5 & 224) + ($150 >>> 3 & 24) + ($150 << 2 & 248) | 0) >>> 0) / 3 | 0;
      $$6 = $$6 + 2 | 0;
      $$6146 = $$6146 + 1 | 0;
     }
     break;
    }
   case 11:
    {
     $$7 = 0;
     $$7147 = 0;
     while (1) {
      if ($$7147 >>> 0 >= (Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) >>> 0) {
       $$0 = 0;
       break L1;
      }
      $171 = HEAPU8[$1 + $$7 >> 0] | 0;
      HEAP8[(HEAP32[$0 >> 2] | 0) + $$7147 >> 0] = ((($171 & 240) + 24 + ($171 << 4 & 240) + (HEAP8[$1 + ($$7 | 1) >> 0] & -16 & 255) | 0) >>> 0) / 3 | 0;
      $$7 = $$7 + 2 | 0;
      $$7147 = $$7147 + 1 | 0;
     }
     break;
    }
   default:
    {
     _arLog(3, 3677, $vararg_buffer);
     $$0 = -1;
     break L1;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i56 = 0, $$2 = 0, $$3 = 0, $16 = 0, $17 = 0, $18 = 0, $25 = 0, $26 = 0, $3 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $3 = sp + 64 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 24 | 0;
 $7 = sp;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 102) {
  $16 = $0 + 2 | 0;
  switch (HEAP8[$0 + 1 >> 0] | 0) {
  case 112:
   {
    $17 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($16, $1, $3) | 0;
    $18 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($17, $1) | 0;
    if (($18 | 0) == ($1 | 0)) $$0 = $0; else if ((HEAP8[$18 >> 0] | 0) == 95) {
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($6, $17, $18);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16238) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     $25 = $2 + 4 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     if ($26 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($26, $4);
      HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     $$0 = $18 + 1 | 0;
    } else $$0 = $0;
    $$3 = $$0;
    break L1;
    break;
   }
  case 76:
   break;
  default:
   {
    $$3 = $0;
    break L1;
   }
  }
  $33 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16, $1) | 0;
  if (($33 | 0) == ($1 | 0)) $$2 = $0; else if ((HEAP8[$33 >> 0] | 0) == 112) {
   $38 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($33 + 1 | 0, $1, $3) | 0;
   $39 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($38, $1) | 0;
   if (($39 | 0) == ($1 | 0)) $$2 = $0; else if ((HEAP8[$39 >> 0] | 0) == 95) {
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$6 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($6, $38, $39);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16238) | 0;
    HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i56 = 0;
    while (1) {
     if (($$0$i$i$i56 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i56 << 2) >> 2] = 0;
     $$0$i$i$i56 = $$0$i$i$i56 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $7);
    $46 = $2 + 4 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    if ($47 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($47, $4);
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$2 = $39 + 1 | 0;
   } else $$2 = $0;
  } else $$2 = $0;
  $$3 = $$2;
 } else $$3 = $0; else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 114) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $33 = $32 + -24 | 0;
     $35 = $32;
     while (1) {
      if (($35 | 0) == ($33 | 0)) break;
      $36 = $35 + -24 | 0;
      HEAP32[$24 >> 2] = $36;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
      $35 = HEAP32[$24 >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 15299) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15296) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $45 = HEAP8[$3 + 11 >> 0] | 0;
     $46 = $45 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $46 ? HEAP32[$3 >> 2] | 0 : $3, $46 ? HEAP32[$3 + 4 >> 2] | 0 : $45 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15047) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 100) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $33 = $32 + -24 | 0;
     $35 = $32;
     while (1) {
      if (($35 | 0) == ($33 | 0)) break;
      $36 = $35 + -24 | 0;
      HEAP32[$24 >> 2] = $36;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
      $35 = HEAP32[$24 >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 16199) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15296) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $45 = HEAP8[$3 + 11 >> 0] | 0;
     $46 = $45 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $46 ? HEAP32[$3 >> 2] | 0 : $3, $46 ? HEAP32[$3 + 4 >> 2] | 0 : $45 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15047) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $33 = $32 + -24 | 0;
     $35 = $32;
     while (1) {
      if (($35 | 0) == ($33 | 0)) break;
      $36 = $35 + -24 | 0;
      HEAP32[$24 >> 2] = $36;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
      $35 = HEAP32[$24 >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 15283) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15296) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $45 = HEAP8[$3 + 11 >> 0] | 0;
     $46 = $45 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $46 ? HEAP32[$3 >> 2] | 0 : $3, $46 ? HEAP32[$3 + 4 >> 2] | 0 : $45 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15047) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 99) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $33 = $32 + -24 | 0;
     $35 = $32;
     while (1) {
      if (($35 | 0) == ($33 | 0)) break;
      $36 = $35 + -24 | 0;
      HEAP32[$24 >> 2] = $36;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
      $35 = HEAP32[$24 >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9, 0, 16216) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 15296) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $45 = HEAP8[$3 + 11 >> 0] | 0;
     $46 = $45 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $46 ? HEAP32[$3 >> 2] | 0 : $3, $46 ? HEAP32[$3 + 4 >> 2] | 0 : $45 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15047) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$063 = 0, $$6 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $46 = 0, $47 = 0, $50 = 0, $54 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $74 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 99) if ((HEAP8[$0 + 1 >> 0] | 0) == 108) {
  $14 = $0 + 2 | 0;
  $15 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
  if (($15 | 0) == ($14 | 0) | ($15 | 0) == ($1 | 0)) $$6 = $0; else {
   $19 = $2 + 4 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($20 | 0)) $$6 = $0; else {
    $22 = $20 + -12 | 0;
    $25 = HEAP8[$22 + 11 >> 0] | 0;
    $26 = $25 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($20 + -24 | 0, $26 ? HEAP32[$22 >> 2] | 0 : $22, $26 ? HEAP32[$20 + -8 >> 2] | 0 : $25 & 255) | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    $$0$i$i = 0;
    while (1) {
     if (($$0$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
     $$0$i$i = $$0$i$i + 1 | 0;
    }
    $35 = HEAP32[$19 >> 2] | 0;
    $36 = $35 + -12 | 0;
    $37 = $36 + 11 | 0;
    if ((HEAP8[$37 >> 0] | 0) < 0) {
     $40 = HEAP32[$36 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($40, $3);
     HEAP32[$35 + -8 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($36, $3);
     HEAP8[$37 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($36);
    HEAP32[$36 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$36 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$36 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$19 >> 2] | 0) + -24 | 0, 15049) | 0;
    $46 = $3 + 11 | 0;
    $47 = $3 + 4 | 0;
    $$063 = $15;
    while (1) {
     if ((HEAP8[$$063 >> 0] | 0) == 69) break;
     $50 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$063, $1, $2) | 0;
     if (($50 | 0) == ($$063 | 0) | ($50 | 0) == ($1 | 0)) {
      $$6 = $0;
      break L1;
     }
     $54 = HEAP32[$19 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($54 | 0)) {
      $$6 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $54 + -24 | 0);
     $57 = HEAP32[$19 >> 2] | 0;
     $58 = $57 + -24 | 0;
     $60 = $57;
     while (1) {
      if (($60 | 0) == ($58 | 0)) break;
      $61 = $60 + -24 | 0;
      HEAP32[$19 >> 2] = $61;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($61);
      $60 = HEAP32[$19 >> 2] | 0;
     }
     $62 = HEAP8[$46 >> 0] | 0;
     $63 = $62 << 24 >> 24 < 0;
     $66 = $63 ? HEAP32[$47 >> 2] | 0 : $62 & 255;
     if ($66 | 0) {
      if ((HEAP32[$2 >> 2] | 0) == ($58 | 0)) {
       label = 26;
       break;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($57 + -48 | 0, $63 ? HEAP32[$3 >> 2] | 0 : $3, $66) | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$063 = $50;
    }
    if ((label | 0) == 26) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$6 = $0;
     break;
    }
    $74 = HEAP32[$19 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($74 | 0)) $$6 = $0; else {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($74 + -24 | 0, 15047) | 0;
     $$6 = $$063 + 1 | 0;
    }
   }
  }
 } else $$6 = $0; else $$6 = $0; else $$6 = $0; while (0);
 STACKTOP = sp;
 return $$6 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $47 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, label = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  $10 = $0 + 12 | 0;
  $11 = $1 + 24 | 0;
  $12 = $1 + 36 | 0;
  $13 = $1 + 54 | 0;
  $14 = $0 + 8 | 0;
  $15 = $0 + 16 | 0;
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $55 = HEAP32[$10 >> 2] | 0;
   $56 = $0 + 16 + ($55 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $1, $2, $3, $4);
   $57 = $0 + 24 | 0;
   if (($55 | 0) <= 1) break;
   $59 = HEAP32[$14 >> 2] | 0;
   if (!($59 & 2)) if ((HEAP32[$12 >> 2] | 0) == 1) $$0 = $57; else {
    if (!($59 & 1)) {
     $$2 = $57;
     while (1) {
      if (HEAP8[$13 >> 0] | 0) break L1;
      if ((HEAP32[$12 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4);
      $$2 = $$2 + 8 | 0;
      if ($$2 >>> 0 >= $56 >>> 0) break L1;
     }
    } else $$1 = $57;
    while (1) {
     if (HEAP8[$13 >> 0] | 0) break L1;
     if ((HEAP32[$12 >> 2] | 0) == 1) if ((HEAP32[$11 >> 2] | 0) == 1) break L1;
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4);
     $$1 = $$1 + 8 | 0;
     if ($$1 >>> 0 >= $56 >>> 0) break L1;
    }
   } else $$0 = $57;
   while (1) {
    if (HEAP8[$13 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4);
    $$0 = $$0 + 8 | 0;
    if ($$0 >>> 0 >= $56 >>> 0) break L1;
   }
  }
  $19 = $1 + 32 | 0;
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $20 = $1 + 20 | 0;
   if ((HEAP32[$20 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$19 >> 2] = $3;
    $24 = $1 + 44 | 0;
    if ((HEAP32[$24 >> 2] | 0) == 4) break;
    $28 = $0 + 16 + (HEAP32[$10 >> 2] << 3) | 0;
    $29 = $1 + 52 | 0;
    $30 = $1 + 53 | 0;
    $$081$off0 = 0;
    $$084 = $15;
    $$085$off0 = 0;
    L29 : while (1) {
     if ($$084 >>> 0 >= $28 >>> 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     HEAP8[$29 >> 0] = 0;
     HEAP8[$30 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4);
     if (HEAP8[$13 >> 0] | 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     do if (!(HEAP8[$30 >> 0] | 0)) {
      $$182$off0 = $$081$off0;
      $$186$off0 = $$085$off0;
     } else {
      if (!(HEAP8[$29 >> 0] | 0)) if (!(HEAP32[$14 >> 2] & 1)) {
       $$283$off0 = 1;
       label = 18;
       break L29;
      } else {
       $$182$off0 = 1;
       $$186$off0 = $$085$off0;
       break;
      }
      if ((HEAP32[$11 >> 2] | 0) == 1) {
       label = 23;
       break L29;
      }
      if (!(HEAP32[$14 >> 2] & 2)) {
       label = 23;
       break L29;
      } else {
       $$182$off0 = 1;
       $$186$off0 = 1;
      }
     } while (0);
     $$081$off0 = $$182$off0;
     $$084 = $$084 + 8 | 0;
     $$085$off0 = $$186$off0;
    }
    do if ((label | 0) == 18) {
     if (!$$085$off0) {
      HEAP32[$20 >> 2] = $2;
      $47 = $1 + 40 | 0;
      HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
      if ((HEAP32[$12 >> 2] | 0) == 1) if ((HEAP32[$11 >> 2] | 0) == 2) {
       HEAP8[$13 >> 0] = 1;
       if ($$283$off0) {
        label = 23;
        break;
       } else {
        $54 = 4;
        break;
       }
      }
     }
     if ($$283$off0) label = 23; else $54 = 4;
    } while (0);
    if ((label | 0) == 23) $54 = 3;
    HEAP32[$24 >> 2] = $54;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$19 >> 2] = 1;
 } while (0);
 return;
}

function _minv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0129 = 0.0, $$0130 = 0, $$0132 = 0, $$0135 = 0, $$0138 = 0, $$0141 = 0, $$0145 = 0, $$1131 = 0, $$1133 = 0, $$1136 = 0, $$1139 = 0, $$1142 = 0, $$1146 = 0, $$2 = 0, $$2134 = 0, $$2137 = 0, $$2140 = 0, $$2143 = 0, $$2147 = 0, $$3 = 0, $$3144 = 0, $$4 = 0, $13 = 0, $15 = 0.0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $26 = 0.0, $3 = 0, $31 = 0.0, $32 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $54 = 0, $63 = 0.0, $indvars$iv = 0, $indvars$iv160 = 0, $scevgep = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2e3 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2e3);
 $3 = sp;
 L1 : do if (($1 | 0) > 500) $$0 = 0; else {
  switch ($1 | 0) {
  case 0:
   {
    $$0 = 0;
    break L1;
    break;
   }
  case 1:
   {
    HEAPF64[$0 >> 3] = 1.0 / +HEAPF64[$0 >> 3];
    $$0 = $0;
    break L1;
    break;
   }
  default:
   $$0138 = 0;
  }
  while (1) {
   if (($$0138 | 0) >= ($1 | 0)) break;
   HEAP32[$3 + ($$0138 << 2) >> 2] = $$0138;
   $$0138 = $$0138 + 1 | 0;
  }
  $scevgep = $0 + ($1 + -1 << 3) | 0;
  $$0135 = 0;
  $$1139 = 0;
  $indvars$iv = $scevgep;
  while (1) {
   if (($$1139 | 0) >= ($1 | 0)) {
    $$2140 = 0;
    break;
   }
   $13 = $0 + ((Math_imul($$1139, $2) | 0) << 3) | 0;
   $$0129 = 0.0;
   $$0130 = $13;
   $$0145 = $$1139;
   $$1136 = $$0135;
   while (1) {
    if (($$0145 | 0) == ($1 | 0)) break;
    $15 = +Math_abs(+(+HEAPF64[$$0130 >> 3]));
    $16 = $$0129 < $15;
    $$2137 = $16 ? $$0145 : $$1136;
    $$0129 = $16 ? $15 : $$0129;
    $$0130 = $$0130 + ($2 << 3) | 0;
    $$0145 = $$0145 + 1 | 0;
    $$1136 = $$2137;
   }
   if ($$0129 <= 1.0e-10) {
    $$0 = 0;
    break L1;
   }
   $20 = $3 + ($$1136 << 2) | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   $22 = $3 + ($$1139 << 2) | 0;
   HEAP32[$20 >> 2] = HEAP32[$22 >> 2];
   HEAP32[$22 >> 2] = $21;
   $$0132 = $13;
   $$0141 = 0;
   $$1131 = $0 + ((Math_imul($$1136, $2) | 0) << 3) | 0;
   while (1) {
    if (($$0141 | 0) == ($1 | 0)) break;
    $26 = +HEAPF64[$$1131 >> 3];
    HEAPF64[$$1131 >> 3] = +HEAPF64[$$0132 >> 3];
    HEAPF64[$$0132 >> 3] = $26;
    $$0132 = $$0132 + 8 | 0;
    $$0141 = $$0141 + 1 | 0;
    $$1131 = $$1131 + 8 | 0;
   }
   $31 = +HEAPF64[$13 >> 3];
   $$1142 = 1;
   $$2 = $13;
   while (1) {
    if (($$1142 | 0) == ($1 | 0)) break;
    $32 = $$2 + 8 | 0;
    HEAPF64[$$2 >> 3] = +HEAPF64[$32 >> 3] / $31;
    $$1142 = $$1142 + 1 | 0;
    $$2 = $32;
   }
   HEAPF64[$indvars$iv >> 3] = 1.0 / $31;
   $$1146 = 0;
   $indvars$iv160 = $scevgep;
   while (1) {
    if (($$1146 | 0) == ($1 | 0)) break;
    if (($$1146 | 0) != ($$1139 | 0)) {
     $39 = $0 + ((Math_imul($$1146, $2) | 0) << 3) | 0;
     $40 = +HEAPF64[$39 >> 3];
     $$1133 = $13;
     $$2143 = 1;
     $$3 = $39;
     while (1) {
      $41 = +HEAPF64[$$1133 >> 3];
      if (($$2143 | 0) == ($1 | 0)) break;
      $42 = $$3 + 8 | 0;
      HEAPF64[$$3 >> 3] = +HEAPF64[$42 >> 3] - $40 * $41;
      $$1133 = $$1133 + 8 | 0;
      $$2143 = $$2143 + 1 | 0;
      $$3 = $42;
     }
     HEAPF64[$indvars$iv160 >> 3] = -($40 * $41);
    }
    $$1146 = $$1146 + 1 | 0;
    $indvars$iv160 = $indvars$iv160 + ($2 << 3) | 0;
   }
   $$0135 = $$1136;
   $$1139 = $$1139 + 1 | 0;
   $indvars$iv = $indvars$iv + ($2 << 3) | 0;
  }
  while (1) {
   if (($$2140 | 0) < ($1 | 0)) $$3144 = $$2140; else {
    $$0 = $0;
    break L1;
   }
   while (1) {
    $54 = $3 + ($$3144 << 2) | 0;
    if (($$3144 | 0) >= ($1 | 0)) break;
    if ((HEAP32[$54 >> 2] | 0) == ($$2140 | 0)) break;
    $$3144 = $$3144 + 1 | 0;
   }
   HEAP32[$54 >> 2] = HEAP32[$3 + ($$2140 << 2) >> 2];
   $$2134 = $0 + ($$2140 << 3) | 0;
   $$2147 = 0;
   $$4 = $0 + ($$3144 << 3) | 0;
   while (1) {
    if (($$2147 | 0) >= ($1 | 0)) break;
    $63 = +HEAPF64[$$4 >> 3];
    HEAPF64[$$4 >> 3] = +HEAPF64[$$2134 >> 3];
    HEAPF64[$$2134 >> 3] = $63;
    $$2134 = $$2134 + ($2 << 3) | 0;
    $$2147 = $$2147 + 1 | 0;
    $$4 = $$4 + ($2 << 3) | 0;
   }
   $$2140 = $$2140 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arParamDecompMat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0117 = 0, $$1 = 0, $$1118 = 0, $$2 = 0, $$2119 = 0, $$3 = 0, $$3120 = 0, $101 = 0.0, $102 = 0.0, $113 = 0.0, $117 = 0.0, $131 = 0, $22 = 0.0, $24 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $32 = 0.0, $33 = 0, $35 = 0.0, $36 = 0, $41 = 0, $43 = 0.0, $45 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $52 = 0.0, $55 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $62 = 0, $65 = 0, $68 = 0, $72 = 0.0, $74 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $82 = 0.0, $83 = 0, $89 = 0.0, $95 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $3 = sp;
 L1 : do if (!(+HEAPF64[$0 + 88 >> 3] >= 0.0)) {
  $$1 = 0;
  while (1) {
   if (($$1 | 0) == 3) {
    $$2 = 0;
    break L1;
   } else $$1118 = 0;
   while (1) {
    if (($$1118 | 0) == 4) break;
    HEAPF64[$3 + ($$1 << 5) + ($$1118 << 3) >> 3] = -+HEAPF64[$0 + ($$1 << 5) + ($$1118 << 3) >> 3];
    $$1118 = $$1118 + 1 | 0;
   }
   $$1 = $$1 + 1 | 0;
  }
 } else {
  $$0 = 0;
  while (1) {
   if (($$0 | 0) == 3) {
    $$2 = 0;
    break L1;
   } else $$0117 = 0;
   while (1) {
    if (($$0117 | 0) == 4) break;
    HEAPF64[$3 + ($$0 << 5) + ($$0117 << 3) >> 3] = +HEAPF64[$0 + ($$0 << 5) + ($$0117 << 3) >> 3];
    $$0117 = $$0117 + 1 | 0;
   }
   $$0 = $$0 + 1 | 0;
  }
 } while (0);
 while (1) {
  if (($$2 | 0) == 3) break; else $$2119 = 0;
  while (1) {
   if (($$2119 | 0) == 4) break;
   HEAPF64[$1 + ($$2 << 5) + ($$2119 << 3) >> 3] = 0.0;
   $$2119 = $$2119 + 1 | 0;
  }
  $$2 = $$2 + 1 | 0;
 }
 $22 = +HEAPF64[$3 + 64 >> 3];
 $24 = +HEAPF64[$3 + 72 >> 3];
 $26 = +HEAPF64[$3 + 80 >> 3];
 $27 = +_norm($22, $24, $26);
 $28 = $1 + 80 | 0;
 HEAPF64[$28 >> 3] = $27;
 $29 = $22 / $27;
 $30 = $2 + 64 | 0;
 HEAPF64[$30 >> 3] = $29;
 $32 = $24 / +HEAPF64[$28 >> 3];
 $33 = $2 + 72 | 0;
 HEAPF64[$33 >> 3] = $32;
 $35 = $26 / +HEAPF64[$28 >> 3];
 $36 = $2 + 80 | 0;
 HEAPF64[$36 >> 3] = $35;
 $41 = $2 + 88 | 0;
 HEAPF64[$41 >> 3] = +HEAPF64[$3 + 88 >> 3] / +HEAPF64[$28 >> 3];
 $43 = +HEAPF64[$3 + 32 >> 3];
 $45 = +HEAPF64[$3 + 40 >> 3];
 $47 = +HEAPF64[$3 + 48 >> 3];
 $48 = +_dot($29, $32, $35, $43, $45, $47);
 $49 = $1 + 48 | 0;
 HEAPF64[$49 >> 3] = $48;
 $52 = $43 - $48 * +HEAPF64[$30 >> 3];
 $55 = $45 - $48 * +HEAPF64[$33 >> 3];
 $58 = $47 - $48 * +HEAPF64[$36 >> 3];
 $59 = +_norm($52, $55, $58);
 $60 = $1 + 40 | 0;
 HEAPF64[$60 >> 3] = $59;
 $62 = $2 + 32 | 0;
 HEAPF64[$62 >> 3] = $52 / $59;
 $65 = $2 + 40 | 0;
 HEAPF64[$65 >> 3] = $55 / +HEAPF64[$60 >> 3];
 $68 = $2 + 48 | 0;
 HEAPF64[$68 >> 3] = $58 / +HEAPF64[$60 >> 3];
 $72 = +HEAPF64[$3 >> 3];
 $74 = +HEAPF64[$3 + 8 >> 3];
 $76 = +HEAPF64[$3 + 16 >> 3];
 $77 = +_dot(+HEAPF64[$30 >> 3], +HEAPF64[$33 >> 3], +HEAPF64[$36 >> 3], $72, $74, $76);
 $78 = $1 + 16 | 0;
 HEAPF64[$78 >> 3] = $77;
 $82 = +_dot(+HEAPF64[$62 >> 3], +HEAPF64[$65 >> 3], +HEAPF64[$68 >> 3], $72, $74, $76);
 $83 = $1 + 8 | 0;
 HEAPF64[$83 >> 3] = $82;
 $89 = $72 - $82 * +HEAPF64[$62 >> 3] - $77 * +HEAPF64[$30 >> 3];
 $95 = $74 - $82 * +HEAPF64[$65 >> 3] - $77 * +HEAPF64[$33 >> 3];
 $101 = $76 - $82 * +HEAPF64[$68 >> 3] - $77 * +HEAPF64[$36 >> 3];
 $102 = +_norm($89, $95, $101);
 HEAPF64[$1 >> 3] = $102;
 HEAPF64[$2 >> 3] = $89 / $102;
 HEAPF64[$2 + 8 >> 3] = $95 / +HEAPF64[$1 >> 3];
 HEAPF64[$2 + 16 >> 3] = $101 / +HEAPF64[$1 >> 3];
 $113 = +HEAPF64[$41 >> 3];
 $117 = (+HEAPF64[$3 + 56 >> 3] - +HEAPF64[$49 >> 3] * $113) / +HEAPF64[$60 >> 3];
 HEAPF64[$2 + 56 >> 3] = $117;
 HEAPF64[$2 + 24 >> 3] = (+HEAPF64[$3 + 24 >> 3] - $117 * +HEAPF64[$83 >> 3] - +HEAPF64[$78 >> 3] * $113) / +HEAPF64[$1 >> 3];
 $$3 = 0;
 while (1) {
  if (($$3 | 0) == 3) break; else $$3120 = 0;
  while (1) {
   if (($$3120 | 0) == 3) break;
   $131 = $1 + ($$3 << 5) + ($$3120 << 3) | 0;
   HEAPF64[$131 >> 3] = +HEAPF64[$131 >> 3] / +HEAPF64[$28 >> 3];
   $$3120 = $$3120 + 1 | 0;
  }
  $$3 = $$3 + 1 | 0;
 }
 STACKTOP = sp;
 return 0;
}

function _arParamLoad($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $$05254 = 0, $$053 = 0, $$056 = 0, $$059 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $44 = 0, $51 = 0, $52 = 0, $61 = 0.0, $8 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $vararg_buffer18 = sp + 232 | 0;
 $vararg_buffer15 = sp + 224 | 0;
 $vararg_buffer13 = sp + 216 | 0;
 $vararg_buffer9 = sp + 208 | 0;
 $vararg_buffer6 = sp + 200 | 0;
 $vararg_buffer2 = sp + 192 | 0;
 $vararg_buffer = sp + 184 | 0;
 $3 = sp + 240 | 0;
 $4 = sp;
 do if (($0 | 0) != 0 & ($1 | 0) > 0 & ($2 | 0) != 0) {
  $8 = _fopen($0, 4170) | 0;
  if (!$8) {
   $10 = ___errno_location() | 0;
   HEAP32[$vararg_buffer >> 2] = HEAP32[$10 >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $0;
   _arLog(3, 4173, $vararg_buffer);
   $12 = ___errno_location() | 0;
   $14 = _strerror(HEAP32[$12 >> 2] | 0) | 0;
   HEAP32[$vararg_buffer2 >> 2] = 18985;
   HEAP32[$vararg_buffer2 + 4 >> 2] = $14;
   _arLog(3, 4677, $vararg_buffer2);
   $$056 = -1;
   break;
  }
  _fseek($8, 0, 2) | 0;
  L6 : do if (!(_ferror($8) | 0)) {
   $22 = _ftell($8) | 0;
   _rewind($8);
   $$053 = 0;
   while (1) {
    if (($$053 | 0) >= 4) {
     label = 9;
     break;
    }
    $25 = HEAP32[1636 + ($$053 << 3) + 4 >> 2] | 0;
    $28 = $$053 + 1 | 0;
    if (!(($22 | 0) % ($25 | 0) | 0)) {
     $$05254 = $28;
     $30 = $25;
     break;
    } else $$053 = $28;
   }
   do if ((label | 0) == 9) if (($$053 | 0) == 4) {
    _arLog(3, 4287, $vararg_buffer13);
    $$059 = -1;
    break L6;
   } else {
    $$05254 = 0;
    $30 = HEAP32[1636 + (0 << 3) + 4 >> 2] | 0;
    break;
   } while (0);
   if ((_fread($4, $30, 1, $8) | 0) != 1) {
    $33 = ___errno_location() | 0;
    HEAP32[$vararg_buffer15 >> 2] = HEAP32[$33 >> 2];
    _arLog(3, 4367, $vararg_buffer15);
    $35 = ___errno_location() | 0;
    $37 = _strerror(HEAP32[$35 >> 2] | 0) | 0;
    HEAP32[$vararg_buffer18 >> 2] = 18985;
    HEAP32[$vararg_buffer18 + 4 >> 2] = $37;
    _arLog(3, 4677, $vararg_buffer18);
    $$059 = -1;
    break;
   }
   $38 = $4 + 176 | 0;
   HEAP32[$38 >> 2] = $$05254;
   _byteswap($4);
   $39 = ($$05254 | 0) == 1;
   $40 = $4 + 128 | 0;
   $41 = $4 + 120 | 0;
   if ($39) {
    $42 = +HEAPF64[$41 >> 3];
    HEAPF64[$41 >> 3] = +HEAPF64[$40 >> 3];
    HEAPF64[$40 >> 3] = $42;
   }
   _memcpy($2 | 0, $4 | 0, 184) | 0;
   HEAP32[$3 >> 2] = $varargs;
   $44 = $2 + 176 | 0;
   $$1 = 1;
   while (1) {
    if (($$1 | 0) >= ($1 | 0)) {
     $$059 = 0;
     break L6;
    }
    $51 = (HEAP32[$3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $52 = HEAP32[$51 >> 2] | 0;
    HEAP32[$3 >> 2] = $51 + 4;
    HEAP32[$52 + 176 >> 2] = HEAP32[$44 >> 2];
    if ((_fread($4, HEAP32[1636 + ((HEAP32[$44 >> 2] | 0) + -1 << 3) + 4 >> 2] | 0, 1, $8) | 0) != 1) {
     $$059 = -1;
     break L6;
    }
    HEAP32[$38 >> 2] = $$05254;
    _byteswap($4);
    if ($39) {
     $61 = +HEAPF64[$41 >> 3];
     HEAPF64[$41 >> 3] = +HEAPF64[$40 >> 3];
     HEAPF64[$40 >> 3] = $61;
    }
    _memcpy($52 | 0, $4 | 0, 184) | 0;
    $$1 = $$1 + 1 | 0;
   }
  } else {
   $17 = ___errno_location() | 0;
   HEAP32[$vararg_buffer6 >> 2] = HEAP32[$17 >> 2];
   _arLog(3, 4242, $vararg_buffer6);
   $19 = ___errno_location() | 0;
   $21 = _strerror(HEAP32[$19 >> 2] | 0) | 0;
   HEAP32[$vararg_buffer9 >> 2] = 18985;
   HEAP32[$vararg_buffer9 + 4 >> 2] = $21;
   _arLog(3, 4677, $vararg_buffer9);
   $$059 = -1;
  } while (0);
  _fclose($8) | 0;
  $$056 = $$059;
 } else $$056 = -1; while (0);
 STACKTOP = sp;
 return $$056 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $50 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 L1 : do if (($1 - $0 | 0) > 1) {
  $8 = HEAP8[$0 >> 0] | 0;
  $9 = $8 << 24 >> 24 == 111;
  switch ($8 << 24 >> 24) {
  case 100:
  case 111:
   {
    if ((HEAP8[$0 + 1 >> 0] | 0) == 110) {
     $13 = $0 + 2 | 0;
     if (!$9) {
      $41 = __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
      $$2 = ($41 | 0) == ($13 | 0) ? $0 : $41;
      break L1;
     }
     $14 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
     if (($14 | 0) == ($13 | 0)) {
      $$2 = $0;
      break L1;
     }
     $16 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
     if (($16 | 0) == ($14 | 0)) {
      $$2 = $14;
      break L1;
     }
     $18 = $2 + 4 | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     if ((($19 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$2 = $16;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $19 + -24 | 0);
     $26 = HEAP32[$18 >> 2] | 0;
     $27 = $26 + -24 | 0;
     $29 = $26;
     while (1) {
      if (($29 | 0) == ($27 | 0)) break;
      $30 = $29 + -24 | 0;
      HEAP32[$18 >> 2] = $30;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $29 = HEAP32[$18 >> 2] | 0;
     }
     $33 = HEAP8[$3 + 11 >> 0] | 0;
     $34 = $33 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($26 + -48 | 0, $34 ? HEAP32[$3 >> 2] | 0 : $3, $34 ? HEAP32[$3 + 4 >> 2] | 0 : $33 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2 = $16;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  $43 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($43 | 0) == ($0 | 0)) {
   $45 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($45 | 0) == ($0 | 0)) $$2 = $0; else {
    $47 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($45, $1, $2) | 0;
    if (($47 | 0) == ($45 | 0)) $$2 = $45; else {
     $49 = $2 + 4 | 0;
     $50 = HEAP32[$49 >> 2] | 0;
     if ((($50 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$2 = $47; else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $50 + -24 | 0);
      $57 = HEAP32[$49 >> 2] | 0;
      $58 = $57 + -24 | 0;
      $60 = $57;
      while (1) {
       if (($60 | 0) == ($58 | 0)) break;
       $61 = $60 + -24 | 0;
       HEAP32[$49 >> 2] = $61;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($61);
       $60 = HEAP32[$49 >> 2] | 0;
      }
      $64 = HEAP8[$3 + 11 >> 0] | 0;
      $65 = $64 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($57 + -48 | 0, $65 ? HEAP32[$3 >> 2] | 0 : $3, $65 ? HEAP32[$3 + 4 >> 2] | 0 : $64 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$2 = $47;
     }
    }
   }
  } else $$2 = $43;
 } else $$2 = $0; while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$050$i = 0, $$051$i = 0, $$1$i = 0, $$152$i = 0, $$pn$i = 0, $$pre$phi$iZ2D = 0, $11 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0.0, $35 = 0.0, $4 = 0, $43 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 4 | 0;
 $3 = sp;
 $4 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$1 >> 2] | 0;
 $6 = $0 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = ($7 | 0) == 0;
 L1 : do if ($8) {
  $$051$i = 0;
  label = 12;
 } else {
  $9 = $7 + -1 | 0;
  $11 = ($9 & $7 | 0) == 0;
  if ($11) $16 = $9 & $5; else $16 = ($5 >>> 0) % ($7 >>> 0) | 0;
  $17 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($16 << 2) >> 2] | 0;
  if (!$17) {
   $$051$i = $16;
   label = 12;
  } else {
   $$pn$i = $17;
   while (1) {
    $$050$i = HEAP32[$$pn$i >> 2] | 0;
    if (!$$050$i) {
     $$051$i = $16;
     label = 12;
     break L1;
    }
    $21 = HEAP32[$$050$i + 4 >> 2] | 0;
    if ($11) $25 = $21 & $9; else $25 = ($21 >>> 0) % ($7 >>> 0) | 0;
    if (($25 | 0) != ($16 | 0)) {
     $$051$i = $16;
     label = 12;
     break L1;
    }
    if ((HEAP32[$$050$i + 8 >> 2] | 0) == ($5 | 0)) {
     $$1$i = $$050$i;
     break;
    } else $$pn$i = $$050$i;
   }
  }
 } while (0);
 if ((label | 0) == 12) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($2, $0, $5, 17944, $3, $4);
  $29 = $0 + 12 | 0;
  $32 = +(((HEAP32[$29 >> 2] | 0) + 1 | 0) >>> 0);
  $35 = +HEAPF32[$0 + 16 >> 2];
  do if ($8 | $32 > +($7 >>> 0) * $35) {
   $43 = ($7 >>> 0 < 3 | ($7 + -1 & $7 | 0) != 0) & 1 | $7 << 1;
   $46 = ~~+Math_ceil(+($32 / $35)) >>> 0;
   __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($0, $43 >>> 0 < $46 >>> 0 ? $46 : $43);
   $48 = HEAP32[$6 >> 2] | 0;
   $49 = $48 + -1 | 0;
   if (!($49 & $48)) {
    $$0$i = $48;
    $$152$i = $49 & $5;
    break;
   } else {
    $$0$i = $48;
    $$152$i = ($5 >>> 0) % ($48 >>> 0) | 0;
    break;
   }
  } else {
   $$0$i = $7;
   $$152$i = $$051$i;
  } while (0);
  $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($$152$i << 2) >> 2] | 0;
  if (!$56) {
   $58 = $0 + 8 | 0;
   HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$58 >> 2];
   HEAP32[$58 >> 2] = HEAP32[$2 >> 2];
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($$152$i << 2) >> 2] = $58;
   $64 = HEAP32[$2 >> 2] | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   if (!$65) $$pre$phi$iZ2D = $2; else {
    $68 = HEAP32[$65 + 4 >> 2] | 0;
    $69 = $$0$i + -1 | 0;
    if (!($69 & $$0$i)) $76 = $68 & $69; else $76 = ($68 >>> 0) % ($$0$i >>> 0) | 0;
    HEAP32[(HEAP32[$0 >> 2] | 0) + ($76 << 2) >> 2] = $64;
    $$pre$phi$iZ2D = $2;
   }
  } else {
   HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$56 >> 2];
   HEAP32[$56 >> 2] = HEAP32[$2 >> 2];
   $$pre$phi$iZ2D = $2;
  }
  $80 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
  HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1;
  HEAP32[$$pre$phi$iZ2D >> 2] = 0;
  $$1$i = $80;
 }
 STACKTOP = sp;
 return $$1$i + 16 | 0;
}

function __ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$050$i = 0, $$051$i = 0, $$1$i = 0, $$152$i = 0, $$pn$i = 0, $$pre$phi$iZ2D = 0, $11 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0.0, $35 = 0.0, $4 = 0, $43 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 4 | 0;
 $3 = sp;
 $4 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$1 >> 2] | 0;
 $6 = $0 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = ($7 | 0) == 0;
 L1 : do if ($8) {
  $$051$i = 0;
  label = 12;
 } else {
  $9 = $7 + -1 | 0;
  $11 = ($9 & $7 | 0) == 0;
  if ($11) $16 = $9 & $5; else $16 = ($5 >>> 0) % ($7 >>> 0) | 0;
  $17 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($16 << 2) >> 2] | 0;
  if (!$17) {
   $$051$i = $16;
   label = 12;
  } else {
   $$pn$i = $17;
   while (1) {
    $$050$i = HEAP32[$$pn$i >> 2] | 0;
    if (!$$050$i) {
     $$051$i = $16;
     label = 12;
     break L1;
    }
    $21 = HEAP32[$$050$i + 4 >> 2] | 0;
    if ($11) $25 = $21 & $9; else $25 = ($21 >>> 0) % ($7 >>> 0) | 0;
    if (($25 | 0) != ($16 | 0)) {
     $$051$i = $16;
     label = 12;
     break L1;
    }
    if ((HEAP32[$$050$i + 8 >> 2] | 0) == ($5 | 0)) {
     $$1$i = $$050$i;
     break;
    } else $$pn$i = $$050$i;
   }
  }
 } while (0);
 if ((label | 0) == 12) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($2, $0, $5, 17944, $3, $4);
  $29 = $0 + 12 | 0;
  $32 = +(((HEAP32[$29 >> 2] | 0) + 1 | 0) >>> 0);
  $35 = +HEAPF32[$0 + 16 >> 2];
  do if ($8 | $32 > +($7 >>> 0) * $35) {
   $43 = ($7 >>> 0 < 3 | ($7 + -1 & $7 | 0) != 0) & 1 | $7 << 1;
   $46 = ~~+Math_ceil(+($32 / $35)) >>> 0;
   __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($0, $43 >>> 0 < $46 >>> 0 ? $46 : $43);
   $48 = HEAP32[$6 >> 2] | 0;
   $49 = $48 + -1 | 0;
   if (!($49 & $48)) {
    $$0$i = $48;
    $$152$i = $49 & $5;
    break;
   } else {
    $$0$i = $48;
    $$152$i = ($5 >>> 0) % ($48 >>> 0) | 0;
    break;
   }
  } else {
   $$0$i = $7;
   $$152$i = $$051$i;
  } while (0);
  $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($$152$i << 2) >> 2] | 0;
  if (!$56) {
   $58 = $0 + 8 | 0;
   HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$58 >> 2];
   HEAP32[$58 >> 2] = HEAP32[$2 >> 2];
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($$152$i << 2) >> 2] = $58;
   $64 = HEAP32[$2 >> 2] | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   if (!$65) $$pre$phi$iZ2D = $2; else {
    $68 = HEAP32[$65 + 4 >> 2] | 0;
    $69 = $$0$i + -1 | 0;
    if (!($69 & $$0$i)) $76 = $68 & $69; else $76 = ($68 >>> 0) % ($$0$i >>> 0) | 0;
    HEAP32[(HEAP32[$0 >> 2] | 0) + ($76 << 2) >> 2] = $64;
    $$pre$phi$iZ2D = $2;
   }
  } else {
   HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$56 >> 2];
   HEAP32[$56 >> 2] = HEAP32[$2 >> 2];
   $$pre$phi$iZ2D = $2;
  }
  $80 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
  HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1;
  HEAP32[$$pre$phi$iZ2D >> 2] = 0;
  $$1$i = $80;
 }
 STACKTOP = sp;
 return $$1$i + 16 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i$i = 0, $$038 = 0, $$040$in = 0, $$3 = 0, $12 = 0, $20 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $9 = 0, $isdigittmp = 0, $isdigittmp47 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$3 = $0; else {
  $isdigittmp = (HEAP8[$0 >> 0] | 0) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $9 = $0 + 1 | 0;
   if (($9 | 0) == ($1 | 0)) $$3 = $0; else {
    $$038 = $isdigittmp;
    $$040$in = $9;
    while (1) {
     $isdigittmp47 = (HEAP8[$$040$in >> 0] | 0) + -48 | 0;
     if ($isdigittmp47 >>> 0 >= 10) break;
     $12 = $$040$in + 1 | 0;
     if (($12 | 0) == ($1 | 0)) {
      $$3 = $0;
      break L1;
     }
     $$038 = $isdigittmp47 + ($$038 * 10 | 0) | 0;
     $$040$in = $12;
    }
    if (($1 - $$040$in | 0) >>> 0 < $$038 >>> 0) $$3 = $0; else {
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, $$040$in, $$038);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($4, $3, 10);
     $20 = __ZNSt3__211char_traitsIcE6lengthEPKc(16429) | 0;
     $22 = HEAP8[$4 + 11 >> 0] | 0;
     if (($20 | 0) == (($22 << 24 >> 24 < 0 ? HEAP32[$4 + 4 >> 2] | 0 : $22 & 255) | 0)) $$0$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($4, 16429, $20) | 0) == 0; else $$0$i = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     if ($$0$i) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc($4);
      $31 = $2 + 4 | 0;
      $32 = HEAP32[$31 >> 2] | 0;
      if ($32 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($32, $4);
       HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     } else {
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
      $$0$i$i = 0;
      while (1) {
       if (($$0$i$i | 0) == 3) break;
       HEAP32[$3 + ($$0$i$i << 2) >> 2] = 0;
       $$0$i$i = $$0$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
      $40 = $2 + 4 | 0;
      $41 = HEAP32[$40 >> 2] | 0;
      if ($41 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($41, $4);
       HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $$040$in + $$038 | 0;
    }
   }
  } else $$3 = $0;
 } while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$i = 0, $$025 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $23 = 0, $24 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 $7 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0, $1) | 0;
 if (($7 | 0) == ($0 | 0) | ($7 | 0) == ($1 | 0)) $$1 = $0; else if ((HEAP8[$7 >> 0] | 0) == 69) {
  $12 = $2 + 11 | 0;
  $13 = HEAP8[$12 >> 0] | 0;
  $15 = $2 + 4 | 0;
  do if (($13 << 24 >> 24 < 0 ? HEAP32[$15 >> 2] | 0 : $13 & 255) >>> 0 > 3) {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6, 15049, $2);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15047) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
   $23 = $3 + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   if ($24 >>> 0 < (HEAP32[$3 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24, $4);
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($3, $4);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
  } else {
   $30 = $3 + 4 | 0;
   $31 = HEAP32[$30 >> 2] | 0;
   if ($31 >>> 0 < (HEAP32[$3 + 8 >> 2] | 0) >>> 0) {
    HEAP32[$31 >> 2] = 0;
    HEAP32[$31 + 4 >> 2] = 0;
    HEAP32[$31 + 8 >> 2] = 0;
    HEAP32[$31 + 12 >> 2] = 0;
    HEAP32[$31 + 16 >> 2] = 0;
    HEAP32[$31 + 20 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($31);
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 24;
    break;
   } else {
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($3);
    break;
   }
  } while (0);
  $39 = $3 + 4 | 0;
  if ((HEAP8[$0 >> 0] | 0) == 110) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$39 >> 2] | 0) + -24 | 0, 45);
   $$025 = $0 + 1 | 0;
  } else $$025 = $0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueERS7_E4typeESC_SC_((HEAP32[$39 >> 2] | 0) + -24 | 0, $$025, $7);
  $45 = HEAP8[$12 >> 0] | 0;
  $46 = $45 << 24 >> 24 < 0;
  $49 = $46 ? HEAP32[$15 >> 2] | 0 : $45 & 255;
  if ($49 >>> 0 < 4) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$39 >> 2] | 0) + -24 | 0, $46 ? HEAP32[$2 >> 2] | 0 : $2, $49) | 0;
  $$1 = $7 + 1 | 0;
 } else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function _icpGetJ_Xc_S($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0108 = 0, $$0109 = 0, $104 = 0.0, $105 = 0.0, $11 = 0, $112 = 0.0, $115 = 0.0, $12 = 0.0, $120 = 0.0, $130 = 0, $136 = 0.0, $137 = 0.0, $15 = 0, $17 = 0, $18 = 0.0, $24 = 0, $26 = 0.0, $28 = 0, $32 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0.0, $48 = 0, $5 = 0, $56 = 0.0, $60 = 0.0, $63 = 0.0, $70 = 0.0, $80 = 0.0, $87 = 0.0, $9 = 0, $94 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(864);
 $4 = sp + 576 | 0;
 $5 = sp;
 $9 = $2 + 8 | 0;
 $11 = $3 + 8 | 0;
 $12 = +HEAPF64[$11 >> 3];
 $15 = $2 + 16 | 0;
 $17 = $3 + 16 | 0;
 $18 = +HEAPF64[$17 >> 3];
 HEAPF64[$1 >> 3] = +HEAPF64[$2 + 24 >> 3] + (+HEAPF64[$2 >> 3] * +HEAPF64[$3 >> 3] + +HEAPF64[$9 >> 3] * $12 + +HEAPF64[$15 >> 3] * $18);
 $24 = $2 + 32 | 0;
 $26 = +HEAPF64[$3 >> 3];
 $28 = $2 + 40 | 0;
 $32 = $2 + 48 | 0;
 HEAPF64[$1 + 8 >> 3] = +HEAPF64[$2 + 56 >> 3] + (+HEAPF64[$24 >> 3] * $26 + $12 * +HEAPF64[$28 >> 3] + $18 * +HEAPF64[$32 >> 3]);
 $40 = $2 + 64 | 0;
 $43 = $2 + 72 | 0;
 $45 = +HEAPF64[$11 >> 3];
 $48 = $2 + 80 | 0;
 HEAPF64[$1 + 16 >> 3] = +HEAPF64[$2 + 88 >> 3] + ($26 * +HEAPF64[$40 >> 3] + +HEAPF64[$43 >> 3] * $45 + $18 * +HEAPF64[$48 >> 3]);
 $56 = +HEAPF64[$2 >> 3];
 HEAPF64[$4 >> 3] = $26 * $56;
 HEAPF64[$4 + 8 >> 3] = $45 * $56;
 $60 = +HEAPF64[$17 >> 3];
 HEAPF64[$4 + 16 >> 3] = $56 * $60;
 $63 = +HEAPF64[$9 >> 3];
 HEAPF64[$4 + 24 >> 3] = $26 * $63;
 HEAPF64[$4 + 32 >> 3] = $45 * $63;
 HEAPF64[$4 + 40 >> 3] = $60 * $63;
 $70 = +HEAPF64[$15 >> 3];
 HEAPF64[$4 + 48 >> 3] = $26 * $70;
 HEAPF64[$4 + 56 >> 3] = $45 * $70;
 HEAPF64[$4 + 64 >> 3] = $60 * $70;
 HEAPF64[$4 + 72 >> 3] = $56;
 HEAPF64[$4 + 80 >> 3] = $63;
 HEAPF64[$4 + 88 >> 3] = $70;
 $80 = +HEAPF64[$24 >> 3];
 HEAPF64[$4 + 96 >> 3] = $80 * $26;
 HEAPF64[$4 + 104 >> 3] = $80 * $45;
 HEAPF64[$4 + 112 >> 3] = $80 * $60;
 $87 = +HEAPF64[$28 >> 3];
 HEAPF64[$4 + 120 >> 3] = $87 * $26;
 HEAPF64[$4 + 128 >> 3] = $87 * $45;
 HEAPF64[$4 + 136 >> 3] = $87 * $60;
 $94 = +HEAPF64[$32 >> 3];
 HEAPF64[$4 + 144 >> 3] = $94 * $26;
 HEAPF64[$4 + 152 >> 3] = $94 * $45;
 HEAPF64[$4 + 160 >> 3] = $94 * $60;
 HEAPF64[$4 + 168 >> 3] = $80;
 HEAPF64[$4 + 176 >> 3] = $87;
 HEAPF64[$4 + 184 >> 3] = $94;
 $104 = +HEAPF64[$40 >> 3];
 $105 = +HEAPF64[$3 >> 3];
 HEAPF64[$4 + 192 >> 3] = $104 * $105;
 HEAPF64[$4 + 200 >> 3] = $104 * $45;
 HEAPF64[$4 + 208 >> 3] = $104 * $60;
 $112 = +HEAPF64[$43 >> 3];
 HEAPF64[$4 + 216 >> 3] = $112 * $105;
 $115 = +HEAPF64[$11 >> 3];
 HEAPF64[$4 + 224 >> 3] = $112 * $115;
 HEAPF64[$4 + 232 >> 3] = $112 * $60;
 $120 = +HEAPF64[$48 >> 3];
 HEAPF64[$4 + 240 >> 3] = $120 * $105;
 HEAPF64[$4 + 248 >> 3] = $120 * $115;
 HEAPF64[$4 + 256 >> 3] = $120 * $60;
 HEAPF64[$4 + 264 >> 3] = $104;
 HEAPF64[$4 + 272 >> 3] = $112;
 HEAPF64[$4 + 280 >> 3] = $120;
 _icpGetJ_T_S($5);
 $$0108 = 0;
 while (1) {
  if (($$0108 | 0) == 3) break; else $$0109 = 0;
  while (1) {
   if (($$0109 | 0) == 6) break;
   $130 = $0 + ($$0108 * 48 | 0) + ($$0109 << 3) | 0;
   HEAPF64[$130 >> 3] = 0.0;
   $$0 = 0;
   $137 = 0.0;
   while (1) {
    if (($$0 | 0) == 12) break;
    $136 = $137 + +HEAPF64[$4 + ($$0108 * 96 | 0) + ($$0 << 3) >> 3] * +HEAPF64[$5 + ($$0 * 48 | 0) + ($$0109 << 3) >> 3];
    HEAPF64[$130 >> 3] = $136;
    $$0 = $$0 + 1 | 0;
    $137 = $136;
   }
   $$0109 = $$0109 + 1 | 0;
  }
  $$0108 = $$0108 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$023 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $23 = 0, $3 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 L1 : do if (($1 - $0 | 0) > 1) {
  $12 = $2 + 4 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($13 | 0)) $$023 = $0; else {
   $17 = $0 + 2 | 0;
   $18 = $2 + 60 | 0;
   $19 = $0 + 1 | 0;
   switch (HEAP8[$0 >> 0] | 0) {
   case 67:
    {
     switch (HEAP8[$19 >> 0] | 0) {
     case 53:
     case 51:
     case 50:
     case 49:
      break;
     default:
      {
       $$023 = $0;
       break L1;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($4, $13 + -24 | 0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
     $23 = HEAP32[$12 >> 2] | 0;
     if ($23 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($23, $3);
      HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     HEAP8[$18 >> 0] = 1;
     $$023 = $17;
     break L1;
     break;
    }
   case 68:
    break;
   default:
    {
     $$023 = $0;
     break L1;
    }
   }
   switch (HEAP8[$19 >> 0] | 0) {
   case 53:
   case 50:
   case 49:
   case 48:
    break;
   default:
    {
     $$023 = $0;
     break L1;
    }
   }
   __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($6, $13 + -24 | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15119) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $5);
   $35 = HEAP32[$12 >> 2] | 0;
   if ($35 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($35, $3);
    HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   HEAP8[$18 >> 0] = 1;
   $$023 = $17;
  }
 } else $$023 = $0; while (0);
 STACKTOP = sp;
 return $$023 | 0;
}

function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04861 = 0, $$049 = 0, $$1$be = 0, $$160 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $$lcssa = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $81 = 0, $83 = 0, $87 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 100 | 0;
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1;
  $11 = HEAPU8[$3 >> 0] | 0;
 } else $11 = ___shgetc($0) | 0;
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1;
   $14 = HEAP32[$2 >> 2] | 0;
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1;
    $22 = HEAPU8[$14 >> 0] | 0;
   } else $22 = ___shgetc($0) | 0;
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$4 >> 2] | 0)) {
    $$0 = $13;
    $$049 = $22;
   } else {
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
    $$0 = $13;
    $$049 = $22;
   } else {
    $$0 = $13;
    $$049 = $22;
   }
   break;
  }
 default:
  {
   $$0 = 0;
   $$049 = $11;
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$4 >> 2] | 0)) {
  $100 = -2147483648;
  $101 = 0;
 } else {
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
  $100 = -2147483648;
  $101 = 0;
 } else {
  $$04861 = 0;
  $$160 = $$049;
  while (1) {
   $$04861 = $$160 + -48 + ($$04861 * 10 | 0) | 0;
   $38 = HEAP32[$2 >> 2] | 0;
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1;
    $$1$be = HEAPU8[$38 >> 0] | 0;
   } else $$1$be = ___shgetc($0) | 0;
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04861 | 0) < 214748364)) break; else $$160 = $$1$be;
  }
  $50 = (($$04861 | 0) < 0) << 31 >> 31;
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be;
   $56 = $$04861;
   $57 = $50;
   while (1) {
    $58 = ___muldi3($56 | 0, $57 | 0, 10, 0) | 0;
    $59 = tempRet0;
    $62 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $64 = _i64Add($62 | 0, tempRet0 | 0, $58 | 0, $59 | 0) | 0;
    $65 = tempRet0;
    $66 = HEAP32[$2 >> 2] | 0;
    if ($66 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $66 + 1;
     $$2$be = HEAPU8[$66 >> 0] | 0;
    } else $$2$be = ___shgetc($0) | 0;
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($65 | 0) < 21474836 | ($65 | 0) == 21474836 & $64 >>> 0 < 2061584302)) {
     $$254 = $$2$be;
     $56 = $64;
     $57 = $65;
    } else {
     $$2$lcssa = $$2$be;
     $94 = $64;
     $95 = $65;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;
   $94 = $$04861;
   $95 = $50;
  }
  $55 = HEAP32[$4 >> 2] | 0;
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   $83 = $55;
   while (1) {
    $81 = HEAP32[$2 >> 2] | 0;
    if ($81 >>> 0 < $83 >>> 0) {
     HEAP32[$2 >> 2] = $81 + 1;
     $$3$be = HEAPU8[$81 >> 0] | 0;
     $102 = $83;
    } else {
     $87 = ___shgetc($0) | 0;
     $$3$be = $87;
     $102 = HEAP32[$4 >> 2] | 0;
    }
    if (($$3$be + -48 | 0) >>> 0 < 10) $83 = $102; else {
     $$lcssa = $102;
     break;
    }
   }
  } else $$lcssa = $55;
  if ($$lcssa | 0) HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
  $93 = ($$0 | 0) != 0;
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0;
  $100 = $93 ? tempRet0 : $95;
  $101 = $93 ? $96 : $94;
 }
 tempRet0 = $100;
 return $101 | 0;
}

function _icpPoint($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$088 = 0, $$090 = 0.0, $$091 = 0.0, $$092 = 0, $$1 = 0, $$189 = 0, $$2 = 0, $12 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $34 = 0, $38 = 0.0, $42 = 0.0, $47 = 0, $5 = 0, $53 = 0.0, $6 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $vararg_buffer1 = sp + 168 | 0;
 $vararg_buffer = sp + 160 | 0;
 $5 = sp + 144 | 0;
 $6 = sp + 48 | 0;
 $7 = sp;
 $8 = $1 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 do if (($9 | 0) < 3) $$092 = -1; else {
  $12 = _malloc($9 * 96 | 0) | 0;
  if (!$12) {
   _arLog(3, 4425, $vararg_buffer);
   $$092 = -1;
   break;
  }
  $15 = _malloc($9 << 4) | 0;
  if (!$15) {
   _arLog(3, 4425, $vararg_buffer1);
   _free($12);
   $$092 = -1;
   break;
  } else $$0 = 0;
  while (1) {
   if (($$0 | 0) == 3) break; else $$088 = 0;
   while (1) {
    if (($$088 | 0) == 4) break;
    HEAPF64[$3 + ($$0 << 5) + ($$088 << 3) >> 3] = +HEAPF64[$2 + ($$0 << 5) + ($$088 << 3) >> 3];
    $$088 = $$088 + 1 | 0;
   }
   $$0 = $$0 + 1 | 0;
  }
  $17 = $1 + 4 | 0;
  $18 = $5 + 8 | 0;
  $19 = $0 + 104 | 0;
  $20 = $0 + 120 | 0;
  $21 = $0 + 112 | 0;
  $22 = $0 + 96 | 0;
  $$091 = 0.0;
  $$189 = 0;
  L15 : while (1) {
   _arUtilMatMul($0, $3, $6) | 0;
   $$090 = 0.0;
   $$1 = 0;
   while (1) {
    $28 = HEAP32[$8 >> 2] | 0;
    if (($$1 | 0) >= ($28 | 0)) break;
    if ((_icpGetU_from_X_by_MatX2U($5, $6, (HEAP32[$17 >> 2] | 0) + ($$1 * 24 | 0) | 0) | 0) < 0) {
     label = 14;
     break L15;
    }
    $34 = HEAP32[$1 >> 2] | 0;
    $38 = +HEAPF64[$34 + ($$1 << 4) >> 3] - +HEAPF64[$5 >> 3];
    $42 = +HEAPF64[$34 + ($$1 << 4) + 8 >> 3] - +HEAPF64[$18 >> 3];
    $47 = $$1 << 1;
    HEAPF64[$15 + ($47 << 3) >> 3] = $38;
    HEAPF64[$15 + (($47 | 1) << 3) >> 3] = $42;
    $$090 = $$090 + ($38 * $38 + $42 * $42);
    $$1 = $$1 + 1 | 0;
   }
   $53 = $$090 / +($28 | 0);
   if ($53 < +HEAPF64[$19 >> 3]) {
    label = 28;
    break;
   }
   if (($$189 | 0) > 0) if ($53 < +HEAPF64[$20 >> 3]) if ($53 / $$091 > +HEAPF64[$21 >> 3]) {
    label = 28;
    break;
   }
   if (($$189 | 0) == (HEAP32[$22 >> 2] | 0)) {
    label = 28;
    break;
   } else {
    $$2 = 0;
    $65 = $28;
   }
   while (1) {
    if (($$2 | 0) >= ($65 | 0)) break;
    if ((_icpGetJ_U_S($12 + ($$2 * 12 << 3) | 0, $0, $3, (HEAP32[$17 >> 2] | 0) + ($$2 * 24 | 0) | 0) | 0) < 0) {
     label = 24;
     break L15;
    }
    $$2 = $$2 + 1 | 0;
    $65 = HEAP32[$8 >> 2] | 0;
   }
   if ((_icpGetDeltaS($7, $15, $12, $65 << 1) | 0) < 0) {
    label = 26;
    break;
   }
   _icpUpdateMat($3, $7) | 0;
   $$091 = $53;
   $$189 = $$189 + 1 | 0;
  }
  if ((label | 0) == 14) {
   _icpGetXw2XcCleanup($12, $15);
   $$092 = -1;
   break;
  } else if ((label | 0) == 24) {
   _icpGetXw2XcCleanup($12, $15);
   $$092 = -1;
   break;
  } else if ((label | 0) == 26) {
   _icpGetXw2XcCleanup($12, $15);
   $$092 = -1;
   break;
  } else if ((label | 0) == 28) {
   HEAPF64[$4 >> 3] = $53;
   _free($12);
   _free($15);
   $$092 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$092 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i20 = 0, $$018 = 0, $12 = 0, $18 = 0, $19 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $4 = sp + 48 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 $9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $3) | 0;
 if (($9 | 0) == ($0 | 0)) $$018 = $0; else {
  $12 = $3 + 4 | 0;
  if ((HEAP32[$3 >> 2] | 0) == (HEAP32[$12 >> 2] | 0)) $$018 = $0; else {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($7, $2, 15049);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, (HEAP32[$12 >> 2] | 0) + -24 | 0);
   $18 = HEAP8[$8 + 11 >> 0] | 0;
   $19 = $18 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7, $19 ? HEAP32[$8 >> 2] | 0 : $8, $19 ? HEAP32[$8 + 4 >> 2] | 0 : $18 & 255) | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$7 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15047) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i20 = 0;
   while (1) {
    if (($$0$i$i$i20 | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i20 << 2) >> 2] = 0;
    $$0$i$i$i20 = $$0$i$i$i20 + 1 | 0;
   }
   $32 = HEAP32[$12 >> 2] | 0;
   $33 = $32 + -24 | 0;
   $34 = $33 + 11 | 0;
   if ((HEAP8[$34 >> 0] | 0) < 0) {
    $37 = HEAP32[$33 >> 2] | 0;
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($37, $4);
    HEAP32[$32 + -20 >> 2] = 0;
   } else {
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($33, $4);
    HEAP8[$34 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($33);
   HEAP32[$33 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$33 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$33 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i$i | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
   $$018 = $9;
  }
 }
 STACKTOP = sp;
 return $$018 | 0;
}

function ___stpncpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0, $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $38 = 0, label = 0;
 $3 = $1;
 do if (!(($3 ^ $0) & 3)) {
  $10 = ($2 | 0) != 0;
  L3 : do if ($10 & ($3 & 3 | 0) != 0) {
   $$03866 = $2;
   $$03965 = $1;
   $$04164 = $0;
   while (1) {
    $11 = HEAP8[$$03965 >> 0] | 0;
    HEAP8[$$04164 >> 0] = $11;
    if (!($11 << 24 >> 24)) {
     $$038$lcssa79 = $$03866;
     $$039$lcssa78 = $$03965;
     $$041$lcssa77 = $$04164;
     break L3;
    }
    $13 = $$03866 + -1 | 0;
    $14 = $$03965 + 1 | 0;
    $15 = $$04164 + 1 | 0;
    $19 = ($13 | 0) != 0;
    if ($19 & ($14 & 3 | 0) != 0) {
     $$03866 = $13;
     $$03965 = $14;
     $$04164 = $15;
    } else {
     $$038$lcssa = $13;
     $$039$lcssa = $14;
     $$041$lcssa = $15;
     $$lcssa = $19;
     label = 5;
     break;
    }
   }
  } else {
   $$038$lcssa = $2;
   $$039$lcssa = $1;
   $$041$lcssa = $0;
   $$lcssa = $10;
   label = 5;
  } while (0);
  if ((label | 0) == 5) if ($$lcssa) {
   $$038$lcssa79 = $$038$lcssa;
   $$039$lcssa78 = $$039$lcssa;
   $$041$lcssa77 = $$041$lcssa;
  } else {
   $$243 = $$041$lcssa;
   $$3 = 0;
   break;
  }
  if (!(HEAP8[$$039$lcssa78 >> 0] | 0)) {
   $$243 = $$041$lcssa77;
   $$3 = $$038$lcssa79;
  } else {
   L11 : do if ($$038$lcssa79 >>> 0 > 3) {
    $$03753 = $$041$lcssa77;
    $$054 = $$039$lcssa78;
    $$152 = $$038$lcssa79;
    while (1) {
     $23 = HEAP32[$$054 >> 2] | 0;
     if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
      $$0$lcssa = $$054;
      $$037$lcssa = $$03753;
      $$1$lcssa = $$152;
      break L11;
     }
     HEAP32[$$03753 >> 2] = $23;
     $29 = $$152 + -4 | 0;
     $30 = $$054 + 4 | 0;
     $31 = $$03753 + 4 | 0;
     if ($29 >>> 0 > 3) {
      $$03753 = $31;
      $$054 = $30;
      $$152 = $29;
     } else {
      $$0$lcssa = $30;
      $$037$lcssa = $31;
      $$1$lcssa = $29;
      break;
     }
    }
   } else {
    $$0$lcssa = $$039$lcssa78;
    $$037$lcssa = $$041$lcssa77;
    $$1$lcssa = $$038$lcssa79;
   } while (0);
   $$140$ph = $$0$lcssa;
   $$142$ph = $$037$lcssa;
   $$2$ph = $$1$lcssa;
   label = 11;
  }
 } else {
  $$140$ph = $1;
  $$142$ph = $0;
  $$2$ph = $2;
  label = 11;
 } while (0);
 L16 : do if ((label | 0) == 11) if (!$$2$ph) {
  $$243 = $$142$ph;
  $$3 = 0;
 } else {
  $$14046 = $$140$ph;
  $$14245 = $$142$ph;
  $$247 = $$2$ph;
  while (1) {
   $34 = HEAP8[$$14046 >> 0] | 0;
   HEAP8[$$14245 >> 0] = $34;
   if (!($34 << 24 >> 24)) {
    $$243 = $$14245;
    $$3 = $$247;
    break L16;
   }
   $$247 = $$247 + -1 | 0;
   $38 = $$14245 + 1 | 0;
   if (!$$247) {
    $$243 = $38;
    $$3 = 0;
    break;
   } else {
    $$14046 = $$14046 + 1 | 0;
    $$14245 = $38;
   }
  }
 } while (0);
 _memset($$243 | 0, 0, $$3 | 0) | 0;
 return $$243 | 0;
}

function _arParamIdeal2Observ($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $103 = 0.0, $113 = 0.0, $119 = 0.0, $121 = 0.0, $122 = 0.0, $125 = 0.0, $13 = 0.0, $135 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $18 = 0.0, $20 = 0.0, $22 = 0.0, $25 = 0.0, $28 = 0.0, $31 = 0.0, $36 = 0.0, $6 = 0, $61 = 0.0, $63 = 0.0, $64 = 0.0, $67 = 0.0, $7 = 0, $74 = 0.0, $8 = 0, $84 = 0.0, $9 = 0, $91 = 0.0, $93 = 0.0, $94 = 0.0, $97 = 0.0, $storemerge$sink = 0.0, label = 0;
 $6 = $0 + 40 | 0;
 $7 = $0 + 8 | 0;
 $8 = $0 + 24 | 0;
 $9 = $0 + 16 | 0;
 $10 = $0 + 32 | 0;
 L1 : do switch ($5 | 0) {
 case 4:
  {
   $13 = +HEAPF64[$9 >> 3];
   $14 = +HEAPF64[$8 >> 3];
   $15 = +HEAPF64[$10 >> 3];
   $16 = +HEAPF64[$6 >> 3];
   $18 = +HEAPF64[$0 + 48 >> 3];
   $20 = +HEAPF64[$0 + 56 >> 3];
   $22 = +HEAPF64[$0 + 64 >> 3];
   $25 = ($1 - $18) * $22 / $15;
   $28 = ($2 - $20) * $22 / $16;
   $31 = $25 * $25 + $28 * $28;
   $36 = +HEAPF64[$0 >> 3] * $31 + 1.0 + $31 * (+HEAPF64[$7 >> 3] * $31);
   HEAPF64[$3 >> 3] = $18 + $15 * ($14 * ($31 + $25 * ($25 * 2.0)) + ($28 * ($13 * 2.0 * $25) + $25 * $36));
   $storemerge$sink = $20 + $16 * ($28 * ($14 * 2.0 * $25) + ($13 * ($31 + $28 * ($28 * 2.0)) + $28 * $36));
   label = 12;
   break;
  }
 case 3:
  {
   $61 = +HEAPF64[$0 >> 3];
   $63 = +HEAPF64[$9 >> 3];
   $64 = ($1 - $61) * $63;
   $67 = $63 * ($2 - +HEAPF64[$7 >> 3]);
   if ($64 == 0.0 & $67 == 0.0) {
    HEAPF64[$3 >> 3] = $61;
    $storemerge$sink = +HEAPF64[$7 >> 3];
    label = 12;
    break L1;
   } else {
    $74 = $64 * $64 + $67 * $67;
    $84 = 1.0 - $74 * (+HEAPF64[$10 >> 3] / 1.0e8) - $74 * ($74 * (+HEAPF64[$6 >> 3] / 1.0e8 / 1.0e5));
    HEAPF64[$3 >> 3] = $61 + +HEAPF64[$8 >> 3] * ($64 * $84);
    $storemerge$sink = +HEAPF64[$7 >> 3] + $67 * $84;
    label = 12;
    break L1;
   }
   break;
  }
 case 2:
  {
   $91 = +HEAPF64[$0 >> 3];
   $93 = +HEAPF64[$9 >> 3];
   $94 = ($1 - $91) * $93;
   $97 = $93 * ($2 - +HEAPF64[$7 >> 3]);
   if ($94 == 0.0 & $97 == 0.0) {
    HEAPF64[$3 >> 3] = $91;
    $storemerge$sink = +HEAPF64[$7 >> 3];
    label = 12;
    break L1;
   } else {
    $103 = $94 * $94 + $97 * $97;
    $113 = 1.0 - $103 * (+HEAPF64[$8 >> 3] / 1.0e8) - $103 * ($103 * (+HEAPF64[$10 >> 3] / 1.0e8 / 1.0e5));
    HEAPF64[$3 >> 3] = $91 + $94 * $113;
    $storemerge$sink = +HEAPF64[$7 >> 3] + $97 * $113;
    label = 12;
    break L1;
   }
   break;
  }
 case 1:
  {
   $119 = +HEAPF64[$0 >> 3];
   $121 = +HEAPF64[$9 >> 3];
   $122 = ($1 - $119) * $121;
   $125 = $121 * ($2 - +HEAPF64[$7 >> 3]);
   if ($122 == 0.0 & $125 == 0.0) {
    HEAPF64[$3 >> 3] = $119;
    $storemerge$sink = +HEAPF64[$7 >> 3];
    label = 12;
    break L1;
   } else {
    $135 = 1.0 - ($122 * $122 + $125 * $125) * (+HEAPF64[$8 >> 3] / 1.0e8);
    HEAPF64[$3 >> 3] = $119 + $122 * $135;
    $storemerge$sink = +HEAPF64[$7 >> 3] + $125 * $135;
    label = 12;
    break L1;
   }
   break;
  }
 default:
  $$0 = -1;
 } while (0);
 if ((label | 0) == 12) {
  HEAPF64[$4 >> 3] = $storemerge$sink;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arGetLine($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0108 = 0, $$0109 = 0, $$0110 = 0, $$1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $22 = 0.0, $25 = 0, $29 = 0, $31 = 0, $33 = 0, $44 = 0, $45 = 0, $54 = 0, $56 = 0.0, $59 = 0.0, $61 = 0, $7 = 0, $72 = 0, $73 = 0, $76 = 0.0, $78 = 0, $8 = 0, $81 = 0.0, $83 = 0.0, $86 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = _arVecAlloc(2) | 0;
 $10 = _arVecAlloc(2) | 0;
 $11 = _arMatrixAlloc(2, 2) | 0;
 $$0109 = 0;
 L1 : while (1) {
  if (($$0109 | 0) >= 4) {
   label = 10;
   break;
  }
  $13 = $$0109 + 1 | 0;
  $15 = HEAP32[$3 + ($13 << 2) >> 2] | 0;
  $17 = HEAP32[$3 + ($$0109 << 2) >> 2] | 0;
  $22 = +($15 + 1 - $17 | 0) * .05 + .5;
  $25 = ~~(+($17 | 0) + $22);
  $29 = ~~(+($15 | 0) - $22) - $25 | 0;
  $31 = _arMatrixAlloc($29 + 1 | 0, 2) | 0;
  $$0108 = 0;
  while (1) {
   if (($$0108 | 0) > ($29 | 0)) break;
   $33 = $$0108 + $25 | 0;
   if ((_arParamObserv2IdealLTf($4, +(HEAP32[$0 + ($33 << 2) >> 2] | 0), +(HEAP32[$1 + ($33 << 2) >> 2] | 0), $7, $8) | 0) < 0) {
    label = 6;
    break L1;
   }
   $44 = HEAP32[$31 >> 2] | 0;
   $45 = $$0108 << 1;
   HEAPF64[$44 + ($45 << 3) >> 3] = +HEAPF32[$7 >> 2];
   HEAPF64[$44 + (($45 | 1) << 3) >> 3] = +HEAPF32[$8 >> 2];
   $$0108 = $$0108 + 1 | 0;
  }
  if ((_arMatrixPCA($31, $11, $9, $10) | 0) < 0) {
   label = 14;
   break;
  }
  $54 = HEAP32[$11 >> 2] | 0;
  $56 = +HEAPF64[$54 + 8 >> 3];
  HEAPF64[$5 + ($$0109 * 24 | 0) >> 3] = $56;
  $59 = -+HEAPF64[$54 >> 3];
  HEAPF64[$5 + ($$0109 * 24 | 0) + 8 >> 3] = $59;
  $61 = HEAP32[$10 >> 2] | 0;
  HEAPF64[$5 + ($$0109 * 24 | 0) + 16 >> 3] = -($56 * +HEAPF64[$61 >> 3] + +HEAPF64[$61 + 8 >> 3] * $59);
  _arMatrixFree($31) | 0;
  $$0109 = $13;
 }
 L10 : do if ((label | 0) == 6) label = 14; else if ((label | 0) == 10) {
  _arMatrixFree($11) | 0;
  _arVecFree($10) | 0;
  _arVecFree($9) | 0;
  $$1 = 0;
  while (1) {
   if (($$1 | 0) >= 4) {
    $$0110 = 0;
    break L10;
   }
   $72 = ($$1 + 3 | 0) % 4 | 0;
   $73 = $5 + ($72 * 24 | 0) | 0;
   $76 = +HEAPF64[$5 + ($$1 * 24 | 0) + 8 >> 3];
   $78 = $5 + ($$1 * 24 | 0) | 0;
   $81 = +HEAPF64[$5 + ($72 * 24 | 0) + 8 >> 3];
   $83 = +HEAPF64[$73 >> 3] * $76 - +HEAPF64[$78 >> 3] * $81;
   if (+Math_abs(+$83) < .0001) {
    $$0110 = -1;
    break L10;
   }
   $86 = $5 + ($$1 * 24 | 0) + 16 | 0;
   $89 = $5 + ($72 * 24 | 0) + 16 | 0;
   HEAPF64[$6 + ($$1 << 4) >> 3] = ($81 * +HEAPF64[$86 >> 3] - $76 * +HEAPF64[$89 >> 3]) / $83;
   HEAPF64[$6 + ($$1 << 4) + 8 >> 3] = (+HEAPF64[$78 >> 3] * +HEAPF64[$89 >> 3] - +HEAPF64[$73 >> 3] * +HEAPF64[$86 >> 3]) / $83;
   $$1 = $$1 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 14) {
  _arMatrixFree($31) | 0;
  _arMatrixFree($11) | 0;
  _arVecFree($10) | 0;
  _arVecFree($9) | 0;
  $$0110 = -1;
 }
 STACKTOP = sp;
 return $$0110 | 0;
}

function _check_square($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $$0 = 0, $$0$$097 = 0, $$095 = 0, $$096 = 0, $$097 = 0, $$sink = 0, $$sroa$4$0 = 0, $$sroa$8$0 = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0.0, $3 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 $7 = $1 + 28 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $1 + 40028 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $1 + 24 | 0;
 $13 = (HEAP32[$11 >> 2] | 0) + -1 | 0;
 $$0 = 1;
 $$096 = 0;
 $$097 = 0;
 while (1) {
  if (($$0 | 0) >= ($13 | 0)) break;
  $17 = (HEAP32[$1 + 28 + ($$0 << 2) >> 2] | 0) - $8 | 0;
  $18 = Math_imul($17, $17) | 0;
  $21 = (HEAP32[$1 + 40028 + ($$0 << 2) >> 2] | 0) - $10 | 0;
  $23 = (Math_imul($21, $21) | 0) + $18 | 0;
  $24 = ($23 | 0) > ($$096 | 0);
  $$0$$097 = $24 ? $$0 : $$097;
  $$0 = $$0 + 1 | 0;
  $$096 = $24 ? $23 : $$096;
  $$097 = $$0$$097;
 }
 $29 = +($0 | 0) / .75 * .01 * $2;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 L5 : do if ((_get_vertex($7, $9, 0, $$097, $29, $3, $4) | 0) < 0) $$095 = -1; else if ((_get_vertex($7, $9, $$097, (HEAP32[$11 >> 2] | 0) + -1 | 0, $29, $5, $6) | 0) < 0) $$095 = -1; else {
  $36 = HEAP32[$4 >> 2] | 0;
  $38 = HEAP32[$6 >> 2] | 0;
  do if (($36 | 0) == 1 & ($38 | 0) == 1) {
   $$sink = HEAP32[$5 >> 2] | 0;
   $$sroa$4$0 = HEAP32[$3 >> 2] | 0;
   $$sroa$8$0 = $$097;
  } else {
   if (($36 | 0) > 1 & ($38 | 0) == 0) {
    $44 = ($$097 | 0) / 2 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    if ((_get_vertex($7, $9, 0, $44, $29, $3, $4) | 0) < 0) {
     $$095 = -1;
     break L5;
    }
    if ((_get_vertex($7, $9, $44, $$097, $29, $5, $6) | 0) < 0) {
     $$095 = -1;
     break L5;
    }
    if (!((HEAP32[$4 >> 2] | 0) == 1 & (HEAP32[$6 >> 2] | 0) == 1)) {
     $$095 = -1;
     break L5;
    }
    $$sink = $$097;
    $$sroa$4$0 = HEAP32[$3 >> 2] | 0;
    $$sroa$8$0 = HEAP32[$5 >> 2] | 0;
    break;
   }
   if (!(($36 | 0) == 0 & ($38 | 0) > 1)) {
    $$095 = -1;
    break L5;
   }
   $60 = ($$097 + -1 + (HEAP32[$11 >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   if ((_get_vertex($7, $9, $$097, $60, $29, $3, $4) | 0) < 0) {
    $$095 = -1;
    break L5;
   }
   if ((_get_vertex($7, $9, $60, (HEAP32[$11 >> 2] | 0) + -1 | 0, $29, $5, $6) | 0) < 0) {
    $$095 = -1;
    break L5;
   }
   if (!((HEAP32[$4 >> 2] | 0) == 1 & (HEAP32[$6 >> 2] | 0) == 1)) {
    $$095 = -1;
    break L5;
   }
   $$sink = HEAP32[$5 >> 2] | 0;
   $$sroa$4$0 = $$097;
   $$sroa$8$0 = HEAP32[$3 >> 2] | 0;
  } while (0);
  HEAP32[$1 + 80028 >> 2] = 0;
  HEAP32[$1 + 80032 >> 2] = $$sroa$4$0;
  HEAP32[$1 + 80036 >> 2] = $$sroa$8$0;
  HEAP32[$1 + 80040 >> 2] = $$sink;
  HEAP32[$1 + 80044 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
  $$095 = 0;
 } while (0);
 STACKTOP = sp;
 return $$095 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 97) if ((HEAP8[$0 + 1 >> 0] | 0) == 122) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$1 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$1 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16228) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15047) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i25 = 0;
    while (1) {
     if (($$0$i$i$i25 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i25 << 2) >> 2] = 0;
     $$0$i$i$i25 = $$0$i$i$i25 + 1 | 0;
    }
    $30 = HEAP32[$20 >> 2] | 0;
    $31 = $30 + -24 | 0;
    $32 = $31 + 11 | 0;
    if ((HEAP8[$32 >> 0] | 0) < 0) {
     $35 = HEAP32[$31 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($35, $3);
     HEAP32[$30 + -20 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($31, $3);
     HEAP8[$32 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($31);
    HEAP32[$31 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$31 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$31 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$1 = $17;
   }
  }
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 97) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$1 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$1 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16228) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15047) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i25 = 0;
    while (1) {
     if (($$0$i$i$i25 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i25 << 2) >> 2] = 0;
     $$0$i$i$i25 = $$0$i$i$i25 + 1 | 0;
    }
    $30 = HEAP32[$20 >> 2] | 0;
    $31 = $30 + -24 | 0;
    $32 = $31 + 11 | 0;
    if ((HEAP8[$32 >> 0] | 0) < 0) {
     $35 = HEAP32[$31 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($35, $3);
     HEAP32[$30 + -20 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($31, $3);
     HEAP8[$32 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($31);
    HEAP32[$31 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$31 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$31 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$1 = $17;
   }
  }
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$014 = 0, $$069 = 0, $$070 = 0, $$074 = 0, $$215 = 0, $$3 = 0, $$316 = 0, $$373 = 0, $$377 = 0, $$4 = 0, $$sroa$speculated19 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $25 = 0, $3 = 0, $34 = 0, $4 = 0, $41 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = $0 + 11 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 if ($5) {
  $9 = HEAP32[$0 + 4 >> 2] | 0;
  $$sroa$speculated19 = $9 >>> 0 < 11 ? $9 : 11;
  $15 = $9;
  $17 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $6 = $4 & 255;
  $$sroa$speculated19 = $6 >>> 0 < 11 ? $6 : 11;
  $15 = $6;
  $17 = 10;
 }
 if (($$sroa$speculated19 - $15 + $17 | 0) >>> 0 < $1 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $17, $15 + $1 - $$sroa$speculated19 - $17 | 0, $15, 0, $$sroa$speculated19, $1, 16468); else {
  if ($5) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
  do if (($$sroa$speculated19 | 0) == ($1 | 0)) {
   $$215 = $1;
   $$3 = 0;
   $$373 = 16468;
   $$377 = $1;
   label = 17;
  } else {
   $21 = $15 - $$sroa$speculated19 | 0;
   if (!$21) {
    $$215 = $$sroa$speculated19;
    $$3 = 0;
    $$373 = 16468;
    $$377 = $1;
    label = 17;
   } else {
    if ($$sroa$speculated19 >>> 0 > $1 >>> 0) {
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($25, 16468, $1) | 0;
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($25 + $1 | 0, $25 + $$sroa$speculated19 | 0, $21) | 0;
     $$316 = $$sroa$speculated19;
     $$4 = $1;
     break;
    }
    do if ($25 >>> 0 < 16468 >>> 0 & ($25 + $15 | 0) >>> 0 > 16468 >>> 0) if (($25 + $$sroa$speculated19 | 0) >>> 0 > 16468 >>> 0) {
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($25, 16468, $$sroa$speculated19) | 0;
     $$014 = 0;
     $$069 = $$sroa$speculated19;
     $$070 = 16468 + $1 | 0;
     $$074 = $1 - $$sroa$speculated19 | 0;
     break;
    } else {
     $$014 = $$sroa$speculated19;
     $$069 = 0;
     $$070 = 16468 + ($1 - $$sroa$speculated19) | 0;
     $$074 = $1;
     break;
    } else {
     $$014 = $$sroa$speculated19;
     $$069 = 0;
     $$070 = 16468;
     $$074 = $1;
    } while (0);
    $34 = $25 + $$069 | 0;
    __ZNSt3__211char_traitsIcE4moveEPcPKcj($34 + $$074 | 0, $34 + $$014 | 0, $21) | 0;
    $$215 = $$014;
    $$3 = $$069;
    $$373 = $$070;
    $$377 = $$074;
    label = 17;
   }
  } while (0);
  if ((label | 0) == 17) {
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($25 + $$3 | 0, $$373, $$377) | 0;
   $$316 = $$215;
   $$4 = $$377;
  }
  $41 = $$4 - $$316 + $15 | 0;
  if ((HEAP8[$3 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $41; else HEAP8[$3 >> 0] = $41;
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($25 + $41 | 0, $2);
 }
 STACKTOP = sp;
 return;
}

function _arglCameraFrustum($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0 = 0, $$053 = 0, $$1 = 0, $$154 = 0, $$2 = 0, $10 = 0, $15 = 0.0, $17 = 0.0, $21 = 0, $34 = 0.0, $4 = 0, $47 = 0, $5 = 0, $59 = 0, $6 = 0, $61 = 0.0, $68 = 0, $7 = 0, $72 = 0.0, $74 = 0.0, $76 = 0.0, $78 = 0.0, $8 = 0, $81 = 0.0, $82 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(400);
 $4 = sp + 296 | 0;
 $5 = sp + 200 | 0;
 $6 = sp + 128 | 0;
 $7 = sp;
 $8 = HEAP32[$0 >> 2] | 0;
 $10 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if ((_arParamDecompMat($0 + 8 | 0, $4, $5) | 0) < 0) _arLog(3, 5340, sp + 392 | 0); else {
  $15 = +($10 + -1 | 0);
  $$053 = 0;
  while (1) {
   if (($$053 | 0) == 4) break;
   $21 = $4 + 32 + ($$053 << 3) | 0;
   HEAPF64[$21 >> 3] = $15 * +HEAPF64[$4 + 64 + ($$053 << 3) >> 3] - +HEAPF64[$21 >> 3];
   $$053 = $$053 + 1 | 0;
  }
  $17 = +HEAPF64[$4 + 80 >> 3];
  $$154 = 0;
  while (1) {
   if (($$154 | 0) == 3) break; else $$0 = 0;
   while (1) {
    if (($$0 | 0) == 3) break;
    HEAPF64[$6 + ($$154 * 24 | 0) + ($$0 << 3) >> 3] = +HEAPF64[$4 + ($$154 << 5) + ($$0 << 3) >> 3] / $17;
    $$0 = $$0 + 1 | 0;
   }
   $$154 = $$154 + 1 | 0;
  }
  $34 = +($8 + -1 | 0);
  HEAPF64[$7 >> 3] = +HEAPF64[$6 >> 3] * 2.0 / $34;
  HEAPF64[$7 + 8 >> 3] = +HEAPF64[$6 + 8 >> 3] * 2.0 / $34;
  HEAPF64[$7 + 16 >> 3] = +HEAPF64[$6 + 16 >> 3] * 2.0 / $34 + -1.0;
  $47 = $7 + 24 | 0;
  HEAP32[$47 >> 2] = 0;
  HEAP32[$47 + 4 >> 2] = 0;
  HEAP32[$47 + 8 >> 2] = 0;
  HEAP32[$47 + 12 >> 2] = 0;
  HEAPF64[$7 + 40 >> 3] = +HEAPF64[$6 + 32 >> 3] * 2.0 / $15;
  HEAPF64[$7 + 48 >> 3] = +HEAPF64[$6 + 40 >> 3] * 2.0 / $15 + -1.0;
  $59 = $7 + 56 | 0;
  $61 = $2 - $1;
  HEAP32[$59 >> 2] = 0;
  HEAP32[$59 + 4 >> 2] = 0;
  HEAP32[$59 + 8 >> 2] = 0;
  HEAP32[$59 + 12 >> 2] = 0;
  HEAP32[$59 + 16 >> 2] = 0;
  HEAP32[$59 + 20 >> 2] = 0;
  HEAPF64[$7 + 80 >> 3] = ($1 + $2) / $61;
  HEAPF64[$7 + 88 >> 3] = $2 * -2.0 * $1 / $61;
  $68 = $7 + 96 | 0;
  HEAP32[$68 >> 2] = 0;
  HEAP32[$68 + 4 >> 2] = 0;
  HEAP32[$68 + 8 >> 2] = 0;
  HEAP32[$68 + 12 >> 2] = 0;
  HEAPF64[$7 + 112 >> 3] = 1.0;
  HEAPF64[$7 + 120 >> 3] = 0.0;
  $72 = +HEAPF64[$5 + 24 >> 3];
  $74 = +HEAPF64[$5 + 56 >> 3];
  $76 = +HEAPF64[$5 + 88 >> 3];
  $$2 = 0;
  while (1) {
   if (($$2 | 0) == 4) break L1;
   $78 = +HEAPF64[$7 + ($$2 << 5) >> 3];
   $81 = +HEAPF64[$7 + ($$2 << 5) + 16 >> 3];
   $82 = +HEAPF64[$7 + ($$2 << 5) + 8 >> 3];
   $$1 = 0;
   while (1) {
    if (($$1 | 0) == 3) break;
    HEAPF64[$3 + (($$1 << 2) + $$2 << 3) >> 3] = $78 * +HEAPF64[$5 + ($$1 << 3) >> 3] + $82 * +HEAPF64[$5 + 32 + ($$1 << 3) >> 3] + $81 * +HEAPF64[$5 + 64 + ($$1 << 3) >> 3];
    $$1 = $$1 + 1 | 0;
   }
   HEAPF64[$3 + ($$2 + 12 << 3) >> 3] = +HEAPF64[$7 + ($$2 << 5) + 24 >> 3] + ($78 * $72 + $82 * $74 + $81 * $76);
   $$2 = $$2 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$049$idx = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$ptr = 0, $11 = 0, $12 = 0, $17 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $vararg_buffer = sp + 8 | 0;
 $3 = sp;
 $4 = sp + 48 | 0;
 $5 = sp + 32 | 0;
 L1 : do if (($1 - $0 | 0) >>> 0 > 20) {
  $$049$idx = 0;
  $$050 = $3;
  while (1) {
   $11 = HEAP8[$0 + $$049$idx >> 0] | 0;
   $12 = $11 << 24 >> 24;
   $$ptr = $0 + ($$049$idx | 1) | 0;
   if (($$049$idx | 0) == 20) {
    label = 6;
    break;
   }
   if (!(_isxdigit($12) | 0)) break;
   $17 = HEAP8[$$ptr >> 0] | 0;
   HEAP8[$$050 >> 0] = $17 + ((($12 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $12 << 4) + (($17 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $$049$idx = $$049$idx + 2 | 0;
   $$050 = $$050 + 1 | 0;
  }
  do if ((label | 0) == 6) {
   if ($11 << 24 >> 24 == 69) {
    L11 : do if (($3 | 0) != ($$050 | 0)) {
     $$0$i$i = $$050;
     $$07$i$i = $3;
     while (1) {
      $25 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $25 >>> 0) break L11;
      $27 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$25 >> 0] | 0;
      HEAP8[$25 >> 0] = $27;
      $$0$i$i = $25;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    dest = $4;
    stop = dest + 40 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$3 >> 3];
    $31 = _snprintf($4, 40, 16353, $vararg_buffer) | 0;
    if ($31 >>> 0 > 39) break;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $4, $31);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($vararg_buffer, $5);
    $33 = $2 + 4 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    if ($34 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($34, $vararg_buffer);
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($vararg_buffer);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$247$ph = $$ptr;
   } else $$247$ph = $0;
   $$3 = $$247$ph;
   break L1;
  } while (0);
  $$3 = $0;
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$049$idx = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$ptr = 0, $11 = 0, $12 = 0, $17 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $vararg_buffer = sp + 8 | 0;
 $3 = sp;
 $4 = sp + 48 | 0;
 $5 = sp + 32 | 0;
 L1 : do if (($1 - $0 | 0) >>> 0 > 16) {
  $$049$idx = 0;
  $$050 = $3;
  while (1) {
   $11 = HEAP8[$0 + $$049$idx >> 0] | 0;
   $12 = $11 << 24 >> 24;
   $$ptr = $0 + ($$049$idx | 1) | 0;
   if (($$049$idx | 0) == 16) {
    label = 6;
    break;
   }
   if (!(_isxdigit($12) | 0)) break;
   $17 = HEAP8[$$ptr >> 0] | 0;
   HEAP8[$$050 >> 0] = $17 + ((($12 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $12 << 4) + (($17 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $$049$idx = $$049$idx + 2 | 0;
   $$050 = $$050 + 1 | 0;
  }
  do if ((label | 0) == 6) {
   if ($11 << 24 >> 24 == 69) {
    L11 : do if (($3 | 0) != ($$050 | 0)) {
     $$0$i$i = $$050;
     $$07$i$i = $3;
     while (1) {
      $25 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $25 >>> 0) break L11;
      $27 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$25 >> 0] | 0;
      HEAP8[$25 >> 0] = $27;
      $$0$i$i = $25;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    dest = $4;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$3 >> 3];
    $31 = _snprintf($4, 32, 16358, $vararg_buffer) | 0;
    if ($31 >>> 0 > 31) break;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $4, $31);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($vararg_buffer, $5);
    $33 = $2 + 4 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    if ($34 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($34, $vararg_buffer);
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($vararg_buffer);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$247$ph = $$ptr;
   } else $$247$ph = $0;
   $$3 = $$247$ph;
   break L1;
  } while (0);
  $$3 = $0;
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$049$idx = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$ptr = 0, $11 = 0, $12 = 0, $17 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer = sp;
 $3 = sp + 36 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 24 | 0;
 L1 : do if (($1 - $0 | 0) >>> 0 > 8) {
  $$049$idx = 0;
  $$050 = $3;
  while (1) {
   $11 = HEAP8[$0 + $$049$idx >> 0] | 0;
   $12 = $11 << 24 >> 24;
   $$ptr = $0 + ($$049$idx | 1) | 0;
   if (($$049$idx | 0) == 8) {
    label = 6;
    break;
   }
   if (!(_isxdigit($12) | 0)) break;
   $17 = HEAP8[$$ptr >> 0] | 0;
   HEAP8[$$050 >> 0] = $17 + ((($12 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $12 << 4) + (($17 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $$049$idx = $$049$idx + 2 | 0;
   $$050 = $$050 + 1 | 0;
  }
  do if ((label | 0) == 6) {
   if ($11 << 24 >> 24 == 69) {
    L11 : do if (($3 | 0) != ($$050 | 0)) {
     $$0$i$i = $$050;
     $$07$i$i = $3;
     while (1) {
      $25 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $25 >>> 0) break L11;
      $27 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$25 >> 0] | 0;
      HEAP8[$25 >> 0] = $27;
      $$0$i$i = $25;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    dest = $4;
    stop = dest + 24 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF32[$3 >> 2];
    $32 = _snprintf($4, 24, 16361, $vararg_buffer) | 0;
    if ($32 >>> 0 > 23) break;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $4, $32);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($vararg_buffer, $5);
    $34 = $2 + 4 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    if ($35 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($35, $vararg_buffer);
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($vararg_buffer);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$247$ph = $$ptr;
   } else $$247$ph = $0;
   $$3 = $$247$ph;
   break L1;
  } while (0);
  $$3 = $0;
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _arPattGetIDGlobal($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = +$9;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $$0 = 0, $$091 = 0, $$092 = 0, $19 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $29 = 0, $32 = 0, $41 = 0, $45 = 0, $49 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(12304);
 $19 = sp + 8 | 0;
 $20 = sp;
 do if (($2 + -2 | 0) >>> 0 < 3) {
  $22 = ($18 | 0) != 0;
  if (($16 | 0) != 2830) {
   $45 = $16 & 255;
   if ((_arPattGetImage2($1, 2, $45, $45 * 3 | 0, $3, $4, $5, $6, $7, $8, $9, $19) | 0) < 0) {
    HEAP32[$13 >> 2] = -1;
    $$091 = -6;
    break;
   }
   $49 = _get_matrix_code($19, $45, $13, $14, $15, $16, $17) | 0;
   if (!$22) {
    $$091 = $49;
    break;
   }
   $50 = $18;
   HEAP32[$50 >> 2] = 0;
   HEAP32[$50 + 4 >> 2] = 0;
   $$091 = $49;
   break;
  }
  if ((_arPattGetImage2($1, 2, 14, 42, $3, $4, $5, $6, $7, $8, .875, $19) | 0) < 0) {
   HEAP32[$13 >> 2] = -1;
   $$091 = -6;
   break;
  }
  $25 = _get_global_id_code($19, $20, $14, $15, $17) | 0;
  if (($25 | 0) < 0) {
   HEAP32[$13 >> 2] = -1;
   $$091 = $25;
   break;
  }
  $27 = $20;
  $29 = HEAP32[$27 >> 2] | 0;
  $32 = HEAP32[$27 + 4 >> 2] | 0;
  if (($29 | 0) == -1 & ($32 | 0) == -1) {
   HEAP32[$13 >> 2] = -1;
   $$091 = -5;
   break;
  }
  HEAP32[$13 >> 2] = ($29 & -32768 | 0) == 0 & 0 == 0 ? $29 & 32767 : 0;
  if ($22) {
   $41 = $18;
   HEAP32[$41 >> 2] = $29;
   HEAP32[$41 + 4 >> 2] = $32;
   $$091 = $25;
  } else $$091 = $25;
 } else $$091 = 1; while (0);
 L21 : do switch ($2 | 0) {
 case 0:
 case 1:
 case 3:
 case 4:
  {
   if (!$0) {
    HEAP32[$10 >> 2] = -1;
    $$0 = -1;
    break L21;
   }
   $55 = $0 + 28 | 0;
   $56 = HEAP32[$55 >> 2] | 0;
   $57 = $56 << 2;
   switch ($2 | 0) {
   case 0:
   case 3:
    {
     if ((_arPattGetImage2($1, 0, $56, $57, $3, $4, $5, $6, $7, $8, $9, $19) | 0) < 0) {
      HEAP32[$10 >> 2] = -1;
      $$0 = -6;
      break L21;
     } else {
      $$0 = _pattern_match($0, 0, $19, HEAP32[$55 >> 2] | 0, $10, $11, $12) | 0;
      break L21;
     }
     break;
    }
   default:
    if ((_arPattGetImage2($1, 1, $56, $57, $3, $4, $5, $6, $7, $8, $9, $19) | 0) < 0) {
     HEAP32[$10 >> 2] = -1;
     $$0 = -6;
     break L21;
    } else {
     $$0 = _pattern_match($0, 1, $19, HEAP32[$55 >> 2] | 0, $10, $11, $12) | 0;
     break L21;
    }
   }
   break;
  }
 default:
  $$0 = 1;
 } while (0);
 if (($$091 | 0) == 1) $$092 = $$0; else $$092 = ($$0 | 0) == 1 ? $$091 : ($$0 & $$091 | 0) < 0 ? $$0 : 0;
 STACKTOP = sp;
 return $$092 | 0;
}

function _arGetMarkerInfo($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = +$10;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$0 = 0, $$0119 = 0, $$1 = 0, $$sink = 0, $14 = 0, $15 = 0, $17 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $14 = sp + 4 | 0;
 $15 = sp;
 $17 = ($8 | 1 | 0) == 1;
 $switch = $8 >>> 0 < 3;
 $$0 = 0;
 $$0119 = 0;
 while (1) {
  if (($$0 | 0) >= ($5 | 0)) break;
  HEAP32[$11 + ($$0119 << 8) >> 2] = HEAP32[$4 + ($$0 * 80048 | 0) >> 2];
  if ((_arParamObserv2IdealLTf($9, +HEAPF64[$4 + ($$0 * 80048 | 0) + 8 >> 3], +HEAPF64[$4 + ($$0 * 80048 | 0) + 16 >> 3], $14, $15) | 0) < 0) $$1 = $$0119; else {
   HEAPF64[$11 + ($$0119 << 8) + 56 >> 3] = +HEAPF32[$14 >> 2];
   HEAPF64[$11 + ($$0119 << 8) + 64 >> 3] = +HEAPF32[$15 >> 2];
   $42 = $11 + ($$0119 << 8) + 168 | 0;
   if ((_arGetLine($4 + ($$0 * 80048 | 0) + 28 | 0, $4 + ($$0 * 80048 | 0) + 40028 | 0, HEAP32[$4 + ($$0 * 80048 | 0) + 24 >> 2] | 0, $4 + ($$0 * 80048 | 0) + 80028 | 0, $9, $11 + ($$0119 << 8) + 72 | 0, $42) | 0) < 0) $$1 = $$0119; else {
    $45 = $11 + ($$0119 << 8) + 8 | 0;
    $46 = $11 + ($$0119 << 8) + 20 | 0;
    $47 = $11 + ($$0119 << 8) + 40 | 0;
    $48 = $11 + ($$0119 << 8) + 12 | 0;
    $49 = $11 + ($$0119 << 8) + 24 | 0;
    $50 = $11 + ($$0119 << 8) + 48 | 0;
    switch (_arPattGetIDGlobal($6, $7, $8, $0, $1, $2, $3, $9, $42, $10, $45, $46, $47, $48, $49, $50, $13, $11 + ($$0119 << 8) + 240 | 0, $11 + ($$0119 << 8) + 248 | 0) | 0) {
    case 0:
     {
      $$sink = 0;
      label = 12;
      break;
     }
    case -1:
     {
      $$sink = 2;
      label = 12;
      break;
     }
    case -2:
     {
      $$sink = 3;
      label = 12;
      break;
     }
    case -3:
     {
      $$sink = 4;
      label = 12;
      break;
     }
    case -4:
     {
      $$sink = 5;
      label = 12;
      break;
     }
    case -5:
     {
      $$sink = 9;
      label = 12;
      break;
     }
    case -6:
     {
      $$sink = 1;
      label = 12;
      break;
     }
    default:
     {}
    }
    if ((label | 0) == 12) {
     label = 0;
     HEAP32[$11 + ($$0119 << 8) + 236 >> 2] = $$sink;
    }
    if ($switch) {
     HEAP32[$11 + ($$0119 << 8) + 4 >> 2] = HEAP32[($17 ? $45 : $48) >> 2];
     HEAP32[$11 + ($$0119 << 8) + 16 >> 2] = HEAP32[($17 ? $46 : $49) >> 2];
     HEAPF64[$11 + ($$0119 << 8) + 32 >> 3] = +HEAPF64[($17 ? $47 : $50) >> 3];
    }
    $$1 = $$0119 + 1 | 0;
   }
  }
  $$0 = $$0 + 1 | 0;
  $$0119 = $$1;
 }
 HEAP32[$12 >> 2] = $$0119;
 STACKTOP = sp;
 return 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i18 = 0, $$016 = 0, $10 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 $7 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
 if (($7 | 0) == ($0 | 0)) $$016 = $0; else {
  $10 = $2 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($11 | 0)) $$016 = $0; else {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $11 + -24 | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15320) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15047) | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i18 = 0;
   while (1) {
    if (($$0$i$i$i18 | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i18 << 2) >> 2] = 0;
    $$0$i$i$i18 = $$0$i$i$i18 + 1 | 0;
   }
   $20 = HEAP32[$10 >> 2] | 0;
   $21 = $20 + -24 | 0;
   $22 = $21 + 11 | 0;
   if ((HEAP8[$22 >> 0] | 0) < 0) {
    $25 = HEAP32[$21 >> 2] | 0;
    HEAP8[$3 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($25, $3);
    HEAP32[$20 + -20 >> 2] = 0;
   } else {
    HEAP8[$3 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($21, $3);
    HEAP8[$22 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($21);
   HEAP32[$21 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$21 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$21 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   $$0$i$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   $$016 = $7;
  }
 }
 STACKTOP = sp;
 return $$016 | 0;
}

function _pop_arg($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do if ($1 >>> 0 <= 20) do switch ($1 | 0) {
 case 9:
  {
   $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $10 = HEAP32[$9 >> 2] | 0;
   HEAP32[$2 >> 2] = $9 + 4;
   HEAP32[$0 >> 2] = $10;
   break L1;
   break;
  }
 case 10:
  {
   $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$2 >> 2] = $16 + 4;
   $20 = $0;
   HEAP32[$20 >> 2] = $17;
   HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $30 = HEAP32[$29 >> 2] | 0;
   HEAP32[$2 >> 2] = $29 + 4;
   $31 = $0;
   HEAP32[$31 >> 2] = $30;
   HEAP32[$31 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $41 = $40;
   $43 = HEAP32[$41 >> 2] | 0;
   $46 = HEAP32[$41 + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = $40 + 8;
   $47 = $0;
   HEAP32[$47 >> 2] = $43;
   HEAP32[$47 + 4 >> 2] = $46;
   break L1;
   break;
  }
 case 13:
  {
   $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $57 = HEAP32[$56 >> 2] | 0;
   HEAP32[$2 >> 2] = $56 + 4;
   $59 = ($57 & 65535) << 16 >> 16;
   $62 = $0;
   HEAP32[$62 >> 2] = $59;
   HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $72 = HEAP32[$71 >> 2] | 0;
   HEAP32[$2 >> 2] = $71 + 4;
   $73 = $0;
   HEAP32[$73 >> 2] = $72 & 65535;
   HEAP32[$73 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   $85 = ($83 & 255) << 24 >> 24;
   $88 = $0;
   HEAP32[$88 >> 2] = $85;
   HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $98 = HEAP32[$97 >> 2] | 0;
   HEAP32[$2 >> 2] = $97 + 4;
   $99 = $0;
   HEAP32[$99 >> 2] = $98 & 255;
   HEAP32[$99 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $109 = +HEAPF64[$108 >> 3];
   HEAP32[$2 >> 2] = $108 + 8;
   HEAPF64[$0 >> 3] = $109;
   break L1;
   break;
  }
 case 18:
  {
   $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $116 = +HEAPF64[$115 >> 3];
   HEAP32[$2 >> 2] = $115 + 8;
   HEAPF64[$0 >> 3] = $116;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _qsort($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$2 = 0, $12 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $47 = 0, $49 = 0, $5 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = Math_imul($2, $1) | 0;
 $7 = $5;
 HEAP32[$7 >> 2] = 1;
 HEAP32[$7 + 4 >> 2] = 0;
 L1 : do if ($6 | 0) {
  $12 = 0 - $2 | 0;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $2;
  $$0 = 2;
  $15 = $2;
  $17 = $2;
  while (1) {
   $16 = $15 + $2 + $17 | 0;
   HEAP32[$4 + ($$0 << 2) >> 2] = $16;
   if ($16 >>> 0 < $6 >>> 0) {
    $15$phi = $17;
    $$0 = $$0 + 1 | 0;
    $17 = $16;
    $15 = $15$phi;
   } else break;
  }
  $22 = $0 + $6 + $12 | 0;
  if ($22 >>> 0 > $0 >>> 0) {
   $24 = $22;
   $$06772 = 1;
   $$06871 = $0;
   $26 = 1;
   while (1) {
    do if (($26 & 3 | 0) == 3) {
     _sift($$06871, $2, $3, $$06772, $4);
     _shr($5, 2);
     $$1 = $$06772 + 2 | 0;
    } else {
     $29 = $$06772 + -1 | 0;
     if ((HEAP32[$4 + ($29 << 2) >> 2] | 0) >>> 0 < ($24 - $$06871 | 0) >>> 0) _sift($$06871, $2, $3, $$06772, $4); else _trinkle($$06871, $2, $3, $5, $$06772, 0, $4);
     if (($$06772 | 0) == 1) {
      _shl($5, 1);
      $$1 = 0;
      break;
     } else {
      _shl($5, $29);
      $$1 = 1;
      break;
     }
    } while (0);
    $37 = HEAP32[$5 >> 2] | 1;
    HEAP32[$5 >> 2] = $37;
    $38 = $$06871 + $2 | 0;
    if ($38 >>> 0 < $22 >>> 0) {
     $$06772 = $$1;
     $$06871 = $38;
     $26 = $37;
    } else {
     $$067$lcssa = $$1;
     $$068$lcssa = $38;
     $61 = $37;
     break;
    }
   }
  } else {
   $$067$lcssa = 1;
   $$068$lcssa = $0;
   $61 = 1;
  }
  _trinkle($$068$lcssa, $2, $3, $5, $$067$lcssa, 0, $4);
  $40 = $5 + 4 | 0;
  $$169 = $$068$lcssa;
  $$2 = $$067$lcssa;
  $43 = $61;
  while (1) {
   if (($$2 | 0) == 1 & ($43 | 0) == 1) {
    if (!(HEAP32[$40 >> 2] | 0)) break L1;
   } else if (($$2 | 0) >= 2) {
    _shl($5, 2);
    $49 = $$2 + -2 | 0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] ^ 7;
    _shr($5, 1);
    _trinkle($$169 + (0 - (HEAP32[$4 + ($49 << 2) >> 2] | 0)) + $12 | 0, $2, $3, $5, $$2 + -1 | 0, 1, $4);
    _shl($5, 1);
    $59 = HEAP32[$5 >> 2] | 1;
    HEAP32[$5 >> 2] = $59;
    $60 = $$169 + $12 | 0;
    _trinkle($60, $2, $3, $5, $49, 1, $4);
    $$169 = $60;
    $$2 = $49;
    $43 = $59;
    continue;
   }
   $47 = _pntz($5) | 0;
   _shr($5, $47);
   $$169 = $$169 + $12 | 0;
   $$2 = $47 + $$2 | 0;
   $43 = HEAP32[$5 >> 2] | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _trinkle($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $11 = 0, $12 = 0, $16 = 0, $20 = 0, $24 = 0, $27 = 0, $28 = 0, $35 = 0, $37 = 0, $38 = 0, $47 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $7 = sp + 232 | 0;
 $8 = sp;
 $9 = HEAP32[$3 >> 2] | 0;
 HEAP32[$7 >> 2] = $9;
 $11 = HEAP32[$3 + 4 >> 2] | 0;
 $12 = $7 + 4 | 0;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$8 >> 2] = $0;
 L1 : do if (($9 | 0) != 1 | ($11 | 0) != 0) {
  $16 = 0 - $1 | 0;
  $20 = $0 + (0 - (HEAP32[$6 + ($4 << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[$2 & 15]($20, $0) | 0) < 1) {
   $$0$lcssa = $0;
   $$045$lcssa = 1;
   $$046$lcssa = $4;
   $$047$lcssa = $5;
   label = 9;
  } else {
   $$0455780 = 1;
   $$0465681 = $4;
   $$0475582 = ($5 | 0) == 0;
   $$05879 = $0;
   $28 = $20;
   while (1) {
    if ($$0475582 & ($$0465681 | 0) > 1) {
     $24 = $$05879 + $16 | 0;
     $27 = HEAP32[$6 + ($$0465681 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[$2 & 15]($24, $28) | 0) > -1) {
      $$04551 = $$0455780;
      $$04653 = $$0465681;
      $$049 = $$05879;
      label = 10;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[$2 & 15]($24 + (0 - $27) | 0, $28) | 0) > -1) {
      $$04551 = $$0455780;
      $$04653 = $$0465681;
      $$049 = $$05879;
      label = 10;
      break L1;
     }
    }
    $35 = $$0455780 + 1 | 0;
    HEAP32[$8 + ($$0455780 << 2) >> 2] = $28;
    $37 = _pntz($7) | 0;
    _shr($7, $37);
    $38 = $37 + $$0465681 | 0;
    if (!((HEAP32[$7 >> 2] | 0) != 1 | (HEAP32[$12 >> 2] | 0) != 0)) {
     $$04551 = $35;
     $$04653 = $38;
     $$049 = $28;
     label = 10;
     break L1;
    }
    $47 = $28 + (0 - (HEAP32[$6 + ($38 << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[$2 & 15]($47, HEAP32[$8 >> 2] | 0) | 0) < 1) {
     $$0$lcssa = $28;
     $$045$lcssa = $35;
     $$046$lcssa = $38;
     $$047$lcssa = 0;
     label = 9;
     break;
    } else {
     $$05879$phi = $28;
     $$0455780 = $35;
     $$0465681 = $38;
     $$0475582 = 1;
     $28 = $47;
     $$05879 = $$05879$phi;
    }
   }
  }
 } else {
  $$0$lcssa = $0;
  $$045$lcssa = 1;
  $$046$lcssa = $4;
  $$047$lcssa = $5;
  label = 9;
 } while (0);
 if ((label | 0) == 9) if (!$$047$lcssa) {
  $$04551 = $$045$lcssa;
  $$04653 = $$046$lcssa;
  $$049 = $$0$lcssa;
  label = 10;
 }
 if ((label | 0) == 10) {
  _cycle($1, $8, $$04551);
  _sift($$049, $1, $2, $$04653, $6);
 }
 STACKTOP = sp;
 return;
}

function _arParamChangeSize($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0107 = 0, $$sink = 0.0, $$sink3 = 0, $12 = 0.0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $61 = 0.0, $62 = 0.0, $7 = 0.0, label = 0;
 $7 = +($1 | 0) / +(HEAP32[$0 >> 2] | 0);
 $12 = +($2 | 0) / +(HEAP32[$0 + 4 >> 2] | 0);
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 4) break;
  HEAPF64[$3 + 8 + ($$0 << 3) >> 3] = $7 * +HEAPF64[$0 + 8 + ($$0 << 3) >> 3];
  HEAPF64[$3 + 40 + ($$0 << 3) >> 3] = $12 * +HEAPF64[$0 + 40 + ($$0 << 3) >> 3];
  HEAPF64[$3 + 72 + ($$0 << 3) >> 3] = +HEAPF64[$0 + 72 + ($$0 << 3) >> 3];
  $$0 = $$0 + 1 | 0;
 }
 $27 = HEAP32[$0 + 176 >> 2] | 0;
 $29 = $0 + 128 | 0;
 $30 = $3 + 136 | 0;
 $31 = $0 + 112 | 0;
 $32 = $3 + 112 | 0;
 $33 = $0 + 120 | 0;
 $34 = $3 + 128 | 0;
 $35 = $3 + 104 | 0;
 $36 = $0 + 144 | 0;
 $37 = $0 + 104 | 0;
 $38 = $0 + 136 | 0;
 $39 = $3 + 120 | 0;
 L5 : do if (($27 | 0) == 4) {
  HEAPF64[$35 >> 3] = +HEAPF64[$37 >> 3];
  HEAPF64[$32 >> 3] = +HEAPF64[$31 >> 3];
  HEAPF64[$39 >> 3] = +HEAPF64[$33 >> 3];
  HEAPF64[$34 >> 3] = +HEAPF64[$29 >> 3];
  HEAPF64[$30 >> 3] = $7 * +HEAPF64[$38 >> 3];
  HEAPF64[$3 + 144 >> 3] = $12 * +HEAPF64[$36 >> 3];
  HEAPF64[$3 + 152 >> 3] = $7 * +HEAPF64[$0 + 152 >> 3];
  HEAPF64[$3 + 160 >> 3] = $12 * +HEAPF64[$0 + 160 >> 3];
  $$sink = +HEAPF64[$0 + 168 >> 3];
  $$sink3 = 8;
  label = 10;
 } else {
  $61 = $12 * ($7 * $7 * $12);
  $62 = $7 * $12;
  switch ($27 | 0) {
  case 3:
   {
    HEAPF64[$35 >> 3] = $7 * +HEAPF64[$37 >> 3];
    HEAPF64[$32 >> 3] = $12 * +HEAPF64[$31 >> 3];
    HEAPF64[$39 >> 3] = +HEAPF64[$33 >> 3];
    HEAPF64[$34 >> 3] = +HEAPF64[$29 >> 3];
    HEAPF64[$30 >> 3] = +HEAPF64[$38 >> 3] / $62;
    $$sink = +HEAPF64[$36 >> 3] / $61;
    $$sink3 = 5;
    label = 10;
    break L5;
    break;
   }
  case 2:
   {
    HEAPF64[$35 >> 3] = $7 * +HEAPF64[$37 >> 3];
    HEAPF64[$32 >> 3] = $12 * +HEAPF64[$31 >> 3];
    HEAPF64[$39 >> 3] = +HEAPF64[$33 >> 3];
    HEAPF64[$34 >> 3] = +HEAPF64[$29 >> 3] / $62;
    $$sink = +HEAPF64[$38 >> 3] / $61;
    $$sink3 = 4;
    label = 10;
    break L5;
    break;
   }
  case 1:
   {
    HEAPF64[$35 >> 3] = $7 * +HEAPF64[$37 >> 3];
    HEAPF64[$32 >> 3] = $12 * +HEAPF64[$31 >> 3];
    HEAPF64[$39 >> 3] = +HEAPF64[$33 >> 3];
    $$sink = +HEAPF64[$29 >> 3] / $62;
    $$sink3 = 3;
    label = 10;
    break L5;
    break;
   }
  default:
   {
    $$0107 = -1;
    break L5;
   }
  }
 } while (0);
 if ((label | 0) == 10) {
  HEAPF64[$3 + 104 + ($$sink3 << 3) >> 3] = $$sink;
  HEAP32[$3 + 176 >> 2] = $27;
  $$0107 = 0;
 }
 return $$0107 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$025 = 0, $$127 = 0, $14 = 0, $16 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 116) {
  $14 = HEAP8[$0 + 1 >> 0] | 0;
  switch ($14 << 24 >> 24) {
  case 101:
  case 105:
   break;
  default:
   {
    $$127 = $0;
    break L1;
   }
  }
  $16 = $0 + 2 | 0;
  if ($14 << 24 >> 24 == 101) $$025 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0; else $$025 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($$025 | 0) == ($16 | 0)) $$127 = $0; else {
   $21 = $2 + 4 | 0;
   $22 = HEAP32[$21 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($22 | 0)) $$127 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $22 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15252) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15047) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i30 = 0;
    while (1) {
     if (($$0$i$i$i30 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i30 << 2) >> 2] = 0;
     $$0$i$i$i30 = $$0$i$i$i30 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$21 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$127 = $$025;
   }
  }
 } else $$127 = $0; else $$127 = $0; while (0);
 STACKTOP = sp;
 return $$127 | 0;
}

function _setCamera($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0)) $$2 = -1; else {
  $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0;
  if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17324, $3) | 0)) $$2 = -1; else {
   $10 = $6 + 8 | 0;
   _memcpy($10 | 0, __ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17324, $3) | 0, 184) | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   $12 = $6 + 204 | 0;
   $16 = HEAP32[$6 + 12 >> 2] | 0;
   $17 = $6 + 208 | 0;
   if (!(($11 | 0) == (HEAP32[$12 >> 2] | 0) ? ($16 | 0) == (HEAP32[$17 >> 2] | 0) : 0)) {
    HEAP32[$vararg_buffer >> 2] = $11;
    HEAP32[$vararg_buffer + 4 >> 2] = $16;
    _arLog(2, 10072, $vararg_buffer);
    _arParamChangeSize($10, HEAP32[$12 >> 2] | 0, HEAP32[$17 >> 2] | 0, $10) | 0;
   }
   _deleteHandle($6);
   $22 = _arParamLTCreate($10, 15) | 0;
   $23 = $6 + 192 | 0;
   HEAP32[$23 >> 2] = $22;
   if (!$22) {
    _arLog(3, 10119, $vararg_buffer2);
    $$2 = -1;
    break;
   }
   $25 = _arCreateHandle($22) | 0;
   $26 = $6 + 212 | 0;
   HEAP32[$26 >> 2] = $25;
   if (!$25) {
    _arLog(3, 10157, $vararg_buffer4);
    $$2 = -1;
    break;
   }
   _arSetPixelFormat($25, 2) | 0;
   $28 = _ar3DCreateHandle($10) | 0;
   HEAP32[$6 + 224 >> 2] = $28;
   if (!$28) {
    _arLog(3, 10194, $vararg_buffer6);
    $$2 = -1;
    break;
   } else {
    _arPattAttach(HEAP32[$26 >> 2] | 0, HEAP32[$6 + 216 >> 2] | 0) | 0;
    _arglCameraFrustum(HEAP32[$23 >> 2] | 0, +HEAPF64[$6 + 232 >> 3], +HEAPF64[$6 + 240 >> 3], $6 + 264 | 0);
    $$2 = 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$127 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 68) {
  switch (HEAP8[$0 + 1 >> 0] | 0) {
  case 84:
  case 116:
   break;
  default:
   {
    $$127 = $0;
    break L1;
   }
  }
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0) | ($17 | 0) == ($1 | 0)) $$127 = $0; else if ((HEAP8[$17 >> 0] | 0) == 69) {
   $23 = $2 + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($24 | 0)) $$127 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $24 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 16365) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15047) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i30 = 0;
    while (1) {
     if (($$0$i$i$i30 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i30 << 2) >> 2] = 0;
     $$0$i$i$i30 = $$0$i$i$i30 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$23 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$127 = $17 + 1 | 0;
   }
  } else $$127 = $0;
 } else $$127 = $0; else $$127 = $0; while (0);
 STACKTOP = sp;
 return $$127 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i28 = 0, $$125 = 0, $16 = 0, $19 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 90) {
  $16 = $0 + 2 | 0;
  if ((HEAP8[$16 >> 0] | 0) == 102) {
   $19 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
   if (($19 | 0) == ($16 | 0)) $$125 = $0; else {
    $22 = $2 + 4 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($23 | 0)) $$125 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $23 + -24 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15260) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15047) | 0;
     HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     $$0$i$i$i28 = 0;
     while (1) {
      if (($$0$i$i$i28 | 0) == 3) break;
      HEAP32[$5 + ($$0$i$i$i28 << 2) >> 2] = 0;
      $$0$i$i$i28 = $$0$i$i$i28 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$22 >> 2] | 0) + -24 | 0, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     $$125 = $19;
    }
   }
  } else $$125 = $0;
 } else $$125 = $0; else $$125 = $0; else $$125 = $0;
 STACKTOP = sp;
 return $$125 | 0;
}

function _arPattCreateHandle2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$043 = 0, $$044 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer13 = sp + 56 | 0;
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (($0 + -16 | 0) >>> 0 > 48 | ($1 | 0) < 1) $$044 = 0; else {
  $4 = _malloc(32) | 0;
  if (!$4) {
   _arLog(3, 4787, $vararg_buffer);
   _exit(1);
  }
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $0;
  $9 = _malloc($1 << 2) | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   _arLog(3, 4787, $vararg_buffer1);
   _exit(1);
  }
  $12 = $1 << 4;
  $13 = _malloc($12) | 0;
  HEAP32[$4 + 12 >> 2] = $13;
  if (!$13) {
   _arLog(3, 4787, $vararg_buffer3);
   _exit(1);
  }
  $16 = _malloc($12) | 0;
  $17 = $4 + 20 | 0;
  HEAP32[$17 >> 2] = $16;
  if (!$16) {
   _arLog(3, 4787, $vararg_buffer5);
   _exit(1);
  }
  $19 = $1 << 5;
  $20 = _malloc($19) | 0;
  HEAP32[$4 + 16 >> 2] = $20;
  if (!$20) {
   _arLog(3, 4787, $vararg_buffer7);
   _exit(1);
  }
  $23 = _malloc($19) | 0;
  HEAP32[$4 + 24 >> 2] = $23;
  if (!$23) {
   _arLog(3, 4787, $vararg_buffer9);
   _exit(1);
  }
  $26 = Math_imul($0, $0) | 0;
  $27 = $26 * 12 | 0;
  $28 = $26 << 2;
  $$043 = 0;
  L21 : while (1) {
   if (($$043 | 0) >= ($1 | 0)) {
    $$044 = $4;
    break L1;
   }
   HEAP32[$9 + ($$043 << 2) >> 2] = 0;
   $31 = $$043 << 2;
   $$0 = 0;
   while (1) {
    if (($$0 | 0) >= 4) break;
    $33 = _malloc($27) | 0;
    $34 = $$0 + $31 | 0;
    HEAP32[$13 + ($34 << 2) >> 2] = $33;
    if (!$33) {
     label = 19;
     break L21;
    }
    $37 = _malloc($28) | 0;
    HEAP32[(HEAP32[$17 >> 2] | 0) + ($34 << 2) >> 2] = $37;
    if (!$37) {
     label = 21;
     break L21;
    } else $$0 = $$0 + 1 | 0;
   }
   $$043 = $$043 + 1 | 0;
  }
  if ((label | 0) == 19) {
   _arLog(3, 4787, $vararg_buffer11);
   _exit(1);
  } else if ((label | 0) == 21) {
   _arLog(3, 4787, $vararg_buffer13);
   _exit(1);
  }
 } while (0);
 STACKTOP = sp;
 return $$044 | 0;
}

function _arImageProcLumaHistAndBoxFilterWithBias($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$073 = 0, $$074 = 0, $$075 = 0, $$076 = 0, $$078 = 0, $$082 = 0, $$1 = 0, $$177 = 0, $$179 = 0, $$2 = 0, $$280 = 0, $$3 = 0, $$381 = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $27 = 0, $29 = 0, $4 = 0, $46 = 0, $52 = 0, $55 = 0, $6 = 0, $9 = 0;
 $4 = _arImageProcLumaHist($0, $1) | 0;
 L1 : do if (($4 | 0) < 0) $$0 = $4; else {
  $6 = $0 + 4 | 0;
  $9 = $0 + 8 | 0;
  $10 = $0 + 12 | 0;
  if (!(HEAP32[$6 >> 2] | 0)) {
   $14 = _malloc(Math_imul(HEAP32[$10 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0) | 0;
   HEAP32[$6 >> 2] = $14;
   if (!$14) {
    $$0 = -1;
    break;
   }
  }
  $16 = $2 >> 1;
  $17 = 0 - $16 | 0;
  $$082 = 0;
  while (1) {
   $18 = HEAP32[$10 >> 2] | 0;
   if (($$082 | 0) < ($18 | 0)) $$073 = 0; else break;
   while (1) {
    $20 = HEAP32[$9 >> 2] | 0;
    if (($$073 | 0) < ($20 | 0)) {
     $$074 = $17;
     $$076 = 0;
     $$078 = 0;
    } else break;
    while (1) {
     if (($$074 | 0) > ($16 | 0)) break;
     $23 = $$074 + $$082 | 0;
     L13 : do if (($23 | 0) < 0) {
      $$3 = $$076;
      $$381 = $$078;
     } else if (($23 | 0) < (HEAP32[$10 >> 2] | 0)) {
      $27 = Math_imul($23, $20) | 0;
      $$075 = $17;
      $$177 = $$076;
      $$179 = $$078;
      while (1) {
       if (($$075 | 0) > ($16 | 0)) {
        $$3 = $$177;
        $$381 = $$179;
        break L13;
       }
       $29 = $$075 + $$073 | 0;
       if (($29 | 0) > -1 & ($29 | 0) < ($20 | 0)) {
        $$2 = $$177 + 1 | 0;
        $$280 = (HEAPU8[(HEAP32[$0 >> 2] | 0) + ($29 + $27) >> 0] | 0) + $$179 | 0;
       } else {
        $$2 = $$177;
        $$280 = $$179;
       }
       $$075 = $$075 + 1 | 0;
       $$177 = $$2;
       $$179 = $$280;
      }
     } else {
      $$3 = $$076;
      $$381 = $$078;
     } while (0);
     $$074 = $$074 + 1 | 0;
     $$076 = $$3;
     $$078 = $$381;
    }
    $46 = (HEAP32[$6 >> 2] | 0) + ((Math_imul($20, $$082) | 0) + $$073) | 0;
    HEAP8[$46 >> 0] = ($$078 | 0) / ($$076 | 0) | 0;
    $$073 = $$073 + 1 | 0;
   }
   $$082 = $$082 + 1 | 0;
  }
  if (!$3) $$0 = 0; else {
   $$1 = 0;
   $52 = $18;
   while (1) {
    if (($$1 | 0) >= (Math_imul($52, HEAP32[$9 >> 2] | 0) | 0)) {
     $$0 = 0;
     break L1;
    }
    $55 = (HEAP32[$6 >> 2] | 0) + $$1 | 0;
    HEAP8[$55 >> 0] = (HEAPU8[$55 >> 0] | 0) + $3;
    $$1 = $$1 + 1 | 0;
    $52 = HEAP32[$10 >> 2] | 0;
   }
  }
 } while (0);
 return $$0 | 0;
}

function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255;
 $7 = ($2 | 0) != 0;
 L1 : do if ($7 & ($0 & 3 | 0) != 0) {
  $8 = $1 & 255;
  $$03555 = $0;
  $$03654 = $2;
  while (1) {
   if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
    $$035$lcssa65 = $$03555;
    $$036$lcssa64 = $$03654;
    label = 6;
    break L1;
   }
   $11 = $$03555 + 1 | 0;
   $12 = $$03654 + -1 | 0;
   $16 = ($12 | 0) != 0;
   if ($16 & ($11 & 3 | 0) != 0) {
    $$03555 = $11;
    $$03654 = $12;
   } else {
    $$035$lcssa = $11;
    $$036$lcssa = $12;
    $$lcssa = $16;
    label = 5;
    break;
   }
  }
 } else {
  $$035$lcssa = $0;
  $$036$lcssa = $2;
  $$lcssa = $7;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$035$lcssa65 = $$035$lcssa;
  $$036$lcssa64 = $$036$lcssa;
  label = 6;
 } else {
  $$2 = $$035$lcssa;
  $$3 = 0;
 }
 L8 : do if ((label | 0) == 6) {
  $18 = $1 & 255;
  if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
   $$2 = $$035$lcssa65;
   $$3 = $$036$lcssa64;
  } else {
   $20 = Math_imul($3, 16843009) | 0;
   L11 : do if ($$036$lcssa64 >>> 0 > 3) {
    $$046 = $$035$lcssa65;
    $$13745 = $$036$lcssa64;
    while (1) {
     $23 = HEAP32[$$046 >> 2] ^ $20;
     if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) break;
     $29 = $$046 + 4 | 0;
     $30 = $$13745 + -4 | 0;
     if ($30 >>> 0 > 3) {
      $$046 = $29;
      $$13745 = $30;
     } else {
      $$0$lcssa = $29;
      $$137$lcssa = $30;
      label = 11;
      break L11;
     }
    }
    $$140 = $$046;
    $$23839 = $$13745;
   } else {
    $$0$lcssa = $$035$lcssa65;
    $$137$lcssa = $$036$lcssa64;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$137$lcssa) {
    $$2 = $$0$lcssa;
    $$3 = 0;
    break;
   } else {
    $$140 = $$0$lcssa;
    $$23839 = $$137$lcssa;
   }
   while (1) {
    if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
     $$2 = $$140;
     $$3 = $$23839;
     break L8;
    }
    $35 = $$140 + 1 | 0;
    $$23839 = $$23839 + -1 | 0;
    if (!$$23839) {
     $$2 = $35;
     $$3 = 0;
     break;
    } else $$140 = $35;
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0;
}

function _getMarkerInfo($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $2 = 0, $7 = 0, $8 = 0, $_ZL11gMarkerInfo$ = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0)) $$1 = HEAP32[417] | 0; else {
  $7 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 212 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$8 + 44 >> 2] | 0) > ($1 | 0)) {
   $_ZL11gMarkerInfo$ = ($1 | 0) < 0 ? 16928 : $8 + 48 + ($1 << 8) | 0;
   _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi(2, HEAP32[$_ZL11gMarkerInfo$ >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 4 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 8 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 12 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 16 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 20 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 24 >> 2] | 0, +(+HEAPF64[$_ZL11gMarkerInfo$ + 32 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 40 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 48 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 56 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 64 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 72 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 80 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 88 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 96 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 104 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 112 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 120 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 128 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 136 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 144 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 152 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 160 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 168 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 176 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 184 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 192 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 200 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 208 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 216 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 224 >> 3]), HEAP32[$_ZL11gMarkerInfo$ + 240 >> 2] | 0) | 0;
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[419] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 122) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$124 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$124 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15274) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15047) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i27 = 0;
    while (1) {
     if (($$0$i$i$i27 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i27 << 2) >> 2] = 0;
     $$0$i$i$i27 = $$0$i$i$i27 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$20 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$124 = $17;
   }
  }
 } else $$124 = $0; else $$124 = $0; else $$124 = $0;
 STACKTOP = sp;
 return $$124 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$124 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$124 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15274) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 15047) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i27 = 0;
    while (1) {
     if (($$0$i$i$i27 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i27 << 2) >> 2] = 0;
     $$0$i$i$i27 = $$0$i$i$i27 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$20 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$124 = $17;
   }
  }
 } else $$124 = $0; else $$124 = $0; else $$124 = $0;
 STACKTOP = sp;
 return $$124 | 0;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0 | 0;
 __embind_register_void(__ZN10emscripten8internal6TypeIDIvE3getEv() | 0, 16486);
 __embind_register_bool(__ZN10emscripten8internal6TypeIDIbE3getEv() | 0, 16491, 1, 1, 0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc();
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc();
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0, 15869);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0, 10232);
 __embind_register_std_wstring(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0, 4, 10265);
 __embind_register_emval(__ZN10emscripten8internal6TypeIDINS_3valEE3getEv() | 0, 10278);
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(10294);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(10331);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(10370);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(10401);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(10441);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(10470);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(10508);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(10540);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(10573);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(10606);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(10640);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(10673);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc();
 return;
}

function _PCA($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$075 = 0, $$077 = 0, $$078 = 0, $$080 = 0, $$1 = 0, $$176 = 0, $$179 = 0, $$181 = 0, $$2 = 0, $$3 = 0, $20 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = HEAP32[$0 + 8 >> 2] | 0;
 $8 = ($6 | 0) < ($4 | 0) ? $6 : $4;
 L1 : do if (($4 | 0) < 2 | ($6 | 0) < 2) $$077 = -1; else if ((HEAP32[$1 + 8 >> 2] | 0) == ($6 | 0)) if ((HEAP32[$1 + 4 >> 2] | 0) == ($8 | 0)) if ((HEAP32[$2 + 4 >> 2] | 0) == ($8 | 0)) {
  $20 = _arMatrixAlloc($8, $8) | 0;
  if ((HEAP32[$20 + 4 >> 2] | 0) == ($8 | 0)) if ((HEAP32[$20 + 8 >> 2] | 0) == ($8 | 0)) {
   $27 = ($4 | 0) < ($6 | 0);
   if ($27) {
    if ((_x_by_xt($0, $20) | 0) < 0) {
     _arMatrixFree($20) | 0;
     $$077 = -1;
     break;
    }
   } else if ((_xt_by_x($0, $20) | 0) < 0) {
    _arMatrixFree($20) | 0;
    $$077 = -1;
    break;
   }
   if ((_QRM($20, $2) | 0) < 0) {
    _arMatrixFree($20) | 0;
    $$077 = -1;
    break;
   }
   L18 : do if ($27) {
    if ((_EV_create($0, $20, $1, $2) | 0) < 0) {
     _arMatrixFree($20) | 0;
     $$077 = -1;
     break L1;
    }
   } else {
    $$075 = 0;
    $$078 = HEAP32[$20 >> 2] | 0;
    $$080 = HEAP32[$1 >> 2] | 0;
    while (1) {
     if (($$075 | 0) >= ($8 | 0)) {
      $$176 = $$075;
      $$2 = $$080;
      break;
     }
     if (+HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$075 << 3) >> 3] < 1.0e-16) {
      $$176 = $$075;
      $$2 = $$080;
      break;
     } else {
      $$0 = 0;
      $$179 = $$078;
      $$181 = $$080;
     }
     while (1) {
      if (($$0 | 0) >= ($8 | 0)) break;
      HEAPF64[$$181 >> 3] = +HEAPF64[$$179 >> 3];
      $$0 = $$0 + 1 | 0;
      $$179 = $$179 + 8 | 0;
      $$181 = $$181 + 8 | 0;
     }
     $$075 = $$075 + 1 | 0;
     $$078 = $$179;
     $$080 = $$181;
    }
    while (1) {
     if (($$176 | 0) >= ($8 | 0)) break L18;
     HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$176 << 3) >> 3] = 0.0;
     $$1 = 0;
     $$3 = $$2;
     while (1) {
      if (($$1 | 0) >= ($8 | 0)) break;
      HEAPF64[$$3 >> 3] = 0.0;
      $$1 = $$1 + 1 | 0;
      $$3 = $$3 + 8 | 0;
     }
     $$176 = $$176 + 1 | 0;
     $$2 = $$3;
    }
   } while (0);
   _arMatrixFree($20) | 0;
   $$077 = 0;
   break;
  }
  _arMatrixFree($20) | 0;
  $$077 = -1;
 } else $$077 = -1; else $$077 = -1; else $$077 = -1; while (0);
 return $$077 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i16 = 0, $$014 = 0, $10 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 24 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 if (($0 | 0) == ($1 | 0)) $$014 = $0; else if ((HEAP8[$0 >> 0] | 0) == 46) {
  $10 = $2 + 4 | 0;
  if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) $$014 = $0; else {
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5, $0, $1);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15044) | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 15047) | 0;
   HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   $$0$i$i$i16 = 0;
   while (1) {
    if (($$0$i$i$i16 | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i$i16 << 2) >> 2] = 0;
    $$0$i$i$i16 = $$0$i$i$i16 + 1 | 0;
   }
   $22 = HEAP8[$3 + 11 >> 0] | 0;
   $23 = $22 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$10 >> 2] | 0) + -24 | 0, $23 ? HEAP32[$3 >> 2] | 0 : $3, $23 ? HEAP32[$3 + 4 >> 2] | 0 : $22 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $$014 = $1;
  }
 } else $$014 = $0;
 STACKTOP = sp;
 return $$014 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$054$ph$ph = 0, $$055 = 0, $$056$ph = 0, $$056$ph$ph = 0, $$058 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $28 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $5 = 0, $52 = 0, $7 = 0, $8 = 0;
 $2 = $0 + 4 | 0;
 L1 : do if (!$1) {
  $52 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = 0;
  if ($52 | 0) __ZdlPv($52);
  HEAP32[$2 >> 2] = 0;
 } else {
  if ($1 >>> 0 > 1073741823) {
   $5 = ___cxa_allocate_exception(4) | 0;
   __ZNSt9bad_allocC2Ev($5);
   ___cxa_throw($5 | 0, 256, 6);
  }
  $7 = __Znwj($1 << 2) | 0;
  $8 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $7;
  if ($8 | 0) __ZdlPv($8);
  HEAP32[$2 >> 2] = $1;
  $$058 = 0;
  while (1) {
   if (($$058 | 0) == ($1 | 0)) break;
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($$058 << 2) >> 2] = 0;
   $$058 = $$058 + 1 | 0;
  }
  $10 = $0 + 8 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if ($11 | 0) {
   $17 = HEAP32[$11 + 4 >> 2] | 0;
   $18 = $1 + -1 | 0;
   $20 = ($18 & $1 | 0) == 0;
   if ($20) $25 = $17 & $18; else $25 = ($17 >>> 0) % ($1 >>> 0) | 0;
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($25 << 2) >> 2] = $10;
   $$054$ph$ph = $25;
   $$056$ph$ph = $11;
   while (1) {
    $$056$ph = $$056$ph$ph;
    L24 : while (1) while (1) {
     $$055 = HEAP32[$$056$ph >> 2] | 0;
     if (!$$055) break L1;
     $28 = HEAP32[$$055 + 4 >> 2] | 0;
     if ($20) $32 = $28 & $18; else $32 = ($28 >>> 0) % ($1 >>> 0) | 0;
     if (($32 | 0) == ($$054$ph$ph | 0)) {
      $$056$ph = $$055;
      continue L24;
     }
     $34 = (HEAP32[$0 >> 2] | 0) + ($32 << 2) | 0;
     if (!(HEAP32[$34 >> 2] | 0)) break L24;
     $37 = $$055 + 8 | 0;
     $$0 = $$055;
     while (1) {
      $38 = HEAP32[$$0 >> 2] | 0;
      if (!$38) break;
      if ((HEAP32[$37 >> 2] | 0) == (HEAP32[$38 + 8 >> 2] | 0)) $$0 = $38; else break;
     }
     HEAP32[$$056$ph >> 2] = $38;
     HEAP32[$$0 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 << 2) >> 2] >> 2];
     HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 << 2) >> 2] >> 2] = $$055;
    }
    HEAP32[$34 >> 2] = $$056$ph;
    $$054$ph$ph = $32;
    $$056$ph$ph = $$055;
   }
  }
 } while (0);
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$054$ph$ph = 0, $$055 = 0, $$056$ph = 0, $$056$ph$ph = 0, $$058 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $28 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $5 = 0, $52 = 0, $7 = 0, $8 = 0;
 $2 = $0 + 4 | 0;
 L1 : do if (!$1) {
  $52 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = 0;
  if ($52 | 0) __ZdlPv($52);
  HEAP32[$2 >> 2] = 0;
 } else {
  if ($1 >>> 0 > 1073741823) {
   $5 = ___cxa_allocate_exception(4) | 0;
   __ZNSt9bad_allocC2Ev($5);
   ___cxa_throw($5 | 0, 256, 6);
  }
  $7 = __Znwj($1 << 2) | 0;
  $8 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $7;
  if ($8 | 0) __ZdlPv($8);
  HEAP32[$2 >> 2] = $1;
  $$058 = 0;
  while (1) {
   if (($$058 | 0) == ($1 | 0)) break;
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($$058 << 2) >> 2] = 0;
   $$058 = $$058 + 1 | 0;
  }
  $10 = $0 + 8 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if ($11 | 0) {
   $17 = HEAP32[$11 + 4 >> 2] | 0;
   $18 = $1 + -1 | 0;
   $20 = ($18 & $1 | 0) == 0;
   if ($20) $25 = $17 & $18; else $25 = ($17 >>> 0) % ($1 >>> 0) | 0;
   HEAP32[(HEAP32[$0 >> 2] | 0) + ($25 << 2) >> 2] = $10;
   $$054$ph$ph = $25;
   $$056$ph$ph = $11;
   while (1) {
    $$056$ph = $$056$ph$ph;
    L24 : while (1) while (1) {
     $$055 = HEAP32[$$056$ph >> 2] | 0;
     if (!$$055) break L1;
     $28 = HEAP32[$$055 + 4 >> 2] | 0;
     if ($20) $32 = $28 & $18; else $32 = ($28 >>> 0) % ($1 >>> 0) | 0;
     if (($32 | 0) == ($$054$ph$ph | 0)) {
      $$056$ph = $$055;
      continue L24;
     }
     $34 = (HEAP32[$0 >> 2] | 0) + ($32 << 2) | 0;
     if (!(HEAP32[$34 >> 2] | 0)) break L24;
     $37 = $$055 + 8 | 0;
     $$0 = $$055;
     while (1) {
      $38 = HEAP32[$$0 >> 2] | 0;
      if (!$38) break;
      if ((HEAP32[$37 >> 2] | 0) == (HEAP32[$38 + 8 >> 2] | 0)) $$0 = $38; else break;
     }
     HEAP32[$$056$ph >> 2] = $38;
     HEAP32[$$0 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 << 2) >> 2] >> 2];
     HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 << 2) >> 2] >> 2] = $$055;
    }
    HEAP32[$34 >> 2] = $$056$ph;
    $$054$ph$ph = $32;
    $$056$ph$ph = $$055;
   }
  }
 } while (0);
 return;
}

function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $18 = 0, $21 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $43 = 0, $53 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 $$ = ($3 | 0) == 0 ? 17416 : $3;
 $6 = HEAP32[$$ >> 2] | 0;
 L1 : do if (!$1) if (!$6) $$0 = 0; else label = 17; else {
  $$47 = ($0 | 0) == 0 ? $4 : $0;
  if (!$2) $$0 = -2; else {
   if (!$6) {
    $12 = HEAP8[$1 >> 0] | 0;
    if ($12 << 24 >> 24 > -1) {
     HEAP32[$$47 >> 2] = $12 & 255;
     $$0 = $12 << 24 >> 24 != 0 & 1;
     break;
    }
    $18 = (___pthread_self_422() | 0) + 188 | 0;
    $21 = HEAP8[$1 >> 0] | 0;
    if (!(HEAP32[HEAP32[$18 >> 2] >> 2] | 0)) {
     HEAP32[$$47 >> 2] = $21 << 24 >> 24 & 57343;
     $$0 = 1;
     break;
    }
    $25 = ($21 & 255) + -194 | 0;
    if ($25 >>> 0 > 50) {
     label = 17;
     break;
    }
    $29 = HEAP32[1792 + ($25 << 2) >> 2] | 0;
    $30 = $2 + -1 | 0;
    if (!$30) $$2 = $29; else {
     $$03952 = $1 + 1 | 0;
     $$04051 = $29;
     $$04350 = $30;
     label = 11;
    }
   } else {
    $$03952 = $1;
    $$04051 = $6;
    $$04350 = $2;
    label = 11;
   }
   L14 : do if ((label | 0) == 11) {
    $32 = HEAP8[$$03952 >> 0] | 0;
    $34 = ($32 & 255) >>> 3;
    if (($34 + -16 | $34 + ($$04051 >> 26)) >>> 0 > 7) {
     label = 17;
     break L1;
    } else {
     $$1 = $$03952;
     $$141 = $$04051;
     $$144 = $$04350;
     $43 = $32;
    }
    while (1) {
     $$1 = $$1 + 1 | 0;
     $$141 = ($43 & 255) + -128 | $$141 << 6;
     $$144 = $$144 + -1 | 0;
     if (($$141 | 0) >= 0) break;
     if (!$$144) {
      $$2 = $$141;
      break L14;
     }
     $43 = HEAP8[$$1 >> 0] | 0;
     if (($43 & -64) << 24 >> 24 != -128) {
      label = 17;
      break L1;
     }
    }
    HEAP32[$$ >> 2] = 0;
    HEAP32[$$47 >> 2] = $$141;
    $$0 = $2 - $$144 | 0;
    break L1;
   } while (0);
   HEAP32[$$ >> 2] = $$2;
   $$0 = -2;
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0;
  $53 = ___errno_location() | 0;
  HEAP32[$53 >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___fdopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $2 = sp + 56 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 if (!(_memchr(14122, $3 << 24 >> 24, 4) | 0)) {
  $6 = ___errno_location() | 0;
  HEAP32[$6 >> 2] = 22;
  $$0 = 0;
 } else {
  $7 = _malloc(1156) | 0;
  if (!$7) $$0 = 0; else {
   dest = $7;
   stop = dest + 124 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   if (!(_strchr($1, 43) | 0)) HEAP32[$7 >> 2] = $3 << 24 >> 24 == 114 ? 8 : 4;
   if (!(_strchr($1, 101) | 0)) $16 = $3; else {
    HEAP32[$vararg_buffer >> 2] = $0;
    HEAP32[$vararg_buffer + 4 >> 2] = 2;
    HEAP32[$vararg_buffer + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer | 0) | 0;
    $16 = HEAP8[$1 >> 0] | 0;
   }
   if ($16 << 24 >> 24 == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $0;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
    $17 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
    if (!($17 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $0;
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $17 | 1024;
     ___syscall221(221, $vararg_buffer7 | 0) | 0;
    }
    $22 = HEAP32[$7 >> 2] | 128;
    HEAP32[$7 >> 2] = $22;
    $29 = $22;
   } else $29 = HEAP32[$7 >> 2] | 0;
   HEAP32[$7 + 60 >> 2] = $0;
   HEAP32[$7 + 44 >> 2] = $7 + 132;
   HEAP32[$7 + 48 >> 2] = 1024;
   $27 = $7 + 75 | 0;
   HEAP8[$27 >> 0] = -1;
   if (!($29 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $0;
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21523;
    HEAP32[$vararg_buffer12 + 8 >> 2] = $2;
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$27 >> 0] = 10;
   }
   HEAP32[$7 + 32 >> 2] = 14;
   HEAP32[$7 + 36 >> 2] = 1;
   HEAP32[$7 + 40 >> 2] = 2;
   HEAP32[$7 + 12 >> 2] = 1;
   if (!(HEAP32[4339] | 0)) HEAP32[$7 + 76 >> 2] = -1;
   ___ofl_add($7) | 0;
   $$0 = $7;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $26 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $43 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $3 = sp + 32 | 0;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $5;
 $7 = $0 + 20 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0;
 HEAP32[$3 + 4 >> 2] = $9;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($12 | 0) == ($17 | 0)) label = 3; else {
  $$04756 = 2;
  $$04855 = $12;
  $$04954 = $3;
  $26 = $17;
  while (1) {
   if (($26 | 0) < 0) break;
   $$04855 = $$04855 - $26 | 0;
   $36 = HEAP32[$$04954 + 4 >> 2] | 0;
   $37 = $26 >>> 0 > $36 >>> 0;
   $$150 = $37 ? $$04954 + 8 | 0 : $$04954;
   $$1 = ($37 << 31 >> 31) + $$04756 | 0;
   $$0 = $26 - ($37 ? $36 : 0) | 0;
   HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0;
   $43 = $$150 + 4 | 0;
   HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) - $$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $$150;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $$1;
   $26 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($$04855 | 0) == ($26 | 0)) {
    label = 3;
    break L1;
   } else {
    $$04756 = $$1;
    $$04954 = $$150;
   }
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  if (($$04756 | 0) == 2) $$051 = 0; else $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0);
  HEAP32[$4 >> 2] = $20;
  HEAP32[$7 >> 2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}

function _get_cpara($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $11 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $51 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0;
 $3 = _arMatrixAlloc(8, 8) | 0;
 $4 = _arMatrixAlloc(8, 1) | 0;
 $5 = _arMatrixAlloc(8, 1) | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 4) break;
  $6 = $0 + ($$0 << 4) | 0;
  $8 = HEAP32[$3 >> 2] | 0;
  $9 = $$0 << 4;
  HEAPF64[$8 + ($9 << 3) >> 3] = +HEAPF64[$6 >> 3];
  $11 = $0 + ($$0 << 4) + 8 | 0;
  HEAPF64[$8 + (($9 | 1) << 3) >> 3] = +HEAPF64[$11 >> 3];
  HEAPF64[$8 + (($9 | 2) << 3) >> 3] = 1.0;
  HEAPF64[$8 + (($9 | 3) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 4) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 5) << 3) >> 3] = 0.0;
  $24 = $1 + ($$0 << 4) | 0;
  HEAPF64[$8 + (($9 | 6) << 3) >> 3] = -(+HEAPF64[$6 >> 3] * +HEAPF64[$24 >> 3]);
  HEAPF64[$8 + (($9 | 7) << 3) >> 3] = -(+HEAPF64[$11 >> 3] * +HEAPF64[$24 >> 3]);
  HEAPF64[$8 + (($9 | 8) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 9) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 10) << 3) >> 3] = 0.0;
  HEAPF64[$8 + (($9 | 11) << 3) >> 3] = +HEAPF64[$6 >> 3];
  HEAPF64[$8 + (($9 | 12) << 3) >> 3] = +HEAPF64[$11 >> 3];
  HEAPF64[$8 + (($9 | 13) << 3) >> 3] = 1.0;
  $51 = $1 + ($$0 << 4) + 8 | 0;
  HEAPF64[$8 + (($9 | 14) << 3) >> 3] = -(+HEAPF64[$6 >> 3] * +HEAPF64[$51 >> 3]);
  HEAPF64[$8 + (($9 | 15) << 3) >> 3] = -(+HEAPF64[$11 >> 3] * +HEAPF64[$51 >> 3]);
  $64 = HEAP32[$4 >> 2] | 0;
  $65 = $$0 << 1;
  HEAPF64[$64 + ($65 << 3) >> 3] = +HEAPF64[$24 >> 3];
  HEAPF64[$64 + (($65 | 1) << 3) >> 3] = +HEAPF64[$51 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 _arMatrixSelfInv($3) | 0;
 _arMatrixMul($5, $3, $4) | 0;
 $71 = HEAP32[$5 >> 2] | 0;
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == 2) break;
  $72 = $$1 * 3 | 0;
  HEAPF64[$2 + ($$1 * 24 | 0) >> 3] = +HEAPF64[$71 + ($72 << 3) >> 3];
  HEAPF64[$2 + ($$1 * 24 | 0) + 8 >> 3] = +HEAPF64[$71 + ($72 + 1 << 3) >> 3];
  HEAPF64[$2 + ($$1 * 24 | 0) + 16 >> 3] = +HEAPF64[$71 + ($72 + 2 << 3) >> 3];
  $$1 = $$1 + 1 | 0;
 }
 HEAPF64[$2 + 48 >> 3] = +HEAPF64[$71 + 48 >> 3];
 HEAPF64[$2 + 56 >> 3] = +HEAPF64[$71 + 56 >> 3];
 HEAPF64[$2 + 64 >> 3] = 1.0;
 _arMatrixFree($3) | 0;
 _arMatrixFree($4) | 0;
 _arMatrixFree($5) | 0;
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$3 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 100) if ((HEAP8[$0 + 1 >> 0] | 0) == 115) {
  $14 = $0 + 2 | 0;
  $15 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
  if (($15 | 0) == ($14 | 0)) $$3 = $0; else {
   $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
   if (($17 | 0) == ($15 | 0)) $$3 = $0; else {
    $19 = $2 + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    if ((($20 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $20 + -24 | 0);
     $27 = HEAP32[$19 >> 2] | 0;
     $28 = $27 + -24 | 0;
     $30 = $27;
     while (1) {
      if (($30 | 0) == ($28 | 0)) break;
      $31 = $30 + -24 | 0;
      HEAP32[$19 >> 2] = $31;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $30 = HEAP32[$19 >> 2] | 0;
     }
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4, 15340, $3);
     $35 = HEAP8[$4 + 11 >> 0] | 0;
     $36 = $35 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$19 >> 2] | 0) + -24 | 0, $36 ? HEAP32[$4 >> 2] | 0 : $4, $36 ? HEAP32[$4 + 4 >> 2] | 0 : $35 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $17;
    }
   }
  }
 } else $$3 = $0; else $$3 = $0; else $$3 = $0;
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$3 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $3 = sp + 12 | 0;
 $4 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 100) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $14 = $0 + 2 | 0;
  $15 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
  if (($15 | 0) == ($14 | 0)) $$3 = $0; else {
   $17 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
   if (($17 | 0) == ($15 | 0)) $$3 = $0; else {
    $19 = $2 + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    if ((($20 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $20 + -24 | 0);
     $27 = HEAP32[$19 >> 2] | 0;
     $28 = $27 + -24 | 0;
     $30 = $27;
     while (1) {
      if (($30 | 0) == ($28 | 0)) break;
      $31 = $30 + -24 | 0;
      HEAP32[$19 >> 2] = $31;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $30 = HEAP32[$19 >> 2] | 0;
     }
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4, 15338, $3);
     $35 = HEAP8[$4 + 11 >> 0] | 0;
     $36 = $35 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$19 >> 2] | 0) + -24 | 0, $36 ? HEAP32[$4 >> 2] | 0 : $4, $36 ? HEAP32[$4 + 4 >> 2] | 0 : $35 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $17;
    }
   }
  }
 } else $$3 = $0; else $$3 = $0; else $$3 = $0;
 STACKTOP = sp;
 return $$3 | 0;
}

function _fgets($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $42 = 0, $50 = 0, $51 = 0, $7 = 0, $9 = 0, label = 0;
 if ((HEAP32[$2 + 76 >> 2] | 0) > -1) $17 = ___lockfile($2) | 0; else $17 = 0;
 $7 = $1 + -1 | 0;
 $9 = ($7 | 0) != 0;
 if (($1 | 0) < 2) {
  $10 = $2 + 74 | 0;
  $12 = HEAP8[$10 >> 0] | 0;
  HEAP8[$10 >> 0] = $12 + 255 | $12;
  if ($17 | 0) ___unlockfile($2);
  if ($9) $$0 = 0; else {
   HEAP8[$0 >> 0] = 0;
   $$0 = $0;
  }
 } else {
  L11 : do if ($9) {
   $18 = $2 + 4 | 0;
   $19 = $2 + 8 | 0;
   $$063 = $7;
   $$064 = $0;
   while (1) {
    $20 = HEAP32[$18 >> 2] | 0;
    $22 = $20;
    $23 = (HEAP32[$19 >> 2] | 0) - $22 | 0;
    $24 = _memchr($20, 10, $23) | 0;
    $25 = ($24 | 0) == 0;
    $29 = $25 ? $23 : 1 - $22 + $24 | 0;
    $31 = $29 >>> 0 < $$063 >>> 0 ? $29 : $$063;
    _memcpy($$064 | 0, $20 | 0, $31 | 0) | 0;
    $33 = (HEAP32[$18 >> 2] | 0) + $31 | 0;
    HEAP32[$18 >> 2] = $33;
    $34 = $$064 + $31 | 0;
    $35 = $$063 - $31 | 0;
    if (!($25 & ($35 | 0) != 0)) {
     $$1 = $34;
     label = 17;
     break L11;
    }
    if ($33 >>> 0 < (HEAP32[$19 >> 2] | 0) >>> 0) {
     HEAP32[$18 >> 2] = $33 + 1;
     $50 = HEAPU8[$33 >> 0] | 0;
    } else {
     $42 = ___uflow($2) | 0;
     if (($42 | 0) < 0) break; else $50 = $42;
    }
    $$063 = $35 + -1 | 0;
    $51 = $34 + 1 | 0;
    HEAP8[$34 >> 0] = $50;
    if (!(($$063 | 0) != 0 & ($50 & 255 | 0) != 10)) {
     $$1 = $51;
     label = 17;
     break L11;
    } else $$064 = $51;
   }
   if (($34 | 0) == ($0 | 0)) $$06266 = 0; else if (!(HEAP32[$2 >> 2] & 16)) $$06266 = 0; else {
    $$1 = $34;
    label = 17;
   }
  } else {
   $$1 = $0;
   label = 17;
  } while (0);
  if ((label | 0) == 17) if (!$0) $$06266 = 0; else {
   HEAP8[$$1 >> 0] = 0;
   $$06266 = $0;
  }
  if (!$17) $$0 = $$06266; else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return $$0 | 0;
}

function _EV_create($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$071 = 0, $$072 = 0, $$074 = 0, $$075 = 0, $$077 = 0, $$078 = 0.0, $$079 = 0, $$1 = 0, $$173 = 0, $$176 = 0, $$2 = 0, $$3 = 0, $29 = 0.0, $33 = 0.0, $34 = 0, $42 = 0.0, $5 = 0, $7 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if (($5 | 0) < 1 | ($7 | 0) < 1) $$074 = -1; else if ((HEAP32[$1 + 4 >> 2] | 0) == ($5 | 0)) if ((HEAP32[$1 + 8 >> 2] | 0) == ($5 | 0)) if ((HEAP32[$2 + 4 >> 2] | 0) == ($5 | 0)) if ((HEAP32[$2 + 8 >> 2] | 0) == ($7 | 0)) if ((HEAP32[$3 + 4 >> 2] | 0) == ($5 | 0)) {
  $$072 = 0;
  $$075 = HEAP32[$2 >> 2] | 0;
  while (1) {
   if (($$072 | 0) >= ($5 | 0)) {
    $$173 = $$072;
    $$2 = $$075;
    break;
   }
   $29 = +HEAPF64[(HEAP32[$3 >> 2] | 0) + ($$072 << 3) >> 3];
   if ($29 < 1.0e-16) {
    $$173 = $$072;
    $$2 = $$075;
    break;
   }
   $33 = 1.0 / +Math_sqrt(+(+Math_abs(+$29)));
   $34 = Math_imul($$072, $5) | 0;
   $$071 = 0;
   $$176 = $$075;
   while (1) {
    if (($$071 | 0) == ($7 | 0)) break;
    $$0 = 0;
    $$077 = (HEAP32[$1 >> 2] | 0) + ($34 << 3) | 0;
    $$078 = 0.0;
    $$079 = (HEAP32[$0 >> 2] | 0) + ($$071 << 3) | 0;
    while (1) {
     if (($$0 | 0) == ($5 | 0)) break;
     $42 = $$078 + +HEAPF64[$$077 >> 3] * +HEAPF64[$$079 >> 3];
     $$0 = $$0 + 1 | 0;
     $$077 = $$077 + 8 | 0;
     $$078 = $42;
     $$079 = $$079 + ($7 << 3) | 0;
    }
    HEAPF64[$$176 >> 3] = $33 * $$078;
    $$071 = $$071 + 1 | 0;
    $$176 = $$176 + 8 | 0;
   }
   $$072 = $$072 + 1 | 0;
   $$075 = $$075 + ($7 << 3) | 0;
  }
  while (1) {
   if (($$173 | 0) >= ($5 | 0)) {
    $$074 = 0;
    break L1;
   }
   HEAPF64[(HEAP32[$3 >> 2] | 0) + ($$173 << 3) >> 3] = 0.0;
   $$1 = 0;
   $$3 = $$2;
   while (1) {
    if (($$1 | 0) >= ($7 | 0)) break;
    HEAPF64[$$3 >> 3] = 0.0;
    $$1 = $$1 + 1 | 0;
    $$3 = $$3 + 8 | 0;
   }
   $$173 = $$173 + 1 | 0;
   $$2 = $$3;
  }
 } else $$074 = -1; else $$074 = -1; else $$074 = -1; else $$074 = -1; else $$074 = -1; while (0);
 return $$074 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($0) {
 $0 = $0 | 0;
 var $$017$off022 = 0, $$01918 = 0, $$020153134 = 0, $$02016 = 0, $$phitmp$i = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, label = 0;
 $1 = $0 + 11 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 if ($2 << 24 >> 24 < 0) {
  $11 = HEAP32[$0 + 4 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $11 = $2 & 255;
  $15 = 10;
 }
 $10 = $11 >>> 0 < 11;
 $$phitmp$i = $10 ? 10 : ($11 + 16 & -16) + -1 | 0;
 L5 : do if (($$phitmp$i | 0) != ($15 | 0)) {
  do if ($10) {
   $23 = HEAP32[$0 >> 2] | 0;
   if ($2 << 24 >> 24 < 0) {
    $$017$off022 = 0;
    $$01918 = $23;
    $$02016 = $0;
    label = 12;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($0, $23, ($2 & 255) + 1 | 0) | 0;
    __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($23);
    label = 14;
   }
  } else {
   $18 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($$phitmp$i + 1 | 0) | 0;
   if ($$phitmp$i >>> 0 <= $15 >>> 0 & ($18 | 0) == 0) break L5;
   $20 = HEAP8[$1 >> 0] | 0;
   if ($20 << 24 >> 24 < 0) {
    $$017$off022 = 1;
    $$01918 = HEAP32[$0 >> 2] | 0;
    $$02016 = $18;
    label = 12;
    break;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($18, $0, ($20 & 255) + 1 | 0) | 0;
    $$020153134 = $18;
    label = 13;
    break;
   }
  } while (0);
  if ((label | 0) == 12) {
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($$02016, $$01918, (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($$01918);
   if ($$017$off022) {
    $$020153134 = $$02016;
    label = 13;
   } else label = 14;
  }
  if ((label | 0) == 13) {
   HEAP32[$0 + 8 >> 2] = $$phitmp$i + 1 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $11;
   HEAP32[$0 >> 2] = $$020153134;
   break;
  } else if ((label | 0) == 14) {
   HEAP8[$1 >> 0] = $11;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 20 | 0;
 $3 = sp;
 $5 = $0 + 4 | 0;
 $10 = ((HEAP32[$5 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $11 = __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($11 >>> 0 < $10 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $15 = HEAP32[$0 >> 2] | 0;
 $16 = (HEAP32[$0 + 8 >> 2] | 0) - $15 | 0;
 $20 = $16 >> 3;
 __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($3, $16 >> 4 >>> 0 < $11 >>> 1 >>> 0 ? ($20 >>> 0 < $10 >>> 0 ? $10 : $20) : $11, (HEAP32[$5 >> 2] | 0) - $15 >> 4, $0 + 12 | 0);
 $25 = $3 + 8 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2, $1);
 HEAP32[$26 >> 2] = 0;
 HEAP32[$26 + 4 >> 2] = 0;
 $29 = HEAP32[$2 >> 2] | 0;
 HEAP32[$26 + 8 >> 2] = 0;
 HEAP32[$26 + 12 >> 2] = $29;
 HEAP32[$25 >> 2] = $26 + 16;
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0, $3);
 __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($3);
 STACKTOP = sp;
 return;
}

function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
 $2 = $1;
 L1 : do if (!(($2 ^ $0) & 3)) {
  if (!($2 & 3)) {
   $$026$lcssa = $1;
   $$027$lcssa = $0;
  } else {
   $$02642 = $1;
   $$02741 = $0;
   while (1) {
    $9 = HEAP8[$$02642 >> 0] | 0;
    HEAP8[$$02741 >> 0] = $9;
    if (!($9 << 24 >> 24)) {
     $$029 = $$02741;
     break L1;
    }
    $11 = $$02642 + 1 | 0;
    $12 = $$02741 + 1 | 0;
    if (!($11 & 3)) {
     $$026$lcssa = $11;
     $$027$lcssa = $12;
     break;
    } else {
     $$02642 = $11;
     $$02741 = $12;
    }
   }
  }
  $16 = HEAP32[$$026$lcssa >> 2] | 0;
  if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
   $$02536 = $$027$lcssa;
   $$037 = $$026$lcssa;
   $24 = $16;
   while (1) {
    $22 = $$037 + 4 | 0;
    $23 = $$02536 + 4 | 0;
    HEAP32[$$02536 >> 2] = $24;
    $24 = HEAP32[$22 >> 2] | 0;
    if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
     $$0$lcssa = $22;
     $$025$lcssa = $23;
     break;
    } else {
     $$02536 = $23;
     $$037 = $22;
    }
   }
  } else {
   $$0$lcssa = $$026$lcssa;
   $$025$lcssa = $$027$lcssa;
  }
  $$1$ph = $$0$lcssa;
  $$128$ph = $$025$lcssa;
  label = 8;
 } else {
  $$1$ph = $1;
  $$128$ph = $0;
  label = 8;
 } while (0);
 if ((label | 0) == 8) {
  $31 = HEAP8[$$1$ph >> 0] | 0;
  HEAP8[$$128$ph >> 0] = $31;
  if (!($31 << 24 >> 24)) $$029 = $$128$ph; else {
   $$12834 = $$128$ph;
   $$135 = $$1$ph;
   while (1) {
    $$135 = $$135 + 1 | 0;
    $34 = $$12834 + 1 | 0;
    $35 = HEAP8[$$135 >> 0] | 0;
    HEAP8[$34 >> 0] = $35;
    if (!($35 << 24 >> 24)) {
     $$029 = $34;
     break;
    } else $$12834 = $34;
   }
  }
 }
 return $$029 | 0;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 20 | 0;
 $3 = sp;
 $5 = $0 + 4 | 0;
 $10 = ((HEAP32[$5 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $11 = __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($11 >>> 0 < $10 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $15 = HEAP32[$0 >> 2] | 0;
 $16 = (HEAP32[$0 + 8 >> 2] | 0) - $15 | 0;
 $20 = $16 >> 3;
 __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($3, $16 >> 4 >>> 0 < $11 >>> 1 >>> 0 ? ($20 >>> 0 < $10 >>> 0 ? $10 : $20) : $11, (HEAP32[$5 >> 2] | 0) - $15 >> 4, $0 + 12 | 0);
 $25 = $3 + 8 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($2, $1);
 HEAP32[$26 >> 2] = 0;
 HEAP32[$26 + 4 >> 2] = 0;
 $29 = HEAP32[$2 >> 2] | 0;
 HEAP32[$26 + 8 >> 2] = 0;
 HEAP32[$26 + 12 >> 2] = $29;
 HEAP32[$25 >> 2] = $26 + 16;
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0, $3);
 __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($3);
 STACKTOP = sp;
 return;
}

function _addMultiMarker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp + 8 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $3) | 0)) $$1 = -1; else {
  $7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $3) | 0;
  if ((HEAP8[$1 + 11 >> 0] | 0) < 0) $16 = HEAP32[$1 >> 2] | 0; else $16 = $1;
  $15 = $7 + 220 | 0;
  if (!(__ZL15loadMultiMarkerPKcP8ARHandlePP12ARPattHandlePP18ARMultiMarkerInfoT($16, HEAP32[$7 + 212 >> 2] | 0, $7 + 216 | 0, $15) | 0)) {
   _arLog(3, 9594, $vararg_buffer);
   $$1 = -1;
   break;
  }
  $19 = $7 + 248 | 0;
  $20 = $7 + 252 | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  HEAP32[$4 >> 2] = $21 - (HEAP32[$19 >> 2] | 0) >> 3;
  HEAP32[$4 + 4 >> 2] = HEAP32[$15 >> 2];
  if (($21 | 0) == (HEAP32[$7 + 256 >> 2] | 0)) __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($19, $4); else {
   __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($2, $19, 1);
   $32 = $4;
   $37 = HEAP32[$32 + 4 >> 2] | 0;
   $38 = HEAP32[$20 >> 2] | 0;
   HEAP32[$38 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$38 + 4 >> 2] = $37;
   __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($2);
   HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 8;
  }
  $$1 = HEAP32[$4 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$3 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 112) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $13 = $0 + 2 | 0;
  $14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
  if (($14 | 0) == ($13 | 0)) $$3 = $0; else {
   $16 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
   if (($16 | 0) == ($14 | 0)) $$3 = $0; else {
    $18 = $2 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    if ((($19 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $19 + -24 | 0);
     $26 = HEAP32[$18 >> 2] | 0;
     $27 = $26 + -24 | 0;
     $29 = $26;
     while (1) {
      if (($29 | 0) == ($27 | 0)) break;
      $30 = $29 + -24 | 0;
      HEAP32[$18 >> 2] = $30;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $29 = HEAP32[$18 >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($26 + -48 | 0, 15317) | 0;
     $35 = HEAP8[$3 + 11 >> 0] | 0;
     $36 = $35 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$18 >> 2] | 0) + -24 | 0, $36 ? HEAP32[$3 >> 2] | 0 : $3, $36 ? HEAP32[$3 + 4 >> 2] | 0 : $35 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $16;
    }
   }
  }
 } else $$3 = $0; else $$3 = $0; else $$3 = $0;
 STACKTOP = sp;
 return $$3 | 0;
}

function _icpGetJ_T_S($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $5 = 0, $7 = 0, $9 = 0, dest = 0, stop = 0;
 $1 = $0 + 64 | 0;
 dest = $0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$1 >> 3] = -1.0;
 $2 = $0 + 72 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAPF64[$0 + 104 >> 3] = 1.0;
 $5 = $0 + 160 | 0;
 dest = $0 + 112 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$5 >> 3] = 1.0;
 $7 = $0 + 240 | 0;
 dest = $0 + 168 | 0;
 stop = dest + 72 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$7 >> 3] = -1.0;
 $9 = $0 + 296 | 0;
 dest = $0 + 248 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$9 >> 3] = -1.0;
 $10 = $0 + 304 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$10 + 16 >> 2] = 0;
 HEAP32[$10 + 20 >> 2] = 0;
 HEAP32[$10 + 24 >> 2] = 0;
 HEAP32[$10 + 28 >> 2] = 0;
 HEAPF64[$0 + 336 >> 3] = 1.0;
 $13 = $0 + 456 | 0;
 dest = $0 + 344 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$13 >> 3] = 1.0;
 $15 = $0 + 512 | 0;
 dest = $0 + 464 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$15 >> 3] = 1.0;
 $17 = $0 + 568 | 0;
 dest = $0 + 520 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$17 >> 3] = 1.0;
 return;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $32 = 0, $34 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $4 = $0 + 4 | 0;
 $9 = ((HEAP32[$4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $10 = __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($10 >>> 0 < $9 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $14 = HEAP32[$0 >> 2] | 0;
 $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
 $19 = $15 >> 3;
 __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($2, $15 >> 4 >>> 0 < $10 >>> 1 >>> 0 ? ($19 >>> 0 < $9 >>> 0 ? $9 : $19) : $10, (HEAP32[$4 >> 2] | 0) - $14 >> 4, $0 + 12 | 0);
 $24 = $2 + 8 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 HEAP32[$25 >> 2] = 0;
 $27 = $25 + 4 | 0;
 HEAP32[$27 >> 2] = 0;
 $29 = HEAP32[$1 + 12 >> 2] | 0;
 HEAP32[$25 + 8 >> 2] = 0;
 HEAP32[$25 + 12 >> 2] = $29;
 HEAP32[$25 >> 2] = HEAP32[$1 >> 2];
 $32 = $1 + 4 | 0;
 HEAP32[$27 >> 2] = HEAP32[$32 >> 2];
 $34 = $1 + 8 | 0;
 HEAP32[$25 + 8 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$34 >> 2] = 0;
 HEAP32[$32 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$24 >> 2] = $25 + 16;
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $2);
 __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $14 = 0, $15 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $41 = 0, label = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  $10 = $0 + 8 | 0;
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $41 = HEAP32[$10 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$41 >> 2] | 0) + 24 >> 2] & 3]($41, $1, $2, $3, $4);
   break;
  }
  $14 = $1 + 32 | 0;
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $15 = $1 + 20 | 0;
   if ((HEAP32[$15 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$14 >> 2] = $3;
    $19 = $1 + 44 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 4) break;
    $22 = $1 + 52 | 0;
    HEAP8[$22 >> 0] = 0;
    $23 = $1 + 53 | 0;
    HEAP8[$23 >> 0] = 0;
    $24 = HEAP32[$10 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$24 >> 2] | 0) + 20 >> 2] & 3]($24, $1, $2, $2, 1, $4);
    if (!(HEAP8[$23 >> 0] | 0)) {
     $$037$off038 = 4;
     label = 11;
    } else if (!(HEAP8[$22 >> 0] | 0)) {
     $$037$off038 = 3;
     label = 11;
    } else $$037$off039 = 3;
    if ((label | 0) == 11) {
     HEAP32[$15 >> 2] = $2;
     $31 = $1 + 40 | 0;
     HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
     if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
      HEAP8[$1 + 54 >> 0] = 1;
      $$037$off039 = $$037$off038;
     } else $$037$off039 = $$037$off038; else $$037$off039 = $$037$off038;
    }
    HEAP32[$19 >> 2] = $$037$off039;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$14 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6removeENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $22 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = HEAP32[$3 + 4 >> 2] | 0;
 $8 = $5 + -1 | 0;
 $10 = ($8 & $5 | 0) == 0;
 if ($10) $15 = $8 & $7; else $15 = ($7 >>> 0) % ($5 >>> 0) | 0;
 $14 = (HEAP32[$1 >> 2] | 0) + ($15 << 2) | 0;
 $$0 = HEAP32[$14 >> 2] | 0;
 while (1) {
  $17 = HEAP32[$$0 >> 2] | 0;
  if (($17 | 0) == ($3 | 0)) break; else $$0 = $17;
 }
 $19 = $1 + 8 | 0;
 if (($$0 | 0) == ($19 | 0)) label = 11; else {
  $22 = HEAP32[$$0 + 4 >> 2] | 0;
  if ($10) $26 = $22 & $8; else $26 = ($22 >>> 0) % ($5 >>> 0) | 0;
  if (($26 | 0) != ($15 | 0)) label = 11;
 }
 do if ((label | 0) == 11) {
  $27 = HEAP32[$3 >> 2] | 0;
  if ($27 | 0) {
   $30 = HEAP32[$27 + 4 >> 2] | 0;
   if ($10) $34 = $30 & $8; else $34 = ($30 >>> 0) % ($5 >>> 0) | 0;
   if (($34 | 0) == ($15 | 0)) break;
  }
  HEAP32[$14 >> 2] = 0;
 } while (0);
 $35 = HEAP32[$3 >> 2] | 0;
 $37 = $35;
 if (!$35) $46 = $37; else {
  $39 = HEAP32[$35 + 4 >> 2] | 0;
  if ($10) $43 = $39 & $8; else $43 = ($39 >>> 0) % ($5 >>> 0) | 0;
  if (($43 | 0) == ($15 | 0)) $46 = $37; else {
   HEAP32[(HEAP32[$1 >> 2] | 0) + ($43 << 2) >> 2] = $$0;
   $46 = HEAP32[$3 >> 2] | 0;
  }
 }
 HEAP32[$$0 >> 2] = $46;
 HEAP32[$3 >> 2] = 0;
 $47 = $1 + 12 | 0;
 HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + -1;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $19;
 HEAP8[$0 + 8 >> 0] = 1;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$1 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $3 = sp + 24 | 0;
 $4 = sp;
 $5 = sp + 12 | 0;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 116) if ((HEAP8[$0 + 1 >> 0] | 0) == 119) {
  $15 = $0 + 2 | 0;
  $16 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
  if (($16 | 0) == ($15 | 0)) $$1 = $0; else {
   $19 = $2 + 4 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($20 | 0)) $$1 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $20 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 15245) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$19 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$1 = $16;
   }
  }
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$047 = 0, $$1 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $25 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  $26 = HEAP32[$0 + 4 >> 2] | 0;
  $31 = (HEAP32[$1 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0;
 } else {
  $25 = 10;
  $26 = $6 & 255;
  $31 = (HEAP32[$1 >> 2] | 0) - $0 | 0;
 }
 $22 = $3 - $2 | 0;
 L5 : do if ($22 | 0) {
  $28 = $26 + $22 | 0;
  if (($25 - $26 | 0) >>> 0 < $22 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0, $25, $28 - $25 | 0, $26, $31, $22);
   $$047 = HEAP32[$0 >> 2] | 0;
  } else {
   if ($7) $34 = HEAP32[$0 >> 2] | 0; else $34 = $0;
   $30 = $26 - $31 | 0;
   if (!$30) $$047 = $34; else {
    $33 = $34 + $31 | 0;
    __ZNSt3__211char_traitsIcE4moveEPcPKcj($33 + $22 | 0, $33, $30) | 0;
    $$047 = $34;
   }
  }
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $28; else HEAP8[$5 >> 0] = $28;
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($$047 + $28 | 0, $4);
  $$0 = $2;
  $$1 = $$047 + $31 | 0;
  while (1) {
   if (($$0 | 0) == ($3 | 0)) break L5;
   __ZNSt3__211char_traitsIcE6assignERcRKc($$1, $$0);
   $$0 = $$0 + 1 | 0;
   $$1 = $$1 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _setMarkerInfoVertex($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $15 = 0.0, $17 = 0.0, $19 = 0.0, $2 = 0, $21 = 0.0, $23 = 0.0, $25 = 0.0, $27 = 0.0, $29 = 0.0, $7 = 0, $8 = 0, $_ZL11gMarkerInfo$ = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0)) $$1 = HEAP32[417] | 0; else {
  $7 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 212 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$8 + 44 >> 2] | 0) > ($1 | 0)) {
   $_ZL11gMarkerInfo$ = ($1 | 0) < 0 ? 16928 : $8 + 48 + ($1 << 8) | 0;
   $15 = +HEAPF64[2148];
   HEAPF64[$_ZL11gMarkerInfo$ + 168 >> 3] = $15;
   $17 = +HEAPF64[2149];
   HEAPF64[$_ZL11gMarkerInfo$ + 176 >> 3] = $17;
   $19 = +HEAPF64[2150];
   HEAPF64[$_ZL11gMarkerInfo$ + 184 >> 3] = $19;
   $21 = +HEAPF64[2151];
   HEAPF64[$_ZL11gMarkerInfo$ + 192 >> 3] = $21;
   $23 = +HEAPF64[2152];
   HEAPF64[$_ZL11gMarkerInfo$ + 200 >> 3] = $23;
   $25 = +HEAPF64[2153];
   HEAPF64[$_ZL11gMarkerInfo$ + 208 >> 3] = $25;
   $27 = +HEAPF64[2154];
   HEAPF64[$_ZL11gMarkerInfo$ + 216 >> 3] = $27;
   $29 = +HEAPF64[2155];
   HEAPF64[$_ZL11gMarkerInfo$ + 224 >> 3] = $29;
   HEAPF64[$_ZL11gMarkerInfo$ + 56 >> 3] = ($15 + $19 + $23 + $27) * .25;
   HEAPF64[$_ZL11gMarkerInfo$ + 64 >> 3] = ($17 + $21 + $25 + $29) * .25;
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[419] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _arGetTransMatSquare($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0 = 0.0, $10 = 0, $12 = 0, $19 = 0, $27 = 0, $35 = 0, $4 = 0, $42 = 0.0, $43 = 0.0, $5 = 0, $6 = 0, $62 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $4 = sp + 200 | 0;
 $5 = sp + 104 | 0;
 $6 = sp + 264 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 $10 = HEAP32[$1 + 16 >> 2] | 0;
 $12 = (4 - $10 | 0) % 4 | 0;
 HEAPF64[$4 >> 3] = +HEAPF64[$1 + 168 + ($12 << 4) >> 3];
 HEAPF64[$4 + 8 >> 3] = +HEAPF64[$1 + 168 + ($12 << 4) + 8 >> 3];
 $19 = (5 - $10 | 0) % 4 | 0;
 HEAPF64[$4 + 16 >> 3] = +HEAPF64[$1 + 168 + ($19 << 4) >> 3];
 HEAPF64[$4 + 24 >> 3] = +HEAPF64[$1 + 168 + ($19 << 4) + 8 >> 3];
 $27 = (6 - $10 | 0) % 4 | 0;
 HEAPF64[$4 + 32 >> 3] = +HEAPF64[$1 + 168 + ($27 << 4) >> 3];
 HEAPF64[$4 + 40 >> 3] = +HEAPF64[$1 + 168 + ($27 << 4) + 8 >> 3];
 $35 = (7 - $10 | 0) % 4 | 0;
 HEAPF64[$4 + 48 >> 3] = +HEAPF64[$1 + 168 + ($35 << 4) >> 3];
 HEAPF64[$4 + 56 >> 3] = +HEAPF64[$1 + 168 + ($35 << 4) + 8 >> 3];
 $42 = $2 * -.5;
 HEAPF64[$5 >> 3] = $42;
 $43 = $2 * .5;
 HEAPF64[$5 + 8 >> 3] = $43;
 HEAPF64[$5 + 16 >> 3] = 0.0;
 HEAPF64[$5 + 24 >> 3] = $43;
 HEAPF64[$5 + 32 >> 3] = $43;
 HEAPF64[$5 + 40 >> 3] = 0.0;
 HEAPF64[$5 + 48 >> 3] = $43;
 HEAPF64[$5 + 56 >> 3] = $42;
 HEAPF64[$5 + 64 >> 3] = 0.0;
 HEAPF64[$5 + 72 >> 3] = $42;
 HEAPF64[$5 + 80 >> 3] = $42;
 HEAPF64[$5 + 88 >> 3] = 0.0;
 HEAP32[$6 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$6 + 8 >> 2] = 4;
 if ((_icpGetInitXw2Xc_from_PlanarData(HEAP32[$0 >> 2] | 0, $4, $5, 4, $7) | 0) < 0) $$0 = 1.0e8; else {
  $62 = (_icpPoint(HEAP32[$0 >> 2] | 0, $6, $7, $3, $8) | 0) < 0;
  $$0 = $62 ? 1.0e8 : +HEAPF64[$8 >> 3];
 }
 STACKTOP = sp;
 return +$$0;
}

function _arSetPixelFormat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$022 = 0, $16 = 0, $18 = 0, $19 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 L1 : do if (!$0) $$022 = -1; else {
  $3 = $0 + 4 | 0;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) $$022 = 0; else {
   switch ($1 | 0) {
   case 11:
   case 10:
   case 9:
   case 8:
   case 7:
   case 6:
   case 4:
   case 3:
   case 2:
   case 1:
   case 0:
    {
     $$0 = 0;
     break;
    }
   case 14:
   case 13:
   case 12:
   case 5:
    {
     $$0 = 1;
     break;
    }
   default:
    {
     HEAP32[$vararg_buffer >> 2] = $1;
     _arLog(3, 3420, $vararg_buffer);
     $$022 = -1;
     break L1;
    }
   }
   HEAP32[$3 >> 2] = $1;
   $6 = _arUtilGetPixelSize($1) | 0;
   HEAP32[$0 + 8 >> 2] = $6;
   $8 = $0 + 7062408 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   if ($9 | 0) {
    _arImageProcFinal($9);
    $16 = _arImageProcInit(HEAP32[$0 + 36 >> 2] | 0, HEAP32[$0 + 40 >> 2] | 0, HEAP32[$3 >> 2] | 0, 0) | 0;
    HEAP32[$8 >> 2] = $16;
   }
   $18 = $0 + 24 | 0;
   $19 = HEAP32[$18 >> 2] | 0;
   if (!$$0) switch ($19 | 0) {
   case 1:
    {
     HEAP32[$18 >> 2] = 4;
     $$022 = 0;
     break L1;
     break;
    }
   case 4:
    {
     HEAP32[$18 >> 2] = 3;
     $$022 = 0;
     break L1;
     break;
    }
   default:
    {
     $$022 = 0;
     break L1;
    }
   } else switch ($19 | 0) {
   case 0:
    {
     HEAP32[$18 >> 2] = 1;
     $$022 = 0;
     break L1;
     break;
    }
   case 3:
    {
     HEAP32[$18 >> 2] = 4;
     $$022 = 0;
     break L1;
     break;
    }
   default:
    {
     $$022 = 0;
     break L1;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$022 | 0;
}

function _arParamLTCreate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$057 = 0, $$058 = 0, $$059 = 0, $$1 = 0, $$160 = 0, $10 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0.0, $36 = 0.0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = _malloc(208) | 0;
 if (!$6) {
  _arLog(3, 4787, sp + 32 | 0);
  _exit(1);
 }
 _memcpy($6 | 0, $0 | 0, 184) | 0;
 $9 = $1 << 1;
 $10 = (HEAP32[$0 >> 2] | 0) + $9 | 0;
 HEAP32[$6 + 192 >> 2] = $10;
 $15 = (HEAP32[$0 + 4 >> 2] | 0) + $9 | 0;
 HEAP32[$6 + 196 >> 2] = $15;
 HEAP32[$6 + 200 >> 2] = $1;
 HEAP32[$6 + 204 >> 2] = $1;
 $20 = Math_imul($10 << 3, $15) | 0;
 $21 = _malloc($20) | 0;
 HEAP32[$6 + 184 >> 2] = $21;
 if (!$21) {
  _arLog(3, 4787, sp + 40 | 0);
  _exit(1);
 }
 $23 = _malloc($20) | 0;
 HEAP32[$6 + 188 >> 2] = $23;
 if (!$23) {
  _arLog(3, 4787, sp + 48 | 0);
  _exit(1);
 }
 $26 = $0 + 104 | 0;
 $28 = HEAP32[$0 + 176 >> 2] | 0;
 $$0 = 0;
 $$058 = $23;
 $$059 = $21;
 while (1) {
  if (($$0 | 0) >= ($15 | 0)) break;
  $32 = +($$0 - $1 | 0);
  $$057 = 0;
  $$1 = $$058;
  $$160 = $$059;
  while (1) {
   if (($$057 | 0) >= ($10 | 0)) break;
   $36 = +($$057 - $1 | 0);
   _arParamIdeal2Observ($26, $36, $32, $4, $5, $28) | 0;
   HEAPF32[$$160 >> 2] = +HEAPF64[$4 >> 3];
   HEAPF32[$$160 + 4 >> 2] = +HEAPF64[$5 >> 3];
   _arParamObserv2Ideal($26, $36, $32, $2, $3, $28) | 0;
   HEAPF32[$$1 >> 2] = +HEAPF64[$2 >> 3];
   HEAPF32[$$1 + 4 >> 2] = +HEAPF64[$3 >> 3];
   $$057 = $$057 + 1 | 0;
   $$1 = $$1 + 8 | 0;
   $$160 = $$160 + 8 | 0;
  }
  $$0 = $$0 + 1 | 0;
  $$058 = $$1;
  $$059 = $$160;
 }
 STACKTOP = sp;
 return $6 | 0;
}

function _arMatrixPCA($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$064 = 0, $$065 = 0.0, $$1 = 0, $$2 = 0, $18 = 0, $24 = 0, $27 = 0.0, $32 = 0, $35 = 0, $39 = 0, $40 = 0, $49 = 0, $5 = 0, $7 = 0, $9 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = HEAP32[$0 + 8 >> 2] | 0;
 $9 = ($5 | 0) < ($7 | 0) ? $5 : $7;
 L1 : do if (($5 | 0) < 2 | ($7 | 0) < 2) $$064 = -1; else if ((HEAP32[$1 + 8 >> 2] | 0) == ($7 | 0)) if ((HEAP32[$1 + 4 >> 2] | 0) == ($9 | 0)) {
  $18 = $2 + 4 | 0;
  if ((HEAP32[$18 >> 2] | 0) == ($9 | 0)) if ((HEAP32[$3 + 4 >> 2] | 0) == ($7 | 0)) {
   $24 = _arMatrixAllocDup($0) | 0;
   if (!$24) $$064 = -1; else {
    $27 = +Math_sqrt(+(+($5 | 0)));
    if ((_EX($24, $3) | 0) < 0) {
     _arMatrixFree($24) | 0;
     $$064 = -1;
     break;
    }
    if ((_CENTER($24, $3) | 0) < 0) {
     _arMatrixFree($24) | 0;
     $$064 = -1;
     break;
    }
    $32 = Math_imul($7, $5) | 0;
    $$0 = 0;
    while (1) {
     if (($$0 | 0) >= ($32 | 0)) break;
     $35 = (HEAP32[$24 >> 2] | 0) + ($$0 << 3) | 0;
     HEAPF64[$35 >> 3] = +HEAPF64[$35 >> 3] / $27;
     $$0 = $$0 + 1 | 0;
    }
    $39 = _PCA($24, $1, $2) | 0;
    _arMatrixFree($24) | 0;
    $40 = HEAP32[$18 >> 2] | 0;
    $$065 = 0.0;
    $$1 = 0;
    while (1) {
     if (($$1 | 0) >= ($40 | 0)) {
      $$2 = 0;
      break;
     }
     $$065 = $$065 + +HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$1 << 3) >> 3];
     $$1 = $$1 + 1 | 0;
    }
    while (1) {
     if (($$2 | 0) >= ($40 | 0)) {
      $$064 = $39;
      break L1;
     }
     $49 = (HEAP32[$2 >> 2] | 0) + ($$2 << 3) | 0;
     HEAPF64[$49 >> 3] = +HEAPF64[$49 >> 3] / $$065;
     $$2 = $$2 + 1 | 0;
    }
   }
  } else $$064 = -1; else $$064 = -1;
 } else $$064 = -1; else $$064 = -1; while (0);
 return $$064 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = $0 + 11 | 0;
 if ((HEAP8[$3 >> 0] | 0) < 0) {
  $6 = HEAP32[$0 >> 2] | 0;
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($6, $2);
  HEAP32[$0 + 4 >> 2] = 0;
 } else {
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($0, $2);
  HEAP8[$3 >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($0);
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i$i$i = 0;
 while (1) {
  if (($$0$i$i$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i$i$i << 2) >> 2] = 0;
  $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
 }
 $10 = $0 + 12 | 0;
 $11 = $1 + 12 | 0;
 $12 = $10 + 11 | 0;
 if ((HEAP8[$12 >> 0] | 0) < 0) {
  $15 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($15, $2);
  HEAP32[$0 + 16 >> 2] = 0;
 } else {
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($10, $2);
  HEAP8[$12 >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($10);
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
 $$0$i$i$i$i3 = 0;
 while (1) {
  if (($$0$i$i$i$i3 | 0) == 3) break;
  HEAP32[$11 + ($$0$i$i$i$i3 << 2) >> 2] = 0;
  $$0$i$i$i$i3 = $$0$i$i$i$i3 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $3 = sp + 120 | 0;
 $4 = sp + 80 | 0;
 $5 = sp;
 $6 = sp + 136 | 0;
 dest = $4;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $40 = ___lockfile($0) | 0; else $40 = 0;
  $13 = HEAP32[$0 >> 2] | 0;
  $14 = $13 & 32;
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) HEAP32[$0 >> 2] = $13 & -33;
  $19 = $0 + 48 | 0;
  if (!(HEAP32[$19 >> 2] | 0)) {
   $23 = $0 + 44 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   HEAP32[$23 >> 2] = $6;
   $25 = $0 + 28 | 0;
   HEAP32[$25 >> 2] = $6;
   $26 = $0 + 20 | 0;
   HEAP32[$26 >> 2] = $6;
   HEAP32[$19 >> 2] = 80;
   $28 = $0 + 16 | 0;
   HEAP32[$28 >> 2] = $6 + 80;
   $29 = _printf_core($0, $1, $3, $5, $4) | 0;
   if (!$24) $$1 = $29; else {
    FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
    $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29;
    HEAP32[$23 >> 2] = $24;
    HEAP32[$19 >> 2] = 0;
    HEAP32[$28 >> 2] = 0;
    HEAP32[$25 >> 2] = 0;
    HEAP32[$26 >> 2] = 0;
    $$1 = $$;
   }
  } else $$1 = _printf_core($0, $1, $3, $5, $4) | 0;
  $35 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $35 | $14;
  if ($40 | 0) ___unlockfile($0);
  $$0 = ($35 & 32 | 0) == 0 ? $$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $4 = sp;
 $5 = HEAP32[$0 >> 2] | 0;
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0;
 $10 = HEAP32[$5 + -4 >> 2] | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $3;
 $14 = $4 + 16 | 0;
 $15 = $4 + 20 | 0;
 $16 = $4 + 24 | 0;
 $17 = $4 + 28 | 0;
 $18 = $4 + 32 | 0;
 $19 = $4 + 40 | 0;
 dest = $14;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0;
 HEAP8[$14 + 38 >> 0] = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
  HEAP32[$4 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 3]($10, $4, $8, $8, 1, 0);
  $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 3]($10, $4, $8, 1, 0);
  switch (HEAP32[$4 + 36 >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$16 >> 2] | 0) != 1) if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
   $$0 = 0;
   break;
  }
  $$0 = HEAP32[$14 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0;
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0;
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0;
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0;
 L1 : do if ($7 >>> 0 < $1 >>> 2 >>> 0) {
  $17 = $1 - ($7 << 2) | 0;
  if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) if (!(($13 | $10) & 3)) {
   $23 = $10 >>> 2;
   $24 = $13 >>> 2;
   $$090 = 0;
   $$094 = $7;
   while (1) {
    $25 = $$094 >>> 1;
    $26 = $$090 + $25 | 0;
    $27 = $26 << 1;
    $28 = $27 + $23 | 0;
    $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0;
    $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0;
    if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
     $$4 = 0;
     break L1;
    }
    if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
     $$4 = 0;
     break L1;
    }
    $44 = _strcmp($2, $0 + $35 | 0) | 0;
    if (!$44) break;
    $63 = ($44 | 0) < 0;
    if (($$094 | 0) == 1) {
     $$4 = 0;
     break L1;
    } else {
     $$090 = $63 ? $$090 : $26;
     $$094 = $63 ? $25 : $$094 - $25 | 0;
    }
   }
   $46 = $27 + $24 | 0;
   $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0;
   $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0;
   if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; else $$4 = 0;
  } else $$4 = 0; else $$4 = 0;
 } else $$4 = 0; while (0);
 return $$4 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051 = 0, $$4 = 0, $16 = 0, $22 = 0, $23 = 0, $6 = 0, $7 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$4 = $0; else {
  $6 = $0 + 1 | 0;
  switch (HEAP8[$0 >> 0] | 0) {
  case 88:
   {
    $7 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6, $1, $2) | 0;
    if (($7 | 0) == ($6 | 0) | ($7 | 0) == ($1 | 0)) {
     $$4 = $0;
     break L1;
    }
    $$4 = (HEAP8[$7 >> 0] | 0) == 69 ? $7 + 1 | 0 : $0;
    break L1;
    break;
   }
  case 74:
   {
    if (($6 | 0) == ($1 | 0)) {
     $$4 = $0;
     break L1;
    } else $$051 = $6;
    while (1) {
     if ((HEAP8[$$051 >> 0] | 0) == 69) break;
     $16 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$051, $1, $2) | 0;
     if (($16 | 0) == ($$051 | 0)) {
      $$4 = $0;
      break L1;
     } else $$051 = $16;
    }
    $$4 = $$051 + 1 | 0;
    break L1;
    break;
   }
  case 76:
   {
    if (($6 | 0) != ($1 | 0)) if ((HEAP8[$6 >> 0] | 0) == 90) {
     $22 = $0 + 2 | 0;
     $23 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($22, $1, $2) | 0;
     if (($23 | 0) == ($22 | 0) | ($23 | 0) == ($1 | 0)) {
      $$4 = $0;
      break L1;
     }
     $$4 = (HEAP8[$23 >> 0] | 0) == 69 ? $23 + 1 | 0 : $0;
     break L1;
    }
    $$4 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  default:
   {
    $$4 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
   }
  }
 } while (0);
 return $$4 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $26 = 0, $27 = 0;
 L1 : do if ($0 >>> 0 < $1 >>> 0) {
  L3 : do if ((HEAP8[$0 >> 0] | 0) == 95) {
   if (($1 - $0 | 0) <= 3) {
    HEAP32[$3 >> 2] = -2;
    break L1;
   }
   $13 = $0 + 2 | 0;
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 90:
    {
     $14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
     if (($14 | 0) == ($13 | 0) | ($14 | 0) == ($1 | 0)) $$0 = $14; else if ((HEAP8[$14 >> 0] | 0) == 46) $$0 = __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0; else $$0 = $14;
     if (($$0 | 0) == ($1 | 0)) break L3;
     HEAP32[$3 >> 2] = -2;
     break L1;
     break;
    }
   case 95:
    {
     if ((HEAP8[$13 >> 0] | 0) == 95) if ((HEAP8[$0 + 3 >> 0] | 0) == 90) {
      $26 = $0 + 4 | 0;
      $27 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($26, $1, $2) | 0;
      if (!(($27 | 0) == ($26 | 0) | ($27 | 0) == ($1 | 0))) if ((__ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($27, $1, $2) | 0) == ($1 | 0)) break L3;
      HEAP32[$3 >> 2] = -2;
      break L1;
     }
     break;
    }
   default:
    {}
   }
   HEAP32[$3 >> 2] = -2;
   break L1;
  } else if ((__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = -2;
   break L1;
  } while (0);
  if (!(HEAP32[$3 >> 2] | 0)) if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$2 + 4 >> 2] | 0)) HEAP32[$3 >> 2] = -2;
 } else HEAP32[$3 >> 2] = -2; while (0);
 return;
}

function _arGetTransMatSquareCont($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = $4 | 0;
 var $10 = 0, $12 = 0, $19 = 0, $27 = 0, $35 = 0, $42 = 0.0, $43 = 0.0, $5 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $5 = sp + 104 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 168 | 0;
 $8 = sp;
 $10 = HEAP32[$1 + 16 >> 2] | 0;
 $12 = (4 - $10 | 0) % 4 | 0;
 HEAPF64[$5 >> 3] = +HEAPF64[$1 + 168 + ($12 << 4) >> 3];
 HEAPF64[$5 + 8 >> 3] = +HEAPF64[$1 + 168 + ($12 << 4) + 8 >> 3];
 $19 = (5 - $10 | 0) % 4 | 0;
 HEAPF64[$5 + 16 >> 3] = +HEAPF64[$1 + 168 + ($19 << 4) >> 3];
 HEAPF64[$5 + 24 >> 3] = +HEAPF64[$1 + 168 + ($19 << 4) + 8 >> 3];
 $27 = (6 - $10 | 0) % 4 | 0;
 HEAPF64[$5 + 32 >> 3] = +HEAPF64[$1 + 168 + ($27 << 4) >> 3];
 HEAPF64[$5 + 40 >> 3] = +HEAPF64[$1 + 168 + ($27 << 4) + 8 >> 3];
 $35 = (7 - $10 | 0) % 4 | 0;
 HEAPF64[$5 + 48 >> 3] = +HEAPF64[$1 + 168 + ($35 << 4) >> 3];
 HEAPF64[$5 + 56 >> 3] = +HEAPF64[$1 + 168 + ($35 << 4) + 8 >> 3];
 $42 = $3 * -.5;
 HEAPF64[$6 >> 3] = $42;
 $43 = $3 * .5;
 HEAPF64[$6 + 8 >> 3] = $43;
 HEAPF64[$6 + 16 >> 3] = 0.0;
 HEAPF64[$6 + 24 >> 3] = $43;
 HEAPF64[$6 + 32 >> 3] = $43;
 HEAPF64[$6 + 40 >> 3] = 0.0;
 HEAPF64[$6 + 48 >> 3] = $43;
 HEAPF64[$6 + 56 >> 3] = $42;
 HEAPF64[$6 + 64 >> 3] = 0.0;
 HEAPF64[$6 + 72 >> 3] = $42;
 HEAPF64[$6 + 80 >> 3] = $42;
 HEAPF64[$6 + 88 >> 3] = 0.0;
 HEAP32[$7 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$7 + 8 >> 2] = 4;
 $59 = (_icpPoint(HEAP32[$0 >> 2] | 0, $7, $2, $4, $8) | 0) < 0;
 STACKTOP = sp;
 return +($59 ? 1.0e8 : +HEAPF64[$8 >> 3]);
}

function _arImageProcLumaHistAndOtsu($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$062 = 0, $$064 = 0.0, $$067 = 0.0, $$068 = 0.0, $$070 = 0.0, $$169 = 0.0, $$2 = 0, $$266 = 0.0, $$3 = 0, $$pre$phiZ2D = 0, $15 = 0.0, $17 = 0, $21 = 0.0, $25 = 0.0, $3 = 0, $30 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $indvars$iv = 0, $indvars$iv71 = 0;
 $3 = _arImageProcLumaHist($0, $1) | 0;
 if (($3 | 0) < 0) $$0 = $3; else {
  $$070 = 0.0;
  $indvars$iv71 = 1;
  do {
   $$070 = $$070 + +((Math_imul(HEAP32[$0 + 16 + ($indvars$iv71 << 2) >> 2] | 0, $indvars$iv71) | 0) >>> 0);
   $indvars$iv71 = $indvars$iv71 + 1 | 0;
  } while (($indvars$iv71 | 0) != 256);
  $15 = +(Math_imul(HEAP32[$0 + 12 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0);
  $$062 = 0;
  $$064 = 0.0;
  $$067 = 0.0;
  $$068 = 0.0;
  $indvars$iv = 0;
  while (1) {
   $17 = HEAP32[$0 + 16 + ($indvars$iv << 2) >> 2] | 0;
   $$067 = $$067 + +($17 >>> 0);
   if ($$067 != 0.0) {
    $21 = $15 - $$067;
    if ($21 == 0.0) {
     $$3 = $$062;
     break;
    }
    $25 = $$068 + +((Math_imul($indvars$iv, $17) | 0) >>> 0);
    $30 = $25 / $$067 - ($$070 - $25) / $21;
    $32 = $30 * ($$067 * $21 * $30);
    $33 = $32 > $$064;
    $34 = $indvars$iv & 255;
    $$169 = $25;
    $$2 = $33 ? $34 : $$062;
    $$266 = $33 ? $32 : $$064;
    $$pre$phiZ2D = $34;
   } else {
    $$169 = $$068;
    $$2 = $$062;
    $$266 = $$064;
    $$pre$phiZ2D = $indvars$iv & 255;
   }
   if ($$pre$phiZ2D << 24 >> 24 == -1) {
    $$3 = $$2;
    break;
   } else {
    $$062 = $$2;
    $$064 = $$266;
    $$068 = $$169;
    $indvars$iv = $indvars$iv + 1 | 0;
   }
  }
  HEAP8[$2 >> 0] = $$3;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $28 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $4 = $0 + 4 | 0;
 $9 = ((HEAP32[$4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $10 = __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($10 >>> 0 < $9 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $14 = HEAP32[$0 >> 2] | 0;
 $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
 $19 = $15 >> 3;
 __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($2, $15 >> 4 >>> 0 < $10 >>> 1 >>> 0 ? ($19 >>> 0 < $9 >>> 0 ? $9 : $19) : $10, (HEAP32[$4 >> 2] | 0) - $14 >> 4, $0 + 12 | 0);
 $24 = $2 + 8 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 HEAP32[$25 >> 2] = 0;
 HEAP32[$25 + 4 >> 2] = 0;
 $28 = HEAP32[$1 >> 2] | 0;
 HEAP32[$25 + 8 >> 2] = 0;
 HEAP32[$25 + 12 >> 2] = $28;
 HEAP32[$24 >> 2] = $25 + 16;
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $2);
 __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $0 = sp + 36 | 0;
 $1 = ___cxa_get_globals_fast() | 0;
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 | 0) {
   $7 = $3 + 48 | 0;
   $9 = HEAP32[$7 >> 2] | 0;
   $12 = HEAP32[$7 + 4 >> 2] | 0;
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[762];
    _abort_message(14483, $vararg_buffer7);
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) $22 = HEAP32[$3 + 44 >> 2] | 0; else $22 = $3 + 80 | 0;
   HEAP32[$0 >> 2] = $22;
   $23 = HEAP32[$3 >> 2] | 0;
   $25 = HEAP32[$23 + 4 >> 2] | 0;
   $29 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[48] | 0) + 16 >> 2] & 15](192, $23, $0) | 0;
   $30 = HEAP32[762] | 0;
   if ($29) {
    $31 = HEAP32[$0 >> 2] | 0;
    $35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$31 >> 2] | 0) + 8 >> 2] & 31]($31) | 0;
    HEAP32[$vararg_buffer >> 2] = $30;
    HEAP32[$vararg_buffer + 4 >> 2] = $25;
    HEAP32[$vararg_buffer + 8 >> 2] = $35;
    _abort_message(14397, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = $30;
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25;
    _abort_message(14442, $vararg_buffer3);
   }
  }
 }
 _abort_message(14521, $vararg_buffer10);
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$3 = 0, $10 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) $$3 = $0; else {
  $5 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($5 | 0) == ($0 | 0)) $$3 = $0; else {
   $7 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($5, $1, $2) | 0;
   if (($7 | 0) == ($5 | 0)) $$3 = $5; else {
    $9 = $2 + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    if ((($10 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $10 + -24 | 0);
     $17 = HEAP32[$9 >> 2] | 0;
     $18 = $17 + -24 | 0;
     $20 = $17;
     while (1) {
      if (($20 | 0) == ($18 | 0)) break;
      $21 = $20 + -24 | 0;
      HEAP32[$9 >> 2] = $21;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $20 = HEAP32[$9 >> 2] | 0;
     }
     $24 = HEAP8[$3 + 11 >> 0] | 0;
     $25 = $24 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($17 + -48 | 0, $25 ? HEAP32[$3 >> 2] | 0 : $3, $25 ? HEAP32[$3 + 4 >> 2] | 0 : $24 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $7;
    }
   }
  }
 }
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueERS7_E4typeESC_SC_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$028 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $scevgep1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = $1;
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if ($6 << 24 >> 24 < 0) {
  $18 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  $19 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $18 = 10;
  $19 = $6 & 255;
 }
 $15 = $2 - $3 | 0;
 do if ($15 | 0) {
  $21 = $19 + $15 | 0;
  if (($18 - $19 | 0) >>> 0 < $15 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0, $18, $21 - $18 | 0, $19, $19, 0);
   $24 = HEAP8[$5 >> 0] | 0;
  } else $24 = $6;
  if ($24 << 24 >> 24 < 0) $27 = HEAP32[$0 >> 2] | 0; else $27 = $0;
  $scevgep1 = $2 + ($19 - $3) | 0;
  $$0 = $27 + $19 | 0;
  $$028 = $1;
  while (1) {
   if (($$028 | 0) == ($2 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $$028);
   $$0 = $$0 + 1 | 0;
   $$028 = $$028 + 1 | 0;
  }
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($27 + $scevgep1 | 0, $4);
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $21;
   break;
  } else {
   HEAP8[$5 >> 0] = $21;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $15 = 0, $18 = 0, $23 = 0, $24 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $1 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $13 = HEAP32[$0 >> 2] | 0;
 $15 = ((HEAP32[$0 + 8 >> 2] | 0) - $13 | 0) / 24 | 0;
 $18 = $15 << 1;
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($1, $15 >>> 0 < $9 >>> 1 >>> 0 ? ($18 >>> 0 < $8 >>> 0 ? $8 : $18) : $9, ((HEAP32[$3 >> 2] | 0) - $13 | 0) / 24 | 0, $0 + 12 | 0);
 $23 = $1 + 8 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 HEAP32[$24 >> 2] = 0;
 HEAP32[$24 + 4 >> 2] = 0;
 HEAP32[$24 + 8 >> 2] = 0;
 HEAP32[$24 + 12 >> 2] = 0;
 HEAP32[$24 + 16 >> 2] = 0;
 HEAP32[$24 + 20 >> 2] = 0;
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($24);
 HEAP32[$23 >> 2] = $24 + 24;
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1);
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if ($6 << 24 >> 24 < 0) $12 = HEAP32[$0 + 4 >> 2] | 0; else $12 = $6 & 255;
 if ($12 >>> 0 < $1 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  $14 = HEAP8[$5 >> 0] | 0;
 } else $14 = $6;
 $13 = $14 << 24 >> 24 < 0;
 if ($13) $19 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $19 = 10;
 $21 = $12 + $3 | 0;
 if (($19 - $12 | 0) >>> 0 < $3 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $19, $21 - $19 | 0, $12, $1, 0, $3, $2); else if ($3 | 0) {
  if ($13) $27 = HEAP32[$0 >> 2] | 0; else $27 = $0;
  $24 = $12 - $1 | 0;
  $26 = $27 + $1 | 0;
  if (!$24) $$1 = $2; else {
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($26 + $3 | 0, $26, $24) | 0;
   $$1 = $26 >>> 0 <= $2 >>> 0 & ($27 + $12 | 0) >>> 0 > $2 >>> 0 ? $2 + $3 | 0 : $2;
  }
  __ZNSt3__211char_traitsIcE4moveEPcPKcj($26, $$1, $3) | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $21; else HEAP8[$5 >> 0] = $21;
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($27 + $21 | 0, $4);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $8 = sp;
 if ((-18 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
 if ($1 >>> 0 < 2147483623) {
  $16 = $2 + $1 | 0;
  $17 = $1 << 1;
  $$sroa$speculated = $16 >>> 0 < $17 >>> 0 ? $17 : $16;
  $22 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $22 = -17;
 $23 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($22) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($23, $25, $4) | 0;
 if ($6 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($23 + $4 | 0, $7, $6) | 0;
 $28 = $3 - $5 | 0;
 $29 = $28 - $4 | 0;
 if ($29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($23 + $4 + $6 | 0, $25 + $4 + $5 | 0, $29) | 0;
 if (($1 | 0) != 10) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($25);
 HEAP32[$0 >> 2] = $23;
 HEAP32[$0 + 8 >> 2] = $22 | -2147483648;
 $38 = $28 + $6 | 0;
 HEAP32[$0 + 4 >> 2] = $38;
 HEAP8[$8 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($23 + $38 | 0, $8);
 STACKTOP = sp;
 return;
}

function _confidenceCutoff($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$049 = 0, $$150 = 0, $$2 = 0, $16 = 0, $26 = 0, $32 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 44 >> 2] | 0;
 L1 : do switch (HEAP32[$0 + 24 >> 2] | 0) {
 case 1:
 case 0:
  {
   $$049 = 0;
   while (1) {
    if (($$049 | 0) >= ($4 | 0)) break L1;
    $6 = $0 + 48 + ($$049 << 8) + 4 | 0;
    if ((HEAP32[$6 >> 2] | 0) > -1) if (+HEAPF64[$0 + 48 + ($$049 << 8) + 32 >> 3] < .5) {
     HEAP32[$0 + 48 + ($$049 << 8) + 8 >> 2] = -1;
     HEAP32[$6 >> 2] = -1;
     HEAP32[$0 + 48 + ($$049 << 8) + 236 >> 2] = 6;
    }
    $$049 = $$049 + 1 | 0;
   }
   break;
  }
 case 2:
  {
   $$150 = 0;
   while (1) {
    if (($$150 | 0) >= ($4 | 0)) break L1;
    $16 = $0 + 48 + ($$150 << 8) + 4 | 0;
    if ((HEAP32[$16 >> 2] | 0) > -1) if (+HEAPF64[$0 + 48 + ($$150 << 8) + 32 >> 3] < .5) {
     HEAP32[$0 + 48 + ($$150 << 8) + 12 >> 2] = -1;
     HEAP32[$16 >> 2] = -1;
     HEAP32[$0 + 48 + ($$150 << 8) + 236 >> 2] = 6;
    }
    $$150 = $$150 + 1 | 0;
   }
   break;
  }
 default:
  {
   $$2 = 0;
   while (1) {
    if (($$2 | 0) >= ($4 | 0)) break L1;
    $26 = $0 + 48 + ($$2 << 8) + 8 | 0;
    if ((HEAP32[$26 >> 2] | 0) > -1) if (+HEAPF64[$0 + 48 + ($$2 << 8) + 40 >> 3] < .5) {
     HEAP32[$26 >> 2] = -1;
     $$0 = 0;
    } else $$0 = 1; else $$0 = 1;
    $32 = $0 + 48 + ($$2 << 8) + 12 | 0;
    if ((HEAP32[$32 >> 2] | 0) > -1) if (+HEAPF64[$0 + 48 + ($$2 << 8) + 48 >> 3] < .5) {
     HEAP32[$32 >> 2] = -1;
     if (!$$0) HEAP32[$0 + 48 + ($$2 << 8) + 236 >> 2] = 6;
    }
    $$2 = $$2 + 1 | 0;
   }
  }
 } while (0);
 return;
}

function _teardown($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$016 = 0, $1 = 0, $11 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$016 = -1; else {
  $4 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0;
  $5 = $4 + 196 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if ($6 | 0) {
   _free($6);
   HEAP32[$5 >> 2] = 0;
   HEAP32[$4 + 200 >> 2] = 0;
  }
  _deleteHandle($4);
  _arPattDeleteHandle(HEAP32[$4 + 216 >> 2] | 0) | 0;
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE14__erase_uniqueIiEEjRKT_(17304, $1) | 0;
  $11 = $4 + 248 | 0;
  $12 = $4 + 252 | 0;
  $$0 = 0;
  while (1) {
   $14 = HEAP32[$11 >> 2] | 0;
   if ($$0 >>> 0 >= (HEAP32[$12 >> 2] | 0) - $14 >> 3 >>> 0) break;
   _arMultiFreeConfig(HEAP32[$14 + ($$0 << 3) + 4 >> 2] | 0) | 0;
   $$0 = $$0 + 1 | 0;
  }
  __ZNSt3__213__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($11);
  __ZdlPv($11);
  __ZN12arControllerD2Ev($4);
  __ZdlPv($4);
  $$016 = 0;
 }
 STACKTOP = sp;
 return $$016 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $9 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $9 = $1 + 52 | 0;
  $10 = HEAP8[$9 >> 0] | 0;
  $11 = $1 + 53 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  $15 = HEAP32[$0 + 12 >> 2] | 0;
  $16 = $0 + 16 + ($15 << 3) | 0;
  HEAP8[$9 >> 0] = 0;
  HEAP8[$11 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5);
  L4 : do if (($15 | 0) > 1) {
   $19 = $1 + 24 | 0;
   $20 = $1 + 54 | 0;
   $21 = $0 + 8 | 0;
   $$0 = $0 + 24 | 0;
   do {
    if (HEAP8[$20 >> 0] | 0) break L4;
    if (!(HEAP8[$9 >> 0] | 0)) {
     if (HEAP8[$11 >> 0] | 0) if (!(HEAP32[$21 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[$19 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[$21 >> 2] & 2)) break L4;
    }
    HEAP8[$9 >> 0] = 0;
    HEAP8[$11 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5);
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $16 >>> 0);
  } while (0);
  HEAP8[$9 >> 0] = $10;
  HEAP8[$11 >> 0] = $12;
 }
 return;
}

function _arLog($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $$sink = 0, $11 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp + 16 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = 0;
 if (!(($1 | 0) == 0 | (HEAP32[408] | 0) > ($0 | 0))) if (HEAP8[$1 >> 0] | 0) {
  HEAP32[$3 >> 2] = $varargs;
  $9 = _vasprintf($2, $1, $3) | 0;
  if (($9 | 0) > -1) {
   $11 = HEAP32[4320] | 0;
   do if (!$11) _fputs(HEAP32[$2 >> 2] | 0, HEAP32[499] | 0) | 0; else {
    if (!(HEAP32[4321] | 0)) {
     FUNCTION_TABLE_vi[$11 & 15](HEAP32[$2 >> 2] | 0);
     break;
    }
    $16 = _pthread_self() | 0;
    $19 = HEAP32[4323] | 0;
    if (($16 | 0) == (HEAP32[4322] | 0)) {
     if (($19 | 0) > 0) {
      FUNCTION_TABLE_vi[HEAP32[4320] & 15](HEAP32[4325] | 0);
      HEAP32[4323] = 0;
     }
     FUNCTION_TABLE_vi[HEAP32[4320] & 15](HEAP32[$2 >> 2] | 0);
     break;
    }
    $20 = HEAP32[4324] | 0;
    if (($19 | 0) < ($20 | 0)) {
     $25 = (HEAP32[4325] | 0) + $19 | 0;
     if (($9 | 0) < (-3 - $19 + $20 | 0)) {
      _strcpy($25, HEAP32[$2 >> 2] | 0) | 0;
      $$sink = (HEAP32[4323] | 0) + $9 | 0;
     } else {
      HEAP8[$25 >> 0] = 46;
      HEAP8[$25 + 1 >> 0] = 46;
      HEAP8[$25 + 2 >> 0] = 46;
      HEAP8[$25 + 3 >> 0] = 0;
      $$sink = $20;
     }
     HEAP32[4323] = $$sink;
    }
   } while (0);
   _free(HEAP32[$2 >> 2] | 0);
  }
 }
 STACKTOP = sp;
 return;
}

function _strspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $14 = 0, $17 = 0, $2 = 0, $21 = 0, $27 = 0, $3 = 0, $36 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 $3 = HEAP8[$1 >> 0] | 0;
 do if (!($3 << 24 >> 24)) $$0 = 0; else {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$020 = $0;
   while (1) if ((HEAP8[$$020 >> 0] | 0) == $3 << 24 >> 24) $$020 = $$020 + 1 | 0; else break;
   $$0 = $$020 - $0 | 0;
   break;
  } else {
   $$01925 = $1;
   $17 = $3;
  }
  do {
   $21 = $2 + ((($17 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[$21 >> 2] = HEAP32[$21 >> 2] | 1 << ($17 & 31);
   $$01925 = $$01925 + 1 | 0;
   $17 = HEAP8[$$01925 >> 0] | 0;
  } while ($17 << 24 >> 24 != 0);
  $14 = HEAP8[$0 >> 0] | 0;
  L10 : do if (!($14 << 24 >> 24)) $$1$lcssa = $0; else {
   $$123 = $0;
   $27 = $14;
   while (1) {
    if (!(HEAP32[$2 + ((($27 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($27 & 31))) {
     $$1$lcssa = $$123;
     break L10;
    }
    $36 = $$123 + 1 | 0;
    $27 = HEAP8[$36 >> 0] | 0;
    if (!($27 << 24 >> 24)) {
     $$1$lcssa = $36;
     break;
    } else $$123 = $36;
   }
  } while (0);
  $$0 = $$1$lcssa - $0 | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255;
 L1 : do if (!$2) $$0 = $0 + (_strlen($0) | 0) | 0; else {
  if (!($0 & 3)) $$030$lcssa = $0; else {
   $7 = $1 & 255;
   $$03039 = $0;
   while (1) {
    $10 = HEAP8[$$03039 >> 0] | 0;
    if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
     $$0 = $$03039;
     break L1;
    }
    $13 = $$03039 + 1 | 0;
    if (!($13 & 3)) {
     $$030$lcssa = $13;
     break;
    } else $$03039 = $13;
   }
  }
  $17 = Math_imul($2, 16843009) | 0;
  $18 = HEAP32[$$030$lcssa >> 2] | 0;
  L10 : do if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
   $$02936 = $$030$lcssa;
   $25 = $18;
   while (1) {
    $24 = $25 ^ $17;
    if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
     $$029$lcssa = $$02936;
     break L10;
    }
    $31 = $$02936 + 4 | 0;
    $25 = HEAP32[$31 >> 2] | 0;
    if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
     $$029$lcssa = $31;
     break;
    } else $$02936 = $31;
   }
  } else $$029$lcssa = $$030$lcssa; while (0);
  $38 = $1 & 255;
  $$1 = $$029$lcssa;
  while (1) {
   $39 = HEAP8[$$1 >> 0] | 0;
   if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
    $$0 = $$1;
    break;
   } else $$1 = $$1 + 1 | 0;
  }
 } while (0);
 return $$0 | 0;
}

function _x_by_xt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$052 = 0, $$053 = 0, $$054 = 0, $$1 = 0, $12 = 0, $14 = 0, $18 = 0, $20 = 0, $23 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) if ((HEAP32[$1 + 8 >> 2] | 0) == ($3 | 0)) {
  $12 = HEAP32[$1 >> 2] | 0;
  $$050 = 0;
  $$053 = $12;
  while (1) {
   if (($$050 | 0) >= ($3 | 0)) {
    $$051 = 0;
    break L1;
   }
   $14 = Math_imul($$050, $5) | 0;
   $$049 = 0;
   $$1 = $$053;
   while (1) {
    if (($$049 | 0) == ($3 | 0)) break;
    L10 : do if (($$049 | 0) < ($$050 | 0)) {
     $18 = $12 + ((Math_imul($$049, $3) | 0) + $$050 << 3) | 0;
     HEAPF64[$$1 >> 3] = +HEAPF64[$18 >> 3];
    } else {
     $20 = HEAP32[$0 >> 2] | 0;
     $23 = $20 + ((Math_imul($$049, $5) | 0) << 3) | 0;
     HEAPF64[$$1 >> 3] = 0.0;
     $$0 = 0;
     $$052 = $20 + ($14 << 3) | 0;
     $$054 = $23;
     $31 = 0.0;
     while (1) {
      if (($$0 | 0) >= ($5 | 0)) break L10;
      $30 = $31 + +HEAPF64[$$052 >> 3] * +HEAPF64[$$054 >> 3];
      HEAPF64[$$1 >> 3] = $30;
      $$0 = $$0 + 1 | 0;
      $$052 = $$052 + 8 | 0;
      $$054 = $$054 + 8 | 0;
      $31 = $30;
     }
    } while (0);
    $$049 = $$049 + 1 | 0;
    $$1 = $$1 + 8 | 0;
   }
   $$050 = $$050 + 1 | 0;
   $$053 = $$053 + ($3 << 3) | 0;
  }
 } else $$051 = -1; else $$051 = -1; while (0);
 return $$051 | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $4 = $0 + 4 | 0;
 $9 = (((HEAP32[$4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $10 = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($10 >>> 0 < $9 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $14 = HEAP32[$0 >> 2] | 0;
 $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 24 | 0;
 $19 = $16 << 1;
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($2, $16 >>> 0 < $10 >>> 1 >>> 0 ? ($19 >>> 0 < $9 >>> 0 ? $9 : $19) : $10, ((HEAP32[$4 >> 2] | 0) - $14 | 0) / 24 | 0, $0 + 12 | 0);
 $24 = $2 + 8 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($25, $1);
 HEAP32[$24 >> 2] = $25 + 24;
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $2);
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $29 = 0, $34 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) label = 3; else if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0;
  if (($7 | 0) < 0) label = 4; else {
   $10 = HEAP32[$1 >> 2] | 0;
   $$phi$trans$insert = $0 + 8 | 0;
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
    $$pre$phi34Z2D = $0 + 108 | 0;
    $$sink = $$pre;
    $26 = $$pre;
    $29 = HEAP32[$0 + 4 >> 2] | 0;
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0;
    $14 = HEAP32[$0 + 4 >> 2] | 0;
    $17 = $0 + 108 | 0;
    $19 = $10 - (HEAP32[$17 >> 2] | 0) | 0;
    $21 = $12;
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$pre$phi34Z2D = $17;
     $$sink = $21;
     $26 = $21;
     $29 = $14;
    } else {
     $$pre$phi34Z2D = $17;
     $$sink = $14 + ($19 + -1) | 0;
     $26 = $21;
     $29 = $14;
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink;
   if ($26 | 0) HEAP32[$$pre$phi34Z2D >> 2] = $26 + 1 - $29 + (HEAP32[$$pre$phi34Z2D >> 2] | 0);
   $34 = $29 + -1 | 0;
   if ((HEAPU8[$34 >> 0] | 0 | 0) == ($7 | 0)) $$0 = $7; else {
    HEAP8[$34 >> 0] = $7;
    $$0 = $7;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $4 = $0 + 4 | 0;
 $9 = (((HEAP32[$4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $10 = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) | 0;
 if ($10 >>> 0 < $9 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $14 = HEAP32[$0 >> 2] | 0;
 $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 24 | 0;
 $19 = $16 << 1;
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($2, $16 >>> 0 < $10 >>> 1 >>> 0 ? ($19 >>> 0 < $9 >>> 0 ? $9 : $19) : $10, ((HEAP32[$4 >> 2] | 0) - $14 | 0) / 24 | 0, $0 + 12 | 0);
 $24 = $2 + 8 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25, $1);
 HEAP32[$24 >> 2] = $25 + 24;
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $2);
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $11 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $$0$i = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($2 | 0)) break;
  $7 = HEAP32[$5 >> 2] | 0;
  $8 = $7 + -16 | 0;
  $9 = $$0$i + -16 | 0;
  HEAP32[$8 >> 2] = 0;
  $11 = $7 + -12 | 0;
  HEAP32[$11 >> 2] = 0;
  $13 = HEAP32[$$0$i + -4 >> 2] | 0;
  HEAP32[$7 + -8 >> 2] = 0;
  HEAP32[$7 + -4 >> 2] = $13;
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  $16 = $$0$i + -12 | 0;
  HEAP32[$11 >> 2] = HEAP32[$16 >> 2];
  $18 = $$0$i + -8 | 0;
  HEAP32[$7 + -8 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$18 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -16;
  $$0$i = $9;
 }
 $23 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $23;
 $25 = $1 + 8 | 0;
 $26 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$25 >> 2];
 HEAP32[$25 >> 2] = $26;
 $28 = $0 + 8 | 0;
 $29 = $1 + 12 | 0;
 $30 = HEAP32[$28 >> 2] | 0;
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$29 >> 2] = $30;
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = sp + 1 | 0;
 HEAP8[$2 >> 0] = $1;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $$018 = HEAP32[$0 + 4 >> 2] | 0;
  $$019 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $$018 = $5 & 255;
  $$019 = 10;
 }
 if (($$018 | 0) == ($$019 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0, $$019, 1, $$019, $$019, 0);
  $17 = $$019 + 1 | 0;
  if ((HEAP8[$4 >> 0] | 0) < 0) {
   $23 = $17;
   label = 8;
  } else {
   $20 = $17;
   label = 7;
  }
 } else {
  $18 = $$018 + 1 | 0;
  if ($6) {
   $23 = $18;
   label = 8;
  } else {
   $20 = $18;
   label = 7;
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$4 >> 0] = $20;
  $$pn = $0;
 } else if ((label | 0) == 8) {
  $21 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = $23;
  $$pn = $21;
 }
 $$0 = $$pn + $$018 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $2);
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + 1 | 0, $3);
 STACKTOP = sp;
 return;
}

function _fread($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $21 = 0, $28 = 0, $32 = 0, $36 = 0, $39 = 0, $4 = 0, label = 0;
 $4 = Math_imul($2, $1) | 0;
 $$ = ($1 | 0) == 0 ? 0 : $2;
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) $36 = ___lockfile($3) | 0; else $36 = 0;
 $10 = $3 + 74 | 0;
 $12 = HEAP8[$10 >> 0] | 0;
 HEAP8[$10 >> 0] = $12 + 255 | $12;
 $18 = $3 + 4 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $21 = (HEAP32[$3 + 8 >> 2] | 0) - $19 | 0;
 $$57 = $21 >>> 0 < $4 >>> 0 ? $21 : $4;
 if (($21 | 0) > 0) {
  _memcpy($0 | 0, $19 | 0, $$57 | 0) | 0;
  HEAP32[$18 >> 2] = $19 + $$57;
  $$054$ph = $4 - $$57 | 0;
  $$056$ph = $0 + $$57 | 0;
 } else {
  $$054$ph = $4;
  $$056$ph = $0;
 }
 L7 : do if (!$$054$ph) label = 13; else {
  $28 = $3 + 32 | 0;
  $$05460 = $$054$ph;
  $$05659 = $$056$ph;
  while (1) {
   if (___toread($3) | 0) break;
   $32 = FUNCTION_TABLE_iiii[HEAP32[$28 >> 2] & 15]($3, $$05659, $$05460) | 0;
   if (($32 + 1 | 0) >>> 0 < 2) break;
   $39 = $$05460 - $32 | 0;
   if (!$39) {
    label = 13;
    break L7;
   } else {
    $$05460 = $39;
    $$05659 = $$05659 + $32 | 0;
   }
  }
  if ($36 | 0) ___unlockfile($3);
  $$0 = (($4 - $$05460 | 0) >>> 0) / ($1 >>> 0) | 0;
 } while (0);
 if ((label | 0) == 13) if (!$36) $$0 = $$; else {
  ___unlockfile($3);
  $$0 = $$;
 }
 return $$0 | 0;
}

function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $13 = 0, $17 = 0, $2 = 0, $23 = 0, $3 = 0, $32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $3 = HEAP8[$1 >> 0] | 0;
 L1 : do if (!($3 << 24 >> 24)) label = 3; else if (!(HEAP8[$1 + 1 >> 0] | 0)) label = 3; else {
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  $$01824 = $1;
  $13 = $3;
  do {
   $17 = $2 + ((($13 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 1 << ($13 & 31);
   $$01824 = $$01824 + 1 | 0;
   $13 = HEAP8[$$01824 >> 0] | 0;
  } while ($13 << 24 >> 24 != 0);
  $10 = HEAP8[$0 >> 0] | 0;
  if (!($10 << 24 >> 24)) $$019$sink = $0; else {
   $$01922 = $0;
   $23 = $10;
   while (1) {
    if (HEAP32[$2 + ((($23 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($23 & 31) | 0) {
     $$019$sink = $$01922;
     break L1;
    }
    $32 = $$01922 + 1 | 0;
    $23 = HEAP8[$32 >> 0] | 0;
    if (!($23 << 24 >> 24)) {
     $$019$sink = $32;
     break;
    } else $$01922 = $32;
   }
  }
 } while (0);
 if ((label | 0) == 3) $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0;
 STACKTOP = sp;
 return $$019$sink - $0 | 0;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $11 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $$0$i = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($2 | 0)) break;
  $7 = HEAP32[$5 >> 2] | 0;
  $8 = $7 + -16 | 0;
  $9 = $$0$i + -16 | 0;
  HEAP32[$8 >> 2] = 0;
  $11 = $7 + -12 | 0;
  HEAP32[$11 >> 2] = 0;
  $13 = HEAP32[$$0$i + -4 >> 2] | 0;
  HEAP32[$7 + -8 >> 2] = 0;
  HEAP32[$7 + -4 >> 2] = $13;
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  $16 = $$0$i + -12 | 0;
  HEAP32[$11 >> 2] = HEAP32[$16 >> 2];
  $18 = $$0$i + -8 | 0;
  HEAP32[$7 + -8 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$18 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -16;
  $$0$i = $9;
 }
 $23 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $23;
 $25 = $1 + 8 | 0;
 $26 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$25 >> 2];
 HEAP32[$25 >> 2] = $26;
 $28 = $0 + 8 | 0;
 $29 = $1 + 12 | 0;
 $30 = HEAP32[$28 >> 2] | 0;
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$29 >> 2] = $30;
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 return;
}

function _icpGetJ_U_Xc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $15 = 0.0, $20 = 0.0, $21 = 0, $24 = 0, $28 = 0, $3 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $38 = 0, $4 = 0.0, $42 = 0, $48 = 0.0, $50 = 0.0, $6 = 0, $9 = 0.0;
 $3 = +HEAPF64[$1 >> 3];
 $4 = +HEAPF64[$2 >> 3];
 $6 = $1 + 8 | 0;
 $9 = +HEAPF64[$2 + 8 >> 3];
 $12 = $1 + 16 | 0;
 $15 = +HEAPF64[$2 + 16 >> 3];
 $20 = +HEAPF64[$1 + 24 >> 3] + ($3 * $4 + +HEAPF64[$6 >> 3] * $9 + +HEAPF64[$12 >> 3] * $15);
 $21 = $1 + 32 | 0;
 $24 = $1 + 40 | 0;
 $28 = $1 + 48 | 0;
 $34 = +HEAPF64[$1 + 56 >> 3] + ($4 * +HEAPF64[$21 >> 3] + $9 * +HEAPF64[$24 >> 3] + $15 * +HEAPF64[$28 >> 3]);
 $35 = $1 + 64 | 0;
 $36 = +HEAPF64[$35 >> 3];
 $38 = $1 + 72 | 0;
 $42 = $1 + 80 | 0;
 $48 = +HEAPF64[$1 + 88 >> 3] + ($4 * $36 + $9 * +HEAPF64[$38 >> 3] + $15 * +HEAPF64[$42 >> 3]);
 if ($48 == 0.0) $$0 = -1; else {
  $50 = $48 * $48;
  HEAPF64[$0 >> 3] = ($3 * $48 - $20 * $36) / $50;
  HEAPF64[$0 + 8 >> 3] = ($48 * +HEAPF64[$6 >> 3] - $20 * +HEAPF64[$38 >> 3]) / $50;
  HEAPF64[$0 + 16 >> 3] = ($48 * +HEAPF64[$12 >> 3] - $20 * +HEAPF64[$42 >> 3]) / $50;
  HEAPF64[$0 + 24 >> 3] = ($48 * +HEAPF64[$21 >> 3] - $34 * +HEAPF64[$35 >> 3]) / $50;
  HEAPF64[$0 + 32 >> 3] = ($48 * +HEAPF64[$24 >> 3] - $34 * +HEAPF64[$38 >> 3]) / $50;
  HEAPF64[$0 + 40 >> 3] = ($48 * +HEAPF64[$28 >> 3] - $34 * +HEAPF64[$42 >> 3]) / $50;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _getMultiEachMarkerInfo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $11 = 0, $19 = 0, $25 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $3) | 0)) $$2 = HEAP32[417] | 0; else {
  $7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $3) | 0;
  $11 = HEAP32[$7 + 248 >> 2] | 0;
  if (($1 | 0) < 0 ? 1 : (HEAP32[$7 + 252 >> 2] | 0) - $11 >> 3 >>> 0 <= $1 >>> 0) {
   $$2 = HEAP32[418] | 0;
   break;
  }
  $19 = HEAP32[$11 + ($1 << 3) + 4 >> 2] | 0;
  if (($2 | 0) < 0 ? 1 : (HEAP32[$19 + 4 >> 2] | 0) <= ($2 | 0)) {
   $$2 = HEAP32[419] | 0;
   break;
  } else {
   $25 = HEAP32[$19 >> 2] | 0;
   _matrixCopy($25 + ($2 * 320 | 0) + 16 | 0, 17184);
   _emscripten_asm_const_iiiid(1, HEAP32[$25 + ($2 * 320 | 0) + 304 >> 2] | 0, HEAP32[$25 + ($2 * 320 | 0) >> 2] | 0, HEAP32[$25 + ($2 * 320 | 0) + 4 >> 2] | 0, +(+HEAPF64[$25 + ($2 * 320 | 0) + 8 >> 3])) | 0;
   $$2 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function _xt_by_x($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$051 = 0, $$052 = 0, $$053 = 0, $$054 = 0, $$055 = 0, $$056 = 0, $$1 = 0, $12 = 0, $17 = 0, $19 = 0, $26 = 0.0, $27 = 0.0, $3 = 0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if ((HEAP32[$1 + 4 >> 2] | 0) == ($5 | 0)) if ((HEAP32[$1 + 8 >> 2] | 0) == ($5 | 0)) {
  $12 = HEAP32[$1 >> 2] | 0;
  $$052 = 0;
  $$055 = $12;
  while (1) {
   if (($$052 | 0) < ($5 | 0)) {
    $$051 = 0;
    $$1 = $$055;
   } else {
    $$053 = 0;
    break L1;
   }
   while (1) {
    if (($$051 | 0) == ($5 | 0)) break;
    L9 : do if (($$051 | 0) < ($$052 | 0)) {
     $17 = $12 + ((Math_imul($$051, $5) | 0) + $$052 << 3) | 0;
     HEAPF64[$$1 >> 3] = +HEAPF64[$17 >> 3];
    } else {
     $19 = HEAP32[$0 >> 2] | 0;
     HEAPF64[$$1 >> 3] = 0.0;
     $$0 = 0;
     $$054 = $19 + ($$052 << 3) | 0;
     $$056 = $19 + ($$051 << 3) | 0;
     $27 = 0.0;
     while (1) {
      if (($$0 | 0) >= ($3 | 0)) break L9;
      $26 = $27 + +HEAPF64[$$054 >> 3] * +HEAPF64[$$056 >> 3];
      HEAPF64[$$1 >> 3] = $26;
      $$0 = $$0 + 1 | 0;
      $$054 = $$054 + ($5 << 3) | 0;
      $$056 = $$056 + ($5 << 3) | 0;
      $27 = $26;
     }
    } while (0);
    $$051 = $$051 + 1 | 0;
    $$1 = $$1 + 8 | 0;
   }
   $$052 = $$052 + 1 | 0;
   $$055 = $$055 + ($5 << 3) | 0;
  }
 } else $$053 = -1; else $$053 = -1; while (0);
 return $$053 | 0;
}

function _arMatrixMul($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$040 = 0, $$041 = 0, $$042 = 0, $$043 = 0, $$044 = 0, $$045 = 0, $$1 = 0, $14 = 0, $20 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $9 = 0;
 $4 = HEAP32[$1 + 8 >> 2] | 0;
 L1 : do if (($4 | 0) == (HEAP32[$2 + 4 >> 2] | 0)) {
  $9 = HEAP32[$0 + 4 >> 2] | 0;
  if (($9 | 0) == (HEAP32[$1 + 4 >> 2] | 0)) {
   $14 = HEAP32[$0 + 8 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$2 + 8 >> 2] | 0)) {
    $$0 = HEAP32[$0 >> 2] | 0;
    $$044 = 0;
    while (1) {
     if (($$044 | 0) >= ($9 | 0)) {
      $$045 = 0;
      break L1;
     }
     $20 = Math_imul($$044, $4) | 0;
     $$043 = 0;
     $$1 = $$0;
     while (1) {
      if (($$043 | 0) >= ($14 | 0)) break;
      HEAPF64[$$1 >> 3] = 0.0;
      $$040 = (HEAP32[$2 >> 2] | 0) + ($$043 << 3) | 0;
      $$041 = (HEAP32[$1 >> 2] | 0) + ($20 << 3) | 0;
      $$042 = 0;
      $31 = 0.0;
      while (1) {
       if (($$042 | 0) >= ($4 | 0)) break;
       $30 = $31 + +HEAPF64[$$041 >> 3] * +HEAPF64[$$040 >> 3];
       HEAPF64[$$1 >> 3] = $30;
       $$040 = $$040 + ($14 << 3) | 0;
       $$041 = $$041 + 8 | 0;
       $$042 = $$042 + 1 | 0;
       $31 = $30;
      }
      $$043 = $$043 + 1 | 0;
      $$1 = $$1 + 8 | 0;
     }
     $$0 = $$1;
     $$044 = $$044 + 1 | 0;
    }
   } else $$045 = -1;
  } else $$045 = -1;
 } else $$045 = -1; while (0);
 return $$045 | 0;
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) if (!(___towrite($2) | 0)) {
  $12 = HEAP32[$3 >> 2] | 0;
  label = 5;
 } else $$1 = 0; else {
  $12 = $4;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $9 = $2 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $14 = $10;
  if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
   $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0;
   break;
  }
  L10 : do if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
   $$038 = $1;
   while (1) {
    if (!$$038) {
     $$139 = 0;
     $$141 = $0;
     $$143 = $1;
     $31 = $14;
     break L10;
    }
    $22 = $$038 + -1 | 0;
    if ((HEAP8[$0 + $22 >> 0] | 0) == 10) break; else $$038 = $22;
   }
   $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0;
   if ($28 >>> 0 < $$038 >>> 0) {
    $$1 = $28;
    break L5;
   }
   $$139 = $$038;
   $$141 = $0 + $$038 | 0;
   $$143 = $1 - $$038 | 0;
   $31 = HEAP32[$9 >> 2] | 0;
  } else {
   $$139 = 0;
   $$141 = $0;
   $$143 = $1;
   $31 = $14;
  } while (0);
  _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143;
  $$1 = $$139 + $$143 | 0;
 } while (0);
 return $$1 | 0;
}

function _get_vertex($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$071 = 0, $$072 = 0, $$073 = 0.0, $10 = 0, $12 = 0.0, $14 = 0, $16 = 0, $18 = 0.0, $22 = 0.0, $23 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $45 = 0, $8 = 0, label = 0;
 $8 = HEAP32[$1 + ($3 << 2) >> 2] | 0;
 $10 = HEAP32[$1 + ($2 << 2) >> 2] | 0;
 $12 = +($8 - $10 | 0);
 $14 = HEAP32[$0 + ($2 << 2) >> 2] | 0;
 $16 = HEAP32[$0 + ($3 << 2) >> 2] | 0;
 $18 = +($14 - $16 | 0);
 $22 = +((Math_imul($16, $10) | 0) - (Math_imul($14, $8) | 0) | 0);
 $23 = $2 + 1 | 0;
 $$0 = $23;
 $$071 = $23;
 $$073 = 0.0;
 while (1) {
  if (($$071 | 0) >= ($3 | 0)) break;
  $34 = $22 + ($12 * +(HEAP32[$0 + ($$071 << 2) >> 2] | 0) + $18 * +(HEAP32[$1 + ($$071 << 2) >> 2] | 0));
  $35 = $34 * $34;
  $36 = $35 > $$073;
  $$0 = $36 ? $$071 : $$0;
  $$071 = $$071 + 1 | 0;
  $$073 = $36 ? $35 : $$073;
 }
 if ($$073 / ($12 * $12 + $18 * $18) > $4) if ((_get_vertex($0, $1, $2, $$0, $4, $5, $6) | 0) < 0) $$072 = -1; else {
  $45 = HEAP32[$6 >> 2] | 0;
  if (($45 | 0) > 5) $$072 = -1; else {
   HEAP32[$5 + ($45 << 2) >> 2] = $$0;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
   if ((_get_vertex($0, $1, $$0, $3, $4, $5, $6) | 0) < 0) $$072 = -1; else label = 8;
  }
 } else label = 8;
 if ((label | 0) == 8) $$072 = 0;
 return $$072 | 0;
}

function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $4 = 0, $5 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $4 = sp + 124 | 0;
 $5 = sp;
 dest = $5;
 src = 2496;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) if (!$1) {
  $$014 = $4;
  $$015 = 1;
  label = 4;
 } else {
  $9 = ___errno_location() | 0;
  HEAP32[$9 >> 2] = 75;
  $$0 = -1;
 } else {
  $$014 = $0;
  $$015 = $1;
  label = 4;
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0;
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015;
  HEAP32[$5 + 48 >> 2] = $$$015;
  $14 = $5 + 20 | 0;
  HEAP32[$14 >> 2] = $$014;
  HEAP32[$5 + 44 >> 2] = $$014;
  $16 = $$014 + $$$015 | 0;
  $17 = $5 + 16 | 0;
  HEAP32[$17 >> 2] = $16;
  HEAP32[$5 + 28 >> 2] = $16;
  $19 = _vfprintf($5, $2, $3) | 0;
  if (!$$$015) $$0 = $19; else {
   $21 = HEAP32[$14 >> 2] | 0;
   HEAP8[$21 + ((($21 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$031 = 0, $$032 = 0, $$133 = 0, $$2 = 0, $$236 = 0, $27 = 0, $8 = 0;
 L1 : do if (($1 - $0 | 0) > 12) {
  $$031 = 0;
  $$032 = $0;
  while (1) {
   $8 = $$032 + 1 | 0;
   if (($$031 | 0) >= 13) break;
   if ((HEAP8[$$032 >> 0] | 0) == (HEAP8[16680 + $$031 >> 0] | 0)) {
    $$031 = $$031 + 1 | 0;
    $$032 = $8;
   } else {
    $$236 = $0;
    break L1;
   }
  }
  L6 : do if (($$032 | 0) == ($1 | 0)) $$2 = $1; else {
   if ((HEAP8[$$032 >> 0] | 0) == 95) {
    if (($8 | 0) == ($1 | 0)) {
     $$236 = $0;
     break L1;
    }
    if (((HEAP8[$8 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $$236 = $0;
     break L1;
    }
    $$133 = $$032 + 2 | 0;
   } else $$133 = $$032;
   while (1) {
    if (($$133 | 0) == ($1 | 0)) {
     $$2 = $1;
     break L6;
    }
    if (((HEAP8[$$133 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $$2 = $$133;
     break L6;
    }
    $$133 = $$133 + 1 | 0;
   }
  } while (0);
  $27 = HEAP32[$2 + 4 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($27 | 0)) $$236 = $0; else {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($27 + -24 | 0, 0, 16694) | 0;
   $$236 = $$2;
  }
 } else $$236 = $0; while (0);
 return $$236 | 0;
}

function __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $31 = 0, $32 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $2 = sp;
 $4 = $0 + 4 | 0;
 $9 = ((HEAP32[$4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 3) + 1 | 0;
 $10 = __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($10 >>> 0 < $9 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $14 = HEAP32[$0 >> 2] | 0;
 $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
 $19 = $15 >> 2;
 __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEEC2EjjS4_($2, $15 >> 3 >>> 0 < $10 >>> 1 >>> 0 ? ($19 >>> 0 < $9 >>> 0 ? $9 : $19) : $10, (HEAP32[$4 >> 2] | 0) - $14 >> 3, $0 + 8 | 0);
 $24 = $2 + 8 | 0;
 $26 = $1;
 $31 = HEAP32[$26 + 4 >> 2] | 0;
 $32 = HEAP32[$24 >> 2] | 0;
 HEAP32[$32 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$32 + 4 >> 2] = $31;
 HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 8;
 __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
 __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEED2Ev($2);
 STACKTOP = sp;
 return;
}

function _sift($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $13 = 0, $14 = 0, $21 = 0, $22 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $5 = sp;
 HEAP32[$5 >> 2] = $0;
 L1 : do if (($3 | 0) > 1) {
  $7 = 0 - $1 | 0;
  $$02932 = $0;
  $$03031 = $3;
  $$033 = 1;
  $14 = $0;
  while (1) {
   $8 = $$02932 + $7 | 0;
   $9 = $$03031 + -2 | 0;
   $13 = $8 + (0 - (HEAP32[$4 + ($9 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 15]($14, $13) | 0) > -1) if ((FUNCTION_TABLE_iii[$2 & 15]($14, $8) | 0) > -1) {
    $$0$lcssa = $$033;
    break L1;
   }
   $21 = $$033 + 1 | 0;
   $22 = $5 + ($$033 << 2) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 15]($13, $8) | 0) > -1) {
    HEAP32[$22 >> 2] = $13;
    $$029$be = $13;
    $$030$be = $$03031 + -1 | 0;
   } else {
    HEAP32[$22 >> 2] = $8;
    $$029$be = $8;
    $$030$be = $9;
   }
   if (($$030$be | 0) <= 1) {
    $$0$lcssa = $21;
    break L1;
   }
   $$02932 = $$029$be;
   $$03031 = $$030$be;
   $$033 = $21;
   $14 = HEAP32[$5 >> 2] | 0;
  }
 } else $$0$lcssa = 1; while (0);
 _cycle($1, $5, $$0$lcssa);
 STACKTOP = sp;
 return;
}

function _arSetLabelingThreshMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$019 = 0, $15 = 0, $3 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$0) $$019 = -1; else {
  $3 = $0 + 7062388 | 0;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) $$019 = 0; else {
   $6 = $0 + 7062408 | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   if ($7 | 0) {
    _arImageProcFinal($7);
    HEAP32[$6 >> 2] = 0;
   }
   switch ($1 | 0) {
   case 3:
   case 2:
   case 1:
    {
     $15 = _arImageProcInit(HEAP32[$0 + 36 >> 2] | 0, HEAP32[$0 + 40 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 0) | 0;
     HEAP32[$6 >> 2] = $15;
     $$0 = $1;
     break;
    }
   case 4:
    {
     HEAP32[$0 + 7062404 >> 2] = 1;
     HEAP32[$0 + 7062400 >> 2] = 1;
     $$0 = 4;
     break;
    }
   case 0:
    {
     $$0 = 0;
     break;
    }
   default:
    {
     _arLog(3, 3252, $vararg_buffer);
     $$0 = 0;
    }
   }
   HEAP32[$3 >> 2] = $$0;
   if ((HEAP32[$0 >> 2] | 0) == 1) {
    HEAP32[$vararg_buffer1 >> 2] = HEAP32[408 + ($$0 << 2) >> 2];
    _arLog(3, 3326, $vararg_buffer1);
    $$019 = 0;
   } else $$019 = 0;
  }
 }
 STACKTOP = sp;
 return $$019 | 0;
}

function _arCreateHandle($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $19 = 0, $27 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = _malloc(7062432) | 0;
 if (!$1) {
  _arLog(3, 4787, sp);
  _exit(1);
 }
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4834148 >> 2] = 0;
 HEAP32[$1 + 7062408 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = -1;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 1;
 HEAP32[$1 + 16 >> 2] = 100;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 2;
 HEAPF64[$1 + 7062416 >> 3] = .5;
 HEAP32[$1 + 7062424 >> 2] = 3;
 HEAP32[$1 + 32 >> 2] = $0;
 $16 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 + 36 >> 2] = $16;
 $19 = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$1 + 40 >> 2] = $19;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP32[$1 + 15408 >> 2] = 0;
 HEAP32[$1 + 4834152 >> 2] = 0;
 HEAP32[$1 + 4818296 >> 2] = 0;
 $27 = _malloc(Math_imul($16 << 1, $19) | 0) | 0;
 HEAP32[$1 + 4834144 >> 2] = $27;
 if (!$27) {
  _arLog(3, 4787, sp + 8 | 0);
  _exit(1);
 } else {
  HEAP32[$1 + 7062384 >> 2] = 0;
  _arSetPixelFormat($1, 2) | 0;
  _arSetDebugMode($1, 0) | 0;
  HEAP32[$1 + 7062388 >> 2] = -1;
  _arSetLabelingThreshMode($1, 0) | 0;
  _arSetLabelingThreshModeAutoInterval($1, 7) | 0;
  STACKTOP = sp;
  return $1 | 0;
 }
 return 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $29 = 0, $8 = 0;
 if (($1 | 0) == 1) $$0 = 2; else if (!($1 + -1 & $1)) $$0 = $1; else $$0 = __ZNSt3__212__next_primeEj($1) | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 if ($$0 >>> 0 > $8 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $$0); else if ($$0 >>> 0 < $8 >>> 0) {
  $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0;
  if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) $29 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0); else $29 = __ZNSt3__212__next_primeEj($22) | 0;
  $$sroa$speculated = $$0 >>> 0 < $29 >>> 0 ? $29 : $$0;
  if ($$sroa$speculated >>> 0 < $8 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $$sroa$speculated);
 }
 return;
}

function _arGetTransMatRobust($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $6 = sp + 20 | 0;
 $7 = sp;
 $9 = _malloc($4 << 4) | 0;
 HEAP32[$6 >> 2] = $9;
 if (!$9) {
  _arLog(3, 4787, sp + 8 | 0);
  _exit(1);
 }
 $12 = _malloc($4 * 24 | 0) | 0;
 $13 = $6 + 4 | 0;
 HEAP32[$13 >> 2] = $12;
 if (!$12) {
  _arLog(3, 4787, sp + 16 | 0);
  _exit(1);
 } else $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  HEAPF64[$9 + ($$0 << 4) >> 3] = +HEAPF64[$2 + ($$0 << 4) >> 3];
  HEAPF64[$9 + ($$0 << 4) + 8 >> 3] = +HEAPF64[$2 + ($$0 << 4) + 8 >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) + 8 >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) + 8 >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) + 16 >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) + 16 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 HEAP32[$6 + 8 >> 2] = $4;
 if ((_icpPointRobust(HEAP32[$0 >> 2] | 0, $6, $1, $5, $7) | 0) < 0) HEAPF64[$7 >> 3] = 1.0e8;
 _free(HEAP32[$6 >> 2] | 0);
 _free(HEAP32[$13 >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[$7 >> 3]);
}

function _icpUpdateMat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$028 = 0, $$1 = 0, $$129 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $2 = sp + 192 | 0;
 $3 = sp + 96 | 0;
 $4 = sp;
 _icpGetQ_from_S($2, $1);
 _icpGetMat_from_Q($3, $2);
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 3) {
   $$1 = 0;
   break;
  }
  $5 = $0 + ($$0 << 5) | 0;
  $6 = $0 + ($$0 << 5) + 8 | 0;
  $7 = $0 + ($$0 << 5) + 16 | 0;
  $$028 = 0;
  while (1) {
   if (($$028 | 0) == 4) break;
   HEAPF64[$4 + ($$0 << 5) + ($$028 << 3) >> 3] = +HEAPF64[$5 >> 3] * +HEAPF64[$3 + ($$028 << 3) >> 3] + +HEAPF64[$6 >> 3] * +HEAPF64[$3 + 32 + ($$028 << 3) >> 3] + +HEAPF64[$7 >> 3] * +HEAPF64[$3 + 64 + ($$028 << 3) >> 3];
   $$028 = $$028 + 1 | 0;
  }
  $26 = $4 + ($$0 << 5) + 24 | 0;
  HEAPF64[$26 >> 3] = +HEAPF64[$0 + ($$0 << 5) + 24 >> 3] + +HEAPF64[$26 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 while (1) {
  if (($$1 | 0) == 3) break; else $$129 = 0;
  while (1) {
   if (($$129 | 0) == 4) break;
   HEAPF64[$0 + ($$1 << 5) + ($$129 << 3) >> 3] = +HEAPF64[$4 + ($$1 << 5) + ($$129 << 3) >> 3];
   $$129 = $$129 + 1 | 0;
  }
  $$1 = $$1 + 1 | 0;
 }
 STACKTOP = sp;
 return 0;
}

function _arGetTransMat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $6 = sp + 20 | 0;
 $7 = sp;
 $9 = _malloc($4 << 4) | 0;
 HEAP32[$6 >> 2] = $9;
 if (!$9) {
  _arLog(3, 4787, sp + 8 | 0);
  _exit(1);
 }
 $12 = _malloc($4 * 24 | 0) | 0;
 $13 = $6 + 4 | 0;
 HEAP32[$13 >> 2] = $12;
 if (!$12) {
  _arLog(3, 4787, sp + 16 | 0);
  _exit(1);
 } else $$0 = 0;
 while (1) {
  if (($$0 | 0) >= ($4 | 0)) break;
  HEAPF64[$9 + ($$0 << 4) >> 3] = +HEAPF64[$2 + ($$0 << 4) >> 3];
  HEAPF64[$9 + ($$0 << 4) + 8 >> 3] = +HEAPF64[$2 + ($$0 << 4) + 8 >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) + 8 >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) + 8 >> 3];
  HEAPF64[$12 + ($$0 * 24 | 0) + 16 >> 3] = +HEAPF64[$3 + ($$0 * 24 | 0) + 16 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 HEAP32[$6 + 8 >> 2] = $4;
 if ((_icpPoint(HEAP32[$0 >> 2] | 0, $6, $1, $5, $7) | 0) < 0) HEAPF64[$7 >> 3] = 1.0e8;
 _free(HEAP32[$6 >> 2] | 0);
 _free(HEAP32[$13 >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[$7 >> 3]);
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $29 = 0, $8 = 0;
 if (($1 | 0) == 1) $$0 = 2; else if (!($1 + -1 & $1)) $$0 = $1; else $$0 = __ZNSt3__212__next_primeEj($1) | 0;
 $8 = HEAP32[$0 + 4 >> 2] | 0;
 if ($$0 >>> 0 > $8 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $$0); else if ($$0 >>> 0 < $8 >>> 0) {
  $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0;
  if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) $29 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0); else $29 = __ZNSt3__212__next_primeEj($22) | 0;
  $$sroa$speculated = $$0 >>> 0 < $29 >>> 0 ? $29 : $$0;
  if ($$sroa$speculated >>> 0 < $8 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($0, $$sroa$speculated);
 }
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  block_aligned_end = aligned_end - 64 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function ___stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $11 = 0, $18 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $3 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $1;
 $4 = $3 + 4 | 0;
 $5 = $0 + 48 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $2 - (($6 | 0) != 0 & 1);
 $11 = $0 + 44 | 0;
 HEAP32[$3 + 8 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$3 + 12 >> 2] = $6;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $18 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
 if (($18 | 0) < 1) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $18 & 48 ^ 16;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4 >> 2] | 0;
  if ($18 >>> 0 > $24 >>> 0) {
   $27 = HEAP32[$11 >> 2] | 0;
   $28 = $0 + 4 | 0;
   HEAP32[$28 >> 2] = $27;
   HEAP32[$0 + 8 >> 2] = $27 + ($18 - $24);
   if (!(HEAP32[$5 >> 2] | 0)) $$0 = $2; else {
    HEAP32[$28 >> 2] = $27 + 1;
    HEAP8[$1 + ($2 + -1) >> 0] = HEAP8[$27 >> 0] | 0;
    $$0 = $2;
   }
  } else $$0 = $18;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$021 = 0, $$021$ph = 0, $12 = 0, $13 = 0, $18 = 0, $3 = 0, $4 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = $1;
 $4 = sp;
 $6 = $2 - $3 | 0;
 if ($6 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else if ($6 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $6;
  $$021$ph = $0;
 } else label = 5;
 if ((label | 0) == 5) {
  $12 = $6 + 16 & -16;
  $13 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($12) | 0;
  HEAP32[$0 >> 2] = $13;
  HEAP32[$0 + 8 >> 2] = $12 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $6;
  $$021$ph = $13;
 }
 $18 = $2 - $3 | 0;
 $$0 = $1;
 $$021 = $$021$ph;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($$021, $$0);
  $$0 = $$0 + 1 | 0;
  $$021 = $$021 + 1 | 0;
 }
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$021$ph + $18 | 0, $4);
 STACKTOP = sp;
 return;
}

function _icpGetMat_from_Q($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $16 = 0, $3 = 0.0, $4 = 0.0, $40 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $72 = 0.0;
 $3 = +HEAPF64[$1 + 24 >> 3];
 $4 = +Math_cos(+$3);
 $5 = 1.0 - $4;
 $6 = +Math_sin(+$3);
 $7 = +HEAPF64[$1 >> 3];
 HEAPF64[$0 >> 3] = $4 + $5 * ($7 * $7);
 $12 = $1 + 8 | 0;
 $16 = $1 + 16 | 0;
 HEAPF64[$0 + 8 >> 3] = $5 * (+HEAPF64[$1 >> 3] * +HEAPF64[$12 >> 3]) - $6 * +HEAPF64[$16 >> 3];
 HEAPF64[$0 + 16 >> 3] = $5 * (+HEAPF64[$1 >> 3] * +HEAPF64[$16 >> 3]) + $6 * +HEAPF64[$12 >> 3];
 HEAPF64[$0 + 24 >> 3] = +HEAPF64[$1 + 32 >> 3];
 HEAPF64[$0 + 32 >> 3] = $5 * (+HEAPF64[$12 >> 3] * +HEAPF64[$1 >> 3]) + $6 * +HEAPF64[$16 >> 3];
 $40 = +HEAPF64[$12 >> 3];
 HEAPF64[$0 + 40 >> 3] = $4 + $5 * ($40 * $40);
 HEAPF64[$0 + 48 >> 3] = $5 * (+HEAPF64[$12 >> 3] * +HEAPF64[$16 >> 3]) - $6 * +HEAPF64[$1 >> 3];
 HEAPF64[$0 + 56 >> 3] = +HEAPF64[$1 + 40 >> 3];
 HEAPF64[$0 + 64 >> 3] = $5 * (+HEAPF64[$16 >> 3] * +HEAPF64[$1 >> 3]) - $6 * +HEAPF64[$12 >> 3];
 HEAPF64[$0 + 72 >> 3] = $5 * (+HEAPF64[$16 >> 3] * +HEAPF64[$12 >> 3]) + $6 * +HEAPF64[$1 >> 3];
 $72 = +HEAPF64[$16 >> 3];
 HEAPF64[$0 + 80 >> 3] = $4 + $5 * ($72 * $72);
 HEAPF64[$0 + 88 >> 3] = +HEAPF64[$1 + 48 >> 3];
 return;
}

function __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 3) << 3) | 0;
 HEAP32[$5 >> 2] = $11;
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $15 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $15 = $11;
 }
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$$pre$phiZ2D >> 2] = $14;
 $16 = $1 + 8 | 0;
 $17 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 $19 = $0 + 8 | 0;
 $20 = $1 + 12 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $21;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE14__annotate_newEj($0, (HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 3);
 return;
}

function _icpGetDeltaS($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 HEAP32[$4 + 4 >> 2] = 6;
 HEAP32[$4 + 8 >> 2] = 1;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 + 4 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = 1;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 + 4 >> 2] = $3;
 HEAP32[$6 + 8 >> 2] = 6;
 HEAP32[$6 >> 2] = $2;
 $13 = _arMatrixAllocTrans($6) | 0;
 do if (!$13) $$0 = -1; else {
  $15 = _arMatrixAllocMul($13, $6) | 0;
  if (!$15) {
   _arMatrixFree($13) | 0;
   $$0 = -1;
   break;
  }
  $17 = _arMatrixAllocMul($13, $5) | 0;
  if (!$17) {
   _arMatrixFree($13) | 0;
   _arMatrixFree($15) | 0;
   $$0 = -1;
   break;
  }
  if ((_arMatrixSelfInv($15) | 0) < 0) {
   _arMatrixFree($13) | 0;
   _arMatrixFree($15) | 0;
   _arMatrixFree($17) | 0;
   $$0 = -1;
   break;
  } else {
   _arMatrixMul($4, $15, $17) | 0;
   _arMatrixFree($13) | 0;
   _arMatrixFree($15) | 0;
   _arMatrixFree($17) | 0;
   $$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _EX($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$039 = 0, $$040 = 0, $$041 = 0, $$043 = 0, $$1 = 0, $$142 = 0, $$2 = 0, $15 = 0.0, $25 = 0, $3 = 0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if (($3 | 0) < 1 | ($5 | 0) < 1) $$040 = -1; else if ((HEAP32[$1 + 4 >> 2] | 0) == ($5 | 0)) {
  $$039 = 0;
  while (1) {
   if (($$039 | 0) == ($5 | 0)) break;
   HEAPF64[(HEAP32[$1 >> 2] | 0) + ($$039 << 3) >> 3] = 0.0;
   $$039 = $$039 + 1 | 0;
  }
  $$041 = HEAP32[$0 >> 2] | 0;
  $$1 = 0;
  while (1) {
   if (($$1 | 0) == ($3 | 0)) break;
   $$0 = 0;
   $$043 = HEAP32[$1 >> 2] | 0;
   $$142 = $$041;
   while (1) {
    if (($$0 | 0) == ($5 | 0)) break;
    HEAPF64[$$043 >> 3] = +HEAPF64[$$142 >> 3] + +HEAPF64[$$043 >> 3];
    $$0 = $$0 + 1 | 0;
    $$043 = $$043 + 8 | 0;
    $$142 = $$142 + 8 | 0;
   }
   $$041 = $$041 + ($5 << 3) | 0;
   $$1 = $$1 + 1 | 0;
  }
  $15 = +($3 | 0);
  $$2 = 0;
  while (1) {
   if (($$2 | 0) == ($5 | 0)) {
    $$040 = 0;
    break L1;
   }
   $25 = (HEAP32[$1 >> 2] | 0) + ($$2 << 3) | 0;
   HEAPF64[$25 >> 3] = +HEAPF64[$25 >> 3] / $15;
   $$2 = $$2 + 1 | 0;
  }
 } else $$040 = -1; while (0);
 return $$040 | 0;
}

function _getTransMatMultiSquareRobust($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $18 = 0, $2 = 0, $22 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0)) $$1 = HEAP32[417] | 0; else {
  $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0;
  $10 = HEAP32[$6 + 248 >> 2] | 0;
  if (($1 | 0) < 0 ? 1 : (HEAP32[$6 + 252 >> 2] | 0) - $10 >> 3 >>> 0 <= $1 >>> 0) {
   $$1 = HEAP32[418] | 0;
   break;
  } else {
   $18 = HEAP32[$10 + ($1 << 3) + 4 >> 2] | 0;
   $22 = HEAP32[$6 + 212 >> 2] | 0;
   +_arGetTransMatMultiSquareRobust(HEAP32[$6 + 224 >> 2] | 0, $22 + 48 | 0, HEAP32[$22 + 44 >> 2] | 0, $18);
   _matrixCopy($18 + 8 | 0, 17184);
   $$1 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029 = 0, $$1 = 0, $13 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, $$029$looptemp = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else {
  $3 = HEAP8[$0 >> 0] | 0;
  $5 = $0 + 1 | 0;
  if ($3 << 24 >> 24 != 95) {
   if ((($3 << 24 >> 24) + -48 | 0) >>> 0 < 10) $$0 = $5; else {
    $$1 = $0;
    break;
   }
   while (1) {
    if (($$0 | 0) == ($1 | 0)) {
     $$1 = $1;
     break L1;
    }
    if (((HEAP8[$$0 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $$1 = $$0;
     break L1;
    }
    $$0 = $$0 + 1 | 0;
   }
  }
  if (($5 | 0) == ($1 | 0)) $$1 = $0; else {
   $7 = HEAP8[$5 >> 0] | 0;
   $9 = $0 + 2 | 0;
   if ((($7 << 24 >> 24) + -48 | 0) >>> 0 < 10) $$1 = $9; else if ($7 << 24 >> 24 == 95) {
    $$029 = $9;
    do {
     $$029$looptemp = $$029;
     $$029 = $$029 + 1 | 0;
     if (($$029$looptemp | 0) == ($1 | 0)) {
      $$1 = $0;
      break L1;
     }
     $13 = HEAP8[$$029$looptemp >> 0] | 0;
    } while ((($13 << 24 >> 24) + -48 | 0) >>> 0 < 10);
    return ($13 << 24 >> 24 == 95 ? $$029 : $0) | 0;
   } else $$1 = $0;
  }
 } while (0);
 return $$1 | 0;
}

function _getTransMatMultiSquare($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $18 = 0, $2 = 0, $22 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0)) $$1 = HEAP32[417] | 0; else {
  $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0;
  $10 = HEAP32[$6 + 248 >> 2] | 0;
  if (($1 | 0) < 0 ? 1 : (HEAP32[$6 + 252 >> 2] | 0) - $10 >> 3 >>> 0 <= $1 >>> 0) {
   $$1 = HEAP32[418] | 0;
   break;
  } else {
   $18 = HEAP32[$10 + ($1 << 3) + 4 >> 2] | 0;
   $22 = HEAP32[$6 + 212 >> 2] | 0;
   +_arGetTransMatMultiSquare(HEAP32[$6 + 224 >> 2] | 0, $22 + 48 | 0, HEAP32[$22 + 44 >> 2] | 0, $18);
   _matrixCopy($18 + 8 | 0, 17184);
   $$1 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$022 = 0, $$pn = 0, $$sroa$0$0 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!$4) $$sroa$0$0 = 0; else {
  $6 = $4 + -1 | 0;
  $8 = ($6 & $4 | 0) == 0;
  if ($8) $13 = $6 & $2; else $13 = ($2 >>> 0) % ($4 >>> 0) | 0;
  $14 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($13 << 2) >> 2] | 0;
  if (!$14) $$sroa$0$0 = 0; else {
   $$pn = $14;
   while (1) {
    $$022 = HEAP32[$$pn >> 2] | 0;
    if (!$$022) {
     $$sroa$0$0 = 0;
     break L1;
    }
    $18 = HEAP32[$$022 + 4 >> 2] | 0;
    if ($8) $22 = $18 & $6; else $22 = ($18 >>> 0) % ($4 >>> 0) | 0;
    if (($22 | 0) != ($13 | 0)) {
     $$sroa$0$0 = 0;
     break L1;
    }
    if ((HEAP32[$$022 + 8 >> 2] | 0) == ($2 | 0)) {
     $$sroa$0$0 = $$022;
     break;
    } else $$pn = $$022;
   }
  }
 } while (0);
 return $$sroa$0$0 | 0;
}

function _setup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $6 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $3 = sp + 12 | 0;
 $4 = HEAP32[4337] | 0;
 HEAP32[4337] = $4 + 1;
 HEAP32[$3 >> 2] = $4;
 $6 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $3) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$6 + 204 >> 2] = $0;
 HEAP32[$6 + 208 >> 2] = $1;
 $11 = Math_imul($0 << 2, $1) | 0;
 $12 = $6 + 200 | 0;
 HEAP32[$12 >> 2] = $11;
 $13 = _malloc($11) | 0;
 $14 = $6 + 196 | 0;
 HEAP32[$14 >> 2] = $13;
 $15 = _arPattCreateHandle() | 0;
 HEAP32[$6 + 216 >> 2] = $15;
 if (!$15) _arLog(3, 9766, sp);
 _setCamera(HEAP32[$3 >> 2] | 0, $2) | 0;
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$12 >> 2];
 _arLog(1, 9803, $vararg_buffer1);
 _emscripten_asm_const_iiiiii(0, HEAP32[$6 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$12 >> 2] | 0, $6 + 264 | 0, 17184) | 0;
 STACKTOP = sp;
 return HEAP32[$6 >> 2] | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$022 = 0, $$pn = 0, $$sroa$0$0 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!$4) $$sroa$0$0 = 0; else {
  $6 = $4 + -1 | 0;
  $8 = ($6 & $4 | 0) == 0;
  if ($8) $13 = $6 & $2; else $13 = ($2 >>> 0) % ($4 >>> 0) | 0;
  $14 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($13 << 2) >> 2] | 0;
  if (!$14) $$sroa$0$0 = 0; else {
   $$pn = $14;
   while (1) {
    $$022 = HEAP32[$$pn >> 2] | 0;
    if (!$$022) {
     $$sroa$0$0 = 0;
     break L1;
    }
    $18 = HEAP32[$$022 + 4 >> 2] | 0;
    if ($8) $22 = $18 & $6; else $22 = ($18 >>> 0) % ($4 >>> 0) | 0;
    if (($22 | 0) != ($13 | 0)) {
     $$sroa$0$0 = 0;
     break L1;
    }
    if ((HEAP32[$$022 + 8 >> 2] | 0) == ($2 | 0)) {
     $$sroa$0$0 = $$022;
     break;
    } else $$pn = $$022;
   }
  }
 } while (0);
 return $$sroa$0$0 | 0;
}

function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $56 = 0, $7 = 0;
 do if (!$0) $$0 = 1; else {
  if ($1 >>> 0 < 128) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  }
  $7 = (___pthread_self_431() | 0) + 188 | 0;
  if (!(HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) if (($1 & -128 | 0) == 57216) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  } else {
   $12 = ___errno_location() | 0;
   HEAP32[$12 >> 2] = 84;
   $$0 = -1;
   break;
  }
  if ($1 >>> 0 < 2048) {
   HEAP8[$0 >> 0] = $1 >>> 6 | 192;
   HEAP8[$0 + 1 >> 0] = $1 & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
   HEAP8[$0 >> 0] = $1 >>> 12 | 224;
   HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($1 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$0 >> 0] = $1 >>> 18 | 240;
   HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 3 >> 0] = $1 & 63 | 128;
   $$0 = 4;
   break;
  } else {
   $56 = ___errno_location() | 0;
   HEAP32[$56 >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _fopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!(_memchr(14122, HEAP8[$1 >> 0] | 0, 4) | 0)) {
  $5 = ___errno_location() | 0;
  HEAP32[$5 >> 2] = 22;
  $$0 = 0;
 } else {
  $6 = ___fmodeflags($1) | 0;
  HEAP32[$vararg_buffer >> 2] = $0;
  HEAP32[$vararg_buffer + 4 >> 2] = $6 | 32768;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $10 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($10 | 0) < 0) $$0 = 0; else {
   if ($6 & 524288 | 0) {
    HEAP32[$vararg_buffer3 >> 2] = $10;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 2;
    HEAP32[$vararg_buffer3 + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer3 | 0) | 0;
   }
   $14 = ___fdopen($10, $1) | 0;
   if (!$14) {
    HEAP32[$vararg_buffer8 >> 2] = $10;
    ___syscall6(6, $vararg_buffer8 | 0) | 0;
    $$0 = 0;
   } else $$0 = $14;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $15 = 0, $17 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $14 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  $15 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $14 = 10;
  $15 = $5 & 255;
 }
 $17 = $15 + $2 | 0;
 if (($14 - $15 | 0) >>> 0 < $2 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $14, $17 - $14 | 0, $15, $15, 0, $2, $1); else if ($2 | 0) {
  if ($6) $21 = HEAP32[$0 >> 2] | 0; else $21 = $0;
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($21 + $15 | 0, $1, $2) | 0;
  if ((HEAP8[$4 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $17; else HEAP8[$4 >> 0] = $17;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($21 + $17 | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $26 = 0, $29 = 0, $7 = 0, $phitmp = 0;
 do if (!$0) {
  if (!(HEAP32[623] | 0)) $29 = 0; else $29 = _fflush(HEAP32[623] | 0) | 0;
  $12 = ___ofl_lock() | 0;
  $$02325 = HEAP32[$12 >> 2] | 0;
  if (!$$02325) $$024$lcssa = $29; else {
   $$02327 = $$02325;
   $$02426 = $29;
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) $26 = ___lockfile($$02327) | 0; else $26 = 0;
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) $$1 = ___fflush_unlocked($$02327) | 0 | $$02426; else $$1 = $$02426;
    if ($26 | 0) ___unlockfile($$02327);
    $$02327 = HEAP32[$$02327 + 56 >> 2] | 0;
    if (!$$02327) {
     $$024$lcssa = $$1;
     break;
    } else $$02426 = $$1;
   }
  }
  ___ofl_unlock();
  $$0 = $$024$lcssa;
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
   $$0 = ___fflush_unlocked($0) | 0;
   break;
  }
  $phitmp = (___lockfile($0) | 0) == 0;
  $7 = ___fflush_unlocked($0) | 0;
  if ($phitmp) $$0 = $7; else {
   ___unlockfile($0);
   $$0 = $7;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE14__erase_uniqueIiEEjRKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $$byval_copy = sp + 4 | 0;
 $2 = sp;
 $3 = __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($0, $1) | 0;
 if (!$3) $$0 = 0; else {
  HEAP32[$2 >> 2] = $3;
  HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($0, $$byval_copy) | 0;
  $$0 = 1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$sroa$speculated = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0;
 if ((-17 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $22 = HEAP32[$0 >> 2] | 0; else $22 = $0;
 if ($1 >>> 0 < 2147483623) {
  $13 = $2 + $1 | 0;
  $14 = $1 << 1;
  $$sroa$speculated = $13 >>> 0 < $14 >>> 0 ? $14 : $13;
  $19 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $19 = -17;
 $20 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($19) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($20, $22, $4) | 0;
 $23 = $3 - $4 | 0;
 if ($23 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($20 + $4 + $5 | 0, $22 + $4 | 0, $23) | 0;
 if (($1 | 0) != 10) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($22);
 HEAP32[$0 >> 2] = $20;
 HEAP32[$0 + 8 >> 2] = $19 | -2147483648;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($2, $1);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $5 = HEAP32[$2 >> 2] | 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = $5;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2, $1);
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($0 + 16 | 0, $2);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2, $1);
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($0 + 32 | 0, $2);
 STACKTOP = sp;
 return;
}

function _atoi($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $1 = 0, $10 = 0, $2 = 0, $5 = 0, $7 = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0;
 $$011 = $0;
 while (1) {
  $1 = HEAP8[$$011 >> 0] | 0;
  $2 = $1 << 24 >> 24;
  $5 = $$011 + 1 | 0;
  if (!(_isspace($2) | 0)) break; else $$011 = $5;
 }
 switch ($2 | 0) {
 case 45:
  {
   $$0 = 1;
   label = 5;
   break;
  }
 case 43:
  {
   $$0 = 0;
   label = 5;
   break;
  }
 default:
  {
   $$1$ph = 0;
   $$112$ph = $$011;
   $7 = $1;
  }
 }
 if ((label | 0) == 5) {
  $$1$ph = $$0;
  $$112$ph = $5;
  $7 = HEAP8[$5 >> 0] | 0;
 }
 $isdigittmp13 = ($7 << 24 >> 24) + -48 | 0;
 if ($isdigittmp13 >>> 0 < 10) {
  $$01016 = 0;
  $$11215 = $$112$ph;
  $isdigittmp17 = $isdigittmp13;
  while (1) {
   $$11215 = $$11215 + 1 | 0;
   $10 = ($$01016 * 10 | 0) - $isdigittmp17 | 0;
   $isdigittmp17 = (HEAP8[$$11215 >> 0] | 0) + -48 | 0;
   if ($isdigittmp17 >>> 0 >= 10) {
    $$010$lcssa = $10;
    break;
   } else $$01016 = $10;
  }
 } else $$010$lcssa = 0;
 return ($$1$ph | 0 ? $$010$lcssa : 0 - $$010$lcssa | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) $11 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $11 = 10;
 do if ($11 >>> 0 < $2 >>> 0) {
  if ($6) $23 = HEAP32[$0 + 4 >> 2] | 0; else $23 = $5 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $11, $2 - $11 | 0, $23, 0, $23, $2, $1);
 } else {
  if ($6) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
  __ZNSt3__211char_traitsIcE4moveEPcPKcj($13, $1, $2) | 0;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($13 + $2 | 0, $3);
  if ((HEAP8[$4 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $2;
   break;
  } else {
   HEAP8[$4 >> 0] = $2;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$byval_copy = sp + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 $4 = HEAP32[$1 >> 2] | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6removeENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($2, $0, $$byval_copy);
 $7 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = 0;
 if ($7 | 0) {
  if (HEAP8[$2 + 8 >> 0] | 0) __ZNSt3__24pairIKi12arControllerED2Ev($7 + 8 | 0);
  __ZdlPv($7);
 }
 STACKTOP = sp;
 return $6 | 0;
}

function _icpGetJ_U_S($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$024 = 0, $$025 = 0, $$026 = 0, $15 = 0.0, $16 = 0.0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $4 = sp + 72 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 _icpGetJ_Xc_S($4, $6, $2, $3);
 L1 : do if ((_icpGetJ_U_Xc($5, $1, $6) | 0) < 0) {
  _arLog(3, 4405, sp + 216 | 0);
  $$026 = -1;
 } else {
  $$024 = 0;
  while (1) {
   if (($$024 | 0) == 2) {
    $$026 = 0;
    break L1;
   } else $$025 = 0;
   while (1) {
    if (($$025 | 0) == 6) break;
    $9 = $0 + ($$024 * 48 | 0) + ($$025 << 3) | 0;
    HEAPF64[$9 >> 3] = 0.0;
    $$0 = 0;
    $16 = 0.0;
    while (1) {
     if (($$0 | 0) == 3) break;
     $15 = $16 + +HEAPF64[$5 + ($$024 * 24 | 0) + ($$0 << 3) >> 3] * +HEAPF64[$4 + ($$0 * 48 | 0) + ($$025 << 3) >> 3];
     HEAPF64[$9 >> 3] = $15;
     $$0 = $$0 + 1 | 0;
     $16 = $15;
    }
    $$025 = $$025 + 1 | 0;
   }
   $$024 = $$024 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$026 | 0;
}

function _addMarker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $12 = 0, $2 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0)) $$1 = -1; else {
  $5 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0;
  if ((HEAP8[$1 + 11 >> 0] | 0) < 0) $12 = HEAP32[$1 >> 2] | 0; else $12 = $1;
  $10 = $5 + 260 | 0;
  if (!(__ZL10loadMarkerPKcPiP8ARHandlePP12ARPattHandle($12, $10, $5 + 216 | 0) | 0)) {
   _arLog(3, 9670, $vararg_buffer);
   $$1 = -1;
   break;
  } else {
   $$1 = HEAP32[$10 >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$026$off0 = 0, $$027 = 0, $$1 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0;
 if (($1 - $0 | 0) > 1) {
  if ((HEAP8[$0 >> 0] | 0) == 83) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
   $12 = $0 + 2 | 0;
   if (($12 | 0) == ($1 | 0)) {
    $$026$off0 = 0;
    $$027 = $1;
   } else {
    $$026$off0 = 0;
    $$027 = (HEAP8[$12 >> 0] | 0) == 76 ? $0 + 3 | 0 : $12;
   }
  } else {
   $$026$off0 = 1;
   $$027 = $0;
  } else {
   $$026$off0 = 1;
   $$027 = $0;
  }
  $17 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$027, $1, $2) | 0;
  $18 = ($17 | 0) == ($$027 | 0);
  if ($$026$off0 | $18) $$1 = $18 ? $0 : $17; else {
   $21 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$1 = $0; else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($21 + -24 | 0, 0, 15343) | 0;
    $$1 = $17;
   }
  }
 } else $$1 = $0;
 return $$1 | 0;
}

function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $$0914 = $$0914 + -1 | 0;
   HEAP8[$$0914 >> 0] = $10 & 255 | 48;
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) break; else $9 = tempRet0;
  }
  $$010$lcssa$off0 = $8;
  $$09$lcssa = $$0914;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 if (!$$010$lcssa$off0) $$1$lcssa = $$09$lcssa; else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $26 = $$111 + -1 | 0;
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48;
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0;
    $$111 = $26;
   }
  }
 }
 return $$1$lcssa | 0;
}

function _arUtilMatInv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$030 = 0, $$1 = 0, $$131 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $3 = 0;
 $2 = _arMatrixAlloc(4, 4) | 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 3) break;
  $3 = $$0 << 2;
  $$030 = 0;
  while (1) {
   if (($$030 | 0) == 4) break;
   HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$030 + $3 << 3) >> 3] = +HEAPF64[$0 + ($$0 << 5) + ($$030 << 3) >> 3];
   $$030 = $$030 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 }
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = $11 + 96 | 0;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$12 + 4 >> 2] = 0;
 HEAP32[$12 + 8 >> 2] = 0;
 HEAP32[$12 + 12 >> 2] = 0;
 HEAP32[$12 + 16 >> 2] = 0;
 HEAP32[$12 + 20 >> 2] = 0;
 HEAPF64[$11 + 120 >> 3] = 1.0;
 _arMatrixSelfInv($2) | 0;
 $$1 = 0;
 while (1) {
  if (($$1 | 0) == 3) break;
  $14 = $$1 << 2;
  $$131 = 0;
  while (1) {
   if (($$131 | 0) == 4) break;
   HEAPF64[$1 + ($$1 << 5) + ($$131 << 3) >> 3] = +HEAPF64[(HEAP32[$2 >> 2] | 0) + ($$131 + $14 << 3) >> 3];
   $$131 = $$131 + 1 | 0;
  }
  $$1 = $$1 + 1 | 0;
 }
 _arMatrixFree($2) | 0;
 return 0;
}

function _arPattLoad($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $2 = _fopen($1, 4170) | 0;
 do if (!$2) {
  HEAP32[$vararg_buffer >> 2] = $1;
  _arLog(3, 4090, $vararg_buffer);
  $$0 = -1;
 } else {
  _fseek($2, 0, 2) | 0;
  $4 = _ftell($2) | 0;
  _fseek($2, 0, 0) | 0;
  $6 = _malloc($4 + 1 | 0) | 0;
  if (!$6) {
   _arLog(3, 4787, $vararg_buffer1);
   _fclose($2) | 0;
   $$0 = -1;
   break;
  }
  $8 = _fread($6, $4, 1, $2) | 0;
  _fclose($2) | 0;
  if (!$8) {
   HEAP32[$vararg_buffer3 >> 2] = $1;
   _arLog(3, 4136, $vararg_buffer3);
   _free($6);
   $$0 = -1;
   break;
  } else {
   HEAP8[$6 + $4 >> 0] = 0;
   $11 = _arPattLoadFromBuffer($0, $6) | 0;
   _free($6);
   $$0 = $11;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _getTransMatSquareCont($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $3) | 0)) $$1 = HEAP32[417] | 0; else {
  $7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $3) | 0;
  $9 = HEAP32[$7 + 212 >> 2] | 0;
  if ((HEAP32[$9 + 44 >> 2] | 0) > ($1 | 0)) {
   +_arGetTransMatSquareCont(HEAP32[$7 + 224 >> 2] | 0, ($1 | 0) < 0 ? 16928 : $9 + 48 + ($1 << 8) | 0, 17184, +($2 | 0), 17184);
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[419] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $3 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $3 = sp;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) $$2 = 1; else if (!$1) $$2 = 0; else {
  $6 = ___dynamic_cast($1, 216, 200, 0) | 0;
  if (!$6) $$2 = 0; else {
   dest = $3 + 4 | 0;
   stop = dest + 52 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 8 >> 2] = $0;
   HEAP32[$3 + 12 >> 2] = -1;
   HEAP32[$3 + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 3]($6, $3, HEAP32[$2 >> 2] | 0, 1);
   if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
    HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2];
    $$0 = 1;
   } else $$0 = 0;
   $$2 = $$0;
  }
 }
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $26 = 0;
 HEAP8[$1 + 53 >> 0] = 1;
 do if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
  HEAP8[$1 + 52 >> 0] = 1;
  $10 = $1 + 16 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $13 = $1 + 54 | 0;
  $14 = $1 + 48 | 0;
  $15 = $1 + 24 | 0;
  $16 = $1 + 36 | 0;
  if (!$11) {
   HEAP32[$10 >> 2] = $2;
   HEAP32[$15 >> 2] = $4;
   HEAP32[$16 >> 2] = 1;
   if (!((HEAP32[$14 >> 2] | 0) == 1 & ($4 | 0) == 1)) break;
   HEAP8[$13 >> 0] = 1;
   break;
  }
  if (($11 | 0) != ($2 | 0)) {
   HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
   HEAP8[$13 >> 0] = 1;
   break;
  }
  $21 = HEAP32[$15 >> 2] | 0;
  if (($21 | 0) == 2) {
   HEAP32[$15 >> 2] = $4;
   $26 = $4;
  } else $26 = $21;
  if ((HEAP32[$14 >> 2] | 0) == 1 & ($26 | 0) == 1) HEAP8[$13 >> 0] = 1;
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$3 = 0, $12 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$3 = $0; else {
  $5 = $0 + 1 | 0;
  switch (HEAP8[$0 >> 0] | 0) {
  case 104:
   {
    $6 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($5, $1) | 0;
    if (($6 | 0) == ($5 | 0) | ($6 | 0) == ($1 | 0)) {
     $$3 = $0;
     break L1;
    }
    return ((HEAP8[$6 >> 0] | 0) == 95 ? $6 + 1 | 0 : $0) | 0;
   }
  case 118:
   break;
  default:
   {
    $$3 = $0;
    break L1;
   }
  }
  $12 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($5, $1) | 0;
  if (($12 | 0) == ($5 | 0) | ($12 | 0) == ($1 | 0)) $$3 = $0; else if ((HEAP8[$12 >> 0] | 0) == 95) {
   $17 = $12 + 1 | 0;
   $18 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($17, $1) | 0;
   if (($18 | 0) == ($17 | 0) | ($18 | 0) == ($1 | 0)) $$3 = $0; else $$3 = (HEAP8[$18 >> 0] | 0) == 95 ? $18 + 1 | 0 : $0;
  } else $$3 = $0;
 } while (0);
 return $$3 | 0;
}

function _getTransMatSquare($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $3) | 0)) $$1 = HEAP32[417] | 0; else {
  $7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $3) | 0;
  $9 = HEAP32[$7 + 212 >> 2] | 0;
  if ((HEAP32[$9 + 44 >> 2] | 0) > ($1 | 0)) {
   +_arGetTransMatSquare(HEAP32[$7 + 224 >> 2] | 0, ($1 | 0) < 0 ? 16928 : $9 + 48 + ($1 << 8) | 0, +($2 | 0), 17184);
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[419] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $14 = 0, $18 = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
  $13 = $1 + 32 | 0;
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $14 = $1 + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$13 >> 2] = $3;
    HEAP32[$14 >> 2] = $2;
    $18 = $1 + 40 | 0;
    HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
    if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) HEAP8[$1 + 54 >> 0] = 1;
    HEAP32[$1 + 44 >> 2] = 4;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$13 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $$0$i = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($2 | 0)) break;
  $9 = $$0$i + -24 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_((HEAP32[$5 >> 2] | 0) + -24 | 0, $9);
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -24;
  $$0$i = $9;
 }
 $12 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $12;
 $14 = $1 + 8 | 0;
 $15 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$14 >> 2] = $15;
 $17 = $0 + 8 | 0;
 $18 = $1 + 12 | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$18 >> 2] = $19;
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 return;
}

function _setMarkerInfoDir($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $3) | 0)) $$1 = HEAP32[417] | 0; else {
  $8 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $3) | 0) + 212 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$9 + 44 >> 2] | 0) > ($1 | 0)) {
   HEAP32[(($1 | 0) < 0 ? 16928 : $9 + 48 + ($1 << 8) | 0) + 16 >> 2] = $2;
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[419] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _loadCamera($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $vararg_buffer1 = sp + 192 | 0;
 $vararg_buffer = sp + 184 | 0;
 $1 = sp;
 $2 = $0 + 11 | 0;
 if ((HEAP8[$2 >> 0] | 0) < 0) $6 = HEAP32[$0 >> 2] | 0; else $6 = $0;
 if ((_arParamLoad($6, 1, $1, $vararg_buffer) | 0) < 0) {
  if ((HEAP8[$2 >> 0] | 0) < 0) $12 = HEAP32[$0 >> 2] | 0; else $12 = $0;
  HEAP32[$vararg_buffer1 >> 2] = $12;
  _arLog(3, 9530, $vararg_buffer1);
  $$0 = -1;
 } else {
  $13 = HEAP32[4336] | 0;
  HEAP32[4336] = $13 + 1;
  HEAP32[$vararg_buffer >> 2] = $13;
  _memcpy(__ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17324, $vararg_buffer) | 0, $1 | 0, 184) | 0;
  $$0 = HEAP32[$vararg_buffer >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $24 = 0, $25 = 0, $31 = 0, $5 = 0, $6 = 0, label = 0;
 $5 = $0 & 255;
 $6 = $0 & 255;
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($1) | 0)) label = 3; else {
  if (($6 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) label = 10; else {
   $24 = $1 + 20 | 0;
   $25 = HEAP32[$24 >> 2] | 0;
   if ($25 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$24 >> 2] = $25 + 1;
    HEAP8[$25 >> 0] = $5;
    $31 = $6;
   } else label = 10;
  }
  if ((label | 0) == 10) $31 = ___overflow($1, $0) | 0;
  ___unlockfile($1);
  $$0 = $31;
 }
 do if ((label | 0) == 3) {
  if (($6 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
   $13 = $1 + 20 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$13 >> 2] = $14 + 1;
    HEAP8[$14 >> 0] = $5;
    $$0 = $6;
    break;
   }
  }
  $$0 = ___overflow($1, $0) | 0;
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 if ($3 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else if ($3 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else label = 5;
 if ((label | 0) == 5) {
  $10 = $3 + 16 & -16;
  $11 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($10) | 0;
  HEAP32[$0 >> 2] = $11;
  HEAP32[$0 + 8 >> 2] = $10 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $11;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0, $1, $2) | 0;
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $4);
 STACKTOP = sp;
 return;
}

function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0;
 L1 : do if (!($1 & 3)) {
  $$015$lcssa = $0;
  label = 4;
 } else {
  $$01519 = $0;
  $23 = $1;
  while (1) {
   if (!(HEAP8[$$01519 >> 0] | 0)) {
    $$sink = $23;
    break L1;
   }
   $6 = $$01519 + 1 | 0;
   $23 = $6;
   if (!($23 & 3)) {
    $$015$lcssa = $6;
    label = 4;
    break;
   } else $$01519 = $6;
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa;
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0;
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) $$0 = $$0 + 4 | 0; else break;
  }
  if (!(($10 & 255) << 24 >> 24)) $$1$lcssa = $$0; else {
   $$pn = $$0;
   while (1) {
    $19 = $$pn + 1 | 0;
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19;
     break;
    } else $$pn = $19;
   }
  }
  $$sink = $$1$lcssa;
 }
 return $$sink - $1 | 0;
}

function _setPattRatio($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $10 = 0, $2 = 0, $5 = 0, $8 = 0.0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0) {
  $5 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0;
  if (!($1 <= 0.0 | $1 >= 1.0)) {
   $8 = $1;
   $10 = HEAP32[$5 + 212 >> 2] | 0;
   if ($10 | 0) if (!(_arSetPattRatio($10, $8) | 0)) {
    HEAPF64[$vararg_buffer >> 3] = $8;
    _arLog(1, 7651, $vararg_buffer);
   }
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $9 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $9 = HEAP32[$0 + 12 >> 2] | 0;
  $10 = $0 + 16 + ($9 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3);
  if (($9 | 0) > 1) {
   $13 = $1 + 54 | 0;
   $$0 = $0 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3);
    if (HEAP8[$13 >> 0] | 0) break L1;
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $10 >>> 0);
  }
 } while (0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if ($2 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else if ($2 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else label = 5;
 if ((label | 0) == 5) {
  $9 = $2 + 16 & -16;
  $10 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $3);
 STACKTOP = sp;
 return;
}

function _setDebugMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0)) $$0 = 0; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 212 | 0;
  $8 = ($1 | 0) != 0;
  _arSetDebugMode(HEAP32[$6 >> 2] | 0, $8 & 1) | 0;
  HEAP32[$vararg_buffer >> 2] = $8 ? 7785 : 7789;
  _arLog(1, 7794, $vararg_buffer);
  $$0 = $1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _getMultiMarkerNum($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0)) $$1 = -1; else {
  $5 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0;
  if (($1 | 0) < 0) $$1 = -1; else {
   $10 = HEAP32[$5 + 248 >> 2] | 0;
   if ((HEAP32[$5 + 252 >> 2] | 0) - $10 >> 3 >>> 0 > $1 >>> 0) $$1 = HEAP32[(HEAP32[$10 + ($1 << 3) + 4 >> 2] | 0) + 4 >> 2] | 0; else $$1 = -1;
  }
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _cycle($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$02527 = 0, $$026 = 0, $10 = 0, $11 = 0, $18 = 0, $3 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $3 = sp;
 L1 : do if (($2 | 0) >= 2) {
  $5 = $1 + ($2 << 2) | 0;
  HEAP32[$5 >> 2] = $3;
  if ($0 | 0) {
   $$02527 = $0;
   $10 = $3;
   while (1) {
    $8 = $$02527 >>> 0 < 256 ? $$02527 : 256;
    _memcpy($10 | 0, HEAP32[$1 >> 2] | 0, $8 | 0) | 0;
    $$026 = 0;
    do {
     $11 = $1 + ($$026 << 2) | 0;
     $$026 = $$026 + 1 | 0;
     _memcpy(HEAP32[$11 >> 2] | 0, HEAP32[$1 + ($$026 << 2) >> 2] | 0, $8 | 0) | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + $8;
    } while (($$026 | 0) != ($2 | 0));
    $18 = $$02527 - $8 | 0;
    if (!$18) break L1;
    $$02527 = $18;
    $10 = HEAP32[$5 >> 2] | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = $1 & 255;
 HEAP8[$2 >> 0] = $3;
 $4 = $0 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!$5) if (!(___towrite($0) | 0)) {
  $12 = HEAP32[$4 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $12 = $5;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $9 = $0 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) {
   $13 = $1 & 255;
   if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
    HEAP32[$9 >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $3;
    $$0 = $13;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, $2, 1) | 0) == 1) $$0 = HEAPU8[$2 >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($0) {
 $0 = $0 | 0;
 var $$sroa$speculated = 0, $1 = 0, $10 = 0, $13 = 0, $15 = 0, $2 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = $0 + 11 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 if ($3 << 24 >> 24 < 0) {
  $13 = HEAP32[$0 >> 2] | 0;
  $9 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $13 = $0;
  $9 = $3 & 255;
 }
 $$sroa$speculated = ($9 | 0) != 0 & 1;
 $10 = $9 - $$sroa$speculated | 0;
 if (!$10) $15 = $3; else {
  __ZNSt3__211char_traitsIcE4moveEPcPKcj($13, $13 + $$sroa$speculated | 0, $10) | 0;
  $15 = HEAP8[$2 >> 0] | 0;
 }
 if ($15 << 24 >> 24 < 0) HEAP32[$0 + 4 >> 2] = $10; else HEAP8[$2 >> 0] = $10;
 HEAP8[$1 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($13 + $10 | 0, $1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $5 = $1 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $11 = $6 << 24 >> 24 < 0 ? HEAP32[$1 + 4 >> 2] | 0 : $6 & 255;
 $12 = __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($0, (HEAP8[$5 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1, $11, $11 + $12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, $2, $12) | 0;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $5 = __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0;
 $6 = $2 + 11 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $12 = $7 << 24 >> 24 < 0 ? HEAP32[$2 + 4 >> 2] | 0 : $7 & 255;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($0, $1, $5, $12 + $5 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, (HEAP8[$6 >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2, $12) | 0;
 return;
}

function _arImageProcLumaHistAndCDFAndPercentile($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$0 = 0, $$024 = 0, $$025 = 0, $15 = 0, $16 = 0, $18 = 0, $22 = 0, $23 = 0, $6 = 0;
 if ($2 < 0.0 | $2 > 1.0) $$025 = -1; else {
  $6 = _arImageProcLumaHistAndCDF($0, $1) | 0;
  if (($6 | 0) < 0) $$025 = $6; else {
   $15 = ~~(+(Math_imul(HEAP32[$0 + 12 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0) * $2) >>> 0;
   $$024 = 0;
   while (1) {
    $16 = $$024 & 255;
    $18 = HEAP32[$0 + 1040 + ($16 << 2) >> 2] | 0;
    if ($18 >>> 0 < $15 >>> 0) $$024 = $$024 + 1 << 24 >> 24; else {
     $$0 = $$024;
     $22 = $18;
     break;
    }
   }
   while (1) {
    $23 = $$0 + 1 << 24 >> 24;
    if (($22 | 0) != ($15 | 0)) break;
    $$0 = $23;
    $22 = HEAP32[$0 + 1040 + (($23 & 255) << 2) >> 2] | 0;
   }
   HEAP8[$3 >> 0] = (($$0 & 255) + $16 | 0) >>> 1;
   $$025 = 0;
  }
 }
 return $$025 | 0;
}

function _getPattRatio($0) {
 $0 = $0 | 0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $10 = 0, $2 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp + 8 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$1 = -1.0; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if (!$7) $$0 = -1.0; else {
   $10 = (_arGetPattRatio($7, $2) | 0) == 0;
   $$0 = $10 ? +HEAPF64[$2 >> 3] : -1.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else switch (HEAP8[$0 >> 0] | 0) {
 case 68:
 case 67:
  {
   $$1 = __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 case 85:
  {
   $$1 = __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
  {
   $$1 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 default:
  return __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
 } while (0);
 return $$1 | 0;
}

function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $4 = 0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8988465674311579538646525.0e283;
  $4 = $1 + -1023 | 0;
  $5 = ($4 | 0) > 1023;
  $7 = $1 + -2046 | 0;
  $$0 = $5 ? $3 * 8988465674311579538646525.0e283 : $3;
  $$020 = $5 ? (($7 | 0) < 1023 ? $7 : 1023) : $4;
 } else if (($1 | 0) < -1022) {
  $10 = $0 * 2.2250738585072014e-308;
  $11 = $1 + 1022 | 0;
  $12 = ($11 | 0) < -1022;
  $14 = $1 + 2044 | 0;
  $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10;
  $$020 = $12 ? (($14 | 0) > -1022 ? $14 : -1022) : $11;
 } else {
  $$0 = $0;
  $$020 = $1;
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0;
 $18 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $17;
 HEAP32[tempDoublePtr + 4 >> 2] = $18;
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0;
 while (1) {
  if ((HEAPU8[12217 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2;
   break;
  }
  $7 = $$016 + 1 | 0;
  if (($7 | 0) == 87) {
   $$01214 = 12305;
   $$115 = 87;
   label = 5;
   break;
  } else $$016 = $7;
 }
 if ((label | 0) == 2) if (!$$016) $$012$lcssa = 12305; else {
  $$01214 = 12305;
  $$115 = $$016;
  label = 5;
 }
 if ((label | 0) == 5) while (1) {
  label = 0;
  $$113 = $$01214;
  do {
   $$113$looptemp = $$113;
   $$113 = $$113 + 1 | 0;
  } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
  $$115 = $$115 + -1 | 0;
  if (!$$115) {
   $$012$lcssa = $$113;
   break;
  } else {
   $$01214 = $$113;
   label = 5;
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0;
}

function _setPatternDetectionMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 212 | 0;
  if (!(_arSetPatternDetectionMode(HEAP32[$6 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(1, 7682, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _setThreshold($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0) {
  $5 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0;
  if ($1 >>> 0 <= 255) if (!(_arSetLabelingThresh(HEAP32[$5 + 212 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(1, 7717, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _byteswap($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$020 = 0, $$1 = 0, $1 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $1 = sp;
 _byteSwapInt($0, $1);
 _byteSwapInt($0 + 4 | 0, $1 + 4 | 0);
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 3) break; else $$020 = 0;
  while (1) {
   if (($$020 | 0) == 4) break;
   _byteSwapDouble($0 + 8 + ($$0 << 5) + ($$020 << 3) | 0, $1 + 8 + ($$0 << 5) + ($$020 << 3) | 0);
   $$020 = $$020 + 1 | 0;
  }
  $$0 = $$0 + 1 | 0;
 }
 $4 = $0 + 176 | 0;
 $$1 = 0;
 while (1) {
  $9 = HEAP32[$4 >> 2] | 0;
  if (($$1 | 0) >= (HEAP32[1636 + ($9 + -1 << 3) >> 2] | 0)) break;
  _byteSwapDouble($0 + 104 + ($$1 << 3) | 0, $1 + 104 + ($$1 << 3) | 0);
  $$1 = $$1 + 1 | 0;
 }
 HEAP32[$1 + 176 >> 2] = $9;
 _memcpy($0 | 0, $1 | 0, 184) | 0;
 STACKTOP = sp;
 return;
}

function _setThresholdMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 212 | 0;
  if (!(_arSetLabelingThreshMode(HEAP32[$6 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(1, 7743, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _setImageProcMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 212 | 0;
  if (!(_arSetImageProcMode(HEAP32[$6 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(1, 7592, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _setLabelingMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $2 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 212 | 0;
  if (!(_arSetLabelingMode(HEAP32[$6 >> 2] | 0, $1) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $1;
   _arLog(1, 7621, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 if ($2 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else if ($2 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else label = 5;
 if ((label | 0) == 5) {
  $9 = $2 + 16 & -16;
  $10 = __Znwj($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerIiJiNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_EUt_E($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4, $2);
 $6 = FUNCTION_TABLE_iii[$0 & 15]($5, $4) | 0;
 HEAP32[$3 >> 2] = $6;
 $7 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($3) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 STACKTOP = sp;
 return $7 | 0;
}

function _icpGetQ_from_S($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0.0, $11 = 0.0, $13 = 0, $15 = 0.0, $2 = 0.0, $4 = 0, $5 = 0.0, $8 = 0, $9 = 0.0, $storemerge = 0.0;
 $2 = +HEAPF64[$1 >> 3];
 $4 = $1 + 8 | 0;
 $5 = +HEAPF64[$4 >> 3];
 $8 = $1 + 16 | 0;
 $9 = +HEAPF64[$8 >> 3];
 $11 = $2 * $2 + $5 * $5 + $9 * $9;
 $13 = $0 + 8 | 0;
 if ($11 == 0.0) {
  HEAPF64[$0 >> 3] = 1.0;
  HEAPF64[$13 >> 3] = 0.0;
  $$sink = 0.0;
  $storemerge = 0.0;
 } else {
  $15 = +Math_sqrt(+$11);
  HEAPF64[$0 >> 3] = $2 / $15;
  HEAPF64[$13 >> 3] = +HEAPF64[$4 >> 3] / $15;
  $$sink = $15;
  $storemerge = +HEAPF64[$8 >> 3] / $15;
 }
 HEAPF64[$0 + 16 >> 3] = $storemerge;
 HEAPF64[$0 + 24 >> 3] = $$sink;
 HEAPF64[$0 + 32 >> 3] = +HEAPF64[$1 + 24 >> 3];
 HEAPF64[$0 + 40 >> 3] = +HEAPF64[$1 + 32 >> 3];
 HEAPF64[$0 + 48 >> 3] = +HEAPF64[$1 + 40 >> 3];
 return;
}

function _getPatternDetectionMode($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  $9 = (_arGetPatternDetectionMode(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709551616.0, $1);
    $$016 = $9;
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   HEAP32[$1 >> 2] = $storemerge;
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $2;
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function __ZL15loadMultiMarkerPKcP8ARHandlePP12ARPattHandlePP18ARMultiMarkerInfoT($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $5 = _arMultiReadConfigFile($0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = $5;
 L1 : do if (!$5) {
  _arLog(3, 9643, sp);
  _arPattDeleteHandle(HEAP32[$2 >> 2] | 0) | 0;
  $$0 = 0;
 } else switch (HEAP32[$5 + 108 >> 2] | 0) {
 case 0:
  {
   _arSetPatternDetectionMode($1, 0) | 0;
   $$0 = 1;
   break L1;
   break;
  }
 case 1:
  {
   _arSetPatternDetectionMode($1, 2) | 0;
   $$0 = 1;
   break L1;
   break;
  }
 default:
  {
   _arSetPatternDetectionMode($1, 3) | 0;
   $$0 = 1;
   break L1;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _getThresholdMode($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  $9 = (_arGetLabelingThreshMode(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _arMatrixTrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$024 = 0, $$025 = 0, $$026 = 0, $$027 = 0, $$1 = 0, $3 = 0, $8 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (($3 | 0) == (HEAP32[$1 + 8 >> 2] | 0)) {
  $8 = HEAP32[$0 + 8 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$1 + 4 >> 2] | 0)) {
   $$0 = HEAP32[$0 >> 2] | 0;
   $$026 = 0;
   while (1) {
    if (($$026 | 0) >= ($3 | 0)) {
     $$027 = 0;
     break L1;
    }
    $$024 = (HEAP32[$1 >> 2] | 0) + ($$026 << 3) | 0;
    $$025 = 0;
    $$1 = $$0;
    while (1) {
     if (($$025 | 0) >= ($8 | 0)) break;
     HEAPF64[$$1 >> 3] = +HEAPF64[$$024 >> 3];
     $$024 = $$024 + ($3 << 3) | 0;
     $$025 = $$025 + 1 | 0;
     $$1 = $$1 + 8 | 0;
    }
    $$0 = $$1;
    $$026 = $$026 + 1 | 0;
   }
  } else $$027 = -1;
 } else $$027 = -1; while (0);
 return $$027 | 0;
}

function _getImageProcMode($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  $9 = (_arGetImageProcMode(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $13 = 0, $14 = 0, $7 = 0;
 $7 = __Znwj(408) | 0;
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $1 + 8;
 HEAP32[$7 + 8 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 $13 = $7 + 16 | 0;
 _memset($13 | 0, 0, 392) | 0;
 __ZN12arControllerC2Ev($13);
 HEAP8[$0 + 8 >> 0] = 1;
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$14 + 4 >> 2] = $2;
 HEAP32[$14 >> 2] = 0;
 return;
}

function _getLabelingMode($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  $9 = (_arGetLabelingMode(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _getThreshold($0) {
 $0 = $0 | 0;
 var $$1 = 0, $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$1 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  $9 = (_arGetLabelingThresh(HEAP32[$6 >> 2] | 0, $2) | 0) == 0;
  $$1 = $9 ? HEAP32[$2 >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0;
 HEAP32[$2 >> 2] = 0;
 if (($0 | 0) == ($1 | 0)) $$2 = $0; else {
  $4 = HEAP8[$0 >> 0] | 0;
  if ($4 << 24 >> 24 == 114) {
   HEAP32[$2 >> 2] = 4;
   $6 = $0 + 1 | 0;
   $$0 = $6;
   $10 = 4;
   $8 = HEAP8[$6 >> 0] | 0;
  } else {
   $$0 = $0;
   $10 = 0;
   $8 = $4;
  }
  if ($8 << 24 >> 24 == 86) {
   $9 = $10 | 2;
   HEAP32[$2 >> 2] = $9;
   $11 = $$0 + 1 | 0;
   $$1 = $11;
   $13 = HEAP8[$11 >> 0] | 0;
   $15 = $9;
  } else {
   $$1 = $$0;
   $13 = $8;
   $15 = $10;
  }
  if ($13 << 24 >> 24 == 75) {
   HEAP32[$2 >> 2] = $15 | 1;
   $$2 = $$1 + 1 | 0;
  } else $$2 = $$1;
 }
 return $$2 | 0;
}

function ___fseeko_unlocked($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$019 = 0, $10 = 0, $12 = 0, label = 0;
 if (($2 | 0) == 1) $$019 = $1 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) | 0; else $$019 = $1;
 $10 = $0 + 20 | 0;
 $12 = $0 + 28 | 0;
 if ((HEAP32[$10 >> 2] | 0) >>> 0 > (HEAP32[$12 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
  if (!(HEAP32[$10 >> 2] | 0)) $$0 = -1; else label = 5;
 } else label = 5;
 if ((label | 0) == 5) {
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 15]($0, $$019, $2) | 0) < 0) $$0 = -1; else {
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function _fclose($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $20 = 0, $24 = 0, $26 = 0, $29 = 0, $7 = 0, $8 = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $29 = ___lockfile($0) | 0; else $29 = 0;
 ___unlist_locked_file($0);
 $7 = (HEAP32[$0 >> 2] & 1 | 0) != 0;
 if (!$7) {
  $8 = ___ofl_lock() | 0;
  $10 = HEAP32[$0 + 52 >> 2] | 0;
  $$pre = $0 + 56 | 0;
  if ($10 | 0) HEAP32[$10 + 56 >> 2] = HEAP32[$$pre >> 2];
  $15 = HEAP32[$$pre >> 2] | 0;
  if ($15 | 0) HEAP32[$15 + 52 >> 2] = $10;
  if ((HEAP32[$8 >> 2] | 0) == ($0 | 0)) HEAP32[$8 >> 2] = $15;
  ___ofl_unlock();
 }
 $20 = _fflush($0) | 0;
 $24 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 31]($0) | 0 | $20;
 $26 = HEAP32[$0 + 92 >> 2] | 0;
 if ($26 | 0) _free($26);
 if ($7) {
  if ($29 | 0) ___unlockfile($0);
 } else _free($0);
 return $24 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 while (1) {
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -16 | 0;
  HEAP32[$3 >> 2] = $6;
  __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j(HEAP32[$0 + 16 >> 2] | 0, $7, (HEAP32[$0 + 12 >> 2] | 0) - $7 >> 4);
 return;
}

function _getMatrixCodeType($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$0 = -1; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  _arGetMatrixCodeType(HEAP32[$6 >> 2] | 0, $2) | 0;
  $$0 = HEAP32[$2 >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  while (1) {
   $4 = HEAP32[$3 >> 2] | 0;
   if (($4 | 0) == ($1 | 0)) break;
   $6 = $4 + -16 | 0;
   HEAP32[$3 >> 2] = $6;
   __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
  }
  $8 = HEAP32[$0 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($0 + 12 | 0, $8, (HEAP32[$0 + 8 >> 2] | 0) - $8 >> 4);
 }
 return;
}

function _getDebugMode($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$0 = 0; else {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  _arGetDebugMode(HEAP32[$6 >> 2] | 0, $2) | 0;
  $$0 = HEAP32[$2 >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$019 = 0, $$1 = 0, $10 = 0, $4 = 0;
 if (($0 | 0) == ($1 | 0)) $$1 = $0; else {
  $4 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($4 | 0) == ($0 | 0)) $$019 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0; else $$019 = $4;
  if (($$019 | 0) == ($0 | 0)) $$1 = $0; else {
   $10 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($10 | 0)) $$1 = $0; else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($10 + -24 | 0, 0, 15119) | 0;
    $$1 = $$019;
   }
  }
 }
 return $$1 | 0;
}

function __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0, 12, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0, 11, $1 | 0);
 STACKTOP = sp;
 return;
}

function _detectMarker($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$0 = HEAP32[417] | 0; else {
  $5 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0;
  $$0 = _arDetectMarker(HEAP32[$5 + 212 >> 2] | 0, HEAP32[$5 + 196 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $14 = 0, $7 = 0;
 $7 = __Znwj(200) | 0;
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $1 + 8;
 HEAP32[$7 + 8 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 _memset($7 + 16 | 0, 0, 184) | 0;
 HEAP8[$0 + 8 >> 0] = 1;
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$14 + 4 >> 2] = $2;
 HEAP32[$14 >> 2] = 0;
 return;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0;
 $3 = $0 + 11 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 if ($4 << 24 >> 24 < 0) $14 = HEAP32[$0 + 4 >> 2] | 0; else $14 = $4 & 255;
 if (($2 | 0) == -1) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  $11 = HEAP8[$3 >> 0] | 0;
 } else $11 = $4;
 if ($11 << 24 >> 24 < 0) $15 = HEAP32[$0 >> 2] | 0; else $15 = $0;
 $13 = $14 >>> 0 > $2 >>> 0;
 $16 = __ZNSt3__211char_traitsIcE7compareEPKcS3_j($15, $1, $13 ? $2 : $14) | 0;
 if (!$16) return ($14 >>> 0 < $2 >>> 0 ? -1 : $13 & 1) | 0; else return $16 | 0;
 return 0;
}

function _arMatrixDup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$021 = 0, $$022 = 0, $13 = 0, $16 = 0, $3 = 0, $8 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (($3 | 0) == (HEAP32[$1 + 4 >> 2] | 0)) {
  $8 = HEAP32[$0 + 8 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$1 + 8 >> 2] | 0)) {
   $$021 = 0;
   while (1) {
    if (($$021 | 0) >= ($3 | 0)) {
     $$022 = 0;
     break L1;
    }
    $13 = Math_imul($$021, $8) | 0;
    $$0 = 0;
    while (1) {
     if (($$0 | 0) >= ($8 | 0)) break;
     $16 = $$0 + $13 | 0;
     HEAPF64[(HEAP32[$0 >> 2] | 0) + ($16 << 3) >> 3] = +HEAPF64[(HEAP32[$1 >> 2] | 0) + ($16 << 3) >> 3];
     $$0 = $$0 + 1 | 0;
    }
    $$021 = $$021 + 1 | 0;
   }
  } else $$022 = -1;
 } else $$022 = -1; while (0);
 return $$022 | 0;
}

function _getMultiMarkerCount($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$0 = -1; else {
  $4 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0;
  $$0 = (HEAP32[$4 + 252 >> 2] | 0) - (HEAP32[$4 + 248 >> 2] | 0) >> 3;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _getMarkerNum($0) {
 $0 = $0 | 0;
 var $$0$in = 0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$0$in = 1668; else {
  $5 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  $$0$in = (HEAP32[$5 >> 2] | 0) + 44 | 0;
 }
 STACKTOP = sp;
 return HEAP32[$$0$in >> 2] | 0;
}

function __ZN10emscripten8internal7InvokerIiJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiS8_EPNS0_11BindingTypeIS8_EUt_E($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp + 12 | 0;
 $3 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($3, $1);
 $4 = FUNCTION_TABLE_ii[$0 & 31]($3) | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;
 return $5 | 0;
}

function _getProcessingImage($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$0 = 0; else {
  $5 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 212 | 0;
  $$0 = HEAP32[(HEAP32[$5 >> 2] | 0) + 4834148 >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _arImageProcInit($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$sink = 0, $4 = 0, $9 = 0, label = 0;
 $4 = _malloc(2080) | 0;
 do if (!$4) $$0 = $4; else {
  HEAP32[$4 + 2068 >> 2] = $2;
  if (!$3) switch ($2 | 0) {
  case 5:
  case 12:
  case 13:
  case 14:
   {
    $$sink = 0;
    break;
   }
  default:
   label = 4;
  } else label = 4;
  if ((label | 0) == 4) {
   $9 = _malloc(Math_imul($1, $0) | 0) | 0;
   HEAP32[$4 >> 2] = $9;
   if (!$9) {
    _free($4);
    $$0 = 0;
    break;
   } else $$sink = 1;
  }
  HEAP32[$4 + 2076 >> 2] = $$sink;
  HEAP32[$4 + 2072 >> 2] = $3;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$4 + 12 >> 2] = $1;
  $$0 = $4;
 } while (0);
 return $$0 | 0;
}

function _arPattDeleteHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019 = 0, $$020 = 0, $12 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 if (!$0) $$020 = -1; else {
  $2 = $0 + 4 | 0;
  $3 = $0 + 8 | 0;
  $4 = $0 + 12 | 0;
  $5 = $0 + 20 | 0;
  $$019 = 0;
  while (1) {
   if (($$019 | 0) >= (HEAP32[$2 >> 2] | 0)) break;
   if (HEAP32[(HEAP32[$3 >> 2] | 0) + ($$019 << 2) >> 2] | 0) _arPattFree($0, $$019) | 0;
   $12 = $$019 << 2;
   $$0 = 0;
   while (1) {
    if (($$0 | 0) == 4) break;
    $14 = $$0 + $12 | 0;
    _free(HEAP32[(HEAP32[$4 >> 2] | 0) + ($14 << 2) >> 2] | 0);
    _free(HEAP32[(HEAP32[$5 >> 2] | 0) + ($14 << 2) >> 2] | 0);
    $$0 = $$0 + 1 | 0;
   }
   $$019 = $$019 + 1 | 0;
  }
  _free($0);
  $$020 = 0;
 }
 return $$020 | 0;
}

function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, label = 0;
 $1 = $0 + 20 | 0;
 $3 = $0 + 28 | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
  if (!(HEAP32[$1 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $10 = $0 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $0 + 8 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($11 >>> 0 < $13 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 15]($0, $11 - $13 | 0, 1) | 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arUtilMatMul($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$023 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 3) break;
  $3 = $0 + ($$0 << 5) | 0;
  $4 = $0 + ($$0 << 5) + 8 | 0;
  $5 = $0 + ($$0 << 5) + 16 | 0;
  $$023 = 0;
  while (1) {
   if (($$023 | 0) == 4) break;
   HEAPF64[$2 + ($$0 << 5) + ($$023 << 3) >> 3] = +HEAPF64[$3 >> 3] * +HEAPF64[$1 + ($$023 << 3) >> 3] + +HEAPF64[$4 >> 3] * +HEAPF64[$1 + 32 + ($$023 << 3) >> 3] + +HEAPF64[$5 >> 3] * +HEAPF64[$1 + 64 + ($$023 << 3) >> 3];
   $$023 = $$023 + 1 | 0;
  }
  $24 = $2 + ($$0 << 5) + 24 | 0;
  HEAPF64[$24 >> 3] = +HEAPF64[$0 + ($$0 << 5) + 24 >> 3] + +HEAPF64[$24 >> 3];
  $$0 = $$0 + 1 | 0;
 }
 return 0;
}
function _setMatrixCodeType($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 212 | 0;
  _arSetMatrixCodeType(HEAP32[$6 >> 2] | 0, $1) | 0;
 }
 STACKTOP = sp;
 return;
}

function _getProjectionNearPlane($0) {
 $0 = $0 | 0;
 var $$0 = 0.0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$0 = -1.0; else {
  $5 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 232 | 0;
  $$0 = +HEAPF64[$5 >> 3];
 }
 STACKTOP = sp;
 return +$$0;
}

function _getProjectionFarPlane($0) {
 $0 = $0 | 0;
 var $$0 = 0.0, $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $1) | 0)) $$0 = -1.0; else {
  $5 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $1) | 0) + 240 | 0;
  $$0 = +HEAPF64[$5 >> 3];
 }
 STACKTOP = sp;
 return +$$0;
}

function _CENTER($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$025 = 0, $$026 = 0, $$027 = 0, $$028 = 0, $$1 = 0, $3 = 0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 L1 : do if ((HEAP32[$1 + 4 >> 2] | 0) == ($5 | 0)) {
  $$025 = 0;
  $$027 = HEAP32[$0 >> 2] | 0;
  while (1) {
   if (($$025 | 0) >= ($3 | 0)) {
    $$026 = 0;
    break L1;
   }
   $$0 = 0;
   $$028 = HEAP32[$1 >> 2] | 0;
   $$1 = $$027;
   while (1) {
    if (($$0 | 0) >= ($5 | 0)) break;
    HEAPF64[$$1 >> 3] = +HEAPF64[$$1 >> 3] - +HEAPF64[$$028 >> 3];
    $$0 = $$0 + 1 | 0;
    $$028 = $$028 + 8 | 0;
    $$1 = $$1 + 8 | 0;
   }
   $$025 = $$025 + 1 | 0;
   $$027 = $$1;
  }
 } else $$026 = -1; while (0);
 return $$026 | 0;
}

function _arSetDebugMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 do if (!$0) $$0 = -1; else if ((HEAP32[$0 >> 2] | 0) == ($1 | 0)) $$0 = 0; else {
  HEAP32[$0 >> 2] = $1;
  if (!$1) {
   $6 = $0 + 4834148 | 0;
   _free(HEAP32[$6 >> 2] | 0);
   HEAP32[$6 >> 2] = 0;
   $$0 = 0;
   break;
  }
  $13 = _malloc(Math_imul(HEAP32[$0 + 40 >> 2] | 0, HEAP32[$0 + 36 >> 2] | 0) | 0) | 0;
  HEAP32[$0 + 4834148 >> 2] = $13;
  if (!$13) {
   _arLog(3, 4787, $vararg_buffer);
   _exit(1);
  } else $$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 while (1) {
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -16 | 0;
  HEAP32[$3 >> 2] = $6;
  __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j(HEAP32[$0 + 16 >> 2] | 0, $7, (HEAP32[$0 + 12 >> 2] | 0) - $7 >> 4);
 return;
}

function __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  while (1) {
   $4 = HEAP32[$3 >> 2] | 0;
   if (($4 | 0) == ($1 | 0)) break;
   $6 = $4 + -16 | 0;
   HEAP32[$3 >> 2] = $6;
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
  }
  $8 = HEAP32[$0 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($0 + 12 | 0, $8, (HEAP32[$0 + 8 >> 2] | 0) - $8 >> 4);
 }
 return;
}

function _icpGetU_from_X_by_MatX2U($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $21 = 0.0, $3 = 0.0, $36 = 0.0, $5 = 0.0, $7 = 0.0;
 $3 = +HEAPF64[$2 >> 3];
 $5 = +HEAPF64[$2 + 8 >> 3];
 $7 = +HEAPF64[$2 + 16 >> 3];
 $21 = +HEAPF64[$1 + 88 >> 3] + ($3 * +HEAPF64[$1 + 64 >> 3] + $5 * +HEAPF64[$1 + 72 >> 3] + $7 * +HEAPF64[$1 + 80 >> 3]);
 if ($21 == 0.0) $$0 = -1; else {
  $36 = +HEAPF64[$1 + 56 >> 3] + ($3 * +HEAPF64[$1 + 32 >> 3] + $5 * +HEAPF64[$1 + 40 >> 3] + $7 * +HEAPF64[$1 + 48 >> 3]);
  HEAPF64[$0 >> 3] = (+HEAPF64[$1 + 24 >> 3] + ($3 * +HEAPF64[$1 >> 3] + $5 * +HEAPF64[$1 + 8 >> 3] + $7 * +HEAPF64[$1 + 16 >> 3])) / $21;
  HEAPF64[$0 + 8 >> 3] = $36 / $21;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZN10emscripten8internal7InvokerIiJiiiEE6invokeEPFiiiiEiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $4 = sp;
 $5 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $6 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2) | 0;
 $7 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3) | 0;
 $8 = FUNCTION_TABLE_iiii[$0 & 15]($5, $6, $7) | 0;
 HEAP32[$4 >> 2] = $8;
 $9 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($4) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$017 = 0, $$2 = 0, $7 = 0, $9 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$2 = $0; else {
  $$ = (HEAP8[$0 >> 0] | 0) == 110 ? $0 + 1 | 0 : $0;
  if (($$ | 0) == ($1 | 0)) $$2 = $0; else {
   $7 = HEAP8[$$ >> 0] | 0;
   $9 = $$ + 1 | 0;
   if ($7 << 24 >> 24 == 48) $$2 = $9; else if (($7 + -49 & 255) < 9) {
    $$017 = $9;
    while (1) {
     if (($$017 | 0) == ($1 | 0)) {
      $$2 = $1;
      break L1;
     }
     if (((HEAP8[$$017 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
      $$2 = $$017;
      break L1;
     }
     $$017 = $$017 + 1 | 0;
    }
   } else $$2 = $0;
  }
 } while (0);
 return $$2 | 0;
}

function _setProjectionNearPlane($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 232 | 0;
  HEAPF64[$6 >> 3] = $1;
 }
 STACKTOP = sp;
 return;
}

function _setProjectionFarPlane($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17304, $2) | 0) {
  $6 = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17304, $2) | 0) + 240 | 0;
  HEAPF64[$6 >> 3] = $1;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i3 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $4 = $0 + 12 | 0;
 $5 = $1 + 12 | 0;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 $$0$i$i3 = 0;
 while (1) {
  if (($$0$i$i3 | 0) == 3) break;
  HEAP32[$5 + ($$0$i$i3 << 2) >> 2] = 0;
  $$0$i$i3 = $$0$i$i3 + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $4 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i1 = 0;
 while (1) {
  if (($$0$i$i1 | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i1 << 2) >> 2] = 0;
  $$0$i$i1 = $$0$i$i1 + 1 | 0;
 }
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0, $5 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0;
  return $$1 | 0;
 }
 if ($1 >>> 0 > 4294967231) {
  $5 = ___errno_location() | 0;
  HEAP32[$5 >> 2] = 12;
  $$1 = 0;
  return $$1 | 0;
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0;
 if ($11 | 0) {
  $$1 = $11 + 8 | 0;
  return $$1 | 0;
 }
 $14 = _malloc($1) | 0;
 if (!$14) {
  $$1 = 0;
  return $$1 | 0;
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0;
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0;
 _free($0);
 $$1 = $14;
 return $$1 | 0;
}

function _pad_684($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $13 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $5 = sp;
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0;
  _memset($5 | 0, $1 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0;
  if ($9 >>> 0 > 255) {
   $13 = $2 - $3 | 0;
   $$011 = $9;
   do {
    _out($0, $5, 256);
    $$011 = $$011 + -256 | 0;
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $13 & 255;
  } else $$0$lcssa = $9;
  _out($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = $0 + 20 | 0;
 $9 = $0 + 28 | 0;
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 $15 = HEAP32[$0 >> 2] | 0;
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0;
  HEAP32[$0 + 8 >> 2] = $23;
  HEAP32[$0 + 4 >> 2] = $23;
  $$0 = $15 << 27 >> 31;
 } else {
  HEAP32[$0 >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $2 = 0, $4 = 0, $5 = 0;
 $2 = $1 + 12 | 0;
 $4 = HEAP8[$2 + 11 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, $5 ? HEAP32[$2 >> 2] | 0 : $2, $5 ? HEAP32[$1 + 16 >> 2] | 0 : $4 & 255) | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i$i = 0;
 while (1) {
  if (($$0$i$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i$i << 2) >> 2] = 0;
  $$0$i$i$i = $$0$i$i$i + 1 | 0;
 }
 return;
}

function _arVecHousehold($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$020 = 0.0, $$1 = 0.0, $11 = 0.0, $13 = 0, $15 = 0, $2 = 0.0, $4 = 0, $5 = 0.0, $8 = 0.0;
 $2 = +Math_sqrt(+(+_arVecInnerproduct($0, $0)));
 L1 : do if ($2 != 0.0) {
  $4 = HEAP32[$0 >> 2] | 0;
  $5 = +HEAPF64[$4 >> 3];
  $$020 = $5 < 0.0 ? -$2 : $2;
  $8 = $5 + $$020;
  HEAPF64[$4 >> 3] = $8;
  $11 = 1.0 / +Math_sqrt(+($$020 * $8));
  $13 = HEAP32[$0 + 4 >> 2] | 0;
  $$0 = 0;
  while (1) {
   if (($$0 | 0) >= ($13 | 0)) {
    $$1 = $$020;
    break L1;
   }
   $15 = $4 + ($$0 << 3) | 0;
   HEAPF64[$15 >> 3] = $11 * +HEAPF64[$15 >> 3];
   $$0 = $$0 + 1 | 0;
  }
 } else $$1 = $2; while (0);
 return +-$$1;
}

function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $3 = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $1;
 HEAP32[$vararg_buffer + 12 >> 2] = $3;
 HEAP32[$vararg_buffer + 16 >> 2] = $2;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1;
  $10 = -1;
 } else $10 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _arParamObserv2IdealLTf($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $28 = 0, $9 = 0;
 $9 = (HEAP32[$0 + 16 >> 2] | 0) + ~~($1 + .5) | 0;
 $14 = (HEAP32[$0 + 20 >> 2] | 0) + ~~($2 + .5) | 0;
 if (($9 | 0) < 0) $$0 = -1; else {
  $17 = HEAP32[$0 + 8 >> 2] | 0;
  if (($14 | 0) < 0 | ($9 | 0) >= ($17 | 0)) $$0 = -1; else if (($14 | 0) < (HEAP32[$0 + 12 >> 2] | 0)) {
   $28 = (HEAP32[$0 + 4 >> 2] | 0) + ((Math_imul($17, $14) | 0) + $9 << 1 << 2) | 0;
   HEAP32[$3 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$28 + 4 >> 2];
   $$0 = 0;
  } else $$0 = -1;
 }
 return $$0 | 0;
}

function _strtok($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$010 = 0, $10 = 0, $3 = 0, $6 = 0, label = 0;
 if (!$0) {
  $3 = HEAP32[4358] | 0;
  if (!$3) $$0 = 0; else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do if ((label | 0) == 3) {
  $6 = $$010 + (_strspn($$010, $1) | 0) | 0;
  if (!(HEAP8[$6 >> 0] | 0)) {
   HEAP32[4358] = 0;
   $$0 = 0;
   break;
  }
  $10 = $6 + (_strcspn($6, $1) | 0) | 0;
  HEAP32[4358] = $10;
  if (!(HEAP8[$10 >> 0] | 0)) {
   HEAP32[4358] = 0;
   $$0 = $6;
   break;
  } else {
   HEAP32[4358] = $10 + 1;
   HEAP8[$10 >> 0] = 0;
   $$0 = $6;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _arParamIdeal2ObservLTf($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $27 = 0, $9 = 0;
 $9 = (HEAP32[$0 + 16 >> 2] | 0) + ~~($1 + .5) | 0;
 $14 = (HEAP32[$0 + 20 >> 2] | 0) + ~~($2 + .5) | 0;
 if (($9 | 0) < 0) $$0 = -1; else {
  $17 = HEAP32[$0 + 8 >> 2] | 0;
  if (($14 | 0) < 0 | ($9 | 0) >= ($17 | 0)) $$0 = -1; else if (($14 | 0) < (HEAP32[$0 + 12 >> 2] | 0)) {
   $27 = (HEAP32[$0 >> 2] | 0) + ((Math_imul($17, $14) | 0) + $9 << 1 << 2) | 0;
   HEAP32[$3 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$27 + 4 >> 2];
   $$0 = 0;
  } else $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0, $9 = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($3, $1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + ($2 << 4) | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$0 + 12 >> 2] = $8 + ($1 << 4);
 return;
}

function _strncat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$01013 = 0, $$01112 = 0, $$014 = 0, $10 = 0, $4 = 0, $6 = 0;
 $4 = $0 + (_strlen($0) | 0) | 0;
 L1 : do if (!$2) $$0$lcssa = $4; else {
  $$01013 = $2;
  $$01112 = $1;
  $$014 = $4;
  while (1) {
   $6 = HEAP8[$$01112 >> 0] | 0;
   if (!($6 << 24 >> 24)) {
    $$0$lcssa = $$014;
    break L1;
   }
   $$01013 = $$01013 + -1 | 0;
   $10 = $$014 + 1 | 0;
   HEAP8[$$014 >> 0] = $6;
   if (!$$01013) {
    $$0$lcssa = $10;
    break;
   } else {
    $$01112 = $$01112 + 1 | 0;
    $$014 = $10;
   }
  }
 } while (0);
 HEAP8[$$0$lcssa >> 0] = 0;
 return $0 | 0;
}

function _arImageProcLumaHist($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$015 = 0, $11 = 0, $15 = 0, $7 = 0;
 L1 : do if (($0 | 0) != 0 & ($1 | 0) != 0) if ((_arImageProcLuma($0, $1) | 0) < 0) $$015 = -1; else {
  _memset($0 + 16 | 0, 0, 1024) | 0;
  $7 = HEAP32[$0 >> 2] | 0;
  $11 = $7 + (Math_imul(HEAP32[$0 + 12 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0) | 0;
  $$0 = $7;
  while (1) {
   if ($$0 >>> 0 >= $11 >>> 0) {
    $$015 = 0;
    break L1;
   }
   $15 = $0 + 16 + ((HEAPU8[$$0 >> 0] | 0) << 2) | 0;
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
   $$0 = $$0 + 1 | 0;
  }
 } else $$015 = -1; while (0);
 return $$015 | 0;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 increment = increment + 15 & -16 | 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  ___setErrNo(12);
  HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
  return -1;
 }
 return oldDynamicTop | 0;
}

function _icpCreateHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$022 = 0, $$023 = 0, $1 = 0;
 $1 = _malloc(136) | 0;
 if (!$1) $$023 = 0; else {
  $$0 = 0;
  while (1) {
   if (($$0 | 0) == 3) break; else $$022 = 0;
   while (1) {
    if (($$022 | 0) == 4) break;
    HEAPF64[$1 + ($$0 << 5) + ($$022 << 3) >> 3] = +HEAPF64[$0 + ($$0 << 5) + ($$022 << 3) >> 3];
    $$022 = $$022 + 1 | 0;
   }
   $$0 = $$0 + 1 | 0;
  }
  HEAP32[$1 + 96 >> 2] = 10;
  HEAPF64[$1 + 104 >> 3] = .10000000149011612;
  HEAPF64[$1 + 112 >> 3] = .9900000095367432;
  HEAPF64[$1 + 120 >> 3] = 4.0;
  HEAPF64[$1 + 128 >> 3] = .5;
  $$023 = $1;
 }
 return $$023 | 0;
}

function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 while (1) {
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -24 | 0;
  HEAP32[$3 >> 2] = $6;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j(HEAP32[$0 + 16 >> 2] | 0, $7, ((HEAP32[$0 + 12 >> 2] | 0) - $7 | 0) / 24 | 0);
 return;
}

function __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  while (1) {
   $4 = HEAP32[$3 >> 2] | 0;
   if (($4 | 0) == ($1 | 0)) break;
   $6 = $4 + -24 | 0;
   HEAP32[$3 >> 2] = $6;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
  }
  $8 = HEAP32[$0 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($0 + 12 | 0, $8, ((HEAP32[$0 + 8 >> 2] | 0) - $8 | 0) / 24 | 0);
 }
 return;
}

function __ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 $4 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $5 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2) | 0;
 $6 = FUNCTION_TABLE_iii[$0 & 15]($4, $5) | 0;
 HEAP32[$3 >> 2] = $6;
 $7 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($3) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  do {
   $$0710 = $$0710 + 1 | 0;
   $$011 = $$011 + 1 | 0;
   $8 = HEAP8[$$0710 >> 0] | 0;
   $9 = HEAP8[$$011 >> 0] | 0;
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9;
  $$lcssa8 = $8;
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0;
}

function __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEEC2EjjS4_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $8 = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 536870911) {
  $8 = ___cxa_allocate_exception(4) | 0;
  __ZNSt9bad_allocC2Ev($8);
  ___cxa_throw($8 | 0, 256, 6);
 } else {
  $11 = __Znwj($1 << 3) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 << 3) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$0 + 12 >> 2] = $11 + ($1 << 3);
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $4 = $1 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = $1 + 36 | 0;
 $8 = $1 + 24 | 0;
 do if (!$5) {
  HEAP32[$4 >> 2] = $2;
  HEAP32[$8 >> 2] = $3;
  HEAP32[$7 >> 2] = 1;
 } else {
  if (($5 | 0) != ($2 | 0)) {
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
   HEAP32[$8 >> 2] = 2;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  if ((HEAP32[$8 >> 2] | 0) == 2) HEAP32[$8 >> 2] = $3;
 } while (0);
 return;
}

function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0, $9 = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($3, $1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + ($2 << 4) | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$0 + 12 >> 2] = $8 + ($1 << 4);
 return;
}

function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 HEAP32[$0 + 36 >> 2] = 1;
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21523;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$0 + 75 >> 0] = -1;
 }
 $14 = ___stdio_write($0, $1, $2) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() | 0, 1, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0, 13, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0, 1, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJifEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() | 0, 2, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv() | 0, 1, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0, 10, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() | 0, 7, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() | 0, 1, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($2) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($2) | 0;
 __embind_register_function($0 | 0, $3 | 0, $4 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() | 0, 16, $1 | 0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $10 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 3]($10, $1, $2, $3, $4, $5);
 }
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($0, HEAP32[$0 + 8 >> 2] | 0);
 $3 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 if ($3 | 0) __ZdlPv($3);
 return;
}

function _getint($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $5 = 0, $7 = 0, $isdigittmp4 = 0, $isdigittmp7 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $isdigittmp4 = (HEAP8[$1 >> 0] | 0) + -48 | 0;
 if ($isdigittmp4 >>> 0 < 10) {
  $$06 = 0;
  $7 = $1;
  $isdigittmp7 = $isdigittmp4;
  while (1) {
   $5 = $isdigittmp7 + ($$06 * 10 | 0) | 0;
   $7 = $7 + 1 | 0;
   HEAP32[$0 >> 2] = $7;
   $isdigittmp7 = (HEAP8[$7 >> 0] | 0) + -48 | 0;
   if ($isdigittmp7 >>> 0 >= 10) {
    $$0$lcssa = $5;
    break;
   } else $$06 = $5;
  }
 } else $$0$lcssa = 0;
 return $$0$lcssa | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 0;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 0;
 $5 = HEAP32[$2 >> 2] | 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = $5;
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj($0);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_(HEAP32[$3 >> 2] | 0, $1);
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 24;
 return;
}

function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do if (!$2) $14 = 0; else {
  $$01318 = $0;
  $$01417 = $2;
  $$019 = $1;
  while (1) {
   $4 = HEAP8[$$01318 >> 0] | 0;
   $5 = HEAP8[$$019 >> 0] | 0;
   if ($4 << 24 >> 24 != $5 << 24 >> 24) break;
   $$01417 = $$01417 + -1 | 0;
   if (!$$01417) {
    $14 = 0;
    break L1;
   } else {
    $$01318 = $$01318 + 1 | 0;
    $$019 = $$019 + 1 | 0;
   }
  }
  $14 = ($4 & 255) - ($5 & 255) | 0;
 } while (0);
 return $14 | 0;
}

function __ZL10loadMarkerPKcPiP8ARHandlePP12ARPattHandle($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $4 = _arPattLoad(HEAP32[$2 >> 2] | 0, $0) | 0;
 HEAP32[$1 >> 2] = $4;
 if (($4 | 0) < 0) {
  HEAP32[$vararg_buffer >> 2] = $0;
  _arLog(3, 9714, $vararg_buffer);
  _arPattDeleteHandle(HEAP32[$2 >> 2] | 0) | 0;
  $$0 = 0;
 } else $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($0, HEAP32[$0 + 8 >> 2] | 0);
 $3 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 if ($3 | 0) __ZdlPv($3);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $5 = 0, $9 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $4 = HEAP8[$1 + 11 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 $9 = $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $9 >>> 0 < $2 >>> 0 ? $9 : $2);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $3 = $0 + 12 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $$0$i$i1 = 0;
 while (1) {
  if (($$0$i$i1 | 0) == 3) break;
  HEAP32[$3 + ($$0$i$i1 << 2) >> 2] = 0;
  $$0$i$i1 = $$0$i$i1 + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 17);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 14);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 13);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 12);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 11);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 10);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0); else {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 9);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 8);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 5);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 4);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $1, 3);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function _store_int($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do if ($0 | 0) switch ($1 | 0) {
 case -2:
  {
   HEAP8[$0 >> 0] = $2;
   break L1;
   break;
  }
 case -1:
  {
   HEAP16[$0 >> 1] = $2;
   break L1;
   break;
  }
 case 0:
  {
   HEAP32[$0 >> 2] = $2;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[$0 >> 2] = $2;
   break L1;
   break;
  }
 case 3:
  {
   $7 = $0;
   HEAP32[$7 >> 2] = $2;
   HEAP32[$7 + 4 >> 2] = $3;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0);
 return;
}

function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0, $9 = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($3, $1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + ($2 * 24 | 0) | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$0 + 12 >> 2] = $8 + ($1 * 24 | 0);
 return;
}

function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $3 = sp;
 dest = $3;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 15;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 76 >> 2] = -1;
 HEAP32[$3 + 84 >> 2] = $0;
 $8 = _vfscanf($3, $1, $2) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16440, 21);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16661, 18);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 15834, 15);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16241, 7);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16654, 6);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, 16465, 2);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$05$lcssa = $2; else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $14 = $$056 + -1 | 0;
   HEAP8[$14 >> 0] = HEAPU8[12201 + ($8 & 15) >> 0] | 0 | $3;
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $15 = tempRet0;
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14;
    break;
   } else $$056 = $14;
  }
 }
 return $$05$lcssa | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $7 = 0, $8 = 0;
 $7 = HEAP32[$0 + 4 >> 2] | 0;
 $8 = $7 >> 8;
 if (!($7 & 1)) $$0 = $8; else $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0;
 $14 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5);
 return;
}

function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0;
 $$ = ($1 | 0) == 0 ? 0 : $2;
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0;
  $11 = ___fwritex($0, $4, $3) | 0;
  if ($phitmp) $13 = $11; else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else $13 = ___fwritex($0, $4, $3) | 0;
 if (($13 | 0) == ($4 | 0)) $15 = $$; else $15 = ($13 >>> 0) / ($1 >>> 0) | 0;
 return $15 | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!(__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) | 0)) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $4 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($0 + 12 | 0, 1) | 0;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $4 + 24;
 return;
}

function _arUtilGetDirectoryNameFromPath($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$sink = 0, $14 = 0, $7 = 0;
 do if (($0 | 0) != 0 & ($1 | 0) != 0 & ($2 | 0) != 0) {
  $7 = _strrchr($1, 47) | 0;
  if (!$7) $$sink = $0; else {
   $14 = $7 + (($3 | 0) != 0 & 1) - $1 | 0;
   if (($14 + 1 | 0) >>> 0 > $2 >>> 0) {
    $$0 = 0;
    break;
   }
   _strncpy($0, $1, $14) | 0;
   $$sink = $0 + $14 | 0;
  }
  HEAP8[$$sink >> 0] = 0;
  $$0 = $0;
 } else $$0 = 0; while (0);
 return $$0 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $8 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 3]($8, $1, $2, $3);
 }
 return;
}

function _vasprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 $4 = _vsnprintf(0, 0, $1, $3) | 0;
 if (($4 | 0) < 0) $$0 = -1; else {
  $6 = $4 + 1 | 0;
  $7 = _malloc($6) | 0;
  HEAP32[$0 >> 2] = $7;
  if (!$7) $$0 = -1; else $$0 = _vsnprintf($7, $6, $1, $2) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___fmodeflags($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $2 = 0, $3 = 0, $5 = 0, $8 = 0;
 $2 = (_strchr($0, 43) | 0) == 0;
 $3 = HEAP8[$0 >> 0] | 0;
 $$0 = $2 ? $3 << 24 >> 24 != 114 & 1 : 2;
 $5 = (_strchr($0, 120) | 0) == 0;
 $$0$ = $5 ? $$0 : $$0 | 128;
 $8 = (_strchr($0, 101) | 0) == 0;
 $$2 = $8 ? $$0$ : $$0$ | 524288;
 $$2$ = $3 << 24 >> 24 == 114 ? $$2 : $$2 | 64;
 $$4 = $3 << 24 >> 24 == 119 ? $$2$ | 512 : $$2$;
 return ($3 << 24 >> 24 == 97 ? $$4 | 1024 : $$4) | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = $6 >> 8;
 if (!($6 & 1)) $$0 = $7; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0;
 $13 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4);
 return;
}

function __ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = FUNCTION_TABLE_ii[$0 & 31]($3) | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 256 | 0;
 $6 = _memchr($4, 0, $5) | 0;
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0;
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2;
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0;
 HEAP32[$0 + 4 >> 2] = $4 + $$027$;
 $14 = $4 + $$027 | 0;
 HEAP32[$0 + 8 >> 2] = $14;
 HEAP32[$3 >> 2] = $14;
 return $$027$ | 0;
}

function __ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $10 = 0, $11 = 0, $13 = 0, $8 = 0;
 $8 = HEAP32[$2 >> 2] | 0;
 $$0 = $0;
 $$014 = $1 - $0 >> 2;
 while (1) {
  if (!$$014) break;
  $10 = ($$014 | 0) / 2 | 0;
  $11 = $$0 + ($10 << 2) | 0;
  $13 = (HEAP32[$11 >> 2] | 0) >>> 0 < $8 >>> 0;
  $$0 = $13 ? $11 + 4 | 0 : $$0;
  $$014 = $13 ? $$014 + -1 - $10 | 0 : $10;
 }
 return $$0 | 0;
}

function __ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = +FUNCTION_TABLE_di[$0 & 3]($3);
 HEAPF64[$2 >> 3] = $4;
 $5 = +__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2);
 STACKTOP = sp;
 return +$5;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($0 + 32 | 0);
 __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($0 + 16 | 0);
 __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $5 = 0, $6 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $5 >> 8;
 if (!($5 & 1)) $$0 = $6; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0;
 $12 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 3]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2);
 return;
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $14 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 28 >> 2] = $14;
  HEAP32[$0 + 20 >> 2] = $14;
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$0 >> 2] = $7 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _get_buff($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $7 = 0;
 L1 : while (1) {
  if (!(_fgets($0, 256, $1) | 0)) break;
  $$0 = _strlen($0) | 0;
  L4 : while (1) {
   if (!$$0) break;
   $6 = $$0 + -1 | 0;
   $7 = $0 + $6 | 0;
   switch (HEAP8[$7 >> 0] | 0) {
   case 13:
   case 10:
    break;
   default:
    break L4;
   }
   HEAP8[$7 >> 0] = 0;
   $$0 = $6;
  }
  switch (HEAP8[$0 >> 0] | 0) {
  case 0:
  case 35:
   break;
  default:
   break L1;
  }
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $12 = 0, $13 = 0;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 112) {
  $12 = $0 + 2 | 0;
  $13 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12, $1, $2) | 0;
  $$1 = ($13 | 0) == ($12 | 0) ? $0 : $13;
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 return $$1 | 0;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$0$lcssa = $2; else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $10 = $$06 + -1 | 0;
   HEAP8[$10 >> 0] = $7 & 7 | 48;
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $11 = tempRet0;
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10;
    break;
   } else $$06 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function _arg_n($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 $$0 = $1;
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $10 = HEAP32[$9 >> 2] | 0;
  HEAP32[$2 >> 2] = $9 + 4;
  if ($$0 >>> 0 > 1) $$0 = $$0 + -1 | 0; else break;
 }
 STACKTOP = sp;
 return $10 | 0;
}

function _arImageProcLumaHistAndCDF($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$017 = 0, $2 = 0, $indvars$iv = 0;
 $2 = _arImageProcLumaHist($0, $1) | 0;
 if (($2 | 0) < 0) $$0 = $2; else {
  $$017 = 0;
  $indvars$iv = 0;
  do {
   $$017 = (HEAP32[$0 + 16 + ($indvars$iv << 2) >> 2] | 0) + $$017 | 0;
   HEAP32[$0 + 1040 + ($indvars$iv << 2) >> 2] = $$017;
   $indvars$iv = $indvars$iv + 1 | 0;
  } while (($indvars$iv | 0) != 256);
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZN12arControllerC2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0;
 HEAP32[$0 + 192 >> 2] = 0;
 HEAP32[$0 + 196 >> 2] = 0;
 $3 = $0 + 204 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAPF64[$0 + 232 >> 3] = .0001;
 HEAPF64[$0 + 240 >> 3] = 1.0e3;
 $6 = $0 + 248 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0;
 $$0 = $1;
 while (1) {
  if (!$$0) break;
  $3 = HEAP32[$$0 >> 2] | 0;
  __ZNSt3__24pairIKi12arControllerED2Ev($$0 + 8 | 0);
  __ZdlPv($$0);
  $$0 = $3;
 }
 return;
}

function ___ftello_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $12 = 0;
 if (!(HEAP32[$0 >> 2] & 128)) $11 = 1; else $11 = (HEAP32[$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$0 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 $12 = FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 15]($0, 0, $11) | 0;
 if (($12 | 0) < 0) $$0 = $12; else $$0 = $12 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) + (HEAP32[$0 + 20 >> 2] | 0) - (HEAP32[$0 + 28 >> 2] | 0) | 0;
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0;
 if (($0 | 0) != ($1 | 0)) {
  $4 = HEAP8[$1 + 11 >> 0] | 0;
  $5 = $4 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255);
 }
 return;
}

function _deleteHandle($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $5 = 0, $8 = 0;
 $1 = $0 + 212 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 | 0) {
  _arPattDetach($2) | 0;
  _arDeleteHandle(HEAP32[$1 >> 2] | 0) | 0;
  HEAP32[$1 >> 2] = 0;
 }
 $5 = $0 + 224 | 0;
 if (HEAP32[$5 >> 2] | 0) {
  _ar3DDeleteHandle($5) | 0;
  HEAP32[$5 >> 2] = 0;
 }
 $8 = $0 + 192 | 0;
 if (HEAP32[$8 >> 2] | 0) {
  _arParamLTFree($8) | 0;
  HEAP32[$8 >> 2] = 0;
 }
 return;
}

function _arVecInnerproduct($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013 = 0.0, $15 = 0.0, $3 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 if (($3 | 0) != (HEAP32[$1 + 4 >> 2] | 0)) _exit(0);
 $$0 = 0;
 $$013 = 0.0;
 while (1) {
  if (($$0 | 0) >= ($3 | 0)) break;
  $15 = $$013 + +HEAPF64[(HEAP32[$0 >> 2] | 0) + ($$0 << 3) >> 3] * +HEAPF64[(HEAP32[$1 >> 2] | 0) + ($$0 << 3) >> 3];
  $$0 = $$0 + 1 | 0;
  $$013 = $15;
 }
 return +$$013;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _shl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $0 + 4 | 0;
 if ($1 >>> 0 > 31) {
  $5 = HEAP32[$0 >> 2] | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$0 >> 2] = 0;
  $$0 = $1 + -32 | 0;
  $10 = 0;
  $7 = $5;
 } else {
  $$0 = $1;
  $10 = HEAP32[$0 >> 2] | 0;
  $7 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$3 >> 2] = $10 >>> (32 - $$0 | 0) | $7 << $$0;
 HEAP32[$0 >> 2] = $10 << $$0;
 return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $6 = 0;
 if (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($0, $1) | 0) {
  $5 = $1 + (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($2) | 0) | 0;
  $6 = $0 + 4096 | 0;
  if (($5 | 0) == (HEAP32[$6 >> 2] | 0)) HEAP32[$6 >> 2] = $1;
 } else _free($1);
 return;
}

function _shr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $0 + 4 | 0;
 if ($1 >>> 0 > 31) {
  $5 = HEAP32[$3 >> 2] | 0;
  HEAP32[$0 >> 2] = $5;
  HEAP32[$3 >> 2] = 0;
  $$0 = $1 + -32 | 0;
  $10 = 0;
  $7 = $5;
 } else {
  $$0 = $1;
  $10 = HEAP32[$3 >> 2] | 0;
  $7 = HEAP32[$0 >> 2] | 0;
 }
 HEAP32[$0 >> 2] = $10 << 32 - $$0 | $7 >>> $$0;
 HEAP32[$3 >> 2] = $10 >>> $$0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
 return;
}

function __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE17__annotate_deleteEv($0) {
 $0 = $0 | 0;
 var $$cast = 0, $1 = 0, $6 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $$cast = $1;
 $6 = $1 + ((HEAP32[$0 + 8 >> 2] | 0) - $$cast >> 3 << 3) | 0;
 __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0, $1, $6, $1 + ((HEAP32[$0 + 4 >> 2] | 0) - $$cast >> 3 << 3) | 0, $6);
 return;
}

function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $8;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _ar3DCreateHandle2($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = _malloc(4) | 0;
 if (!$1) {
  _arLog(3, 4787, sp);
  _exit(1);
 }
 $3 = _icpCreateHandle($0) | 0;
 HEAP32[$1 >> 2] = $3;
 if (!$3) {
  _free($1);
  $$0 = 0;
 } else $$0 = $1;
 STACKTOP = sp;
 return $$0 | 0;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $3 = _dummy_570(HEAP32[$0 + 60 >> 2] | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $3;
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 $2 = FUNCTION_TABLE_i[$0 & 1]() | 0;
 HEAP32[$1 >> 2] = $2;
 $3 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0;
 $$0 = $1;
 while (1) {
  if (!$$0) break;
  $3 = HEAP32[$$0 >> 2] | 0;
  __ZdlPv($$0);
  $$0 = $3;
 }
 return;
}

function ___unlist_locked_file($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$sink = 0, $5 = 0, $9 = 0;
 if (HEAP32[$0 + 68 >> 2] | 0) {
  $5 = HEAP32[$0 + 116 >> 2] | 0;
  $$pre = $0 + 112 | 0;
  if ($5 | 0) HEAP32[$5 + 112 >> 2] = HEAP32[$$pre >> 2];
  $9 = HEAP32[$$pre >> 2] | 0;
  if (!$9) $$sink = (___pthread_self_613() | 0) + 232 | 0; else $$sink = $9 + 116 | 0;
  HEAP32[$$sink >> 2] = $5;
 }
 return;
}

function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) $$0 = 0; else {
  $3 = Math_imul($1, $0) | 0;
  if (($1 | $0) >>> 0 > 65535) $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; else $$0 = $3;
 }
 $8 = _malloc($$0) | 0;
 if (!$8) return $8 | 0;
 if (!(HEAP32[$8 + -4 >> 2] & 3)) return $8 | 0;
 _memset($8 | 0, 0, $$0 | 0) | 0;
 return $8 | 0;
}

function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0, $1 + 4 | 0, $3);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $5 = 0;
 $2 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($1) | 0;
 $4 = $0 + 4096 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($0 + 4096 - $5 | 0) >>> 0 < $2 >>> 0) $$0 = _malloc($2) | 0; else {
  HEAP32[$4 >> 2] = $5 + $2;
  $$0 = $5;
 }
 return $$0 | 0;
}

function _arMatrixAlloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $6 = 0;
 $2 = _malloc(12) | 0;
 do if (!$2) $$0 = 0; else {
  $6 = _malloc(Math_imul($0 << 3, $1) | 0) | 0;
  HEAP32[$2 >> 2] = $6;
  if (!$6) {
   _free($2);
   $$0 = 0;
   break;
  } else {
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 + 8 >> 2] = $1;
   $$0 = $2;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function __ZSt9terminatev() {
 var $0 = 0, $2 = 0, $5 = 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 | 0) {
   $5 = $2 + 48 | 0;
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$2 + 12 >> 2] | 0);
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $5 = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($5 | 0) == ($2 | 0)) break;
  $6 = $5 + -8 | 0;
  HEAP32[$3 >> 2] = $6;
  $5 = $6;
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZdlPv($7);
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
 return;
}

function _arUtilGetPixelSize($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 switch ($0 | 0) {
 case 1:
 case 0:
  {
   $$0 = 3;
   break;
  }
 case 6:
 case 4:
 case 3:
 case 2:
  {
   $$0 = 4;
   break;
  }
 case 14:
 case 13:
 case 12:
 case 5:
  {
   $$0 = 1;
   break;
  }
 case 11:
 case 10:
 case 9:
 case 8:
 case 7:
  {
   $$0 = 2;
   break;
  }
 default:
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 if (!(___toread($0) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 15]($0, $1, 1) | 0) == 1) $$0 = HEAPU8[$1 >> 0] | 0; else $$0 = -1; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE14__annotate_newEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $7 = $2 + ((HEAP32[$0 + 8 >> 2] | 0) - $2 >> 3 << 3) | 0;
 __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0, $2, $7, $7, $2 + ($1 << 3) | 0);
 return;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function ___fseeko($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0, $9 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $8 = ___fseeko_unlocked($0, $1, $2) | 0;
  if ($phitmp) $9 = $8; else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else $9 = ___fseeko_unlocked($0, $1, $2) | 0;
 return $9 | 0;
}

function __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $9 = 0;
 $2 = HEAP8[$0 + 11 >> 0] | 0;
 if ($2 << 24 >> 24 < 0) $16 = HEAP32[$0 + 4 >> 2] | 0; else $16 = $2 & 255;
 $9 = HEAP8[$0 + 12 + 11 >> 0] | 0;
 if ($9 << 24 >> 24 < 0) $15 = HEAP32[$0 + 16 >> 2] | 0; else $15 = $9 & 255;
 return $15 + $16 | 0;
}

function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = _vsnprintf($0, $1, $2, $3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__213__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $5 = 0, $6 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $5 = HEAP32[$3 >> 2] | 0;
  while (1) {
   if (($5 | 0) == ($1 | 0)) break;
   $6 = $5 + -8 | 0;
   HEAP32[$3 >> 2] = $6;
   $5 = $6;
  }
  __ZdlPv($1);
 }
 return;
}

function _matrixCopy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$012 = 0;
 $$012 = 0;
 while (1) {
  if (($$012 | 0) == 3) break; else $$0 = 0;
  while (1) {
   if (($$0 | 0) == 4) break;
   HEAPF64[$1 + ($$012 << 5) + ($$0 << 3) >> 3] = +HEAPF64[$0 + ($$012 << 5) + ($$0 << 3) >> 3];
   $$0 = $$0 + 1 | 0;
  }
  $$012 = $$012 + 1 | 0;
 }
 return;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $4 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = $4;
 return;
}

function _rewind($0) {
 $0 = $0 | 0;
 var $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  ___fseeko_unlocked($0, 0, 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
  if (!$phitmp) ___unlockfile($0);
 } else {
  ___fseeko_unlocked($0, 0, 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
 }
 return;
}

function _arDeleteHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 if (!$0) $$0 = -1; else {
  $2 = $0 + 7062408 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if ($3 | 0) {
   _arImageProcFinal($3);
   HEAP32[$2 >> 2] = 0;
  }
  _free(HEAP32[$0 + 4834144 >> 2] | 0);
  _free(HEAP32[$0 + 4834148 >> 2] | 0);
  _free($0);
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($0, $1, $2, __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0, $1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0 + 12 | 0, $1 + 12 | 0);
 return;
}

function __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($0);
 return;
}

function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $1 = sp;
 HEAP32[$1 >> 2] = $varargs;
 $2 = HEAP32[499] | 0;
 _vfprintf($2, $0, $1) | 0;
 _fputc(10, $2) | 0;
 _abort();
}

function _ferror($0) {
 $0 = $0 | 0;
 var $$lobit = 0, $$lobit9 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $$lobit = (HEAP32[$0 >> 2] | 0) >>> 5 & 1;
  if ($phitmp) $$lobit9 = $$lobit; else $$lobit9 = $$lobit;
 } else $$lobit9 = (HEAP32[$0 >> 2] | 0) >>> 5 & 1;
 return $$lobit9 | 0;
}

function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $8 = 0;
 $5 = $0 + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $8 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0;
 $$ = $8 >>> 0 > $2 >>> 0 ? $2 : $8;
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$;
 return $2 | 0;
}

function ___memrchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$09 = 0, $3 = 0, $6 = 0;
 $3 = $1 & 255;
 $$09 = $2;
 while (1) {
  if (!$$09) {
   $$0 = 0;
   break;
  }
  $$09 = $$09 + -1 | 0;
  $6 = $0 + $$09 | 0;
  if ((HEAP8[$6 >> 0] | 0) == $3 << 24 >> 24) {
   $$0 = $6;
   break;
  }
 }
 return $$0 | 0;
}

function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_once(17932, 2) | 0)) {
  $3 = _pthread_getspecific(HEAP32[4484] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else _abort_message(14672, sp);
 return 0;
}

function __ZN10emscripten8internal7InvokerIvJiiEE6invokeEPFviiEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2) | 0;
 FUNCTION_TABLE_vii[$0 & 7]($3, $4);
 return;
}

function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 $3 = _vsscanf($0, $1, $2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _arParamLTFree($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 if (!$0) $$0 = -1; else {
  $2 = HEAP32[$0 >> 2] | 0;
  if (!$2) $$0 = -1; else {
   _free(HEAP32[$2 + 184 >> 2] | 0);
   _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 188 >> 2] | 0);
   _free(HEAP32[$0 >> 2] | 0);
   HEAP32[$0 >> 2] = 0;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function __ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($0);
 return;
}

function __ZN10emscripten8internal7InvokerIvJifEE6invokeEPFvifEif($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $3 = 0, $4 = 0.0;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = +__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($2);
 FUNCTION_TABLE_vid[$0 & 3]($3, $4);
 return;
}

function __ZN10emscripten8internal7InvokerIvJidEE6invokeEPFvidEid($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $3 = 0, $4 = 0.0;
 $3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 $4 = +__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2);
 FUNCTION_TABLE_vid[$0 & 3]($3, $4);
 return;
}

function __ZN10emscripten8constantIiEEvPKcRKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN10emscripten8internal6TypeIDIRKiE3getEv() | 0;
 __embind_register_constant($0 | 0, $2 | 0, __ZN10emscripten8internal14asGenericValueIiEEjT_(__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1) | 0) | 0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0;
  if ((HEAP32[$7 >> 2] | 0) != 1) HEAP32[$7 >> 2] = $3;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _free($0);
 if (!(_pthread_setspecific(HEAP32[4484] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(14771, sp);
}

function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0;
 $$ = ($0 | 0) == 0 ? 1 : $0;
 while (1) {
  $2 = _malloc($$) | 0;
  if ($2 | 0) {
   $$lcssa = $2;
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0;
  if (!$4) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 3]();
 }
 return $$lcssa | 0;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $4 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = $4;
 return;
}

function __ZN10emscripten8constantIdEEvPKcRKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN10emscripten8internal6TypeIDIRKdE3getEv() | 0;
 __embind_register_constant($0 | 0, $2 | 0, __ZN10emscripten8internal14asGenericValueIdEEjT_(+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($1)) | 0);
 return;
}

function _a_ctz_l_737($0) {
 $0 = $0 | 0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $4 = 0;
 if (!$0) $$07 = 32; else if (!($0 & 1)) {
  $$068 = $0;
  $$09 = 0;
  while (1) {
   $4 = $$09 + 1 | 0;
   $$068 = $$068 >>> 1;
   if ($$068 & 1 | 0) {
    $$07 = $4;
    break;
   } else $$09 = $4;
  }
 } else $$07 = 0;
 return $$07 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}

function _arVecAlloc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _malloc(8) | 0;
 do if (!$1) $$0 = 0; else {
  $4 = _malloc($0 << 3) | 0;
  HEAP32[$1 >> 2] = $4;
  if (!$4) {
   _free($1);
   $$0 = 0;
   break;
  } else {
   HEAP32[$1 + 4 >> 2] = $0;
   $$0 = $1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$0 >> 2] | 0, $1, $2 << 4);
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() | 0;
}

function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $9 = 0;
 HEAP32[$0 + 104 >> 2] = $1;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $9 = $4 - $6 | 0;
 HEAP32[$0 + 108 >> 2] = $9;
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($9 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($0) {
 $0 = $0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($0, __ZNSt3__211char_traitsIcE6lengthEPKc(16468) | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0 + 12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 return;
}

function _arMatrixAllocMul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0;
 $6 = _arMatrixAlloc(HEAP32[$0 + 4 >> 2] | 0, HEAP32[$1 + 8 >> 2] | 0) | 0;
 if (!$6) $$0 = 0; else if ((_arMatrixMul($6, $0, $1) | 0) < 0) {
  _arMatrixFree($6) | 0;
  $$0 = 0;
 } else $$0 = $6;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$0 >> 2] | 0, $1, $2 << 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_key_create(17936, 13) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(14721, sp);
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$0 >> 2] | 0, $1 << 4) | 0;
}

function ___ftello($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $6 = ___ftello_unlocked($0) | 0;
  if ($phitmp) $7 = $6; else $7 = $6;
 } else $7 = ___ftello_unlocked($0) | 0;
 return $7 | 0;
}

function _arMatrixAllocTrans($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0;
 $5 = _arMatrixAlloc(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0) | 0;
 if (!$5) $$0 = 0; else if ((_arMatrixTrans($5, $0) | 0) < 0) {
  _arMatrixFree($5) | 0;
  $$0 = 0;
 } else $$0 = $5;
 return $$0 | 0;
}

function _arPattFree($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0;
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($1 << 2) | 0;
 if (!(HEAP32[$4 >> 2] | 0)) $$0 = -1; else {
  HEAP32[$4 >> 2] = 0;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $$0 = 1;
 }
 return $$0 | 0;
}

function _arMatrixAllocDup($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0;
 $5 = _arMatrixAlloc(HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0;
 if (!$5) $$0 = 0; else if ((_arMatrixDup($5, $0) | 0) < 0) {
  _arMatrixFree($5) | 0;
  $$0 = 0;
 } else $$0 = $5;
 return $$0 | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$0 >> 2] | 0, $1, $2 * 24 | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$0 >> 2] | 0, $1 << 4) | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj(HEAP32[$0 >> 2] | 0);
 return;
}

function _pntz($0) {
 $0 = $0 | 0;
 var $3 = 0, $7 = 0;
 $3 = _a_ctz_l_737((HEAP32[$0 >> 2] | 0) + -1 | 0) | 0;
 if (!$3) {
  $7 = _a_ctz_l_737(HEAP32[$0 + 4 >> 2] | 0) | 0;
  return (($7 | 0) == 0 ? 0 : $7 + 32 | 0) | 0;
 } else return $3 | 0;
 return 0;
}

function ___ofl_add($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0;
 $1 = ___ofl_lock() | 0;
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 >> 2] | 0;
 if ($4 | 0) HEAP32[$4 + 52 >> 2] = $0;
 HEAP32[$1 >> 2] = $0;
 ___ofl_unlock();
 return $0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0;
}

function _arPattAttach($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0;
 if (!$0) $$0 = -1; else {
  $3 = $0 + 7062384 | 0;
  if (!(HEAP32[$3 >> 2] | 0)) {
   HEAP32[$3 >> 2] = $1;
   $$0 = 0;
  } else $$0 = -1;
 }
 return $$0 | 0;
}

function _ar3DDeleteHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) $$0 = -1; else {
  _icpDeleteHandle($1) | 0;
  _free(HEAP32[$0 >> 2] | 0);
  HEAP32[$0 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 FUNCTION_TABLE_v[$0 & 3]();
 _abort_message(14824, sp);
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$0 >> 2] | 0, $1 * 24 | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function __ZN10emscripten8internal7InvokerIvJiEE6invokeEPFviEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1) | 0;
 FUNCTION_TABLE_vi[$0 & 15]($2);
 return;
}

function _arPattDetach($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 if (!$0) $$0 = -1; else {
  $2 = $0 + 7062384 | 0;
  if (!(HEAP32[$2 >> 2] | 0)) $$0 = -1; else {
   HEAP32[$2 >> 2] = 0;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function _arSetLabelingThreshModeAutoInterval($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAP32[$0 + 7062392 >> 2] = $1;
  HEAP32[$0 + 7062396 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 return;
}

function ___strdup($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = (_strlen($0) | 0) + 1 | 0;
 $3 = _malloc($2) | 0;
 if (!$3) $$0 = 0; else {
  _memcpy($3 | 0, $0 | 0, $2 | 0) | 0;
  $$0 = $3;
 }
 return $$0 | 0;
}

function _byteSwapDouble($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 8) break;
  HEAP8[$1 + $$0 >> 0] = HEAP8[$0 + (7 - $$0) >> 0] | 0;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function _arGetLabelingThreshMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 + 7062388 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function _byteSwapInt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 $$0 = 0;
 while (1) {
  if (($$0 | 0) == 4) break;
  HEAP8[$1 + $$0 >> 0] = HEAP8[$0 + (3 - $$0) >> 0] | 0;
  $$0 = $$0 + 1 | 0;
 }
 return;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0;
}

function _arGetMatrixCodeType($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 + 7062424 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return;
}

function _arSetPattRatio($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $$0 = 0;
 if (!$0) $$0 = -1; else if ($1 <= 0.0 | $1 >= 1.0) $$0 = -1; else {
  HEAPF64[$0 + 7062416 >> 3] = $1;
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) $$0 = 0; else $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0;
 return ($$0 | 0 ? $$0 : $0) | 0;
}

function _arGetLabelingThresh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 + 16 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}

function _arGetLabelingMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 + 12 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0, $3 = 0;
 if ($0 >>> 0 > 4294963200) {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 0 - $0;
  $$0 = -1;
 } else $$0 = $0;
 return $$0 | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _arSetPatternDetectionMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & $1 >>> 0 < 5) {
  HEAP32[$0 + 24 >> 2] = $1;
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 268435455;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() | 0, 3, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() | 0, 2, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() | 0, 5, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() | 0, 4, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() | 0, 1, $0 | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($0) {
 $0 = $0 | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() | 0, 0, $0 | 0);
 return;
}

function _arGetDebugMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & ($1 | 0) != 0) {
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function _arSetLabelingThresh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) == 0 | $1 >>> 0 > 255) $$0 = -1; else {
  HEAP32[$0 + 16 >> 2] = $1;
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___cxx_global_var_init_1() {
 HEAP32[4331] = 0;
 HEAP32[4332] = 0;
 HEAP32[4333] = 0;
 HEAP32[4334] = 0;
 HEAPF32[4335] = 1.0;
 ___cxa_atexit(11, 17324, ___dso_handle | 0) | 0;
 return;
}

function ___DOUBLE_BITS_685($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $1 | 0;
}

function ___DOUBLE_BITS_272($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $1 | 0;
}

function _arSetImageProcMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & $1 >>> 0 < 2) {
  HEAP32[$0 + 20 >> 2] = $1;
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function ___cxx_global_var_init() {
 HEAP32[4326] = 0;
 HEAP32[4327] = 0;
 HEAP32[4328] = 0;
 HEAP32[4329] = 0;
 HEAPF32[4330] = 1.0;
 ___cxa_atexit(10, 17304, ___dso_handle | 0) | 0;
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiiEEEE3getEv() | 0;
}

function _arSetLabelingMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (($0 | 0) != 0 & $1 >>> 0 < 2) {
  HEAP32[$0 + 12 >> 2] = $1;
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvifEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvidEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() | 0;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0;
 if (!$2) $5 = 0; else $5 = _memcmp($0, $1, $2) | 0;
 return $5 | 0;
}

function _icpDeleteHandle($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) $$0 = -1; else {
  _free($1);
  HEAP32[$0 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv() | 0;
}

function _arGetPatternDetectionMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAP32[$1 >> 2] = HEAP32[$0 + 24 >> 2];
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($0) {
 $0 = $0 | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() | 0;
}

function _arGetPattRatio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAPF64[$1 >> 3] = +HEAPF64[$0 + 7062416 >> 3];
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $0 >>> 0 <= $1 >>> 0 & ($0 + 4096 | 0) >>> 0 >= $1 >>> 0 | 0;
}

function _arImageProcFinal($0) {
 $0 = $0 | 0;
 if ($0 | 0) {
  if (HEAP32[$0 + 2076 >> 2] | 0) _free(HEAP32[$0 >> 2] | 0);
  _free(HEAP32[$0 + 4 >> 2] | 0);
  _free($0);
 }
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() | 0, 5, 10900);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() | 0, 4, 10970);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() | 0, 6, 10838);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() | 0, 7, 10707);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() | 0, 7, 10775);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() | 0, 0, 11217);
 return;
}

function _arGetImageProcMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAP32[$1 >> 2] = HEAP32[$0 + 20 >> 2];
  $$0 = 0;
 }
 return $$0 | 0;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIlE3getEv() | 0, 16513, 4, -2147483648, 2147483647);
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIiE3getEv() | 0, 16496, 4, -2147483648, 2147483647);
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($0) {
 $0 = $0 | 0;
 return 2;
}

function __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 268435455;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _arSetMatrixCodeType($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAP32[$0 + 7062424 >> 2] = $1;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arGetTransMatMultiSquareRobust($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return +(+_arGetTransMatMultiSquare2($0, $1, $2, $3, 1));
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
 return;
}

function _icpSetInlierProbability($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $$0 = 0;
 if (!$0) $$0 = -1; else {
  HEAPF64[$0 + 128 >> 3] = $1;
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP8[$0 + 4 >> 0] = HEAP8[$1 >> 0] | 0;
 return;
}

function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0;
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memmove($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function _arImageProcLumaHistAndCDFAndMedian($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _arImageProcLumaHistAndCDFAndPercentile($0, $1, .5, $2) | 0;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memcpy($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIsE3getEv() | 0, 16291, 2, -32768, 32767);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 return;
}

function _arGetTransMatMultiSquare($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return +(+_arGetTransMatMultiSquare2($0, $1, $2, $3, 0));
}

function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIcE3getEv() | 0, 16260, 1, -128, 127);
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIaE3getEv() | 0, 16265, 1, -128, 127);
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDItE3getEv() | 0, 16297, 2, 0, 65535);
 return;
}

function _icpGetXw2XcCleanup_295($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 _free($0);
 _free($1);
 _free($2);
 _free($3);
 return;
}

function _arMatrixSelfInv($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 return ((_minv(HEAP32[$0 >> 2] | 0, $3, $3) | 0) == 0) << 31 >> 31 | 0;
}

function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIhE3getEv() | 0, 16277, 1, 0, 255);
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 1](a1 | 0, a2 | 0, a3 | 0);
}

function __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDImE3getEv() | 0, 16518, 4, 0, -1);
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIjE3getEv() | 0, 16500, 4, 0, -1);
 return;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 return 1756;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 return 1736;
}

function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0;
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0;
}

function _compE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0.0;
 $4 = +HEAPF64[$0 >> 3] - +HEAPF64[$1 >> 3];
 return ($4 < 0.0 ? -1 : $4 > 0.0 & 1) | 0;
}

function dynCall_viid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 FUNCTION_TABLE_viid[index & 3](a1 | 0, a2 | 0, +a3);
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 178956970;
}

function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc() {
 __embind_register_float(__ZN10emscripten8internal6TypeIDIfE3getEv() | 0, 16542, 4);
 return;
}

function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc() {
 __embind_register_float(__ZN10emscripten8internal6TypeIDIdE3getEv() | 0, 16654, 8);
 return;
}

function _strerror($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = (___pthread_self_104() | 0) + 188 | 0;
 return ___strerror_l($0, HEAP32[$2 >> 2] | 0) | 0;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0;
}

function b13(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(13);
}

function _dot($0, $1, $2, $3, $4, $5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 return +($0 * $3 + $1 * $4 + $2 * $5);
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0;
 return;
}

function dynCall_dii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +FUNCTION_TABLE_dii[index & 1](a1 | 0, a2 | 0);
}

function __ZN12arControllerD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($0 + 248 | 0);
 return;
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = 0; else $$0 = _wcrtomb($0, $1, 0) | 0;
 return $$0 | 0;
}

function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0;
 return (($1 | 0) == 0 ? $0 : $3) | 0;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$0 + 4 >> 2];
 return;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __GLOBAL__sub_I_ARToolKitJS_cpp() {
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_22();
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0 | 0;
 ___assert_fail(14347, 14252, 1194, 14376);
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 ___assert_fail(14223, 14252, 1183, 14326);
}

function _out($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) ___fwritex($1, $2, $0) | 0;
 return;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return 144;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return 168;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 ___assert_fail(14126, 14149, 304, 14326);
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return 8;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0);
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0;
 return;
}

function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() | 0;
}

function dynCall_vid(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 FUNCTION_TABLE_vid[index & 3](a1 | 0, +a2);
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function _mbsinit($0) {
 $0 = $0 | 0;
 var $5 = 0;
 if (!$0) $5 = 1; else $5 = (HEAP32[$0 >> 2] | 0) == 0;
 return $5 & 1 | 0;
}

function __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0 | 0;
 return;
}

function b1(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(1);
}

function __ZN10emscripten8internal6TypeIDIRKiE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIRKdE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIRKdE3getEv() | 0;
}

function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12);
 return 0;
}

function _strncpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 ___stpncpy($0, $1, $2) | 0;
 return $0 | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0;
}

function _isxdigit($0) {
 $0 = $0 | 0;
 return (($0 + -48 | 0) >>> 0 < 10 | (($0 | 32) + -97 | 0) >>> 0 < 6) & 1 | 0;
}

function ___cxx_global_var_init_127() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}

function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIvE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDItE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDItE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIsE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDImE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDImE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIlE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIjE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIhE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIfE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIdE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIcE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIbE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIaE3getEv() | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4096 >> 2] = $0;
 return;
}

function _norm($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 return +(+Math_sqrt(+($0 * $0 + $1 * $1 + $2 * $2)));
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 4;
}

function __ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($0) {
 $0 = $0 | 0;
 return +(+HEAPF64[$0 >> 3]);
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4096 >> 2] = 0;
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 3;
}

function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($0) {
 $0 = $0 | 0;
 return HEAP32[$0 >> 2] | 0;
}

function _strrchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___memrchr($0, $1, (_strlen($0) | 0) + 1 | 0) | 0;
}

function _arMatrixFree($0) {
 $0 = $0 | 0;
 if ($0 | 0) {
  _free(HEAP32[$0 >> 2] | 0);
  _free($0);
 }
 return 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getCountEv($0) {
 $0 = $0 | 0;
 return 2;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 2;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 2;
}

function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[index & 3](a1 | 0);
}

function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[4485] | 0;
 HEAP32[4485] = $0 + 0;
 return $0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($0) {
 $0 = $0 | 0;
 return 1;
}

function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function __ZNSt3__24pairIKi12arControllerED2Ev($0) {
 $0 = $0 | 0;
 __ZN12arControllerD2Ev($0 + 8 | 0);
 return;
}

function __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 536870911;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($0) {
 $0 = $0 | 0;
 return $0 + 15 & -16 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($0) {
 $0 = $0 | 0;
 return _malloc($0) | 0;
}

function ___cxx_global_var_init_22() {
 __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev(0);
 return;
}

function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[761] | 0;
 HEAP32[761] = $0 + 0;
 return $0 | 0;
}

function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(15);
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 15](a1 | 0);
}

function _fseek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___fseeko($0, $1, $2) | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function _icpGetXw2XcCleanup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _free($0);
 _free($1);
 return;
}

function _arMultiFreeConfig($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 >> 2] | 0);
 _free($0);
 return 0;
}

function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN10emscripten8internal14asGenericValueIdEEjT_($0) {
 $0 = +$0;
 return ~~$0 >>> 0 | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiiEEEE3getEv() {
 return 1776;
}

function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0);
 return 0;
}

function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiEEEE3getEv() {
 return 1692;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvifEEEE3getEv() {
 return 1680;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvidEEEE3getEv() {
 return 1712;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() {
 return 1744;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviEEEE3getEv() {
 return 1728;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv() {
 return 1768;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv() {
 return 1704;
}

function __ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($0) {
 $0 = +$0;
 return +$0;
}

function __ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($0) {
 $0 = +$0;
 return +$0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() {
 return 1724;
}

function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 ___stpcpy($0, $1) | 0;
 return $0 | 0;
}

function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0;
}

function __ZN10emscripten8internal14asGenericValueIiEEjT_($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 return 104;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 return 112;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 return 128;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 return 120;
}

function _arVecFree($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 >> 2] | 0);
 _free($0);
 return 0;
}

function ___getTypeName($0) {
 $0 = $0 | 0;
 return ___strdup(HEAP32[$0 + 4 >> 2] | 0) | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0 | 0;
 return _strlen($0) | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 return 96;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 return 64;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 return 72;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 return 80;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 return 88;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 return 56;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 return 40;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 return 48;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 1]() | 0;
}

function _ar3DCreateHandle($0) {
 $0 = $0 | 0;
 return _ar3DCreateHandle2($0 + 8 | 0) | 0;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 return 9760;
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(9);
}

function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 return 7738;
}

function __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() {
 return 7646;
}

function __ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv() {
 return 7773;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 return 9589;
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 nullFunc_viid(11);
}

function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 return 7781;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 return 9425;
}

function __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() {
 return 7769;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 return 7778;
}

function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3140;
 return;
}

function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}

function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(2);
 return 0.0;
}

function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14);
 return 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 return 136;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3]();
}

function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}

function __GLOBAL__sub_I_bind_cpp() {
 ___cxx_global_var_init_127();
 return;
}

function _isupper($0) {
 $0 = $0 | 0;
 return ($0 + -65 | 0) >>> 0 < 26 | 0;
}

function ___errno_location() {
 return (___pthread_self_103() | 0) + 64 | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() {
 return 344;
}

function __ZN10emscripten8internal11LightTypeIDIRKdE3getEv() {
 return 384;
}

function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}

function _arPattCreateHandle() {
 return _arPattCreateHandle2(16, 50) | 0;
}

function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 return 288;
}

function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 return 336;
}

function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 return 328;
}

function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 return 368;
}

function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 return 360;
}

function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 return 352;
}

function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 return 344;
}

function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 return 312;
}

function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 return 376;
}

function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 return 384;
}

function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 return 304;
}

function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 return 296;
}

function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 return 320;
}

function _setLogLevel($0) {
 $0 = $0 | 0;
 HEAP32[408] = $0;
 return;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0 | 0;
 return 14864;
}

function b7(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(7);
}

function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 nullFunc_vid(3);
}

function _ftell($0) {
 $0 = $0 | 0;
 return ___ftello($0) | 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b4(p0) {
 p0 = p0 | 0;
 nullFunc_di(4);
 return 0.0;
}

function ___pthread_self_613() {
 return _pthread_self() | 0;
}

function ___pthread_self_431() {
 return _pthread_self() | 0;
}

function ___pthread_self_422() {
 return _pthread_self() | 0;
}

function ___pthread_self_104() {
 return _pthread_self() | 0;
}

function ___pthread_self_103() {
 return _pthread_self() | 0;
}

function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(8);
 return 0;
}

function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt9exceptionD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function ___ofl_lock() {
 ___lock(17420);
 return 17428;
}

function _emscripten_get_global_libc() {
 return 17352;
}

function _dummy_570($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function ___ofl_unlock() {
 ___unlock(17420);
 return;
}

function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}

function ___lockfile($0) {
 $0 = $0 | 0;
 return 0;
}

function _getLogLevel() {
 return HEAP32[408] | 0;
}

function b6(p0) {
 p0 = p0 | 0;
 nullFunc_vi(6);
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b5() {
 nullFunc_i(5);
 return 0;
}

function _pthread_self() {
 return 2124;
}

function b10() {
 nullFunc_v(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,_setup,_setMarkerInfoDir,_getTransMatSquare,_getTransMatSquareCont,_getMultiEachMarkerInfo,__ZN10emscripten8internal7InvokerIiJiNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii,___stdio_read,_do_read];
var FUNCTION_TABLE_viiiii = [b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_dii = [b2,__ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi];
var FUNCTION_TABLE_vid = [b3,_setProjectionNearPlane,_setProjectionFarPlane,_setPattRatio];
var FUNCTION_TABLE_di = [b4,_getProjectionNearPlane,_getProjectionFarPlane,_getPattRatio];
var FUNCTION_TABLE_i = [b5,_getLogLevel];
var FUNCTION_TABLE_vi = [b6,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev,__ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev,_setLogLevel,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b6,b6];
var FUNCTION_TABLE_vii = [b7,_setThresholdMode,_setThreshold,_setPatternDetectionMode,_setMatrixCodeType,_setLabelingMode,_setImageProcMode,__ZN10emscripten8internal7InvokerIvJiEE6invokeEPFviEi];
var FUNCTION_TABLE_ii = [b8,___stdio_close,__ZNKSt9bad_alloc4whatEv,_teardown,_getMultiMarkerCount,_loadCamera,_detectMarker,_getMarkerNum,_getDebugMode,_getProcessingImage,_getThresholdMode,_getThreshold,_getPatternDetectionMode,_getMatrixCodeType,_getLabelingMode,_getImageProcMode,__ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9,__ZN10emscripten8internal7InvokerIvJiiEE6invokeEPFviiEii];
var FUNCTION_TABLE_v = [b10,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b10];
var FUNCTION_TABLE_viid = [b11,__ZN10emscripten8internal7InvokerIvJidEE6invokeEPFvidEid,__ZN10emscripten8internal7InvokerIvJifEE6invokeEPFvifEif,b11];
var FUNCTION_TABLE_iiiii = [b12,__ZN10emscripten8internal7InvokerIiJiiiEE6invokeEPFiiiiEiii];
var FUNCTION_TABLE_viiiiii = [b13,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_iii = [b14,_compE,_addMarker,_addMultiMarker,_getMultiMarkerNum,_setMarkerInfoVertex,_getTransMatMultiSquare,_getTransMatMultiSquareRobust,_getMarkerInfo,_setDebugMode,__ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi,__ZN10emscripten8internal7InvokerIiJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiS8_EPNS0_11BindingTypeIS8_EUt_E,b14,b14,b14,b14];
var FUNCTION_TABLE_viiii = [b15,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi];

  return { __GLOBAL__sub_I_ARToolKitJS_cpp: __GLOBAL__sub_I_ARToolKitJS_cpp, stackSave: stackSave, getTempRet0: getTempRet0, _llvm_cttz_i32: _llvm_cttz_i32, setThrew: setThrew, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _sbrk: _sbrk, _fflush: _fflush, _memset: _memset, ___cxa_demangle: ___cxa_demangle, _memcpy: _memcpy, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, stackAlloc: stackAlloc, _i64Subtract: _i64Subtract, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, ___udivmoddi4: ___udivmoddi4, setTempRet0: setTempRet0, _i64Add: _i64Add, _emscripten_get_global_libc: _emscripten_get_global_libc, ___getTypeName: ___getTypeName, ___udivdi3: ___udivdi3, _llvm_bswap_i32: _llvm_bswap_i32, ___muldsi3: ___muldsi3, _free: _free, runPostSets: runPostSets, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _malloc: _malloc, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_dii: dynCall_dii, dynCall_vid: dynCall_vid, dynCall_di: dynCall_di, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_ARToolKitJS_cpp = asm["__GLOBAL__sub_I_ARToolKitJS_cpp"]; asm["__GLOBAL__sub_I_ARToolKitJS_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_ARToolKitJS_cpp.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_getTempRet0.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_demangle.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_get_global_libc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};
var __GLOBAL__sub_I_ARToolKitJS_cpp = Module["__GLOBAL__sub_I_ARToolKitJS_cpp"] = asm["__GLOBAL__sub_I_ARToolKitJS_cpp"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];

Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






